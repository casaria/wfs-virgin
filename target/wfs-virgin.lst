
c:/Users/casaria3/Documents/workbench/wfs-virgin/wfs-virgin/target/wfs-virgin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d58  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000064  40024000  080a4d70  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         000000a4  20000300  080a4dd4  00030300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000674  200003a4  200003a4  000403a4  2**2
                  ALLOC
  5 .module_info_suffix 00000028  080a4e78  080a4e78  00034e78  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  080a4ea0  080a4ea0  00034ea0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000d0793  00000000  00000000  00034ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00013156  00000000  00000000  00105637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00016777  00000000  00000000  0011878d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000021c0  00000000  00000000  0012ef04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003720  00000000  00000000  001310c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0002ad0d  00000000  00000000  001347e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002c418  00000000  00000000  0015f4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0009d1d5  00000000  00000000  0018b909  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c2fc  00000000  00000000  00228ae0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	44 48 0a 08                                         DH..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f004 faeb 	bl	80a4608 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f004 faf0 	bl	80a461e <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a4dd4 	.word	0x080a4dd4
 80a004c:	200003a4 	.word	0x200003a4
 80a0050:	200003a4 	.word	0x200003a4
 80a0054:	20000a18 	.word	0x20000a18
 80a0058:	20000a18 	.word	0x20000a18

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f002 f93b 	bl	80a22d8 <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a4d24 	.word	0x080a4d24
 80a0084:	080a4d6c 	.word	0x080a4d6c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 bb7c 	b.w	80a0784 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 faad 	bl	80a05ec <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f002 b8e1 	b.w	80a225c <_post_loop>

080a009a <_Znwj>:
 80a009a:	f001 bd83 	b.w	80a1ba4 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f001 bd89 	b.w	80a1bb4 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b2:	6803      	ldr	r3, [r0, #0]
 80a00b4:	4718      	bx	r3

080a00b6 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00b6:	2a01      	cmp	r2, #1
 80a00b8:	d002      	beq.n	80a00c0 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00ba:	2a02      	cmp	r2, #2
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00be:	e004      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c0:	6001      	str	r1, [r0, #0]
	      break;
 80a00c2:	e002      	b.n	80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c4:	680b      	ldr	r3, [r1, #0]
 80a00c6:	b100      	cbz	r0, 80a00ca <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00c8:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ca:	2000      	movs	r0, #0
 80a00cc:	4770      	bx	lr
	...

080a00d0 <_Z12cmdSetDamper6String>:





int cmdSetDamper(String command){
 80a00d0:	b530      	push	{r4, r5, lr}
 80a00d2:	b089      	sub	sp, #36	; 0x24
 80a00d4:	4605      	mov	r5, r0
           // Wire.reset();
 String valueString;
 80a00d6:	4915      	ldr	r1, [pc, #84]	; (80a012c <_Z12cmdSetDamper6String+0x5c>)
 80a00d8:	4668      	mov	r0, sp
 80a00da:	f001 fe22 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 for (int i = 0; i < 6; i++){
 80a00de:	2400      	movs	r4, #0
 80a00e0:	00a2      	lsls	r2, r4, #2
     valueString = command.substring(i*4, (i*4+4));
 80a00e2:	1d13      	adds	r3, r2, #4
 80a00e4:	4629      	mov	r1, r5
 80a00e6:	a804      	add	r0, sp, #16
 80a00e8:	f001 feac 	bl	80a1e44 <_ZNK6String9substringEjj>
 80a00ec:	a904      	add	r1, sp, #16
 80a00ee:	4668      	mov	r0, sp
 80a00f0:	f001 fe61 	bl	80a1db6 <_ZN6StringaSEOS_>
 80a00f4:	a804      	add	r0, sp, #16
 80a00f6:	f001 fdcd 	bl	80a1c94 <_ZN6StringD1Ev>
     cmdPosArray[i] = valueString.toInt();
 80a00fa:	4668      	mov	r0, sp
 80a00fc:	f001 fed1 	bl	80a1ea2 <_ZNK6String5toIntEv>
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
 80a0100:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000

int cmdSetDamper(String command){
           // Wire.reset();
 String valueString;
 for (int i = 0; i < 6; i++){
     valueString = command.substring(i*4, (i*4+4));
 80a0104:	f104 0401 	add.w	r4, r4, #1
     cmdPosArray[i] = valueString.toInt();
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
 80a0108:	db07      	blt.n	80a011a <_Z12cmdSetDamper6String+0x4a>


int cmdSetDamper(String command){
           // Wire.reset();
 String valueString;
 for (int i = 0; i < 6; i++){
 80a010a:	2c06      	cmp	r4, #6
 80a010c:	d1e8      	bne.n	80a00e0 <_Z12cmdSetDamper6String+0x10>



int cmdSetDamper(String command){
           // Wire.reset();
 String valueString;
 80a010e:	4668      	mov	r0, sp
 80a0110:	f001 fdc0 	bl	80a1c94 <_ZN6StringD1Ev>
     cmdPosArray[i] = valueString.toInt();
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
    }
  return 1;
}
 80a0114:	2001      	movs	r0, #1
 80a0116:	b009      	add	sp, #36	; 0x24
 80a0118:	bd30      	pop	{r4, r5, pc}
 String valueString;
 for (int i = 0; i < 6; i++){
     valueString = command.substring(i*4, (i*4+4));
     cmdPosArray[i] = valueString.toInt();
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
 80a011a:	1e61      	subs	r1, r4, #1
 80a011c:	b282      	uxth	r2, r0
 80a011e:	2300      	movs	r3, #0
 80a0120:	b2c9      	uxtb	r1, r1
 80a0122:	4803      	ldr	r0, [pc, #12]	; (80a0130 <_Z12cmdSetDamper6String+0x60>)
 80a0124:	f001 fa78 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0128:	e7ef      	b.n	80a010a <_Z12cmdSetDamper6String+0x3a>
 80a012a:	bf00      	nop
 80a012c:	080a49f6 	.word	0x080a49f6
 80a0130:	20000474 	.word	0x20000474

080a0134 <_Z7cmdTXV26String>:
    }
  return 1;
}


int cmdTXV2(String command){
 80a0134:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos =  command.toInt();
 80a0136:	f001 feb4 	bl	80a1ea2 <_ZNK6String5toIntEv>
  if (TXVpos <= 4096) {
 80a013a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
}


int cmdTXV2(String command){
  int TXVpos;
  TXVpos =  command.toInt();
 80a013e:	4604      	mov	r4, r0
  if (TXVpos <= 4096) {
 80a0140:	dc05      	bgt.n	80a014e <_Z7cmdTXV26String+0x1a>
      damper.setVal(4,TXVpos);
 80a0142:	b282      	uxth	r2, r0
 80a0144:	2300      	movs	r3, #0
 80a0146:	2104      	movs	r1, #4
 80a0148:	4802      	ldr	r0, [pc, #8]	; (80a0154 <_Z7cmdTXV26String+0x20>)
 80a014a:	f001 fa65 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
      
      
  }
  return TXVpos;
            
}
 80a014e:	4620      	mov	r0, r4
 80a0150:	bd10      	pop	{r4, pc}
 80a0152:	bf00      	nop
 80a0154:	20000474 	.word	0x20000474

080a0158 <_Z7cmdTXV16String>:

int cmdTXV1(String command){
 80a0158:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos =  command.toInt();
 80a015a:	f001 fea2 	bl	80a1ea2 <_ZNK6String5toIntEv>
  if (TXVpos <= 4096) {
 80a015e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
            
}

int cmdTXV1(String command){
  int TXVpos;
  TXVpos =  command.toInt();
 80a0162:	4604      	mov	r4, r0
  if (TXVpos <= 4096) {
 80a0164:	dc05      	bgt.n	80a0172 <_Z7cmdTXV16String+0x1a>
     damper.setVal(8,TXVpos);
 80a0166:	b282      	uxth	r2, r0
 80a0168:	2300      	movs	r3, #0
 80a016a:	2108      	movs	r1, #8
 80a016c:	4802      	ldr	r0, [pc, #8]	; (80a0178 <_Z7cmdTXV16String+0x20>)
 80a016e:	f001 fa53 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
  }     
  return TXVpos;
}
 80a0172:	4620      	mov	r0, r4
 80a0174:	bd10      	pop	{r4, pc}
 80a0176:	bf00      	nop
 80a0178:	20000474 	.word	0x20000474

080a017c <_Z12triggerRelay6String>:


    
}

int triggerRelay(String command){
 80a017c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
 80a017e:	4601      	mov	r1, r0
 80a0180:	4668      	mov	r0, sp
 80a0182:	f001 fe0d 	bl	80a1da0 <_ZN6StringC1ERKS_>
 80a0186:	4669      	mov	r1, sp
 80a0188:	4804      	ldr	r0, [pc, #16]	; (80a019c <_Z12triggerRelay6String+0x20>)
 80a018a:	f000 febf 	bl	80a0f0c <_ZN16CASARIA_MCP230179relayTalkE6String>
 80a018e:	4668      	mov	r0, sp
 80a0190:	f001 fd80 	bl	80a1c94 <_ZN6StringD1Ev>
      return(1);
}
 80a0194:	2001      	movs	r0, #1
 80a0196:	b005      	add	sp, #20
 80a0198:	f85d fb04 	ldr.w	pc, [sp], #4
 80a019c:	200003f4 	.word	0x200003f4

080a01a0 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a01a0:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80a01a2:	2301      	movs	r3, #1
 80a01a4:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80a01a6:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a01a8:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80a01aa:	b10b      	cbz	r3, 80a01b0 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80a01ac:	68c0      	ldr	r0, [r0, #12]
 80a01ae:	e006      	b.n	80a01be <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a01b0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80a01b2:	b128      	cbz	r0, 80a01c0 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a01b4:	6883      	ldr	r3, [r0, #8]
 80a01b6:	b90b      	cbnz	r3, 80a01bc <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80a01b8:	f002 fe49 	bl	80a2e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a01bc:	68c3      	ldr	r3, [r0, #12]
 80a01be:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80a01c0:	2301      	movs	r3, #1
 80a01c2:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80a01c4:	2000      	movs	r0, #0
    }
 80a01c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80a01ca:	f001 bbbd 	b.w	80a1948 <os_thread_exit>

080a01ce <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01ce:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a01d0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01d2:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a01d4:	b113      	cbz	r3, 80a01dc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01d6:	2203      	movs	r2, #3
 80a01d8:	4601      	mov	r1, r0
 80a01da:	4798      	blx	r3
    }
 80a01dc:	4620      	mov	r0, r4
 80a01de:	bd10      	pop	{r4, pc}

080a01e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 80a01e0:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a01e2:	4604      	mov	r4, r0
 80a01e4:	b160      	cbz	r0, 80a0200 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7+0x20>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a01e6:	6805      	ldr	r5, [r0, #0]
 80a01e8:	b12d      	cbz	r5, 80a01f6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7+0x16>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a01ea:	4628      	mov	r0, r5
 80a01ec:	f7ff ffef 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a01f0:	4628      	mov	r0, r5
 80a01f2:	f7ff ff54 	bl	80a009e <_ZdlPv>
 80a01f6:	4620      	mov	r0, r4
      }
 80a01f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a01fc:	f7ff bf4f 	b.w	80a009e <_ZdlPv>
 80a0200:	bd38      	pop	{r3, r4, r5, pc}

080a0202 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
 80a0202:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0204:	6943      	ldr	r3, [r0, #20]
 80a0206:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
 80a0208:	b1bb      	cbz	r3, 80a023a <_ZN19ApplicationWatchdogD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 80a020a:	6858      	ldr	r0, [r3, #4]
 80a020c:	f001 fb74 	bl	80a18f8 <os_thread_is_current>
 80a0210:	b978      	cbnz	r0, 80a0232 <_ZN19ApplicationWatchdogD1Ev+0x30>
 80a0212:	6963      	ldr	r3, [r4, #20]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 80a0214:	7c5a      	ldrb	r2, [r3, #17]
 80a0216:	b912      	cbnz	r2, 80a021e <_ZN19ApplicationWatchdogD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 80a0218:	6858      	ldr	r0, [r3, #4]
 80a021a:	f001 fb7d 	bl	80a1918 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 80a021e:	6963      	ldr	r3, [r4, #20]
 80a0220:	6858      	ldr	r0, [r3, #4]
 80a0222:	f001 fb81 	bl	80a1928 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0226:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0228:	2300      	movs	r3, #0
 80a022a:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a022c:	b128      	cbz	r0, 80a023a <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__p);
 80a022e:	f7ff ffd7 	bl	80a01e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a0232:	6960      	ldr	r0, [r4, #20]
 80a0234:	b108      	cbz	r0, 80a023a <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__ptr);
 80a0236:	f7ff ffd3 	bl	80a01e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>
 80a023a:	1d20      	adds	r0, r4, #4
 80a023c:	f7ff ffc7 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
 80a0240:	4620      	mov	r0, r4
 80a0242:	bd10      	pop	{r4, pc}

080a0244 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
		checkin();
	}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 80a0244:	b530      	push	{r4, r5, lr}
 80a0246:	461d      	mov	r5, r3
 80a0248:	b087      	sub	sp, #28
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a024a:	2300      	movs	r3, #0
 80a024c:	4604      	mov	r4, r0
 80a024e:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80a0250:	b122      	cbz	r2, 80a025c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0252:	4b22      	ldr	r3, [pc, #136]	; (80a02dc <_ZN19ApplicationWatchdogC1EjPFvvEj+0x98>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a0254:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0256:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0258:	4b21      	ldr	r3, [pc, #132]	; (80a02e0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9c>)
 80a025a:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a025c:	2300      	movs	r3, #0
 80a025e:	60e3      	str	r3, [r4, #12]
 80a0260:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80a0262:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0264:	b13b      	cbz	r3, 80a0276 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0266:	2202      	movs	r2, #2
 80a0268:	a902      	add	r1, sp, #8
 80a026a:	1d20      	adds	r0, r4, #4
 80a026c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a026e:	9b05      	ldr	r3, [sp, #20]
 80a0270:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 80a0272:	9b04      	ldr	r3, [sp, #16]
 80a0274:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80a0276:	491b      	ldr	r1, [pc, #108]	; (80a02e4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa0>)
 80a0278:	2014      	movs	r0, #20
 80a027a:	f002 fdd9 	bl	80a2e30 <_ZnwjRKSt9nothrow_t>
 80a027e:	b130      	cbz	r0, 80a028e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80a0280:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80a0282:	7403      	strb	r3, [r0, #16]
 80a0284:	6003      	str	r3, [r0, #0]
 80a0286:	6043      	str	r3, [r0, #4]
 80a0288:	6083      	str	r3, [r0, #8]
 80a028a:	60c3      	str	r3, [r0, #12]
 80a028c:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a028e:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80a0290:	b198      	cbz	r0, 80a02ba <_ZN19ApplicationWatchdogC1EjPFvvEj+0x76>
            goto error;
        }
        d_->func = function;
 80a0292:	4b15      	ldr	r3, [pc, #84]	; (80a02e8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa4>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0294:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 80a0296:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0298:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a029a:	4914      	ldr	r1, [pc, #80]	; (80a02ec <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa8>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 80a029c:	60dc      	str	r4, [r3, #12]
 80a029e:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a02a0:	4b13      	ldr	r3, [pc, #76]	; (80a02f0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xac>)
 80a02a2:	e88d 0021 	stmia.w	sp, {r0, r5}
 80a02a6:	3004      	adds	r0, #4
 80a02a8:	f001 fb1e 	bl	80a18e8 <os_thread_create>
 80a02ac:	b928      	cbnz	r0, 80a02ba <_ZN19ApplicationWatchdogC1EjPFvvEj+0x76>
 80a02ae:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 80a02b0:	7c1b      	ldrb	r3, [r3, #16]
 80a02b2:	b943      	cbnz	r3, 80a02c6 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x82>
            os_thread_yield();
 80a02b4:	f001 fb28 	bl	80a1908 <os_thread_yield>
 80a02b8:	e7f9      	b.n	80a02ae <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a02ba:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a02bc:	2300      	movs	r3, #0
 80a02be:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a02c0:	b108      	cbz	r0, 80a02c6 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x82>
	  get_deleter()(__p);
 80a02c2:	f7ff ff8d 	bl	80a01e0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.7>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a02c6:	f001 faf7 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a02ca:	4b0a      	ldr	r3, [pc, #40]	; (80a02f4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb0>)
 80a02cc:	6018      	str	r0, [r3, #0]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02ce:	a802      	add	r0, sp, #8
 80a02d0:	f7ff ff7d 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 80a02d4:	4620      	mov	r0, r4
 80a02d6:	b007      	add	sp, #28
 80a02d8:	bd30      	pop	{r4, r5, pc}
 80a02da:	bf00      	nop
 80a02dc:	080a00b3 	.word	0x080a00b3
 80a02e0:	080a00b7 	.word	0x080a00b7
 80a02e4:	080a4bb0 	.word	0x080a4bb0
 80a02e8:	080a2d95 	.word	0x080a2d95
 80a02ec:	080a4858 	.word	0x080a4858
 80a02f0:	080a01a1 	.word	0x080a01a1
 80a02f4:	20000940 	.word	0x20000940

080a02f8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a02f8:	6803      	ldr	r3, [r0, #0]
 80a02fa:	b2c9      	uxtb	r1, r1
 80a02fc:	689b      	ldr	r3, [r3, #8]
 80a02fe:	4718      	bx	r3

080a0300 <_Z7getTempPh>:
}




    double getTemp(uint8_t addr[8]) {
 80a0300:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80a0302:	4606      	mov	r6, r0
      double _temp;
      int   i = 0;
 80a0304:	2400      	movs	r4, #0
    
      do {
        _temp = ds18b20.getTemperature(addr);
 80a0306:	2200      	movs	r2, #0
 80a0308:	4631      	mov	r1, r6
 80a030a:	4813      	ldr	r0, [pc, #76]	; (80a0358 <_Z7getTempPh+0x58>)
 80a030c:	f000 ffbe 	bl	80a128c <_ZN7DS18B2014getTemperatureEPhb>
 80a0310:	4605      	mov	r5, r0
      } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a0312:	4811      	ldr	r0, [pc, #68]	; (80a0358 <_Z7getTempPh+0x58>)
 80a0314:	f001 f874 	bl	80a1400 <_ZN7DS18B208crcCheckEv>
 80a0318:	b950      	cbnz	r0, 80a0330 <_Z7getTempPh+0x30>
 80a031a:	3401      	adds	r4, #1
 80a031c:	2c03      	cmp	r4, #3
 80a031e:	d1f2      	bne.n	80a0306 <_Z7getTempPh+0x6>
        //_temp = ds18b20.convertToFahrenheit(_temp);
        Serial.println(_temp);
      }
      else {
        _temp = -99;
        Serial.println("Invalid reading");
 80a0320:	f002 fb44 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a0324:	490d      	ldr	r1, [pc, #52]	; (80a035c <_Z7getTempPh+0x5c>)
 80a0326:	f001 fdfa 	bl	80a1f1e <_ZN5Print7printlnEPKc>
      if (i < MAXRETRY) {
        //_temp = ds18b20.convertToFahrenheit(_temp);
        Serial.println(_temp);
      }
      else {
        _temp = -99;
 80a032a:	2400      	movs	r4, #0
 80a032c:	4d0c      	ldr	r5, [pc, #48]	; (80a0360 <_Z7getTempPh+0x60>)
        Serial.println("Invalid reading");
      }
    
      return _temp;
 80a032e:	e00e      	b.n	80a034e <_Z7getTempPh+0x4e>
      do {
        _temp = ds18b20.getTemperature(addr);
      } while (!ds18b20.crcCheck() && MAXRETRY > i++);
      
    
      if (i < MAXRETRY) {
 80a0330:	2c02      	cmp	r4, #2
 80a0332:	d0f5      	beq.n	80a0320 <_Z7getTempPh+0x20>
    double getTemp(uint8_t addr[8]) {
      double _temp;
      int   i = 0;
    
      do {
        _temp = ds18b20.getTemperature(addr);
 80a0334:	4628      	mov	r0, r5
 80a0336:	f003 fb3f 	bl	80a39b8 <__aeabi_f2d>
 80a033a:	4604      	mov	r4, r0
 80a033c:	460d      	mov	r5, r1
      } while (!ds18b20.crcCheck() && MAXRETRY > i++);
      
    
      if (i < MAXRETRY) {
        //_temp = ds18b20.convertToFahrenheit(_temp);
        Serial.println(_temp);
 80a033e:	f002 fb35 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a0342:	2302      	movs	r3, #2
 80a0344:	9300      	str	r3, [sp, #0]
 80a0346:	4622      	mov	r2, r4
 80a0348:	462b      	mov	r3, r5
 80a034a:	f001 ff05 	bl	80a2158 <_ZN5Print7printlnEdi>
        Serial.println("Invalid reading");
      }
    
      return _temp;
    
    }   
 80a034e:	4620      	mov	r0, r4
 80a0350:	4629      	mov	r1, r5
 80a0352:	b002      	add	sp, #8
 80a0354:	bd70      	pop	{r4, r5, r6, pc}
 80a0356:	bf00      	nop
 80a0358:	200003d4 	.word	0x200003d4
 80a035c:	080a485f 	.word	0x080a485f
 80a0360:	c058c000 	.word	0xc058c000

080a0364 <_Z6getMCPv>:
    
}



void getMCP(){
 80a0364:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}


 byte error;
    int8_t address;

    address = mcp1.devAddr;
 80a0368:	4b38      	ldr	r3, [pc, #224]	; (80a044c <_Z6getMCPv+0xe8>)
 80a036a:	f993 400e 	ldrsb.w	r4, [r3, #14]
    // The i2c_scanner uses the  return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
 80a036e:	f002 fd31 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0372:	4621      	mov	r1, r4
 80a0374:	f002 fc55 	bl	80a2c22 <_ZN7TwoWire17beginTransmissionEi>
    error = Wire.endTransmission();
 80a0378:	f002 fd2c 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a037c:	f002 fc58 	bl	80a2c30 <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
 80a0380:	bb60      	cbnz	r0, 80a03dc <_Z6getMCPv+0x78>
 80a0382:	4604      	mov	r4, r0

        for(int i=1;i<=4;i++)
        {
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp1.SetConfiguration(i,16,1,2);
 80a0384:	1c66      	adds	r6, r4, #1
 80a0386:	2302      	movs	r3, #2
 80a0388:	2210      	movs	r2, #16
 80a038a:	b2f1      	uxtb	r1, r6
 80a038c:	9300      	str	r3, [sp, #0]
 80a038e:	482f      	ldr	r0, [pc, #188]	; (80a044c <_Z6getMCPv+0xe8>)
 80a0390:	2301      	movs	r3, #1
 80a0392:	f001 f84d 	bl	80a1430 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>
            Raw_adc[i-1] = mcp1.readADC();
 80a0396:	482d      	ldr	r0, [pc, #180]	; (80a044c <_Z6getMCPv+0xe8>)
 80a0398:	f001 f8b0 	bl	80a14fc <_ZN15CASARIA_MCP34287readADCEv>
 80a039c:	4b2c      	ldr	r3, [pc, #176]	; (80a0450 <_Z6getMCPv+0xec>)
            // Note that the library waits for a complete conversion
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813)* psiFS[i-1];
 80a039e:	4d2d      	ldr	r5, [pc, #180]	; (80a0454 <_Z6getMCPv+0xf0>)
        for(int i=1;i<=4;i++)
        {
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp1.SetConfiguration(i,16,1,2);
            Raw_adc[i-1] = mcp1.readADC();
 80a03a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            // Note that the library waits for a complete conversion
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813)* psiFS[i-1];
 80a03a4:	f003 ff5e 	bl	80a4264 <__aeabi_i2f>
 80a03a8:	492b      	ldr	r1, [pc, #172]	; (80a0458 <_Z6getMCPv+0xf4>)
 80a03aa:	f003 fea5 	bl	80a40f8 <__aeabi_fsub>
 80a03ae:	492b      	ldr	r1, [pc, #172]	; (80a045c <_Z6getMCPv+0xf8>)
 80a03b0:	f004 f860 	bl	80a4474 <__aeabi_fdiv>
 80a03b4:	4b2a      	ldr	r3, [pc, #168]	; (80a0460 <_Z6getMCPv+0xfc>)
 80a03b6:	4607      	mov	r7, r0
 80a03b8:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a03bc:	f003 ff52 	bl	80a4264 <__aeabi_i2f>
 80a03c0:	4601      	mov	r1, r0
 80a03c2:	4638      	mov	r0, r7
 80a03c4:	f003 ffa2 	bl	80a430c <__aeabi_fmul>
    error = Wire.endTransmission();
    if (error == 0)
    {


        for(int i=1;i<=4;i++)
 80a03c8:	2e04      	cmp	r6, #4
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp1.SetConfiguration(i,16,1,2);
            Raw_adc[i-1] = mcp1.readADC();
            // Note that the library waits for a complete conversion
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813)* psiFS[i-1];
 80a03ca:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80a03ce:	4634      	mov	r4, r6
    error = Wire.endTransmission();
    if (error == 0)
    {


        for(int i=1;i<=4;i++)
 80a03d0:	d1d8      	bne.n	80a0384 <_Z6getMCPv+0x20>
            // raw_adc = raw_adc * LSB(250 µV)/PGA for PGA = 1;     // 14-bit Resolution
            // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;    // 16-bit Resolution
        }
        //calibration/linearizatiom
        //CALIBRATION 
        psi[1] += 5;        // correct zero offset error
 80a03d2:	6868      	ldr	r0, [r5, #4]
 80a03d4:	4923      	ldr	r1, [pc, #140]	; (80a0464 <_Z6getMCPv+0x100>)
 80a03d6:	f003 fe91 	bl	80a40fc <__addsf3>
 80a03da:	6068      	str	r0, [r5, #4]
        
    }  
    
    
    
    address = mcp2.devAddr;
 80a03dc:	4b22      	ldr	r3, [pc, #136]	; (80a0468 <_Z6getMCPv+0x104>)
 80a03de:	f993 400e 	ldrsb.w	r4, [r3, #14]
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
 80a03e2:	f002 fcf7 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a03e6:	4621      	mov	r1, r4
 80a03e8:	f002 fc1b 	bl	80a2c22 <_ZN7TwoWire17beginTransmissionEi>
    error = Wire.endTransmission();
 80a03ec:	f002 fcf2 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a03f0:	f002 fc1e 	bl	80a2c30 <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
 80a03f4:	bb30      	cbnz	r0, 80a0444 <_Z6getMCPv+0xe0>
 80a03f6:	4f1d      	ldr	r7, [pc, #116]	; (80a046c <_Z6getMCPv+0x108>)
 80a03f8:	4e1d      	ldr	r6, [pc, #116]	; (80a0470 <_Z6getMCPv+0x10c>)
 80a03fa:	4d1e      	ldr	r5, [pc, #120]	; (80a0474 <_Z6getMCPv+0x110>)
 80a03fc:	2404      	movs	r4, #4
    {
        for(int i=4;i<=8;i++)
        {
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp2.SetConfiguration(i,16,1,2);
 80a03fe:	2302      	movs	r3, #2
 80a0400:	2210      	movs	r2, #16
 80a0402:	b2e1      	uxtb	r1, r4
 80a0404:	9300      	str	r3, [sp, #0]
 80a0406:	4818      	ldr	r0, [pc, #96]	; (80a0468 <_Z6getMCPv+0x104>)
 80a0408:	2301      	movs	r3, #1
 80a040a:	f001 f811 	bl	80a1430 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>

            // Note that the library waits for a complete conversion
            Raw_adc[i-1] = mcp2.readADC();
 80a040e:	4816      	ldr	r0, [pc, #88]	; (80a0468 <_Z6getMCPv+0x104>)
 80a0410:	f001 f874 	bl	80a14fc <_ZN15CASARIA_MCP34287readADCEv>
 80a0414:	f847 0f04 	str.w	r0, [r7, #4]!
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813) * psiFS[i-1];
 80a0418:	f003 ff24 	bl	80a4264 <__aeabi_i2f>
 80a041c:	490e      	ldr	r1, [pc, #56]	; (80a0458 <_Z6getMCPv+0xf4>)
 80a041e:	f003 fe6b 	bl	80a40f8 <__aeabi_fsub>
 80a0422:	490e      	ldr	r1, [pc, #56]	; (80a045c <_Z6getMCPv+0xf8>)
 80a0424:	f004 f826 	bl	80a4474 <__aeabi_fdiv>
 80a0428:	4680      	mov	r8, r0
 80a042a:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a042e:	f003 ff19 	bl	80a4264 <__aeabi_i2f>
 80a0432:	4601      	mov	r1, r0
 80a0434:	4640      	mov	r0, r8
 80a0436:	f003 ff69 	bl	80a430c <__aeabi_fmul>
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0)
    {
        for(int i=4;i<=8;i++)
 80a043a:	3401      	adds	r4, #1
 80a043c:	2c09      	cmp	r4, #9
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp2.SetConfiguration(i,16,1,2);

            // Note that the library waits for a complete conversion
            Raw_adc[i-1] = mcp2.readADC();
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813) * psiFS[i-1];
 80a043e:	f845 0f04 	str.w	r0, [r5, #4]!
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0)
    {
        for(int i=4;i<=8;i++)
 80a0442:	d1dc      	bne.n	80a03fe <_Z6getMCPv+0x9a>
    else
    {  //errors occurred
        
    }  

}
 80a0444:	b002      	add	sp, #8
 80a0446:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a044a:	bf00      	nop
 80a044c:	2000043c 	.word	0x2000043c
 80a0450:	200003b4 	.word	0x200003b4
 80a0454:	20000478 	.word	0x20000478
 80a0458:	45b5a800 	.word	0x45b5a800
 80a045c:	46b83200 	.word	0x46b83200
 80a0460:	080a492c 	.word	0x080a492c
 80a0464:	40a00000 	.word	0x40a00000
 80a0468:	2000044c 	.word	0x2000044c
 80a046c:	200003bc 	.word	0x200003bc
 80a0470:	080a4934 	.word	0x080a4934
 80a0474:	20000480 	.word	0x20000480

080a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0478:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a047a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a047c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a047e:	b17c      	cbz	r4, 80a04a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0480:	6863      	ldr	r3, [r4, #4]
 80a0482:	3b01      	subs	r3, #1
 80a0484:	6063      	str	r3, [r4, #4]
 80a0486:	b95b      	cbnz	r3, 80a04a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0488:	6823      	ldr	r3, [r4, #0]
 80a048a:	4620      	mov	r0, r4
 80a048c:	689b      	ldr	r3, [r3, #8]
 80a048e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0490:	68a3      	ldr	r3, [r4, #8]
 80a0492:	3b01      	subs	r3, #1
 80a0494:	60a3      	str	r3, [r4, #8]
 80a0496:	b91b      	cbnz	r3, 80a04a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0498:	6823      	ldr	r3, [r4, #0]
 80a049a:	4620      	mov	r0, r4
 80a049c:	68db      	ldr	r3, [r3, #12]
 80a049e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a04a0:	4628      	mov	r0, r5
 80a04a2:	bd38      	pop	{r3, r4, r5, pc}

080a04a4 <_Z11publishDatav>:
    
      return _temp;
    
    }   
    
    void publishData() {
 80a04a4:	b510      	push	{r4, lr}
      char szInfo[200];
          snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
          celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9],  celsius[10], celsius[11]);
 80a04a6:	4c29      	ldr	r4, [pc, #164]	; (80a054c <_Z11publishDatav+0xa8>)
    
      return _temp;
    
    }   
    
    void publishData() {
 80a04a8:	b0cc      	sub	sp, #304	; 0x130
      char szInfo[200];
          snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
          celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9],  celsius[10], celsius[11]);
 80a04aa:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a04ac:	f003 fa84 	bl	80a39b8 <__aeabi_f2d>
 80a04b0:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80a04b4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a04b6:	f003 fa7f 	bl	80a39b8 <__aeabi_f2d>
 80a04ba:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80a04be:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a04c0:	f003 fa7a 	bl	80a39b8 <__aeabi_f2d>
 80a04c4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80a04c8:	6a20      	ldr	r0, [r4, #32]
 80a04ca:	f003 fa75 	bl	80a39b8 <__aeabi_f2d>
 80a04ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80a04d2:	69e0      	ldr	r0, [r4, #28]
 80a04d4:	f003 fa70 	bl	80a39b8 <__aeabi_f2d>
 80a04d8:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a04dc:	69a0      	ldr	r0, [r4, #24]
 80a04de:	f003 fa6b 	bl	80a39b8 <__aeabi_f2d>
 80a04e2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a04e6:	6960      	ldr	r0, [r4, #20]
 80a04e8:	f003 fa66 	bl	80a39b8 <__aeabi_f2d>
 80a04ec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a04f0:	6920      	ldr	r0, [r4, #16]
 80a04f2:	f003 fa61 	bl	80a39b8 <__aeabi_f2d>
 80a04f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a04fa:	68e0      	ldr	r0, [r4, #12]
 80a04fc:	f003 fa5c 	bl	80a39b8 <__aeabi_f2d>
 80a0500:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a0504:	68a0      	ldr	r0, [r4, #8]
 80a0506:	f003 fa57 	bl	80a39b8 <__aeabi_f2d>
 80a050a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a050e:	6860      	ldr	r0, [r4, #4]
 80a0510:	f003 fa52 	bl	80a39b8 <__aeabi_f2d>
 80a0514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0518:	6820      	ldr	r0, [r4, #0]
 80a051a:	f003 fa4d 	bl	80a39b8 <__aeabi_f2d>
 80a051e:	4a0c      	ldr	r2, [pc, #48]	; (80a0550 <_Z11publishDatav+0xac>)
 80a0520:	e9cd 0100 	strd	r0, r1, [sp]
 80a0524:	21c8      	movs	r1, #200	; 0xc8
 80a0526:	a81a      	add	r0, sp, #104	; 0x68
 80a0528:	f001 fb54 	bl	80a1bd4 <snprintf>
 80a052c:	4b09      	ldr	r3, [pc, #36]	; (80a0554 <_Z11publishDatav+0xb0>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a052e:	aa1a      	add	r2, sp, #104	; 0x68
 80a0530:	781b      	ldrb	r3, [r3, #0]
 80a0532:	4909      	ldr	r1, [pc, #36]	; (80a0558 <_Z11publishDatav+0xb4>)
 80a0534:	f88d 3000 	strb.w	r3, [sp]
 80a0538:	a818      	add	r0, sp, #96	; 0x60
 80a053a:	233c      	movs	r3, #60	; 0x3c
 80a053c:	f002 f844 	bl	80a25c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0540:	a819      	add	r0, sp, #100	; 0x64
 80a0542:	f7ff ff99 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
          sensorAddresses[4], sensorAddresses[5], sensorAddresses[6], sensorAddresses[7], sensorAddresses[8],sensorAddresses[9],sensorAddresses[10],sensorAddresses[11]);
        Particle.publish("dsAddress", szInfo, PRIVATE);
      
      }
     */
    }
 80a0546:	b04c      	add	sp, #304	; 0x130
 80a0548:	bd10      	pop	{r4, pc}
 80a054a:	bf00      	nop
 80a054c:	20000304 	.word	0x20000304
 80a0550:	080a48a3 	.word	0x080a48a3
 80a0554:	2000046c 	.word	0x2000046c
 80a0558:	080a48df 	.word	0x080a48df

080a055c <_Z15publishPressurev>:
    

void publishPressure(){   
 80a055c:	b510      	push	{r4, lr}
    char szInfo[200];
 
     //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
     // Particle.publish("dsAnalogin",szInfo, PRIVATE );
        snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", psi[0], psi[1], psi[2], psi[3], psi[4], psi[5], psi[6], psi[7]);
 80a055e:	4c1f      	ldr	r4, [pc, #124]	; (80a05dc <_Z15publishPressurev+0x80>)
      }
     */
    }
    

void publishPressure(){   
 80a0560:	b0c4      	sub	sp, #272	; 0x110
    char szInfo[200];
 
     //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
     // Particle.publish("dsAnalogin",szInfo, PRIVATE );
        snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", psi[0], psi[1], psi[2], psi[3], psi[4], psi[5], psi[6], psi[7]);
 80a0562:	69e0      	ldr	r0, [r4, #28]
 80a0564:	f003 fa28 	bl	80a39b8 <__aeabi_f2d>
 80a0568:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a056c:	69a0      	ldr	r0, [r4, #24]
 80a056e:	f003 fa23 	bl	80a39b8 <__aeabi_f2d>
 80a0572:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a0576:	6960      	ldr	r0, [r4, #20]
 80a0578:	f003 fa1e 	bl	80a39b8 <__aeabi_f2d>
 80a057c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0580:	6920      	ldr	r0, [r4, #16]
 80a0582:	f003 fa19 	bl	80a39b8 <__aeabi_f2d>
 80a0586:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a058a:	68e0      	ldr	r0, [r4, #12]
 80a058c:	f003 fa14 	bl	80a39b8 <__aeabi_f2d>
 80a0590:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a0594:	68a0      	ldr	r0, [r4, #8]
 80a0596:	f003 fa0f 	bl	80a39b8 <__aeabi_f2d>
 80a059a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a059e:	6860      	ldr	r0, [r4, #4]
 80a05a0:	f003 fa0a 	bl	80a39b8 <__aeabi_f2d>
 80a05a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a05a8:	6820      	ldr	r0, [r4, #0]
 80a05aa:	f003 fa05 	bl	80a39b8 <__aeabi_f2d>
 80a05ae:	4a0c      	ldr	r2, [pc, #48]	; (80a05e0 <_Z15publishPressurev+0x84>)
 80a05b0:	e9cd 0100 	strd	r0, r1, [sp]
 80a05b4:	21c8      	movs	r1, #200	; 0xc8
 80a05b6:	a812      	add	r0, sp, #72	; 0x48
 80a05b8:	f001 fb0c 	bl	80a1bd4 <snprintf>
 80a05bc:	4b09      	ldr	r3, [pc, #36]	; (80a05e4 <_Z15publishPressurev+0x88>)
 80a05be:	aa12      	add	r2, sp, #72	; 0x48
 80a05c0:	781b      	ldrb	r3, [r3, #0]
 80a05c2:	4909      	ldr	r1, [pc, #36]	; (80a05e8 <_Z15publishPressurev+0x8c>)
 80a05c4:	f88d 3000 	strb.w	r3, [sp]
 80a05c8:	a810      	add	r0, sp, #64	; 0x40
 80a05ca:	233c      	movs	r3, #60	; 0x3c
 80a05cc:	f001 fffc 	bl	80a25c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a05d0:	a811      	add	r0, sp, #68	; 0x44
 80a05d2:	f7ff ff51 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("ds_psi",szInfo, PRIVATE );
           
}
 80a05d6:	b044      	add	sp, #272	; 0x110
 80a05d8:	bd10      	pop	{r4, pc}
 80a05da:	bf00      	nop
 80a05dc:	20000478 	.word	0x20000478
 80a05e0:	080a48b7 	.word	0x080a48b7
 80a05e4:	2000046c 	.word	0x2000046c
 80a05e8:	080a48e7 	.word	0x080a48e7

080a05ec <loop>:
    }
  }
    
}
*/
void loop(){
 80a05ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a05f0:	f001 f962 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
  
  now = millis();

   
  
  if (now - msRelaySample >= msRelaySampleTime) {
 80a05f4:	4d52      	ldr	r5, [pc, #328]	; (80a0740 <loop+0x154>)
  static int16_t damperinc = 100;
  static bool toggle;
  
  
  
  now = millis();
 80a05f6:	4c53      	ldr	r4, [pc, #332]	; (80a0744 <loop+0x158>)

   
  
  if (now - msRelaySample >= msRelaySampleTime) {
 80a05f8:	682b      	ldr	r3, [r5, #0]
  static int16_t damperinc = 100;
  static bool toggle;
  
  
  
  now = millis();
 80a05fa:	6020      	str	r0, [r4, #0]

   
  
  if (now - msRelaySample >= msRelaySampleTime) {
 80a05fc:	1ac0      	subs	r0, r0, r3
 80a05fe:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
 80a0602:	d302      	bcc.n	80a060a <loop+0x1e>
 80a0604:	f001 f958 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
                        
    msRelaySample = millis();
 80a0608:	6028      	str	r0, [r5, #0]
  }   
    
  
  if (now - msTempSample >= msTempSampleTime) {
 80a060a:	4e4f      	ldr	r6, [pc, #316]	; (80a0748 <loop+0x15c>)
 80a060c:	6823      	ldr	r3, [r4, #0]
 80a060e:	6832      	ldr	r2, [r6, #0]
 80a0610:	1a9b      	subs	r3, r3, r2
 80a0612:	f640 02fb 	movw	r2, #2299	; 0x8fb
 80a0616:	4293      	cmp	r3, r2
 80a0618:	d92c      	bls.n	80a0674 <loop+0x88>
 80a061a:	f8df a150 	ldr.w	sl, [pc, #336]	; 80a076c <loop+0x180>
  
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);
 80a061e:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80a0770 <loop+0x184>
          if (!isnan(temp)) { celsius[i] = temp;}
          else {
              temp = getTemp(sensorAddresses[i]);
              if (!isnan(temp)) celsius[i] = temp;
 80a0622:	f8df 9150 	ldr.w	r9, [pc, #336]	; 80a0774 <loop+0x188>
 80a0626:	2500      	movs	r5, #0
 80a0628:	270c      	movs	r7, #12
 80a062a:	fb07 a705 	mla	r7, r7, r5, sl
    
  
  if (now - msTempSample >= msTempSampleTime) {
  
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);
 80a062e:	4638      	mov	r0, r7
 80a0630:	f7ff fe66 	bl	80a0300 <_Z7getTempPh>
 80a0634:	f003 fd0c 	bl	80a4050 <__aeabi_d2f>
 80a0638:	f8c8 0000 	str.w	r0, [r8]
          if (!isnan(temp)) { celsius[i] = temp;}
 80a063c:	4601      	mov	r1, r0
    
  
  if (now - msTempSample >= msTempSampleTime) {
  
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);
 80a063e:	4683      	mov	fp, r0
          if (!isnan(temp)) { celsius[i] = temp;}
 80a0640:	f003 ffb4 	bl	80a45ac <__aeabi_fcmpun>
 80a0644:	b910      	cbnz	r0, 80a064c <loop+0x60>
 80a0646:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80a064a:	e00d      	b.n	80a0668 <loop+0x7c>
          else {
              temp = getTemp(sensorAddresses[i]);
 80a064c:	4638      	mov	r0, r7
 80a064e:	f7ff fe57 	bl	80a0300 <_Z7getTempPh>
 80a0652:	f003 fcfd 	bl	80a4050 <__aeabi_d2f>
 80a0656:	f8c8 0000 	str.w	r0, [r8]
              if (!isnan(temp)) celsius[i] = temp;
 80a065a:	4601      	mov	r1, r0
  
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);
          if (!isnan(temp)) { celsius[i] = temp;}
          else {
              temp = getTemp(sensorAddresses[i]);
 80a065c:	4607      	mov	r7, r0
              if (!isnan(temp)) celsius[i] = temp;
 80a065e:	f003 ffa5 	bl	80a45ac <__aeabi_fcmpun>
 80a0662:	b908      	cbnz	r0, 80a0668 <loop+0x7c>
 80a0664:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  }   
    
  
  if (now - msTempSample >= msTempSampleTime) {
  
        for(int i=0; i < nSENSORS; i++) {
 80a0668:	3501      	adds	r5, #1
 80a066a:	2d0c      	cmp	r5, #12
 80a066c:	d1dc      	bne.n	80a0628 <loop+0x3c>
 80a066e:	f001 f923 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
              if (!isnan(temp)) celsius[i] = temp;
              
          }
        }
  
    msTempSample = millis();
 80a0672:	6030      	str	r0, [r6, #0]
  }
  
  
  if (now - msPressureSample >= msPressureSampleTime) {
 80a0674:	4d35      	ldr	r5, [pc, #212]	; (80a074c <loop+0x160>)
 80a0676:	6823      	ldr	r3, [r4, #0]
 80a0678:	682a      	ldr	r2, [r5, #0]
 80a067a:	1a9b      	subs	r3, r3, r2
 80a067c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80a0680:	d304      	bcc.n	80a068c <loop+0xa0>
    getMCP();
 80a0682:	f7ff fe6f 	bl	80a0364 <_Z6getMCPv>
 80a0686:	f001 f917 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
    msPressureSample = millis();
 80a068a:	6028      	str	r0, [r5, #0]
  }   


  if (now - msPublish2 >= msPublishTime2) {
 80a068c:	4d30      	ldr	r5, [pc, #192]	; (80a0750 <loop+0x164>)
 80a068e:	6823      	ldr	r3, [r4, #0]
 80a0690:	682a      	ldr	r2, [r5, #0]
 80a0692:	1a9b      	subs	r3, r3, r2
 80a0694:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a0698:	4293      	cmp	r3, r2
 80a069a:	d904      	bls.n	80a06a6 <loop+0xba>
 80a069c:	f001 f90c 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
    msPublish2 = millis();
 80a06a0:	6028      	str	r0, [r5, #0]
    publishPressure();
 80a06a2:	f7ff ff5b 	bl	80a055c <_Z15publishPressurev>
    publishStatus();
    publishDebug();
}

  if (now - msPublish3 >= msPublishTime3){
 80a06a6:	4d2b      	ldr	r5, [pc, #172]	; (80a0754 <loop+0x168>)
 80a06a8:	6823      	ldr	r3, [r4, #0]
 80a06aa:	682a      	ldr	r2, [r5, #0]
 80a06ac:	1a9b      	subs	r3, r3, r2
 80a06ae:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80a06b2:	d315      	bcc.n	80a06e0 <loop+0xf4>
 80a06b4:	f001 f900 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
      
      msPublish3 = millis();
 80a06b8:	6028      	str	r0, [r5, #0]

    
 Wire.beginTransmission(Addr8574);
 80a06ba:	f002 fb8b 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a06be:	2124      	movs	r1, #36	; 0x24
 80a06c0:	f002 faaf 	bl	80a2c22 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input                                                                                                                                                                                                            
 //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
Wire.write(0x00); 
 80a06c4:	f002 fb86 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a06c8:	2100      	movs	r1, #0
 80a06ca:	f7ff fe15 	bl	80a02f8 <_ZN7TwoWire5writeEi>
  // Stop I2C transmission
  Wire.endTransmission();
 80a06ce:	f002 fb81 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a06d2:	f002 faad 	bl	80a2c30 <_ZN7TwoWire15endTransmissionEv>
 toggle= !toggle;
 80a06d6:	4a20      	ldr	r2, [pc, #128]	; (80a0758 <loop+0x16c>)
 80a06d8:	7813      	ldrb	r3, [r2, #0]
 80a06da:	f083 0301 	eor.w	r3, r3, #1
 80a06de:	7013      	strb	r3, [r2, #0]
    
  }
  if (now - msPublish >= msPublishTime) {
 80a06e0:	4d1e      	ldr	r5, [pc, #120]	; (80a075c <loop+0x170>)
 80a06e2:	6823      	ldr	r3, [r4, #0]
 80a06e4:	682a      	ldr	r2, [r5, #0]
 80a06e6:	1a9b      	subs	r3, r3, r2
 80a06e8:	f642 62df 	movw	r2, #11999	; 0x2edf
 80a06ec:	4293      	cmp	r3, r2
 80a06ee:	d920      	bls.n	80a0732 <loop+0x146>
 80a06f0:	f001 f8e2 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
    msPublish = millis();
 80a06f4:	6028      	str	r0, [r5, #0]
    publishData();
 80a06f6:	f7ff fed5 	bl	80a04a4 <_Z11publishDatav>

 

          
      dutyCycle += damperinc;    // Edit this if you want to edit the brightness step size
 80a06fa:	4a19      	ldr	r2, [pc, #100]	; (80a0760 <loop+0x174>)
 80a06fc:	4b19      	ldr	r3, [pc, #100]	; (80a0764 <loop+0x178>)
 80a06fe:	8811      	ldrh	r1, [r2, #0]
 80a0700:	8818      	ldrh	r0, [r3, #0]
 80a0702:	4401      	add	r1, r0
 80a0704:	b209      	sxth	r1, r1
      if (dutyCycle > 4095) {
 80a0706:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
          dutyCycle = 4095;
 80a070a:	bfaa      	itet	ge
 80a070c:	f640 71ff 	movwge	r1, #4095	; 0xfff
    publishData();

 

          
      dutyCycle += damperinc;    // Edit this if you want to edit the brightness step size
 80a0710:	8011      	strhlt	r1, [r2, #0]
      if (dutyCycle > 4095) {
          dutyCycle = 4095;
 80a0712:	8011      	strhge	r1, [r2, #0]
        damperinc= -damperinc;
      }
      if (dutyCycle <= 800) {
 80a0714:	f9b2 2000 	ldrsh.w	r2, [r2]

          
      dutyCycle += damperinc;    // Edit this if you want to edit the brightness step size
      if (dutyCycle > 4095) {
          dutyCycle = 4095;
        damperinc= -damperinc;
 80a0718:	bfa4      	itt	ge
 80a071a:	4240      	negge	r0, r0
 80a071c:	8018      	strhge	r0, [r3, #0]
      }
      if (dutyCycle <= 800) {
 80a071e:	f5b2 7f48 	cmp.w	r2, #800	; 0x320
 80a0722:	dc06      	bgt.n	80a0732 <loop+0x146>
          dutyCycle = 800;
 80a0724:	4a0e      	ldr	r2, [pc, #56]	; (80a0760 <loop+0x174>)
 80a0726:	f44f 7148 	mov.w	r1, #800	; 0x320
 80a072a:	8011      	strh	r1, [r2, #0]
        damperinc= -damperinc;
 80a072c:	881a      	ldrh	r2, [r3, #0]
 80a072e:	4252      	negs	r2, r2
 80a0730:	801a      	strh	r2, [r3, #0]
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0732:	f001 f8c1 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0736:	4b0c      	ldr	r3, [pc, #48]	; (80a0768 <loop+0x17c>)
 80a0738:	6018      	str	r0, [r3, #0]
 80a073a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a073e:	bf00      	nop
 80a0740:	200003b0 	.word	0x200003b0
 80a0744:	200003a8 	.word	0x200003a8
 80a0748:	200003ac 	.word	0x200003ac
 80a074c:	20000470 	.word	0x20000470
 80a0750:	20000464 	.word	0x20000464
 80a0754:	20000468 	.word	0x20000468
 80a0758:	2000045c 	.word	0x2000045c
 80a075c:	200003f0 	.word	0x200003f0
 80a0760:	20000300 	.word	0x20000300
 80a0764:	20000302 	.word	0x20000302
 80a0768:	20000940 	.word	0x20000940
 80a076c:	40024000 	.word	0x40024000
 80a0770:	20000460 	.word	0x20000460
 80a0774:	20000304 	.word	0x20000304

080a0778 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0778:	4602      	mov	r2, r0
 80a077a:	4801      	ldr	r0, [pc, #4]	; (80a0780 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a077c:	f001 be1b 	b.w	80a23b6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0780:	080a238b 	.word	0x080a238b

080a0784 <setup>:
  }     
  return TXVpos;
}


void setup() {                                                                       
 80a0784:	b538      	push	{r3, r4, r5, lr}
    relays.setAddress(0x20);
 80a0786:	2120      	movs	r1, #32
 80a0788:	4840      	ldr	r0, [pc, #256]	; (80a088c <setup+0x108>)
 80a078a:	f000 faa9 	bl	80a0ce0 <_ZN16CASARIA_MCP2301710setAddressEi>
    relays.setRelays(16);
 80a078e:	2110      	movs	r1, #16
 80a0790:	483e      	ldr	r0, [pc, #248]	; (80a088c <setup+0x108>)
 80a0792:	f000 faa7 	bl	80a0ce4 <_ZN16CASARIA_MCP230179setRelaysEi>
    relays.setOutputs(0x00, 0x00);
 80a0796:	2200      	movs	r2, #0
 80a0798:	4611      	mov	r1, r2
 80a079a:	483c      	ldr	r0, [pc, #240]	; (80a088c <setup+0x108>)
 80a079c:	f000 fab5 	bl	80a0d0a <_ZN16CASARIA_MCP2301710setOutputsEii>
    
    // relays.setOutput(4);
    relays.init();
 80a07a0:	483a      	ldr	r0, [pc, #232]	; (80a088c <setup+0x108>)
 80a07a2:	f000 fb99 	bl	80a0ed8 <_ZN16CASARIA_MCP230174initEv>

    
    //If this is a 32 channel relay board, the A0 address jumper is ALWAYS set on the second chipset, so should never be set here on the first
    
    Particle.function("RelayControl", triggerRelay);
 80a07a6:	493a      	ldr	r1, [pc, #232]	; (80a0890 <setup+0x10c>)
 80a07a8:	483a      	ldr	r0, [pc, #232]	; (80a0894 <setup+0x110>)
 80a07aa:	f7ff ffe5 	bl	80a0778 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("TXV1", cmdTXV1);
 80a07ae:	493a      	ldr	r1, [pc, #232]	; (80a0898 <setup+0x114>)
 80a07b0:	483a      	ldr	r0, [pc, #232]	; (80a089c <setup+0x118>)
 80a07b2:	f7ff ffe1 	bl	80a0778 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("TXV2", cmdTXV2);
 80a07b6:	493a      	ldr	r1, [pc, #232]	; (80a08a0 <setup+0x11c>)
 80a07b8:	483a      	ldr	r0, [pc, #232]	; (80a08a4 <setup+0x120>)
 80a07ba:	f7ff ffdd 	bl	80a0778 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>

    Particle.function("SetDamper", cmdSetDamper);
 80a07be:	493a      	ldr	r1, [pc, #232]	; (80a08a8 <setup+0x124>)
 80a07c0:	483a      	ldr	r0, [pc, #232]	; (80a08ac <setup+0x128>)
 80a07c2:	f7ff ffd9 	bl	80a0778 <_ZN10CloudClass8functionIA10_cIPFi6StringEEEEbRKT_DpT0_>
  

    
    //Particle.variable("Input Status", b4status);
    relays.turnOffAllRelays();  // Relay off => energize external relay
 80a07c6:	4831      	ldr	r0, [pc, #196]	; (80a088c <setup+0x108>)
 80a07c8:	f000 fb6c 	bl	80a0ea4 <_ZN16CASARIA_MCP2301716turnOffAllRelaysEv>
    pinMode(pinLED, OUTPUT);  
 80a07cc:	2101      	movs	r1, #1
 80a07ce:	2007      	movs	r0, #7
 80a07d0:	f002 fa70 	bl	80a2cb4 <pinMode>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80a07d4:	2300      	movs	r3, #0
 80a07d6:	2204      	movs	r2, #4
 80a07d8:	4935      	ldr	r1, [pc, #212]	; (80a08b0 <setup+0x12c>)
 80a07da:	4836      	ldr	r0, [pc, #216]	; (80a08b4 <setup+0x130>)
 80a07dc:	f001 f9c2 	bl	80a1b64 <spark_variable>
    }

    static inline bool _variable(const char *varKey, const int32_t* userVar, const CloudVariableTypeInt& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, CloudVariableTypeInt::value(), NULL), false);
 80a07e0:	2300      	movs	r3, #0
 80a07e2:	2202      	movs	r2, #2
 80a07e4:	4934      	ldr	r1, [pc, #208]	; (80a08b8 <setup+0x134>)
 80a07e6:	4835      	ldr	r0, [pc, #212]	; (80a08bc <setup+0x138>)
 80a07e8:	f001 f9bc 	bl	80a1b64 <spark_variable>
    Particle.variable("Raw_adc[0]", Raw_adc[0]);
    
    
    
    
    damper.begin();    // This calls Wire.begin()
 80a07ec:	4834      	ldr	r0, [pc, #208]	; (80a08c0 <setup+0x13c>)
 80a07ee:	f000 ff7a 	bl	80a16e6 <_ZN16Adafruit_PCA96855beginEv>
    damper.setPWMFreq(1500);     // Maximum PWM frequency is 1600
 80a07f2:	4934      	ldr	r1, [pc, #208]	; (80a08c4 <setup+0x140>)
 80a07f4:	4832      	ldr	r0, [pc, #200]	; (80a08c0 <setup+0x13c>)
 80a07f6:	f000 ff83 	bl	80a1700 <_ZN16Adafruit_PCA968510setPWMFreqEf>
    
    damper.setVal(damper2_2, 2840);
 80a07fa:	2300      	movs	r3, #0
 80a07fc:	f640 3218 	movw	r2, #2840	; 0xb18
 80a0800:	2101      	movs	r1, #1
 80a0802:	482f      	ldr	r0, [pc, #188]	; (80a08c0 <setup+0x13c>)
 80a0804:	f000 ff08 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper2_1, 2048);
 80a0808:	2300      	movs	r3, #0
 80a080a:	4619      	mov	r1, r3
 80a080c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80a0810:	482b      	ldr	r0, [pc, #172]	; (80a08c0 <setup+0x13c>)
 80a0812:	f000 ff01 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_2, 2048);
 80a0816:	2300      	movs	r3, #0
 80a0818:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80a081c:	2103      	movs	r1, #3
 80a081e:	4828      	ldr	r0, [pc, #160]	; (80a08c0 <setup+0x13c>)
 80a0820:	f000 fefa 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_1, 2048);
 80a0824:	2300      	movs	r3, #0
 80a0826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80a082a:	2102      	movs	r1, #2
 80a082c:	4824      	ldr	r0, [pc, #144]	; (80a08c0 <setup+0x13c>)
 80a082e:	f000 fef3 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv1, 3200); //default TXV2
 80a0832:	2300      	movs	r3, #0
 80a0834:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80a0838:	2104      	movs	r1, #4
 80a083a:	4821      	ldr	r0, [pc, #132]	; (80a08c0 <setup+0x13c>)
 80a083c:	f000 feec 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv2, 3200); //default TXV1
 80a0840:	2300      	movs	r3, #0
 80a0842:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80a0846:	2108      	movs	r1, #8
 80a0848:	481d      	ldr	r0, [pc, #116]	; (80a08c0 <setup+0x13c>)
 80a084a:	f000 fee5 	bl	80a1618 <_ZN16Adafruit_PCA96856setValEhtb>
    // Select configuration command
    // Continuous conversion mode, Channel-1, 12-bit resolution
    //Wire.write(0x10);
    // Stop I2C Transmission
    //Wire.endTransmission();
      Wire.begin();
 80a084e:	f002 fac1 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0852:	f002 f9cb 	bl	80a2bec <_ZN7TwoWire5beginEv>
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
 80a0856:	f002 fabd 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a085a:	2124      	movs	r1, #36	; 0x24
 80a085c:	f002 f9e1 	bl	80a2c22 <_ZN7TwoWire17beginTransmissionEi>
      // Select GPIO as input
      Wire.write(0xff);  //Wire.write(0xff);
 80a0860:	f002 fab8 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0864:	21ff      	movs	r1, #255	; 0xff
 80a0866:	f7ff fd47 	bl	80a02f8 <_ZN7TwoWire5writeEi>
      // Stop I2C transmission
      Wire.endTransmission();
 80a086a:	f002 fab3 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a086e:	f002 f9df 	bl	80a2c30 <_ZN7TwoWire15endTransmissionEv>
  
    
      ds18b20.resetsearch();                 // initialise for sensor search
 80a0872:	4815      	ldr	r0, [pc, #84]	; (80a08c8 <setup+0x144>)
 80a0874:	f000 fd06 	bl	80a1284 <_ZN7DS18B2011resetsearchEv>
      for (int i = 0; i < nSENSORS-1; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a0878:	4d14      	ldr	r5, [pc, #80]	; (80a08cc <setup+0x148>)
      Wire.write(0xff);  //Wire.write(0xff);
      // Stop I2C transmission
      Wire.endTransmission();
  
    
      ds18b20.resetsearch();                 // initialise for sensor search
 80a087a:	2400      	movs	r4, #0
      for (int i = 0; i < nSENSORS-1; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a087c:	1929      	adds	r1, r5, r4
 80a087e:	4812      	ldr	r0, [pc, #72]	; (80a08c8 <setup+0x144>)
 80a0880:	340c      	adds	r4, #12
 80a0882:	f000 fce4 	bl	80a124e <_ZN7DS18B206searchEPh>
      // Stop I2C transmission
      Wire.endTransmission();
  
    
      ds18b20.resetsearch();                 // initialise for sensor search
      for (int i = 0; i < nSENSORS-1; i++) {   // try to read the sensor addre
 80a0886:	2c84      	cmp	r4, #132	; 0x84
 80a0888:	d1f8      	bne.n	80a087c <setup+0xf8>
        ds18b20.search(sensorAddresses[i]); // and if available store
      }
  
}
 80a088a:	bd38      	pop	{r3, r4, r5, pc}
 80a088c:	200003f4 	.word	0x200003f4
 80a0890:	080a017d 	.word	0x080a017d
 80a0894:	080a48ee 	.word	0x080a48ee
 80a0898:	080a0159 	.word	0x080a0159
 80a089c:	080a48fb 	.word	0x080a48fb
 80a08a0:	080a0135 	.word	0x080a0135
 80a08a4:	080a4900 	.word	0x080a4900
 80a08a8:	080a00d1 	.word	0x080a00d1
 80a08ac:	080a4905 	.word	0x080a4905
 80a08b0:	080a490f 	.word	0x080a490f
 80a08b4:	080a4917 	.word	0x080a4917
 80a08b8:	200003b4 	.word	0x200003b4
 80a08bc:	080a4921 	.word	0x080a4921
 80a08c0:	20000474 	.word	0x20000474
 80a08c4:	44bb8000 	.word	0x44bb8000
 80a08c8:	200003d4 	.word	0x200003d4
 80a08cc:	40024000 	.word	0x40024000

080a08d0 <_GLOBAL__sub_I_wd>:
int triggerRelay(String command){

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
      return(1);
}
 80a08d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a08d2:	4b1f      	ldr	r3, [pc, #124]	; (80a0950 <_GLOBAL__sub_I_wd+0x80>)

static int cmdPosArray[6];

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(20000, System.reset);
 80a08d4:	4e1f      	ldr	r6, [pc, #124]	; (80a0954 <_GLOBAL__sub_I_wd+0x84>)
 80a08d6:	2501      	movs	r5, #1
 80a08d8:	4c1f      	ldr	r4, [pc, #124]	; (80a0958 <_GLOBAL__sub_I_wd+0x88>)
 80a08da:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a08dc:	f000 ff9c 	bl	80a1818 <HAL_Pin_Map>
 80a08e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a08e4:	4a1d      	ldr	r2, [pc, #116]	; (80a095c <_GLOBAL__sub_I_wd+0x8c>)
 80a08e6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80a08ea:	4630      	mov	r0, r6
 80a08ec:	f7ff fcaa 	bl	80a0244 <_ZN19ApplicationWatchdogC1EjPFvvEj>
 80a08f0:	4630      	mov	r0, r6
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
    DS18B20 ds18b20(pinOneWire);
 80a08f2:	4e1b      	ldr	r6, [pc, #108]	; (80a0960 <_GLOBAL__sub_I_wd+0x90>)

static int cmdPosArray[6];

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(20000, System.reset);
 80a08f4:	4622      	mov	r2, r4
 80a08f6:	491b      	ldr	r1, [pc, #108]	; (80a0964 <_GLOBAL__sub_I_wd+0x94>)
 80a08f8:	f002 fa8c 	bl	80a2e14 <__aeabi_atexit>
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
    DS18B20 ds18b20(pinOneWire);
 80a08fc:	2200      	movs	r2, #0
 80a08fe:	2104      	movs	r1, #4
 80a0900:	4630      	mov	r0, r6
 80a0902:	f000 fc8d 	bl	80a1220 <_ZN7DS18B20C1Etb>
 80a0906:	4630      	mov	r0, r6
    float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68); 
 80a0908:	4e17      	ldr	r6, [pc, #92]	; (80a0968 <_GLOBAL__sub_I_wd+0x98>)
ApplicationWatchdog wd(20000, System.reset);
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
    DS18B20 ds18b20(pinOneWire);
 80a090a:	4622      	mov	r2, r4
 80a090c:	4917      	ldr	r1, [pc, #92]	; (80a096c <_GLOBAL__sub_I_wd+0x9c>)
 80a090e:	f002 fa81 	bl	80a2e14 <__aeabi_atexit>
    float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68); 
 80a0912:	4f17      	ldr	r7, [pc, #92]	; (80a0970 <_GLOBAL__sub_I_wd+0xa0>)
 80a0914:	2168      	movs	r1, #104	; 0x68
 80a0916:	4630      	mov	r0, r6
 80a0918:	f000 fd7a 	bl	80a1410 <_ZN15CASARIA_MCP3428C1Eh>
 80a091c:	4630      	mov	r0, r6
CASARIA_MCP3428  mcp2(0x6E); 
 80a091e:	4e15      	ldr	r6, [pc, #84]	; (80a0974 <_GLOBAL__sub_I_wd+0xa4>)
    float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68); 
 80a0920:	4622      	mov	r2, r4
 80a0922:	4639      	mov	r1, r7
 80a0924:	f002 fa76 	bl	80a2e14 <__aeabi_atexit>
CASARIA_MCP3428  mcp2(0x6E); 
 80a0928:	216e      	movs	r1, #110	; 0x6e
 80a092a:	4630      	mov	r0, r6
 80a092c:	f000 fd70 	bl	80a1410 <_ZN15CASARIA_MCP3428C1Eh>
 80a0930:	4622      	mov	r2, r4
 80a0932:	4639      	mov	r1, r7
 80a0934:	4630      	mov	r0, r6
 80a0936:	f002 fa6d 	bl	80a2e14 <__aeabi_atexit>

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true);  // Use the default address, but also turn on debugging
 80a093a:	462a      	mov	r2, r5
 80a093c:	2140      	movs	r1, #64	; 0x40
 80a093e:	480e      	ldr	r0, [pc, #56]	; (80a0978 <_GLOBAL__sub_I_wd+0xa8>)
 80a0940:	f000 fe12 	bl	80a1568 <_ZN16Adafruit_PCA9685C1Ehb>
int triggerRelay(String command){

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
      return(1);
}
 80a0944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true);  // Use the default address, but also turn on debugging

CASARIA_MCP23017 relays;
 80a0948:	480c      	ldr	r0, [pc, #48]	; (80a097c <_GLOBAL__sub_I_wd+0xac>)
 80a094a:	f000 b9b3 	b.w	80a0cb4 <_ZN16CASARIA_MCP23017C1Ev>
 80a094e:	bf00      	nop
 80a0950:	2000046c 	.word	0x2000046c
 80a0954:	20000424 	.word	0x20000424
 80a0958:	200003a4 	.word	0x200003a4
 80a095c:	080a1c4d 	.word	0x080a1c4d
 80a0960:	200003d4 	.word	0x200003d4
 80a0964:	080a0203 	.word	0x080a0203
 80a0968:	2000043c 	.word	0x2000043c
 80a096c:	080a1277 	.word	0x080a1277
 80a0970:	080a1429 	.word	0x080a1429
 80a0974:	2000044c 	.word	0x2000044c
 80a0978:	20000474 	.word	0x20000474
 80a097c:	200003f4 	.word	0x200003f4

080a0980 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0980:	8802      	ldrh	r2, [r0, #0]
 80a0982:	231c      	movs	r3, #28
 80a0984:	4353      	muls	r3, r2
 80a0986:	6842      	ldr	r2, [r0, #4]
 80a0988:	18d1      	adds	r1, r2, r3
 80a098a:	58d3      	ldr	r3, [r2, r3]
 80a098c:	888a      	ldrh	r2, [r1, #4]
 80a098e:	835a      	strh	r2, [r3, #26]
 80a0990:	4770      	bx	lr

080a0992 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0992:	b538      	push	{r3, r4, r5, lr}
 80a0994:	4604      	mov	r4, r0
 80a0996:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a0998:	f000 ff3e 	bl	80a1818 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a099c:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a099e:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a09a0:	4628      	mov	r0, r5
 80a09a2:	f002 f987 	bl	80a2cb4 <pinMode>
    _pin = pin;
 80a09a6:	8025      	strh	r5, [r4, #0]
}
 80a09a8:	4620      	mov	r0, r4
 80a09aa:	bd38      	pop	{r3, r4, r5, pc}

080a09ac <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a09ac:	b538      	push	{r3, r4, r5, lr}
 80a09ae:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a09b0:	f002 f85e 	bl	80a2a70 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a09b4:	2100      	movs	r1, #0
 80a09b6:	8828      	ldrh	r0, [r5, #0]
 80a09b8:	f000 ff36 	bl	80a1828 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a09bc:	f002 f85a 	bl	80a2a74 <_Z10interruptsv>
 80a09c0:	247d      	movs	r4, #125	; 0x7d
 80a09c2:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 80a09c4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a09c8:	d02d      	beq.n	80a0a26 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a09ca:	2002      	movs	r0, #2
 80a09cc:	f000 ff6c 	bl	80a18a8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a09d0:	8828      	ldrh	r0, [r5, #0]
 80a09d2:	f000 ff31 	bl	80a1838 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 80a09d6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a09da:	d0f2      	beq.n	80a09c2 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 80a09dc:	f002 f848 	bl	80a2a70 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a09e0:	4628      	mov	r0, r5
 80a09e2:	f7ff ffcd 	bl	80a0980 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a09e6:	2101      	movs	r1, #1
 80a09e8:	8828      	ldrh	r0, [r5, #0]
 80a09ea:	f000 ff1d 	bl	80a1828 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 80a09ee:	f002 f841 	bl	80a2a74 <_Z10interruptsv>
 80a09f2:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a09f6:	f000 ff57 	bl	80a18a8 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 80a09fa:	f002 f839 	bl	80a2a70 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a09fe:	2100      	movs	r1, #0
 80a0a00:	8828      	ldrh	r0, [r5, #0]
 80a0a02:	f000 ff11 	bl	80a1828 <HAL_Pin_Mode>
 80a0a06:	2046      	movs	r0, #70	; 0x46
 80a0a08:	f000 ff4e 	bl	80a18a8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0a0c:	8828      	ldrh	r0, [r5, #0]
 80a0a0e:	f000 ff13 	bl	80a1838 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a0a12:	b2c0      	uxtb	r0, r0
 80a0a14:	fab0 f480 	clz	r4, r0

    interrupts();
 80a0a18:	f002 f82c 	bl	80a2a74 <_Z10interruptsv>
 80a0a1c:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a0a20:	0964      	lsrs	r4, r4, #5
 80a0a22:	f000 ff41 	bl	80a18a8 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 80a0a26:	4620      	mov	r0, r4
 80a0a28:	bd38      	pop	{r3, r4, r5, pc}

080a0a2a <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a0a2a:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a0a2c:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a0a30:	4604      	mov	r4, r0
    if (v & 1) {
 80a0a32:	d013      	beq.n	80a0a5c <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a0a34:	f002 f81c 	bl	80a2a70 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a0a38:	4620      	mov	r0, r4
 80a0a3a:	f7ff ffa1 	bl	80a0980 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0a3e:	2101      	movs	r1, #1
 80a0a40:	8820      	ldrh	r0, [r4, #0]
 80a0a42:	f000 fef1 	bl	80a1828 <HAL_Pin_Mode>
 80a0a46:	200a      	movs	r0, #10
 80a0a48:	f000 ff2e 	bl	80a18a8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0a4c:	8820      	ldrh	r0, [r4, #0]
 80a0a4e:	2100      	movs	r1, #0
 80a0a50:	f000 feea 	bl	80a1828 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80a0a54:	f002 f80e 	bl	80a2a74 <_Z10interruptsv>
 80a0a58:	2037      	movs	r0, #55	; 0x37
 80a0a5a:	e012      	b.n	80a0a82 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80a0a5c:	f002 f808 	bl	80a2a70 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a0a60:	4620      	mov	r0, r4
 80a0a62:	f7ff ff8d 	bl	80a0980 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0a66:	2101      	movs	r1, #1
 80a0a68:	8820      	ldrh	r0, [r4, #0]
 80a0a6a:	f000 fedd 	bl	80a1828 <HAL_Pin_Mode>
 80a0a6e:	2041      	movs	r0, #65	; 0x41
 80a0a70:	f000 ff1a 	bl	80a18a8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0a74:	8820      	ldrh	r0, [r4, #0]
 80a0a76:	4629      	mov	r1, r5
 80a0a78:	f000 fed6 	bl	80a1828 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80a0a7c:	f001 fffa 	bl	80a2a74 <_Z10interruptsv>
 80a0a80:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80a0a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0a86:	f000 bf0f 	b.w	80a18a8 <HAL_Delay_Microseconds>

080a0a8a <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a0a8a:	b510      	push	{r4, lr}
 80a0a8c:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80a0a8e:	f001 ffef 	bl	80a2a70 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a0a92:	4620      	mov	r0, r4
 80a0a94:	f7ff ff74 	bl	80a0980 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0a98:	2101      	movs	r1, #1
 80a0a9a:	8820      	ldrh	r0, [r4, #0]
 80a0a9c:	f000 fec4 	bl	80a1828 <HAL_Pin_Mode>
 80a0aa0:	2003      	movs	r0, #3
 80a0aa2:	f000 ff01 	bl	80a18a8 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0aa6:	2100      	movs	r1, #0
 80a0aa8:	8820      	ldrh	r0, [r4, #0]
 80a0aaa:	f000 febd 	bl	80a1828 <HAL_Pin_Mode>
 80a0aae:	200a      	movs	r0, #10
 80a0ab0:	f000 fefa 	bl	80a18a8 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0ab4:	8820      	ldrh	r0, [r4, #0]
 80a0ab6:	f000 febf 	bl	80a1838 <HAL_GPIO_Read>
 80a0aba:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 80a0abc:	f001 ffda 	bl	80a2a74 <_Z10interruptsv>
 80a0ac0:	2035      	movs	r0, #53	; 0x35
 80a0ac2:	f000 fef1 	bl	80a18a8 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 80a0ac6:	b2e0      	uxtb	r0, r4
 80a0ac8:	bd10      	pop	{r4, pc}

080a0aca <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 80a0aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0ace:	4605      	mov	r5, r0
 80a0ad0:	4688      	mov	r8, r1
 80a0ad2:	4617      	mov	r7, r2
 80a0ad4:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0ad6:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a0ad8:	ea18 0f04 	tst.w	r8, r4
 80a0adc:	bf14      	ite	ne
 80a0ade:	2101      	movne	r1, #1
 80a0ae0:	2100      	moveq	r1, #0
 80a0ae2:	4628      	mov	r0, r5
 80a0ae4:	f7ff ffa1 	bl	80a0a2a <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0ae8:	0064      	lsls	r4, r4, #1
 80a0aea:	3e01      	subs	r6, #1
 80a0aec:	b2e4      	uxtb	r4, r4
 80a0aee:	d1f3      	bne.n	80a0ad8 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 80a0af0:	b18f      	cbz	r7, 80a0b16 <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 80a0af2:	f001 ffbd 	bl	80a2a70 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0af6:	882a      	ldrh	r2, [r5, #0]
 80a0af8:	231c      	movs	r3, #28
 80a0afa:	4353      	muls	r3, r2
 80a0afc:	686a      	ldr	r2, [r5, #4]
 80a0afe:	18d1      	adds	r1, r2, r3
 80a0b00:	58d3      	ldr	r3, [r2, r3]
 80a0b02:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0b04:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0b06:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0b08:	8828      	ldrh	r0, [r5, #0]
 80a0b0a:	f000 fe8d 	bl	80a1828 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a0b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 80a0b12:	f001 bfaf 	b.w	80a2a74 <_Z10interruptsv>
 80a0b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0b1a <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 80a0b1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0b1c:	4607      	mov	r7, r0
 80a0b1e:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a0b20:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0b22:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a0b24:	4638      	mov	r0, r7
 80a0b26:	f7ff ffb0 	bl	80a0a8a <_ZN7OneWire8read_bitEv>
 80a0b2a:	b100      	cbz	r0, 80a0b2e <_ZN7OneWire4readEv+0x14>
 80a0b2c:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0b2e:	0064      	lsls	r4, r4, #1
 80a0b30:	3e01      	subs	r6, #1
 80a0b32:	b2e4      	uxtb	r4, r4
 80a0b34:	d1f6      	bne.n	80a0b24 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 80a0b36:	4628      	mov	r0, r5
 80a0b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0b3a <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0b3a:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0b3c:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0b3e:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0b40:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0b42:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0b44:	f7ff ffc1 	bl	80a0aca <_ZN7OneWire5writeEhh>
 80a0b48:	1e65      	subs	r5, r4, #1
 80a0b4a:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80a0b4c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a0b50:	2200      	movs	r2, #0
 80a0b52:	4630      	mov	r0, r6
 80a0b54:	f7ff ffb9 	bl	80a0aca <_ZN7OneWire5writeEhh>
 80a0b58:	42a5      	cmp	r5, r4
 80a0b5a:	d1f7      	bne.n	80a0b4c <_ZN7OneWire6selectEPKh+0x12>
}
 80a0b5c:	bd70      	pop	{r4, r5, r6, pc}

080a0b5e <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
 80a0b5e:	2200      	movs	r2, #0
 80a0b60:	21cc      	movs	r1, #204	; 0xcc
 80a0b62:	f7ff bfb2 	b.w	80a0aca <_ZN7OneWire5writeEhh>

080a0b66 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a0b66:	2300      	movs	r3, #0
 80a0b68:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a0b6a:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a0b6c:	7443      	strb	r3, [r0, #17]
 80a0b6e:	f100 0210 	add.w	r2, r0, #16
 80a0b72:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a0b74:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80a0b78:	4282      	cmp	r2, r0
 80a0b7a:	d1fb      	bne.n	80a0b74 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80a0b7c:	4770      	bx	lr

080a0b7e <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0b7e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0b82:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0b84:	4604      	mov	r4, r0
 80a0b86:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0b88:	2d00      	cmp	r5, #0
 80a0b8a:	d15e      	bne.n	80a0c4a <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80a0b8c:	f7ff ff0e 	bl	80a09ac <_ZN7OneWire5resetEv>
 80a0b90:	b920      	cbnz	r0, 80a0b9c <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80a0b92:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a0b94:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a0b96:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a0b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a0b9c:	462a      	mov	r2, r5
 80a0b9e:	21f0      	movs	r1, #240	; 0xf0
 80a0ba0:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a0ba2:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a0ba4:	f7ff ff91 	bl	80a0aca <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a0ba8:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0baa:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a0bac:	4620      	mov	r0, r4
 80a0bae:	f7ff ff6c 	bl	80a0a8a <_ZN7OneWire8read_bitEv>
 80a0bb2:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a0bb4:	4620      	mov	r0, r4
 80a0bb6:	f7ff ff68 	bl	80a0a8a <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a0bba:	f1b9 0f01 	cmp.w	r9, #1
 80a0bbe:	d102      	bne.n	80a0bc6 <_ZN7OneWire6searchEPh+0x48>
 80a0bc0:	2801      	cmp	r0, #1
 80a0bc2:	d11b      	bne.n	80a0bfc <_ZN7OneWire6searchEPh+0x7e>
 80a0bc4:	e037      	b.n	80a0c36 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 80a0bc6:	4581      	cmp	r9, r0
 80a0bc8:	eb04 0305 	add.w	r3, r4, r5
 80a0bcc:	d11e      	bne.n	80a0c0c <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a0bce:	7c22      	ldrb	r2, [r4, #16]
 80a0bd0:	4297      	cmp	r7, r2
 80a0bd2:	d207      	bcs.n	80a0be4 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a0bd4:	7a1a      	ldrb	r2, [r3, #8]
 80a0bd6:	4216      	tst	r6, r2
 80a0bd8:	bf14      	ite	ne
 80a0bda:	f04f 0901 	movne.w	r9, #1
 80a0bde:	f04f 0900 	moveq.w	r9, #0
 80a0be2:	e004      	b.n	80a0bee <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a0be4:	bf0c      	ite	eq
 80a0be6:	f04f 0901 	moveq.w	r9, #1
 80a0bea:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 80a0bee:	f1b9 0f00 	cmp.w	r9, #0
 80a0bf2:	d103      	bne.n	80a0bfc <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a0bf4:	2f08      	cmp	r7, #8
 80a0bf6:	d808      	bhi.n	80a0c0a <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a0bf8:	7467      	strb	r7, [r4, #17]
 80a0bfa:	e006      	b.n	80a0c0a <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a0bfc:	1962      	adds	r2, r4, r5
 80a0bfe:	7a13      	ldrb	r3, [r2, #8]
 80a0c00:	f04f 0901 	mov.w	r9, #1
 80a0c04:	4333      	orrs	r3, r6
 80a0c06:	7213      	strb	r3, [r2, #8]
 80a0c08:	e004      	b.n	80a0c14 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0c0a:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a0c0c:	7a1a      	ldrb	r2, [r3, #8]
 80a0c0e:	ea22 0206 	bic.w	r2, r2, r6
 80a0c12:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a0c14:	4649      	mov	r1, r9
 80a0c16:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a0c18:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a0c1a:	f7ff ff06 	bl	80a0a2a <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a0c1e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a0c22:	bf04      	itt	eq
 80a0c24:	3501      	addeq	r5, #1
 80a0c26:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0c28:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a0c2c:	bf08      	it	eq
 80a0c2e:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a0c30:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0c32:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a0c34:	d9ba      	bls.n	80a0bac <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a0c36:	2f40      	cmp	r7, #64	; 0x40
 80a0c38:	d907      	bls.n	80a0c4a <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a0c3a:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a0c3e:	f1ba 0f00 	cmp.w	sl, #0
 80a0c42:	d112      	bne.n	80a0c6a <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a0c44:	2301      	movs	r3, #1
 80a0c46:	74a3      	strb	r3, [r4, #18]
 80a0c48:	e00f      	b.n	80a0c6a <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a0c4a:	2000      	movs	r0, #0
 80a0c4c:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a0c4e:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a0c50:	7460      	strb	r0, [r4, #17]
 80a0c52:	1de3      	adds	r3, r4, #7
 80a0c54:	f108 38ff 	add.w	r8, r8, #4294967295
 80a0c58:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a0c5a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a0c5e:	42a3      	cmp	r3, r4
 80a0c60:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a0c64:	d1f9      	bne.n	80a0c5a <_ZN7OneWire6searchEPh+0xdc>
 80a0c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80a0c6a:	7a23      	ldrb	r3, [r4, #8]
 80a0c6c:	2b00      	cmp	r3, #0
 80a0c6e:	d0ec      	beq.n	80a0c4a <_ZN7OneWire6searchEPh+0xcc>
 80a0c70:	2001      	movs	r0, #1
 80a0c72:	e7ee      	b.n	80a0c52 <_ZN7OneWire6searchEPh+0xd4>

080a0c74 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a0c74:	b530      	push	{r4, r5, lr}
 80a0c76:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a0c78:	2000      	movs	r0, #0

    while (len--) {
 80a0c7a:	3901      	subs	r1, #1
 80a0c7c:	b2c9      	uxtb	r1, r1
 80a0c7e:	29ff      	cmp	r1, #255	; 0xff
 80a0c80:	d013      	beq.n	80a0caa <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80a0c82:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0c86:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a0c88:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a0c8c:	f013 0f01 	tst.w	r3, #1
 80a0c90:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a0c94:	bf1c      	itt	ne
 80a0c96:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a0c9a:	b2d8      	uxtbne	r0, r3
 80a0c9c:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0c9e:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80a0ca2:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0ca6:	d1ef      	bne.n	80a0c88 <_ZN7OneWire4crc8EPhh+0x14>
 80a0ca8:	e7e7      	b.n	80a0c7a <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80a0caa:	bd30      	pop	{r4, r5, pc}

080a0cac <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a0cac:	f000 bdb4 	b.w	80a1818 <HAL_Pin_Map>

080a0cb0 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a0cb0:	f000 bdb2 	b.w	80a1818 <HAL_Pin_Map>

080a0cb4 <_ZN16CASARIA_MCP23017C1Ev>:

//Comment line below out to turn off Serial logging
//#define LOGGING

//Constructor
CASARIA_MCP23017::CASARIA_MCP23017(){
 80a0cb4:	4603      	mov	r3, r0
 80a0cb6:	4909      	ldr	r1, [pc, #36]	; (80a0cdc <_ZN16CASARIA_MCP23017C1Ev+0x28>)
 80a0cb8:	f100 020c 	add.w	r2, r0, #12
 80a0cbc:	c903      	ldmia	r1, {r0, r1}
 80a0cbe:	e882 0003 	stmia.w	r2, {r0, r1}
 80a0cc2:	2200      	movs	r2, #0
 80a0cc4:	615a      	str	r2, [r3, #20]
 80a0cc6:	619a      	str	r2, [r3, #24]
 80a0cc8:	771a      	strb	r2, [r3, #28]
 80a0cca:	621a      	str	r2, [r3, #32]
 80a0ccc:	2120      	movs	r1, #32
 80a0cce:	629a      	str	r2, [r3, #40]	; 0x28
 80a0cd0:	220a      	movs	r2, #10
 80a0cd2:	6259      	str	r1, [r3, #36]	; 0x24
 80a0cd4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80a0cd8:	4618      	mov	r0, r3
 80a0cda:	4770      	bx	lr
 80a0cdc:	080a494c 	.word	0x080a494c

080a0ce0 <_ZN16CASARIA_MCP2301710setAddressEi>:

void CASARIA_MCP23017::setAddress(int a){
    address = a;
 80a0ce0:	6241      	str	r1, [r0, #36]	; 0x24
 80a0ce2:	4770      	bx	lr

080a0ce4 <_ZN16CASARIA_MCP230179setRelaysEi>:
    address |= (a0*1+a1*2+a2*4);
}


void CASARIA_MCP23017::setRelays(int num){
    if(num > 8){
 80a0ce4:	2908      	cmp	r1, #8
 80a0ce6:	f04f 0301 	mov.w	r3, #1
 80a0cea:	dd08      	ble.n	80a0cfe <_ZN16CASARIA_MCP230179setRelaysEi+0x1a>
        outputMap[0] = 0;
 80a0cec:	2200      	movs	r2, #0
 80a0cee:	60c2      	str	r2, [r0, #12]
        outputMap[1] = 256 - (1 << (num-8));
 80a0cf0:	f1a1 0208 	sub.w	r2, r1, #8
 80a0cf4:	4093      	lsls	r3, r2
 80a0cf6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80a0cfa:	6103      	str	r3, [r0, #16]
 80a0cfc:	e003      	b.n	80a0d06 <_ZN16CASARIA_MCP230179setRelaysEi+0x22>
    }else{
        outputMap[0] = 256 - (1 << num);
 80a0cfe:	408b      	lsls	r3, r1
 80a0d00:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80a0d04:	60c3      	str	r3, [r0, #12]
    }
    relayCount = num;
 80a0d06:	6201      	str	r1, [r0, #32]
 80a0d08:	4770      	bx	lr

080a0d0a <_ZN16CASARIA_MCP2301710setOutputsEii>:
void CASARIA_MCP23017::setInputs(int map1, int map2){
    inputMap[0] = map1;
    inputMap[1] = map2;
}
void CASARIA_MCP23017::setOutputs(int map1, int map2){
    outputMap[0] = map1;
 80a0d0a:	60c1      	str	r1, [r0, #12]
    outputMap[1] = map2;
 80a0d0c:	6102      	str	r2, [r0, #16]
 80a0d0e:	4770      	bx	lr

080a0d10 <_ZN16CASARIA_MCP230175bitopEhhi>:
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
    }
    
}
byte CASARIA_MCP23017::bitop(byte b1, byte b2, int op){
    switch(op){
 80a0d10:	2b02      	cmp	r3, #2
 80a0d12:	d006      	beq.n	80a0d22 <_ZN16CASARIA_MCP230175bitopEhhi+0x12>
 80a0d14:	2b03      	cmp	r3, #3
 80a0d16:	d007      	beq.n	80a0d28 <_ZN16CASARIA_MCP230175bitopEhhi+0x18>
 80a0d18:	2b01      	cmp	r3, #1
 80a0d1a:	d108      	bne.n	80a0d2e <_ZN16CASARIA_MCP230175bitopEhhi+0x1e>
        case 1:
            return b1 | b2;
 80a0d1c:	ea41 0002 	orr.w	r0, r1, r2
 80a0d20:	4770      	bx	lr
        case 2:
            return b1 & ~b2;
 80a0d22:	ea21 0002 	bic.w	r0, r1, r2
 80a0d26:	4770      	bx	lr
        case 3:
            return b1 ^ b2;
 80a0d28:	ea81 0002 	eor.w	r0, r1, r2
 80a0d2c:	4770      	bx	lr
    }
    return 0;
 80a0d2e:	2000      	movs	r0, #0
}
 80a0d30:	4770      	bx	lr

080a0d32 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>:
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a0d32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a0d36:	461d      	mov	r5, r3
        byte cmds[length];
 80a0d38:	3307      	adds	r3, #7
 80a0d3a:	f023 0307 	bic.w	r3, r3, #7
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a0d3e:	af00      	add	r7, sp, #0
        byte cmds[length];
 80a0d40:	ebad 0d03 	sub.w	sp, sp, r3
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a0d44:	4604      	mov	r4, r0
        byte cmds[length];
 80a0d46:	466e      	mov	r6, sp
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a0d48:	f8d7 8020 	ldr.w	r8, [r7, #32]
        byte cmds[length];
        for(int i=0;i<length;i++){
 80a0d4c:	2300      	movs	r3, #0
 80a0d4e:	42ab      	cmp	r3, r5
 80a0d50:	db04      	blt.n	80a0d5c <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x2a>
 80a0d52:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a0d56:	fa5f f981 	uxtb.w	r9, r1
 80a0d5a:	e020      	b.n	80a0d9e <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x6c>
            cmds[i] = icmds[i];
 80a0d5c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80a0d60:	54f0      	strb	r0, [r6, r3]
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
        byte cmds[length];
        for(int i=0;i<length;i++){
 80a0d62:	3301      	adds	r3, #1
 80a0d64:	e7f3      	b.n	80a0d4e <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x1c>
            cmds[i] = icmds[i];
        }
    int status = 256;
    while(retrys < 4 && status > 0){
 80a0d66:	b1e8      	cbz	r0, 80a0da4 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x72>
        Wire.beginTransmission(address);
 80a0d68:	f002 f834 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0d6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a0d6e:	f001 ff58 	bl	80a2c22 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(reg);
 80a0d72:	f002 f82f 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0d76:	6803      	ldr	r3, [r0, #0]
 80a0d78:	4649      	mov	r1, r9
 80a0d7a:	689b      	ldr	r3, [r3, #8]
 80a0d7c:	4798      	blx	r3
        if(length > 0) Wire.write(cmds, length);
 80a0d7e:	2d00      	cmp	r5, #0
 80a0d80:	dd06      	ble.n	80a0d90 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x5e>
 80a0d82:	f002 f827 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0d86:	6803      	ldr	r3, [r0, #0]
 80a0d88:	462a      	mov	r2, r5
 80a0d8a:	68db      	ldr	r3, [r3, #12]
 80a0d8c:	4631      	mov	r1, r6
 80a0d8e:	4798      	blx	r3
        status = Wire.endTransmission();
 80a0d90:	f002 f820 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0d94:	f001 ff4c 	bl	80a2c30 <_ZN7TwoWire15endTransmissionEv>
        retrys++;
 80a0d98:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0d9a:	3301      	adds	r3, #1
 80a0d9c:	62a3      	str	r3, [r4, #40]	; 0x28
        byte cmds[length];
        for(int i=0;i<length;i++){
            cmds[i] = icmds[i];
        }
    int status = 256;
    while(retrys < 4 && status > 0){
 80a0d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a0da0:	2b03      	cmp	r3, #3
 80a0da2:	dde0      	ble.n	80a0d66 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x34>
        Wire.write(reg);
        if(length > 0) Wire.write(cmds, length);
        status = Wire.endTransmission();
        retrys++;
    }
    initialized = false;
 80a0da4:	2500      	movs	r5, #0
    int ret = 256;
    if(retrys < 4){
 80a0da6:	2b03      	cmp	r3, #3
        Wire.write(reg);
        if(length > 0) Wire.write(cmds, length);
        status = Wire.endTransmission();
        retrys++;
    }
    initialized = false;
 80a0da8:	7225      	strb	r5, [r4, #8]
    int ret = 256;
    if(retrys < 4){
 80a0daa:	dc13      	bgt.n	80a0dd4 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0xa2>
        initialized = true;
 80a0dac:	2301      	movs	r3, #1
 80a0dae:	7223      	strb	r3, [r4, #8]
        Wire.requestFrom(address, rlen);
 80a0db0:	f002 f810 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0db4:	4642      	mov	r2, r8
 80a0db6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a0db8:	f001 ff2a 	bl	80a2c10 <_ZN7TwoWire11requestFromEii>
        int rbyte = 0;
        ret = 0;
 80a0dbc:	462e      	mov	r6, r5
        while(rbyte < rlen){
 80a0dbe:	4545      	cmp	r5, r8
 80a0dc0:	da0a      	bge.n	80a0dd8 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0xa6>
            int bread = Wire.read();
 80a0dc2:	f002 f807 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0dc6:	6803      	ldr	r3, [r0, #0]
            ret = (ret << 8) + bread;
            rbyte++;
 80a0dc8:	3501      	adds	r5, #1
        initialized = true;
        Wire.requestFrom(address, rlen);
        int rbyte = 0;
        ret = 0;
        while(rbyte < rlen){
            int bread = Wire.read();
 80a0dca:	695b      	ldr	r3, [r3, #20]
 80a0dcc:	4798      	blx	r3
            ret = (ret << 8) + bread;
 80a0dce:	eb00 2606 	add.w	r6, r0, r6, lsl #8
    if(retrys < 4){
        initialized = true;
        Wire.requestFrom(address, rlen);
        int rbyte = 0;
        ret = 0;
        while(rbyte < rlen){
 80a0dd2:	e7f4      	b.n	80a0dbe <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x8c>
        if(length > 0) Wire.write(cmds, length);
        status = Wire.endTransmission();
        retrys++;
    }
    initialized = false;
    int ret = 256;
 80a0dd4:	f44f 7680 	mov.w	r6, #256	; 0x100
            rbyte++;
        }
    }
    retrys = 0;
    return ret;
}
 80a0dd8:	4630      	mov	r0, r6
            int bread = Wire.read();
            ret = (ret << 8) + bread;
            rbyte++;
        }
    }
    retrys = 0;
 80a0dda:	2300      	movs	r3, #0
 80a0ddc:	62a3      	str	r3, [r4, #40]	; 0x28
    return ret;
}
 80a0dde:	46bd      	mov	sp, r7
 80a0de0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a0de4 <_ZN16CASARIA_MCP2301711sendCommandEi>:
        Particle.publish("Input Status", report);
        lastReadInputs = millis();
    }
    return shifted;
}
int CASARIA_MCP23017::sendCommand(int reg){
 80a0de4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int cmds[1] = {0};
 80a0de6:	2300      	movs	r3, #0
 80a0de8:	aa04      	add	r2, sp, #16
    return sendCommand(reg, cmds, 0, 1);
 80a0dea:	2401      	movs	r4, #1
        lastReadInputs = millis();
    }
    return shifted;
}
int CASARIA_MCP23017::sendCommand(int reg){
    int cmds[1] = {0};
 80a0dec:	f842 3d04 	str.w	r3, [r2, #-4]!
    return sendCommand(reg, cmds, 0, 1);
 80a0df0:	9400      	str	r4, [sp, #0]
 80a0df2:	f7ff ff9e 	bl	80a0d32 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>
}
 80a0df6:	b004      	add	sp, #16
 80a0df8:	bd10      	pop	{r4, pc}

080a0dfa <_ZN16CASARIA_MCP2301710readStatusEv>:
    int rbit = (1<<(relay-1));
    if((outputMap[0] & rbit) > 0) return 256;
    return (bankOneStatus & (1<<(relay-1))) ? 1 : 0;
}
int lastReadBanks=0;
void CASARIA_MCP23017::readStatus(){
 80a0dfa:	b510      	push	{r4, lr}
    bankOneStatus = sendCommand(18);
 80a0dfc:	2112      	movs	r1, #18
    int rbit = (1<<(relay-1));
    if((outputMap[0] & rbit) > 0) return 256;
    return (bankOneStatus & (1<<(relay-1))) ? 1 : 0;
}
int lastReadBanks=0;
void CASARIA_MCP23017::readStatus(){
 80a0dfe:	4604      	mov	r4, r0
    bankOneStatus = sendCommand(18);
 80a0e00:	f7ff fff0 	bl	80a0de4 <_ZN16CASARIA_MCP2301711sendCommandEi>
    bankTwoStatus = sendCommand(19);
 80a0e04:	2113      	movs	r1, #19
    if((outputMap[0] & rbit) > 0) return 256;
    return (bankOneStatus & (1<<(relay-1))) ? 1 : 0;
}
int lastReadBanks=0;
void CASARIA_MCP23017::readStatus(){
    bankOneStatus = sendCommand(18);
 80a0e06:	6020      	str	r0, [r4, #0]
    bankTwoStatus = sendCommand(19);
 80a0e08:	4620      	mov	r0, r4
 80a0e0a:	f7ff ffeb 	bl	80a0de4 <_ZN16CASARIA_MCP2301711sendCommandEi>
 80a0e0e:	6060      	str	r0, [r4, #4]
 80a0e10:	bd10      	pop	{r4, pc}

080a0e12 <_ZN16CASARIA_MCP2301711sendCommandEii>:
}
int CASARIA_MCP23017::sendCommand(int reg){
    int cmds[1] = {0};
    return sendCommand(reg, cmds, 0, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmd){
 80a0e12:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int cmds[1] = {cmd};
 80a0e14:	ac04      	add	r4, sp, #16
 80a0e16:	f844 2d04 	str.w	r2, [r4, #-4]!
    return sendCommand(reg, cmds, 1, 1);
 80a0e1a:	2301      	movs	r3, #1
 80a0e1c:	9300      	str	r3, [sp, #0]
 80a0e1e:	4622      	mov	r2, r4
 80a0e20:	f7ff ff87 	bl	80a0d32 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>
}
 80a0e24:	b004      	add	sp, #16
 80a0e26:	bd10      	pop	{r4, pc}

080a0e28 <_ZN16CASARIA_MCP2301716setBankOneStatusEi>:
    setBankTwoStatus(bankTwoStatus | (~outputMap[1] & 255));
}



void CASARIA_MCP23017::setBankOneStatus(int status){
 80a0e28:	b510      	push	{r4, lr}
 80a0e2a:	4604      	mov	r4, r0
    sendCommand(18, status);
 80a0e2c:	460a      	mov	r2, r1
 80a0e2e:	2112      	movs	r1, #18
 80a0e30:	f7ff ffef 	bl	80a0e12 <_ZN16CASARIA_MCP2301711sendCommandEii>
    readStatus();
 80a0e34:	4620      	mov	r0, r4
}
 80a0e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}



void CASARIA_MCP23017::setBankOneStatus(int status){
    sendCommand(18, status);
    readStatus();
 80a0e3a:	f7ff bfde 	b.w	80a0dfa <_ZN16CASARIA_MCP2301710readStatusEv>

080a0e3e <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>:
}
void CASARIA_MCP23017::setBankTwoStatus(int status){
 80a0e3e:	b510      	push	{r4, lr}
 80a0e40:	4604      	mov	r4, r0
    sendCommand(19, status);
 80a0e42:	460a      	mov	r2, r1
 80a0e44:	2113      	movs	r1, #19
 80a0e46:	f7ff ffe4 	bl	80a0e12 <_ZN16CASARIA_MCP2301711sendCommandEii>
    readStatus();
 80a0e4a:	4620      	mov	r0, r4
}
 80a0e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(18, status);
    readStatus();
}
void CASARIA_MCP23017::setBankTwoStatus(int status){
    sendCommand(19, status);
    readStatus();
 80a0e50:	f7ff bfd3 	b.w	80a0dfa <_ZN16CASARIA_MCP2301710readStatusEv>

080a0e54 <_ZN16CASARIA_MCP230177relayOpEii>:
void CASARIA_MCP23017::toggleRelay(int relay){
    relayOp(relay, 3);
}

void CASARIA_MCP23017::relayOp(int relay, int op){
    if(relay > 8){
 80a0e54:	2908      	cmp	r1, #8
}
void CASARIA_MCP23017::toggleRelay(int relay){
    relayOp(relay, 3);
}

void CASARIA_MCP23017::relayOp(int relay, int op){
 80a0e56:	b538      	push	{r3, r4, r5, lr}
 80a0e58:	4605      	mov	r5, r0
 80a0e5a:	4613      	mov	r3, r2
 80a0e5c:	f04f 0401 	mov.w	r4, #1
    if(relay > 8){
 80a0e60:	dd0f      	ble.n	80a0e82 <_ZN16CASARIA_MCP230177relayOpEii+0x2e>
        byte rbit = (1<<(relay-9));
 80a0e62:	3909      	subs	r1, #9
        if((outputMap[1] & rbit) > 0) return;
 80a0e64:	7c02      	ldrb	r2, [r0, #16]
    relayOp(relay, 3);
}

void CASARIA_MCP23017::relayOp(int relay, int op){
    if(relay > 8){
        byte rbit = (1<<(relay-9));
 80a0e66:	fa04 f101 	lsl.w	r1, r4, r1
        if((outputMap[1] & rbit) > 0) return;
 80a0e6a:	420a      	tst	r2, r1
 80a0e6c:	d119      	bne.n	80a0ea2 <_ZN16CASARIA_MCP230177relayOpEii+0x4e>
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
 80a0e6e:	b2ca      	uxtb	r2, r1
 80a0e70:	7901      	ldrb	r1, [r0, #4]
 80a0e72:	f7ff ff4d 	bl	80a0d10 <_ZN16CASARIA_MCP230175bitopEhhi>
 80a0e76:	4601      	mov	r1, r0
 80a0e78:	4628      	mov	r0, r5
        byte rbit = (1<<(relay-1));
        if((outputMap[0] & rbit) > 0) return;
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
    }
    
}
 80a0e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void CASARIA_MCP23017::relayOp(int relay, int op){
    if(relay > 8){
        byte rbit = (1<<(relay-9));
        if((outputMap[1] & rbit) > 0) return;
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
 80a0e7e:	f7ff bfde 	b.w	80a0e3e <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>
    }else{
        byte rbit = (1<<(relay-1));
 80a0e82:	3901      	subs	r1, #1
        if((outputMap[0] & rbit) > 0) return;
 80a0e84:	7b02      	ldrb	r2, [r0, #12]
    if(relay > 8){
        byte rbit = (1<<(relay-9));
        if((outputMap[1] & rbit) > 0) return;
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
    }else{
        byte rbit = (1<<(relay-1));
 80a0e86:	fa04 f101 	lsl.w	r1, r4, r1
        if((outputMap[0] & rbit) > 0) return;
 80a0e8a:	420a      	tst	r2, r1
 80a0e8c:	d109      	bne.n	80a0ea2 <_ZN16CASARIA_MCP230177relayOpEii+0x4e>
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
 80a0e8e:	b2ca      	uxtb	r2, r1
 80a0e90:	7801      	ldrb	r1, [r0, #0]
 80a0e92:	f7ff ff3d 	bl	80a0d10 <_ZN16CASARIA_MCP230175bitopEhhi>
 80a0e96:	4601      	mov	r1, r0
 80a0e98:	4628      	mov	r0, r5
    }
    
}
 80a0e9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if((outputMap[1] & rbit) > 0) return;
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
    }else{
        byte rbit = (1<<(relay-1));
        if((outputMap[0] & rbit) > 0) return;
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
 80a0e9e:	f7ff bfc3 	b.w	80a0e28 <_ZN16CASARIA_MCP2301716setBankOneStatusEi>
 80a0ea2:	bd38      	pop	{r3, r4, r5, pc}

080a0ea4 <_ZN16CASARIA_MCP2301716turnOffAllRelaysEv>:
void CASARIA_MCP23017::turnOnAllRelays(){
    setBankOneStatus(bankOneStatus & outputMap[0]);
    setBankTwoStatus(bankTwoStatus & outputMap[1]);
}

void CASARIA_MCP23017::turnOffAllRelays(){
 80a0ea4:	b510      	push	{r4, lr}

    setBankOneStatus(bankOneStatus | (~outputMap[0] & 255));
 80a0ea6:	68c1      	ldr	r1, [r0, #12]
void CASARIA_MCP23017::turnOnAllRelays(){
    setBankOneStatus(bankOneStatus & outputMap[0]);
    setBankTwoStatus(bankTwoStatus & outputMap[1]);
}

void CASARIA_MCP23017::turnOffAllRelays(){
 80a0ea8:	4604      	mov	r4, r0

    setBankOneStatus(bankOneStatus | (~outputMap[0] & 255));
 80a0eaa:	43c9      	mvns	r1, r1
 80a0eac:	6803      	ldr	r3, [r0, #0]
 80a0eae:	b2c9      	uxtb	r1, r1
 80a0eb0:	4319      	orrs	r1, r3
 80a0eb2:	f7ff ffb9 	bl	80a0e28 <_ZN16CASARIA_MCP2301716setBankOneStatusEi>
    setBankTwoStatus(bankTwoStatus | (~outputMap[1] & 255));
 80a0eb6:	6921      	ldr	r1, [r4, #16]
 80a0eb8:	6863      	ldr	r3, [r4, #4]
 80a0eba:	43c9      	mvns	r1, r1
 80a0ebc:	b2c9      	uxtb	r1, r1
 80a0ebe:	4620      	mov	r0, r4
}
 80a0ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void CASARIA_MCP23017::turnOffAllRelays(){

    setBankOneStatus(bankOneStatus | (~outputMap[0] & 255));
    setBankTwoStatus(bankTwoStatus | (~outputMap[1] & 255));
 80a0ec4:	4319      	orrs	r1, r3
 80a0ec6:	f7ff bfba 	b.w	80a0e3e <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>

080a0eca <_ZN16CASARIA_MCP2301711sendCommandEiPii>:
}
int CASARIA_MCP23017::sendCommand(int reg, int cmd){
    int cmds[1] = {cmd};
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
 80a0eca:	b513      	push	{r0, r1, r4, lr}
    return sendCommand(reg, cmds, length, 1);
 80a0ecc:	2401      	movs	r4, #1
 80a0ece:	9400      	str	r4, [sp, #0]
 80a0ed0:	f7ff ff2f 	bl	80a0d32 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>
}
 80a0ed4:	b002      	add	sp, #8
 80a0ed6:	bd10      	pop	{r4, pc}

080a0ed8 <_ZN16CASARIA_MCP230174initEv>:
    }else{
        outputMap[0] ^= (1<<(num-1));
    }
    iosetCustom = true;
}
void CASARIA_MCP23017::init(){
 80a0ed8:	b510      	push	{r4, lr}
 80a0eda:	4604      	mov	r4, r0
    //Start I2C port
    Wire.begin();
 80a0edc:	f001 ff7a 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a0ee0:	f001 fe84 	bl	80a2bec <_ZN7TwoWire5beginEv>
    //Open connection to specified address
    sendCommand(0x00, outputMap, 2);
 80a0ee4:	f104 020c 	add.w	r2, r4, #12
 80a0ee8:	2302      	movs	r3, #2
 80a0eea:	2100      	movs	r1, #0
 80a0eec:	4620      	mov	r0, r4
 80a0eee:	f7ff ffec 	bl	80a0eca <_ZN16CASARIA_MCP2301711sendCommandEiPii>
    sendCommand(0x0C, inputMap, 2);                      
 80a0ef2:	f104 0214 	add.w	r2, r4, #20
 80a0ef6:	4620      	mov	r0, r4
 80a0ef8:	2302      	movs	r3, #2
 80a0efa:	210c      	movs	r1, #12
 80a0efc:	f7ff ffe5 	bl	80a0eca <_ZN16CASARIA_MCP2301711sendCommandEiPii>
    readStatus();
 80a0f00:	4620      	mov	r0, r4
}
 80a0f02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    //Start I2C port
    Wire.begin();
    //Open connection to specified address
    sendCommand(0x00, outputMap, 2);
    sendCommand(0x0C, inputMap, 2);                      
    readStatus();
 80a0f06:	f7ff bf78 	b.w	80a0dfa <_ZN16CASARIA_MCP2301710readStatusEv>
	...

080a0f0c <_ZN16CASARIA_MCP230179relayTalkE6String>:
    }
    retrys = 0;
    return ret;
}

int CASARIA_MCP23017::relayTalk(String command){
 80a0f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0f10:	4688      	mov	r8, r1
 80a0f12:	b091      	sub	sp, #68	; 0x44
    int bank=0;
    int relay=0;
    int op=0;
    int p=command.indexOf(" ");
 80a0f14:	49ab      	ldr	r1, [pc, #684]	; (80a11c4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2b8>)
    }
    retrys = 0;
    return ret;
}

int CASARIA_MCP23017::relayTalk(String command){
 80a0f16:	4605      	mov	r5, r0
    int bank=0;
    int relay=0;
    int op=0;
    int p=command.indexOf(" ");
 80a0f18:	a80c      	add	r0, sp, #48	; 0x30
 80a0f1a:	f000 ff02 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0f1e:	a90c      	add	r1, sp, #48	; 0x30
 80a0f20:	4640      	mov	r0, r8
 80a0f22:	f000 ff8b 	bl	80a1e3c <_ZNK6String7indexOfERKS_>
 80a0f26:	4682      	mov	sl, r0
 80a0f28:	a80c      	add	r0, sp, #48	; 0x30
 80a0f2a:	f000 feb3 	bl	80a1c94 <_ZN6StringD1Ev>
    bool all=false;
    bool relay_next=false;
    bool bank_next=false;
    String word;
 80a0f2e:	49a6      	ldr	r1, [pc, #664]	; (80a11c8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2bc>)
 80a0f30:	a804      	add	r0, sp, #16
 80a0f32:	f000 fef6 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
    if(p > -1){
 80a0f36:	f1ba 0f00 	cmp.w	sl, #0
 80a0f3a:	f2c0 815b 	blt.w	80a11f4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2e8>
 80a0f3e:	2600      	movs	r6, #0
 80a0f40:	4634      	mov	r4, r6
 80a0f42:	46b1      	mov	r9, r6
 80a0f44:	4637      	mov	r7, r6
 80a0f46:	9600      	str	r6, [sp, #0]
 80a0f48:	9601      	str	r6, [sp, #4]
        while(command.length() > 0){
 80a0f4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a0f4e:	2b00      	cmp	r3, #0
 80a0f50:	f000 80fc 	beq.w	80a114c <_ZN16CASARIA_MCP230179relayTalkE6String+0x240>
            if(p > -1){
 80a0f54:	f1ba 0f00 	cmp.w	sl, #0
 80a0f58:	db26      	blt.n	80a0fa8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x9c>
                word = command.substring(0, p);
 80a0f5a:	4653      	mov	r3, sl
 80a0f5c:	2200      	movs	r2, #0
 80a0f5e:	4641      	mov	r1, r8
 80a0f60:	a80c      	add	r0, sp, #48	; 0x30
 80a0f62:	f000 ff6f 	bl	80a1e44 <_ZNK6String9substringEjj>
 80a0f66:	a90c      	add	r1, sp, #48	; 0x30
 80a0f68:	a804      	add	r0, sp, #16
 80a0f6a:	f000 ff24 	bl	80a1db6 <_ZN6StringaSEOS_>
 80a0f6e:	a80c      	add	r0, sp, #48	; 0x30
 80a0f70:	f000 fe90 	bl	80a1c94 <_ZN6StringD1Ev>
                command = command.substring(p+1);
 80a0f74:	f10a 0201 	add.w	r2, sl, #1
 80a0f78:	4641      	mov	r1, r8
 80a0f7a:	a80c      	add	r0, sp, #48	; 0x30
 80a0f7c:	f000 ff8a 	bl	80a1e94 <_ZNK6String9substringEj>
 80a0f80:	a90c      	add	r1, sp, #48	; 0x30
 80a0f82:	4640      	mov	r0, r8
 80a0f84:	f000 ff17 	bl	80a1db6 <_ZN6StringaSEOS_>
 80a0f88:	a80c      	add	r0, sp, #48	; 0x30
 80a0f8a:	f000 fe83 	bl	80a1c94 <_ZN6StringD1Ev>
                p=command.indexOf(" ");
 80a0f8e:	498d      	ldr	r1, [pc, #564]	; (80a11c4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2b8>)
 80a0f90:	a80c      	add	r0, sp, #48	; 0x30
 80a0f92:	f000 fec6 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0f96:	a90c      	add	r1, sp, #48	; 0x30
 80a0f98:	4640      	mov	r0, r8
 80a0f9a:	f000 ff4f 	bl	80a1e3c <_ZNK6String7indexOfERKS_>
 80a0f9e:	4682      	mov	sl, r0
 80a0fa0:	a80c      	add	r0, sp, #48	; 0x30
 80a0fa2:	f000 fe77 	bl	80a1c94 <_ZN6StringD1Ev>
 80a0fa6:	e007      	b.n	80a0fb8 <_ZN16CASARIA_MCP230179relayTalkE6String+0xac>
            }else{
                word = command;
 80a0fa8:	4641      	mov	r1, r8
 80a0faa:	a804      	add	r0, sp, #16
 80a0fac:	f000 fee9 	bl	80a1d82 <_ZN6StringaSERKS_>
                command = "";
 80a0fb0:	4985      	ldr	r1, [pc, #532]	; (80a11c8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2bc>)
 80a0fb2:	4640      	mov	r0, r8
 80a0fb4:	f000 ff07 	bl	80a1dc6 <_ZN6StringaSEPKc>
            }
            if(word.equalsIgnoreCase("on") || word.equalsIgnoreCase("activate")){
 80a0fb8:	4984      	ldr	r1, [pc, #528]	; (80a11cc <_ZN16CASARIA_MCP230179relayTalkE6String+0x2c0>)
 80a0fba:	a808      	add	r0, sp, #32
 80a0fbc:	f000 feb1 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0fc0:	a908      	add	r1, sp, #32
 80a0fc2:	a804      	add	r0, sp, #16
 80a0fc4:	f000 ff10 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a0fc8:	b980      	cbnz	r0, 80a0fec <_ZN16CASARIA_MCP230179relayTalkE6String+0xe0>
 80a0fca:	4981      	ldr	r1, [pc, #516]	; (80a11d0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2c4>)
 80a0fcc:	a80c      	add	r0, sp, #48	; 0x30
 80a0fce:	f000 fea8 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0fd2:	a90c      	add	r1, sp, #48	; 0x30
 80a0fd4:	a804      	add	r0, sp, #16
 80a0fd6:	f000 ff07 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a0fda:	f110 0b00 	adds.w	fp, r0, #0
 80a0fde:	a80c      	add	r0, sp, #48	; 0x30
 80a0fe0:	bf18      	it	ne
 80a0fe2:	f04f 0b01 	movne.w	fp, #1
 80a0fe6:	f000 fe55 	bl	80a1c94 <_ZN6StringD1Ev>
 80a0fea:	e001      	b.n	80a0ff0 <_ZN16CASARIA_MCP230179relayTalkE6String+0xe4>
 80a0fec:	f04f 0b01 	mov.w	fp, #1
 80a0ff0:	a808      	add	r0, sp, #32
 80a0ff2:	f000 fe4f 	bl	80a1c94 <_ZN6StringD1Ev>
 80a0ff6:	f1bb 0f00 	cmp.w	fp, #0
 80a0ffa:	d005      	beq.n	80a1008 <_ZN16CASARIA_MCP230179relayTalkE6String+0xfc>
                if(op == 0 || bank > 0) op=2;
 80a0ffc:	b11c      	cbz	r4, 80a1006 <_ZN16CASARIA_MCP230179relayTalkE6String+0xfa>
 80a0ffe:	2f00      	cmp	r7, #0
 80a1000:	bf18      	it	ne
 80a1002:	2402      	movne	r4, #2
 80a1004:	e000      	b.n	80a1008 <_ZN16CASARIA_MCP230179relayTalkE6String+0xfc>
 80a1006:	2402      	movs	r4, #2
            }
            if(word.equalsIgnoreCase("off") || word.equalsIgnoreCase("deactivate")){
 80a1008:	4972      	ldr	r1, [pc, #456]	; (80a11d4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2c8>)
 80a100a:	a808      	add	r0, sp, #32
 80a100c:	f000 fe89 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1010:	a908      	add	r1, sp, #32
 80a1012:	a804      	add	r0, sp, #16
 80a1014:	f000 fee8 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a1018:	b980      	cbnz	r0, 80a103c <_ZN16CASARIA_MCP230179relayTalkE6String+0x130>
 80a101a:	496f      	ldr	r1, [pc, #444]	; (80a11d8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2cc>)
 80a101c:	a80c      	add	r0, sp, #48	; 0x30
 80a101e:	f000 fe80 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1022:	a90c      	add	r1, sp, #48	; 0x30
 80a1024:	a804      	add	r0, sp, #16
 80a1026:	f000 fedf 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a102a:	f110 0b00 	adds.w	fp, r0, #0
 80a102e:	a80c      	add	r0, sp, #48	; 0x30
 80a1030:	bf18      	it	ne
 80a1032:	f04f 0b01 	movne.w	fp, #1
 80a1036:	f000 fe2d 	bl	80a1c94 <_ZN6StringD1Ev>
 80a103a:	e001      	b.n	80a1040 <_ZN16CASARIA_MCP230179relayTalkE6String+0x134>
 80a103c:	f04f 0b01 	mov.w	fp, #1
 80a1040:	a808      	add	r0, sp, #32
 80a1042:	f000 fe27 	bl	80a1c94 <_ZN6StringD1Ev>
                op=1;
 80a1046:	f1bb 0f00 	cmp.w	fp, #0
            }
            if(word.equalsIgnoreCase("toggle") || word.equalsIgnoreCase("flip")){
 80a104a:	4964      	ldr	r1, [pc, #400]	; (80a11dc <_ZN16CASARIA_MCP230179relayTalkE6String+0x2d0>)
 80a104c:	a808      	add	r0, sp, #32
            }
            if(word.equalsIgnoreCase("on") || word.equalsIgnoreCase("activate")){
                if(op == 0 || bank > 0) op=2;
            }
            if(word.equalsIgnoreCase("off") || word.equalsIgnoreCase("deactivate")){
                op=1;
 80a104e:	bf18      	it	ne
 80a1050:	2401      	movne	r4, #1
            }
            if(word.equalsIgnoreCase("toggle") || word.equalsIgnoreCase("flip")){
 80a1052:	f000 fe66 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1056:	a908      	add	r1, sp, #32
 80a1058:	a804      	add	r0, sp, #16
 80a105a:	f000 fec5 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a105e:	b980      	cbnz	r0, 80a1082 <_ZN16CASARIA_MCP230179relayTalkE6String+0x176>
 80a1060:	495f      	ldr	r1, [pc, #380]	; (80a11e0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2d4>)
 80a1062:	a80c      	add	r0, sp, #48	; 0x30
 80a1064:	f000 fe5d 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1068:	a90c      	add	r1, sp, #48	; 0x30
 80a106a:	a804      	add	r0, sp, #16
 80a106c:	f000 febc 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a1070:	f110 0b00 	adds.w	fp, r0, #0
 80a1074:	a80c      	add	r0, sp, #48	; 0x30
 80a1076:	bf18      	it	ne
 80a1078:	f04f 0b01 	movne.w	fp, #1
 80a107c:	f000 fe0a 	bl	80a1c94 <_ZN6StringD1Ev>
 80a1080:	e001      	b.n	80a1086 <_ZN16CASARIA_MCP230179relayTalkE6String+0x17a>
 80a1082:	f04f 0b01 	mov.w	fp, #1
 80a1086:	a808      	add	r0, sp, #32
 80a1088:	f000 fe04 	bl	80a1c94 <_ZN6StringD1Ev>
                op=3;
            }
            if(relay_next){
 80a108c:	9b00      	ldr	r3, [sp, #0]
            }
            if(word.equalsIgnoreCase("off") || word.equalsIgnoreCase("deactivate")){
                op=1;
            }
            if(word.equalsIgnoreCase("toggle") || word.equalsIgnoreCase("flip")){
                op=3;
 80a108e:	f1bb 0f00 	cmp.w	fp, #0
 80a1092:	bf18      	it	ne
 80a1094:	2403      	movne	r4, #3
            }
            if(relay_next){
 80a1096:	b14b      	cbz	r3, 80a10ac <_ZN16CASARIA_MCP230179relayTalkE6String+0x1a0>
                int test = word.toInt();
 80a1098:	a804      	add	r0, sp, #16
 80a109a:	f000 ff02 	bl	80a1ea2 <_ZNK6String5toIntEv>
                if(test > 0){
 80a109e:	2800      	cmp	r0, #0
 80a10a0:	bfc8      	it	gt
 80a10a2:	4681      	movgt	r9, r0
 80a10a4:	9b00      	ldr	r3, [sp, #0]
 80a10a6:	bfc8      	it	gt
 80a10a8:	2300      	movgt	r3, #0
 80a10aa:	9300      	str	r3, [sp, #0]
                    relay = test;
                    relay_next = false;
                }
            }
            if(bank_next){
 80a10ac:	b136      	cbz	r6, 80a10bc <_ZN16CASARIA_MCP230179relayTalkE6String+0x1b0>
                int test = word.toInt();
 80a10ae:	a804      	add	r0, sp, #16
 80a10b0:	f000 fef7 	bl	80a1ea2 <_ZNK6String5toIntEv>
                if(test > 0){
 80a10b4:	2800      	cmp	r0, #0
 80a10b6:	bfc4      	itt	gt
 80a10b8:	4607      	movgt	r7, r0
 80a10ba:	2600      	movgt	r6, #0
                    bank = test;
                    bank_next = false;
                }
            }
            if(word.equalsIgnoreCase("relay") || word.equalsIgnoreCase("output")){
 80a10bc:	4949      	ldr	r1, [pc, #292]	; (80a11e4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2d8>)
 80a10be:	a808      	add	r0, sp, #32
 80a10c0:	f000 fe2f 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a10c4:	a908      	add	r1, sp, #32
 80a10c6:	a804      	add	r0, sp, #16
 80a10c8:	f000 fe8e 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a10cc:	b980      	cbnz	r0, 80a10f0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x1e4>
 80a10ce:	4946      	ldr	r1, [pc, #280]	; (80a11e8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2dc>)
 80a10d0:	a80c      	add	r0, sp, #48	; 0x30
 80a10d2:	f000 fe26 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a10d6:	a90c      	add	r1, sp, #48	; 0x30
 80a10d8:	a804      	add	r0, sp, #16
 80a10da:	f000 fe85 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a10de:	f110 0b00 	adds.w	fp, r0, #0
 80a10e2:	a80c      	add	r0, sp, #48	; 0x30
 80a10e4:	bf18      	it	ne
 80a10e6:	f04f 0b01 	movne.w	fp, #1
 80a10ea:	f000 fdd3 	bl	80a1c94 <_ZN6StringD1Ev>
 80a10ee:	e001      	b.n	80a10f4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x1e8>
 80a10f0:	f04f 0b01 	mov.w	fp, #1
 80a10f4:	a808      	add	r0, sp, #32
 80a10f6:	f000 fdcd 	bl	80a1c94 <_ZN6StringD1Ev>
                relay_next = true;
 80a10fa:	9b00      	ldr	r3, [sp, #0]
 80a10fc:	f1bb 0f00 	cmp.w	fp, #0
 80a1100:	bf18      	it	ne
 80a1102:	2301      	movne	r3, #1
            }
            if(word.equalsIgnoreCase("bank")){
 80a1104:	4939      	ldr	r1, [pc, #228]	; (80a11ec <_ZN16CASARIA_MCP230179relayTalkE6String+0x2e0>)
 80a1106:	a80c      	add	r0, sp, #48	; 0x30
                    bank = test;
                    bank_next = false;
                }
            }
            if(word.equalsIgnoreCase("relay") || word.equalsIgnoreCase("output")){
                relay_next = true;
 80a1108:	9300      	str	r3, [sp, #0]
            }
            if(word.equalsIgnoreCase("bank")){
 80a110a:	f000 fe0a 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a110e:	a90c      	add	r1, sp, #48	; 0x30
 80a1110:	a804      	add	r0, sp, #16
 80a1112:	f000 fe69 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a1116:	4683      	mov	fp, r0
 80a1118:	a80c      	add	r0, sp, #48	; 0x30
 80a111a:	f000 fdbb 	bl	80a1c94 <_ZN6StringD1Ev>
                bank_next = true;
 80a111e:	f1bb 0f00 	cmp.w	fp, #0
            }
            if(word.equalsIgnoreCase("all")){
 80a1122:	4933      	ldr	r1, [pc, #204]	; (80a11f0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2e4>)
 80a1124:	a80c      	add	r0, sp, #48	; 0x30
            }
            if(word.equalsIgnoreCase("relay") || word.equalsIgnoreCase("output")){
                relay_next = true;
            }
            if(word.equalsIgnoreCase("bank")){
                bank_next = true;
 80a1126:	bf18      	it	ne
 80a1128:	2601      	movne	r6, #1
            }
            if(word.equalsIgnoreCase("all")){
 80a112a:	f000 fdfa 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
 80a112e:	a90c      	add	r1, sp, #48	; 0x30
 80a1130:	a804      	add	r0, sp, #16
 80a1132:	f000 fe59 	bl	80a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a1136:	4683      	mov	fp, r0
 80a1138:	a80c      	add	r0, sp, #48	; 0x30
 80a113a:	f000 fdab 	bl	80a1c94 <_ZN6StringD1Ev>
                all = true;
 80a113e:	9b01      	ldr	r3, [sp, #4]
 80a1140:	f1bb 0f00 	cmp.w	fp, #0
 80a1144:	bf18      	it	ne
 80a1146:	2301      	movne	r3, #1
 80a1148:	9301      	str	r3, [sp, #4]
 80a114a:	e6fe      	b.n	80a0f4a <_ZN16CASARIA_MCP230179relayTalkE6String+0x3e>
            }
            
        }
    }
    if(all){
 80a114c:	9b01      	ldr	r3, [sp, #4]
 80a114e:	2b00      	cmp	r3, #0
 80a1150:	d033      	beq.n	80a11ba <_ZN16CASARIA_MCP230179relayTalkE6String+0x2ae>
        if(bank < 2){
 80a1152:	2f01      	cmp	r7, #1
 80a1154:	dd07      	ble.n	80a1166 <_ZN16CASARIA_MCP230179relayTalkE6String+0x25a>
            else if(op == 3) obyte = ~bankOneStatus;
            setBankOneStatus(obyte);
        }
        if(bank != 1){
            int obyte;
            if(op == 1) obyte = bankTwoStatus | (~outputMap[0] & 255);
 80a1156:	2c01      	cmp	r4, #1
 80a1158:	d11f      	bne.n	80a119a <_ZN16CASARIA_MCP230179relayTalkE6String+0x28e>
 80a115a:	68eb      	ldr	r3, [r5, #12]
 80a115c:	686a      	ldr	r2, [r5, #4]
 80a115e:	43db      	mvns	r3, r3
 80a1160:	b2db      	uxtb	r3, r3
 80a1162:	4313      	orrs	r3, r2
 80a1164:	e023      	b.n	80a11ae <_ZN16CASARIA_MCP230179relayTalkE6String+0x2a2>
        }
    }
    if(all){
        if(bank < 2){
            int obyte;
            if(op == 1) obyte = bankOneStatus | (~outputMap[0] & 255);
 80a1166:	2c01      	cmp	r4, #1
 80a1168:	d105      	bne.n	80a1176 <_ZN16CASARIA_MCP230179relayTalkE6String+0x26a>
 80a116a:	68eb      	ldr	r3, [r5, #12]
 80a116c:	682a      	ldr	r2, [r5, #0]
 80a116e:	43db      	mvns	r3, r3
 80a1170:	b2db      	uxtb	r3, r3
 80a1172:	4313      	orrs	r3, r2
 80a1174:	e009      	b.n	80a118a <_ZN16CASARIA_MCP230179relayTalkE6String+0x27e>
            else if(op == 2) obyte = bankOneStatus & outputMap[0];
 80a1176:	2c02      	cmp	r4, #2
 80a1178:	d103      	bne.n	80a1182 <_ZN16CASARIA_MCP230179relayTalkE6String+0x276>
 80a117a:	682a      	ldr	r2, [r5, #0]
 80a117c:	68eb      	ldr	r3, [r5, #12]
 80a117e:	4013      	ands	r3, r2
 80a1180:	e003      	b.n	80a118a <_ZN16CASARIA_MCP230179relayTalkE6String+0x27e>
            else if(op == 3) obyte = ~bankOneStatus;
 80a1182:	2c03      	cmp	r4, #3
 80a1184:	d102      	bne.n	80a118c <_ZN16CASARIA_MCP230179relayTalkE6String+0x280>
 80a1186:	682b      	ldr	r3, [r5, #0]
 80a1188:	43db      	mvns	r3, r3
 80a118a:	9302      	str	r3, [sp, #8]
            setBankOneStatus(obyte);
 80a118c:	9902      	ldr	r1, [sp, #8]
 80a118e:	4628      	mov	r0, r5
 80a1190:	f7ff fe4a 	bl	80a0e28 <_ZN16CASARIA_MCP2301716setBankOneStatusEi>
        }
        if(bank != 1){
 80a1194:	2f01      	cmp	r7, #1
 80a1196:	d034      	beq.n	80a1202 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2f6>
 80a1198:	e7dd      	b.n	80a1156 <_ZN16CASARIA_MCP230179relayTalkE6String+0x24a>
            int obyte;
            if(op == 1) obyte = bankTwoStatus | (~outputMap[0] & 255);
            else if(op == 2) obyte = bankTwoStatus & outputMap[0];
 80a119a:	2c02      	cmp	r4, #2
 80a119c:	d103      	bne.n	80a11a6 <_ZN16CASARIA_MCP230179relayTalkE6String+0x29a>
 80a119e:	686a      	ldr	r2, [r5, #4]
 80a11a0:	68eb      	ldr	r3, [r5, #12]
 80a11a2:	4013      	ands	r3, r2
 80a11a4:	e003      	b.n	80a11ae <_ZN16CASARIA_MCP230179relayTalkE6String+0x2a2>
            else if(op == 3) obyte = ~bankTwoStatus;
 80a11a6:	2c03      	cmp	r4, #3
 80a11a8:	d102      	bne.n	80a11b0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2a4>
 80a11aa:	686b      	ldr	r3, [r5, #4]
 80a11ac:	43db      	mvns	r3, r3
 80a11ae:	9303      	str	r3, [sp, #12]
            setBankTwoStatus(obyte);
 80a11b0:	9903      	ldr	r1, [sp, #12]
 80a11b2:	4628      	mov	r0, r5
 80a11b4:	f7ff fe43 	bl	80a0e3e <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>
 80a11b8:	e023      	b.n	80a1202 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2f6>
        }
    }else{
        if(bank > 0) relay+=((bank-1)*8);
 80a11ba:	b1ef      	cbz	r7, 80a11f8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2ec>
 80a11bc:	3f01      	subs	r7, #1
 80a11be:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 80a11c2:	e019      	b.n	80a11f8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2ec>
 80a11c4:	080a4a05 	.word	0x080a4a05
 80a11c8:	080a49f6 	.word	0x080a49f6
 80a11cc:	080a486f 	.word	0x080a486f
 80a11d0:	080a4878 	.word	0x080a4878
 80a11d4:	080a4872 	.word	0x080a4872
 80a11d8:	080a4876 	.word	0x080a4876
 80a11dc:	080a4881 	.word	0x080a4881
 80a11e0:	080a4888 	.word	0x080a4888
 80a11e4:	080a488d 	.word	0x080a488d
 80a11e8:	080a4893 	.word	0x080a4893
 80a11ec:	080a489a 	.word	0x080a489a
 80a11f0:	080a489f 	.word	0x080a489f
}

int CASARIA_MCP23017::relayTalk(String command){
    int bank=0;
    int relay=0;
    int op=0;
 80a11f4:	2400      	movs	r4, #0
    return ret;
}

int CASARIA_MCP23017::relayTalk(String command){
    int bank=0;
    int relay=0;
 80a11f6:	46a1      	mov	r9, r4
            else if(op == 3) obyte = ~bankTwoStatus;
            setBankTwoStatus(obyte);
        }
    }else{
        if(bank > 0) relay+=((bank-1)*8);
        relayOp(relay, op);
 80a11f8:	4622      	mov	r2, r4
 80a11fa:	4649      	mov	r1, r9
 80a11fc:	4628      	mov	r0, r5
 80a11fe:	f7ff fe29 	bl	80a0e54 <_ZN16CASARIA_MCP230177relayOpEii>
    int op=0;
    int p=command.indexOf(" ");
    bool all=false;
    bool relay_next=false;
    bool bank_next=false;
    String word;
 80a1202:	a804      	add	r0, sp, #16
 80a1204:	f000 fd46 	bl	80a1c94 <_ZN6StringD1Ev>
    }else{
        if(bank > 0) relay+=((bank-1)*8);
        relayOp(relay, op);
    }
    return 1;
}
 80a1208:	2001      	movs	r0, #1
 80a120a:	b011      	add	sp, #68	; 0x44
 80a120c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1210 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev>:
 80a1210:	4b02      	ldr	r3, [pc, #8]	; (80a121c <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev+0xc>)
 80a1212:	2200      	movs	r2, #0
 80a1214:	701a      	strb	r2, [r3, #0]
 80a1216:	f000 baff 	b.w	80a1818 <HAL_Pin_Map>
 80a121a:	bf00      	nop
 80a121c:	20000498 	.word	0x20000498

080a1220 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a1220:	b570      	push	{r4, r5, r6, lr}
 80a1222:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
 80a1224:	2300      	movs	r3, #0
 80a1226:	6063      	str	r3, [r4, #4]
 80a1228:	60a3      	str	r3, [r4, #8]
 80a122a:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
 80a122c:	6123      	str	r3, [r4, #16]
 80a122e:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
 80a1230:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
 80a1232:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
 80a1234:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
 80a1236:	2014      	movs	r0, #20
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a1238:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
 80a123a:	f7fe ff2e 	bl	80a009a <_Znwj>
 80a123e:	4605      	mov	r5, r0
 80a1240:	b110      	cbz	r0, 80a1248 <_ZN7DS18B20C1Etb+0x28>
 80a1242:	4631      	mov	r1, r6
 80a1244:	f7ff fba5 	bl	80a0992 <_ZN7OneWireC1Et>
 80a1248:	6025      	str	r5, [r4, #0]
}
 80a124a:	4620      	mov	r0, r4
 80a124c:	bd70      	pop	{r4, r5, r6, pc}

080a124e <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a124e:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a1250:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a1254:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a1256:	6800      	ldr	r0, [r0, #0]
 80a1258:	4629      	mov	r1, r5
 80a125a:	f7ff fc90 	bl	80a0b7e <_ZN7OneWire6searchEPh>
 80a125e:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a1260:	bf17      	itett	ne
 80a1262:	682b      	ldrne	r3, [r5, #0]
  else           memset(addr, 0, 8);
 80a1264:	6023      	streq	r3, [r4, #0]
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
  if (isSuccess) memcpy(addr, _addr, 8);
 80a1266:	6023      	strne	r3, [r4, #0]
 80a1268:	686b      	ldrne	r3, [r5, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a126a:	bf18      	it	ne
 80a126c:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
 80a126e:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a1270:	bf08      	it	eq
 80a1272:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
 80a1274:	bd38      	pop	{r3, r4, r5, pc}

080a1276 <_ZN7DS18B20D1Ev>:

DS18B20::~DS18B20()
 80a1276:	b510      	push	{r4, lr}
 80a1278:	4604      	mov	r4, r0
{
  delete(ds);
 80a127a:	6800      	ldr	r0, [r0, #0]
 80a127c:	f7fe ff0f 	bl	80a009e <_ZdlPv>
}
 80a1280:	4620      	mov	r0, r4
 80a1282:	bd10      	pop	{r4, pc}

080a1284 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a1284:	6800      	ldr	r0, [r0, #0]
 80a1286:	f7ff bc6e 	b.w	80a0b66 <_ZN7OneWire12reset_searchEv>
	...

080a128c <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a128c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a128e:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a1290:	4604      	mov	r4, r0
 80a1292:	460d      	mov	r5, r1
 80a1294:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a1296:	b91b      	cbnz	r3, 80a12a0 <_ZN7DS18B2014getTemperatureEPhb+0x14>
 80a1298:	780b      	ldrb	r3, [r1, #0]
 80a129a:	2b00      	cmp	r3, #0
 80a129c:	f000 80a4 	beq.w	80a13e8 <_ZN7DS18B2014getTemperatureEPhb+0x15c>

  ds->reset();
 80a12a0:	6820      	ldr	r0, [r4, #0]
 80a12a2:	f7ff fb83 	bl	80a09ac <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a12a6:	7ea3      	ldrb	r3, [r4, #26]
 80a12a8:	b123      	cbz	r3, 80a12b4 <_ZN7DS18B2014getTemperatureEPhb+0x28>
 80a12aa:	b91e      	cbnz	r6, 80a12b4 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
 80a12ac:	6820      	ldr	r0, [r4, #0]
 80a12ae:	f7ff fc56 	bl	80a0b5e <_ZN7OneWire4skipEv>
 80a12b2:	e003      	b.n	80a12bc <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
 80a12b4:	4629      	mov	r1, r5
 80a12b6:	6820      	ldr	r0, [r4, #0]
 80a12b8:	f7ff fc3f 	bl	80a0b3a <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a12bc:	2200      	movs	r2, #0
 80a12be:	2144      	movs	r1, #68	; 0x44
 80a12c0:	6820      	ldr	r0, [r4, #0]
 80a12c2:	f7ff fc02 	bl	80a0aca <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
 80a12c6:	f240 20ee 	movw	r0, #750	; 0x2ee
 80a12ca:	f000 ff6d 	bl	80a21a8 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
 80a12ce:	6820      	ldr	r0, [r4, #0]
 80a12d0:	f7ff fb6c 	bl	80a09ac <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a12d4:	7ea3      	ldrb	r3, [r4, #26]
 80a12d6:	b123      	cbz	r3, 80a12e2 <_ZN7DS18B2014getTemperatureEPhb+0x56>
 80a12d8:	b91e      	cbnz	r6, 80a12e2 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
 80a12da:	6820      	ldr	r0, [r4, #0]
 80a12dc:	f7ff fc3f 	bl	80a0b5e <_ZN7OneWire4skipEv>
 80a12e0:	e003      	b.n	80a12ea <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
 80a12e2:	4629      	mov	r1, r5
 80a12e4:	6820      	ldr	r0, [r4, #0]
 80a12e6:	f7ff fc28 	bl	80a0b3a <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
 80a12ea:	2200      	movs	r2, #0
 80a12ec:	21be      	movs	r1, #190	; 0xbe
 80a12ee:	6820      	ldr	r0, [r4, #0]
 80a12f0:	f7ff fbeb 	bl	80a0aca <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a12f4:	782b      	ldrb	r3, [r5, #0]
 80a12f6:	2b26      	cmp	r3, #38	; 0x26
 80a12f8:	d104      	bne.n	80a1304 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a12fa:	2200      	movs	r2, #0
 80a12fc:	4611      	mov	r1, r2
 80a12fe:	6820      	ldr	r0, [r4, #0]
 80a1300:	f7ff fbe3 	bl	80a0aca <_ZN7OneWire5writeEhh>
 80a1304:	1ce6      	adds	r6, r4, #3
 80a1306:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
 80a130a:	6820      	ldr	r0, [r4, #0]
 80a130c:	f7ff fc05 	bl	80a0b1a <_ZN7OneWire4readEv>
 80a1310:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
 80a1314:	42be      	cmp	r6, r7
 80a1316:	d1f8      	bne.n	80a130a <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a1318:	2108      	movs	r1, #8
 80a131a:	1d20      	adds	r0, r4, #4
 80a131c:	f7ff fcaa 	bl	80a0c74 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a1320:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a1322:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
 80a1324:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
 80a1326:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a1328:	d15e      	bne.n	80a13e8 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a132a:	782b      	ldrb	r3, [r5, #0]
 80a132c:	2b22      	cmp	r3, #34	; 0x22
 80a132e:	d01b      	beq.n	80a1368 <_ZN7DS18B2014getTemperatureEPhb+0xdc>
 80a1330:	d816      	bhi.n	80a1360 <_ZN7DS18B2014getTemperatureEPhb+0xd4>
 80a1332:	2b10      	cmp	r3, #16
 80a1334:	d158      	bne.n	80a13e8 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a1336:	7ae3      	ldrb	r3, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a1338:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a133a:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a133c:	bf08      	it	eq
 80a133e:	7aa3      	ldrbeq	r3, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a1340:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a1344:	bf02      	ittt	eq
 80a1346:	f020 000f 	biceq.w	r0, r0, #15
 80a134a:	f1c3 030c 	rsbeq	r3, r3, #12
 80a134e:	18c0      	addeq	r0, r0, r3
 80a1350:	b200      	sxth	r0, r0
      celsius = (float)raw / 16.0;
 80a1352:	f002 ff87 	bl	80a4264 <__aeabi_i2f>
 80a1356:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a135a:	f002 ffd7 	bl	80a430c <__aeabi_fmul>
      break;
 80a135e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a1360:	2b26      	cmp	r3, #38	; 0x26
 80a1362:	d01f      	beq.n	80a13a4 <_ZN7DS18B2014getTemperatureEPhb+0x118>
 80a1364:	2b28      	cmp	r3, #40	; 0x28
 80a1366:	d13f      	bne.n	80a13e8 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
 80a1368:	7a22      	ldrb	r2, [r4, #8]
 80a136a:	7923      	ldrb	r3, [r4, #4]
 80a136c:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a1370:	2a20      	cmp	r2, #32
 80a1372:	d005      	beq.n	80a1380 <_ZN7DS18B2014getTemperatureEPhb+0xf4>
 80a1374:	2a40      	cmp	r2, #64	; 0x40
 80a1376:	d006      	beq.n	80a1386 <_ZN7DS18B2014getTemperatureEPhb+0xfa>
 80a1378:	b942      	cbnz	r2, 80a138c <_ZN7DS18B2014getTemperatureEPhb+0x100>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a137a:	f023 0307 	bic.w	r3, r3, #7
 80a137e:	e004      	b.n	80a138a <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a1380:	f023 0303 	bic.w	r3, r3, #3
 80a1384:	e001      	b.n	80a138a <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a1386:	f023 0301 	bic.w	r3, r3, #1
 80a138a:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a138c:	7923      	ldrb	r3, [r4, #4]
 80a138e:	7960      	ldrb	r0, [r4, #5]
 80a1390:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a1394:	b200      	sxth	r0, r0
 80a1396:	f002 fafd 	bl	80a3994 <__aeabi_i2d>
 80a139a:	2200      	movs	r2, #0
 80a139c:	4b13      	ldr	r3, [pc, #76]	; (80a13ec <_ZN7DS18B2014getTemperatureEPhb+0x160>)
 80a139e:	f002 fb5f 	bl	80a3a60 <__aeabi_dmul>
 80a13a2:	e01e      	b.n	80a13e2 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a13a4:	79a5      	ldrb	r5, [r4, #6]
 80a13a6:	4628      	mov	r0, r5
 80a13a8:	f002 faf4 	bl	80a3994 <__aeabi_i2d>
 80a13ac:	4606      	mov	r6, r0
 80a13ae:	7960      	ldrb	r0, [r4, #5]
 80a13b0:	460f      	mov	r7, r1
 80a13b2:	08c0      	lsrs	r0, r0, #3
 80a13b4:	f002 ff56 	bl	80a4264 <__aeabi_i2f>
 80a13b8:	f002 fafe 	bl	80a39b8 <__aeabi_f2d>
 80a13bc:	2200      	movs	r2, #0
 80a13be:	4b0c      	ldr	r3, [pc, #48]	; (80a13f0 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
 80a13c0:	f002 fb4e 	bl	80a3a60 <__aeabi_dmul>
 80a13c4:	460b      	mov	r3, r1
 80a13c6:	0629      	lsls	r1, r5, #24
 80a13c8:	4602      	mov	r2, r0
 80a13ca:	bf48      	it	mi
 80a13cc:	4909      	ldrmi	r1, [pc, #36]	; (80a13f4 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a13ce:	f04f 0000 	mov.w	r0, #0
 80a13d2:	bf58      	it	pl
 80a13d4:	4908      	ldrpl	r1, [pc, #32]	; (80a13f8 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a13d6:	f002 fb43 	bl	80a3a60 <__aeabi_dmul>
 80a13da:	4632      	mov	r2, r6
 80a13dc:	463b      	mov	r3, r7
 80a13de:	f002 f98d 	bl	80a36fc <__adddf3>
 80a13e2:	f002 fe35 	bl	80a4050 <__aeabi_d2f>
      break;
 80a13e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
 80a13e8:	4804      	ldr	r0, [pc, #16]	; (80a13fc <_ZN7DS18B2014getTemperatureEPhb+0x170>)
      break;                            
  }
  
  return celsius;
}
 80a13ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a13ec:	3fb00000 	.word	0x3fb00000
 80a13f0:	3fa00000 	.word	0x3fa00000
 80a13f4:	bff00000 	.word	0xbff00000
 80a13f8:	3ff00000 	.word	0x3ff00000
 80a13fc:	7fc00000 	.word	0x7fc00000

080a1400 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a1400:	7e02      	ldrb	r2, [r0, #24]
 80a1402:	7e40      	ldrb	r0, [r0, #25]
}
 80a1404:	1a13      	subs	r3, r2, r0
 80a1406:	4258      	negs	r0, r3
 80a1408:	4158      	adcs	r0, r3
 80a140a:	4770      	bx	lr

080a140c <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
 80a140c:	f000 ba04 	b.w	80a1818 <HAL_Pin_Map>

080a1410 <_ZN15CASARIA_MCP3428C1Eh>:
/**************************************************************************/
/*
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
 80a1410:	b538      	push	{r3, r4, r5, lr}
 80a1412:	460c      	mov	r4, r1
 80a1414:	4605      	mov	r5, r0
{
    Wire.begin();
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a1416:	f044 0468 	orr.w	r4, r4, #104	; 0x68
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
{
    Wire.begin();
 80a141a:	f001 fcdb 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a141e:	f001 fbe5 	bl	80a2bec <_ZN7TwoWire5beginEv>
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a1422:	73ac      	strb	r4, [r5, #14]
}
 80a1424:	4628      	mov	r0, r5
 80a1426:	bd38      	pop	{r3, r4, r5, pc}

080a1428 <_ZN15CASARIA_MCP3428D1Ev>:
CASARIA_MCP3428::~CASARIA_MCP3428()
{
}
 80a1428:	4770      	bx	lr
 80a142a:	0000      	movs	r0, r0
 80a142c:	0000      	movs	r0, r0
	...

080a1430 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>:
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1430:	b538      	push	{r3, r4, r5, lr}
 80a1432:	4604      	mov	r4, r0
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1434:	f002 05fd 	and.w	r5, r2, #253	; 0xfd
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1438:	f89d 0010 	ldrb.w	r0, [sp, #16]
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a143c:	2d0c      	cmp	r5, #12
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
    GAIN = PGA;
 80a143e:	7260      	strb	r0, [r4, #9]

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1440:	d002      	beq.n	80a1448 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x18>
 80a1442:	2a10      	cmp	r2, #16
    {
        SPS = 12;
 80a1444:	bf18      	it	ne
 80a1446:	220c      	movne	r2, #12
    }
    else
    {
        SPS = resolution;
 80a1448:	7122      	strb	r2, [r4, #4]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a144a:	7922      	ldrb	r2, [r4, #4]
 80a144c:	3901      	subs	r1, #1
    else
    {
        SPS = resolution;
    }

    MODE = mode;
 80a144e:	7163      	strb	r3, [r4, #5]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a1450:	3a0c      	subs	r2, #12
 80a1452:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80a1456:	2102      	movs	r1, #2
 80a1458:	fb92 f2f1 	sdiv	r2, r2, r1
 80a145c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80a1460:	408b      	lsls	r3, r1
 80a1462:	7223      	strb	r3, [r4, #8]
    // Setting the PGA Gain
    config|=int(log(PGA)/log(2));
 80a1464:	f002 fa86 	bl	80a3974 <__aeabi_ui2d>
 80a1468:	f001 fec6 	bl	80a31f8 <log>
 80a146c:	a30e      	add	r3, pc, #56	; (adr r3, 80a14a8 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x78>)
 80a146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1472:	f002 fc1f 	bl	80a3cb4 <__aeabi_ddiv>
 80a1476:	f002 fda3 	bl	80a3fc0 <__aeabi_d2iz>
 80a147a:	7a23      	ldrb	r3, [r4, #8]
 80a147c:	4318      	orrs	r0, r3
 80a147e:	7220      	strb	r0, [r4, #8]
    
    // Start a conversion using configuration settings
    Wire.beginTransmission(devAddr);
 80a1480:	f001 fca8 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a1484:	7ba1      	ldrb	r1, [r4, #14]
 80a1486:	f001 fbc8 	bl	80a2c1a <_ZN7TwoWire17beginTransmissionEh>
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
 80a148a:	f001 fca3 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a148e:	7a21      	ldrb	r1, [r4, #8]
 80a1490:	6803      	ldr	r3, [r0, #0]
 80a1492:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a1496:	689b      	ldr	r3, [r3, #8]
 80a1498:	7221      	strb	r1, [r4, #8]
 80a149a:	4798      	blx	r3
    Wire.endTransmission();
 80a149c:	f001 fc9a 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
}
 80a14a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.beginTransmission(devAddr);
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
    Wire.endTransmission();
 80a14a4:	f001 bbc4 	b.w	80a2c30 <_ZN7TwoWire15endTransmissionEv>
 80a14a8:	fefa39ef 	.word	0xfefa39ef
 80a14ac:	3fe62e42 	.word	0x3fe62e42

080a14b0 <_ZN15CASARIA_MCP342815CheckConversionEv>:
/*
        Check the adc conversion
*/
/**************************************************************************/
bool CASARIA_MCP3428::CheckConversion()
{
 80a14b0:	b570      	push	{r4, r5, r6, lr}
 80a14b2:	4604      	mov	r4, r0
    uint8_t i = 0;
    no_of_bytes = 3;
 80a14b4:	2303      	movs	r3, #3
 80a14b6:	7283      	strb	r3, [r0, #10]
    Wire.requestFrom(devAddr, no_of_bytes);
 80a14b8:	f001 fc8c 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a14bc:	7aa2      	ldrb	r2, [r4, #10]
 80a14be:	7ba1      	ldrb	r1, [r4, #14]
 80a14c0:	f001 fba3 	bl	80a2c0a <_ZN7TwoWire11requestFromEhh>
 80a14c4:	2500      	movs	r5, #0

    while(Wire.available())
 80a14c6:	f001 fc85 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a14ca:	6803      	ldr	r3, [r0, #0]
 80a14cc:	1c6e      	adds	r6, r5, #1
 80a14ce:	691b      	ldr	r3, [r3, #16]
 80a14d0:	4798      	blx	r3
 80a14d2:	b170      	cbz	r0, 80a14f2 <_ZN15CASARIA_MCP342815CheckConversionEv+0x42>
    {   data[i++] = Wire.read();
 80a14d4:	f001 fc7e 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a14d8:	6803      	ldr	r3, [r0, #0]
 80a14da:	b2ed      	uxtb	r5, r5
 80a14dc:	695b      	ldr	r3, [r3, #20]
 80a14de:	4798      	blx	r3
 80a14e0:	4425      	add	r5, r4
 80a14e2:	72e8      	strb	r0, [r5, #11]

        testvar = data[no_of_bytes-1] >> 7;
 80a14e4:	7aa3      	ldrb	r3, [r4, #10]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a14e6:	4635      	mov	r5, r6
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
 80a14e8:	4423      	add	r3, r4
 80a14ea:	7a9b      	ldrb	r3, [r3, #10]
 80a14ec:	11db      	asrs	r3, r3, #7
 80a14ee:	71e3      	strb	r3, [r4, #7]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a14f0:	e7e9      	b.n	80a14c6 <_ZN15CASARIA_MCP342815CheckConversionEv+0x16>
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
    }
    return testvar;
 80a14f2:	79e0      	ldrb	r0, [r4, #7]
}
 80a14f4:	3000      	adds	r0, #0
 80a14f6:	bf18      	it	ne
 80a14f8:	2001      	movne	r0, #1
 80a14fa:	bd70      	pop	{r4, r5, r6, pc}

080a14fc <_ZN15CASARIA_MCP34287readADCEv>:
        Where:
        N = Resolution, which is programmed in the Configuration Register: 12, 14, or 16
*/
/**************************************************************************/
long CASARIA_MCP3428::readADC()
{
 80a14fc:	b510      	push	{r4, lr}
 80a14fe:	4604      	mov	r4, r0

    raw_adc = 0;
 80a1500:	2300      	movs	r3, #0
 80a1502:	6003      	str	r3, [r0, #0]

    while(CheckConversion() == 1);
 80a1504:	4620      	mov	r0, r4
 80a1506:	f7ff ffd3 	bl	80a14b0 <_ZN15CASARIA_MCP342815CheckConversionEv>
 80a150a:	2800      	cmp	r0, #0
 80a150c:	d1fa      	bne.n	80a1504 <_ZN15CASARIA_MCP34287readADCEv+0x8>

    switch (SPS)
 80a150e:	7923      	ldrb	r3, [r4, #4]
 80a1510:	2b0e      	cmp	r3, #14
 80a1512:	d00f      	beq.n	80a1534 <_ZN15CASARIA_MCP34287readADCEv+0x38>
 80a1514:	2b10      	cmp	r3, #16
 80a1516:	d019      	beq.n	80a154c <_ZN15CASARIA_MCP34287readADCEv+0x50>
 80a1518:	2b0c      	cmp	r3, #12
 80a151a:	d121      	bne.n	80a1560 <_ZN15CASARIA_MCP34287readADCEv+0x64>
  
        case 12:
                raw_adc = data[0];
                raw_adc &= 0b00001111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a151c:	7ae3      	ldrb	r3, [r4, #11]
 80a151e:	f003 020f 	and.w	r2, r3, #15
 80a1522:	7b23      	ldrb	r3, [r4, #12]
 80a1524:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 2047)
 80a1528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
                {
                    raw_adc = raw_adc - 4096;
 80a152c:	bfa8      	it	ge
 80a152e:	f5a3 5380 	subge.w	r3, r3, #4096	; 0x1000
 80a1532:	e014      	b.n	80a155e <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 14:
                raw_adc = data[0];
                raw_adc &= 0b00111111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1534:	7ae3      	ldrb	r3, [r4, #11]
 80a1536:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80a153a:	7b23      	ldrb	r3, [r4, #12]
 80a153c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 8191)
 80a1540:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
                {
                    raw_adc = raw_adc - 16384;
 80a1544:	bfa8      	it	ge
 80a1546:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 80a154a:	e008      	b.n	80a155e <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 16:

                raw_adc = data[0];
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a154c:	7ae2      	ldrb	r2, [r4, #11]
 80a154e:	7b23      	ldrb	r3, [r4, #12]
 80a1550:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 32767)
 80a1554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
                {
                    raw_adc = raw_adc - 65536;
 80a1558:	bfa8      	it	ge
 80a155a:	f5a3 3380 	subge.w	r3, r3, #65536	; 0x10000
 80a155e:	6023      	str	r3, [r4, #0]
                // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;
      
                break;
    }
    return raw_adc;
}
 80a1560:	6820      	ldr	r0, [r4, #0]
 80a1562:	bd10      	pop	{r4, pc}

080a1564 <_GLOBAL__sub_I__ZN15CASARIA_MCP3428C2Eh>:
 80a1564:	f000 b958 	b.w	80a1818 <HAL_Pin_Map>

080a1568 <_ZN16Adafruit_PCA9685C1Ehb>:
 * the address that is set by the physical jumpers on the driver. If the
 * address is not being set by hardware, give no parameters and it will
 * use the default as specified in the header file (0x40)
 */
Adafruit_PCA9685::Adafruit_PCA9685(uint8_t addr, bool debug) {
  _i2caddr = addr;
 80a1568:	7001      	strb	r1, [r0, #0]
  _debug = debug;
 80a156a:	7042      	strb	r2, [r0, #1]
}
 80a156c:	4770      	bx	lr
	...

080a1570 <_ZN16Adafruit_PCA96856setPWMEhtt>:
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a1570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1572:	461d      	mov	r5, r3
  if (_debug) {
 80a1574:	7843      	ldrb	r3, [r0, #1]
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a1576:	4607      	mov	r7, r0
 80a1578:	460c      	mov	r4, r1
 80a157a:	4616      	mov	r6, r2
  if (_debug) {
 80a157c:	b303      	cbz	r3, 80a15c0 <_ZN16Adafruit_PCA96856setPWMEhtt+0x50>
   Serial.print("Setting PWM for LED "); Serial.print(ledNum); Serial.print(" to ");
 80a157e:	f001 fa15 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a1582:	4922      	ldr	r1, [pc, #136]	; (80a160c <_ZN16Adafruit_PCA96856setPWMEhtt+0x9c>)
 80a1584:	f000 fcb8 	bl	80a1ef8 <_ZN5Print5printEPKc>
 80a1588:	f001 fa10 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a158c:	220a      	movs	r2, #10
 80a158e:	4621      	mov	r1, r4
 80a1590:	f000 fcf9 	bl	80a1f86 <_ZN5Print5printEhi>
 80a1594:	f001 fa0a 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a1598:	491d      	ldr	r1, [pc, #116]	; (80a1610 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa0>)
 80a159a:	f000 fcad 	bl	80a1ef8 <_ZN5Print5printEPKc>
   Serial.print(on); Serial.print(" -> "); Serial.println(off);
 80a159e:	f001 fa05 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a15a2:	220a      	movs	r2, #10
 80a15a4:	4631      	mov	r1, r6
 80a15a6:	f000 fd1c 	bl	80a1fe2 <_ZN5Print5printEii>
 80a15aa:	f001 f9ff 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a15ae:	4919      	ldr	r1, [pc, #100]	; (80a1614 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa4>)
 80a15b0:	f000 fca2 	bl	80a1ef8 <_ZN5Print5printEPKc>
 80a15b4:	f001 f9fa 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a15b8:	220a      	movs	r2, #10
 80a15ba:	4629      	mov	r1, r5
 80a15bc:	f000 fd13 	bl	80a1fe6 <_ZN5Print7printlnEii>
  }

  Wire.beginTransmission(_i2caddr);
 80a15c0:	f001 fc08 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a15c4:	7839      	ldrb	r1, [r7, #0]
 80a15c6:	f001 fb28 	bl	80a2c1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
 80a15ca:	f001 fc03 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a15ce:	00a1      	lsls	r1, r4, #2
 80a15d0:	3106      	adds	r1, #6
 80a15d2:	f7fe fe91 	bl	80a02f8 <_ZN7TwoWire5writeEi>
  Wire.write(on);                    // Write the first byte for On
 80a15d6:	f001 fbfd 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a15da:	4631      	mov	r1, r6
 80a15dc:	f7fe fe8c 	bl	80a02f8 <_ZN7TwoWire5writeEi>
  Wire.write(on >> 8);               // Write the second byte
 80a15e0:	f001 fbf8 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a15e4:	0a31      	lsrs	r1, r6, #8
 80a15e6:	f7fe fe87 	bl	80a02f8 <_ZN7TwoWire5writeEi>
  Wire.write(off);                   // First byte for Off
 80a15ea:	f001 fbf3 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a15ee:	4629      	mov	r1, r5
 80a15f0:	f7fe fe82 	bl	80a02f8 <_ZN7TwoWire5writeEi>
  Wire.write(off >> 8);              // Second byte for Off
 80a15f4:	f001 fbee 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a15f8:	0a29      	lsrs	r1, r5, #8
 80a15fa:	f7fe fe7d 	bl	80a02f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a15fe:	f001 fbe9 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
}
 80a1602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
  Wire.write(on);                    // Write the first byte for On
  Wire.write(on >> 8);               // Write the second byte
  Wire.write(off);                   // First byte for Off
  Wire.write(off >> 8);              // Second byte for Off
  Wire.endTransmission();
 80a1606:	f001 bb13 	b.w	80a2c30 <_ZN7TwoWire15endTransmissionEv>
 80a160a:	bf00      	nop
 80a160c:	080a4965 	.word	0x080a4965
 80a1610:	080a497a 	.word	0x080a497a
 80a1614:	080a497f 	.word	0x080a497f

080a1618 <_ZN16Adafruit_PCA96856setValEhtb>:
 * @param val     The duty cycle value. Should be from 0 to 4095 inclusive, 
 *                will be clamped if not within range
 * @param invert  Whether or not to invert the pulse for sinking to ground
 */
void Adafruit_PCA9685::setVal(uint8_t ledNum, uint16_t val, bool invert)
{
 80a1618:	b5f0      	push	{r4, r5, r6, r7, lr}
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
 80a161a:	f640 76ff 	movw	r6, #4095	; 0xfff
 80a161e:	42b2      	cmp	r2, r6
 80a1620:	bfa8      	it	ge
 80a1622:	4632      	movge	r2, r6
 80a1624:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 80a1628:	4607      	mov	r7, r0
 80a162a:	468e      	mov	lr, r1
  // Clamp value between 0 and 4095 inclusive.
  val = min(val, 4095);
  val = max(0, val);
 80a162c:	b2a5      	uxth	r5, r4
  if (invert) {
 80a162e:	461a      	mov	r2, r3
 80a1630:	b193      	cbz	r3, 80a1658 <_ZN16Adafruit_PCA96856setValEhtb+0x40>
    if (val == 0) {
 80a1632:	b91c      	cbnz	r4, 80a163c <_ZN16Adafruit_PCA96856setValEhtb+0x24>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
 80a1634:	2300      	movs	r3, #0
 80a1636:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a163a:	e004      	b.n	80a1646 <_ZN16Adafruit_PCA96856setValEhtb+0x2e>
    }
    else if (val == 4095) {
 80a163c:	42b4      	cmp	r4, r6
 80a163e:	d105      	bne.n	80a164c <_ZN16Adafruit_PCA96856setValEhtb+0x34>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
 80a1640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a1644:	2200      	movs	r2, #0
 80a1646:	4671      	mov	r1, lr
 80a1648:	4638      	mov	r0, r7
 80a164a:	e00a      	b.n	80a1662 <_ZN16Adafruit_PCA96856setValEhtb+0x4a>
    }
    else {
      setPWM(ledNum, 0, 4095-val);
 80a164c:	f5c5 637f 	rsb	r3, r5, #4080	; 0xff0
 80a1650:	330f      	adds	r3, #15
 80a1652:	b29b      	uxth	r3, r3
 80a1654:	2200      	movs	r2, #0
 80a1656:	e004      	b.n	80a1662 <_ZN16Adafruit_PCA96856setValEhtb+0x4a>
    }
  }
  else {
    if (val == 4095) {
 80a1658:	42b4      	cmp	r4, r6
 80a165a:	d0eb      	beq.n	80a1634 <_ZN16Adafruit_PCA96856setValEhtb+0x1c>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
    }
    else if (val == 0) {
 80a165c:	2c00      	cmp	r4, #0
 80a165e:	d0ef      	beq.n	80a1640 <_ZN16Adafruit_PCA96856setValEhtb+0x28>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a1660:	462b      	mov	r3, r5
    }
  }
}
 80a1662:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    else if (val == 0) {
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a1666:	f7ff bf83 	b.w	80a1570 <_ZN16Adafruit_PCA96856setPWMEhtt>

080a166a <_ZN16Adafruit_PCA96855read8Eh>:
/**
 * Read a byte from a given address on the driver
 * @param  addr  The address
 * @return       The value at the given address
 */
uint8_t Adafruit_PCA9685::read8(uint8_t addr) {
 80a166a:	b538      	push	{r3, r4, r5, lr}
 80a166c:	4604      	mov	r4, r0
 80a166e:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a1670:	f001 fbb0 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a1674:	7821      	ldrb	r1, [r4, #0]
 80a1676:	f001 fad0 	bl	80a2c1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a167a:	f001 fbab 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a167e:	6803      	ldr	r3, [r0, #0]
 80a1680:	4629      	mov	r1, r5
 80a1682:	689b      	ldr	r3, [r3, #8]
 80a1684:	4798      	blx	r3
  Wire.endTransmission();
 80a1686:	f001 fba5 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a168a:	f001 fad1 	bl	80a2c30 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
 80a168e:	f001 fba1 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a1692:	2201      	movs	r2, #1
 80a1694:	7821      	ldrb	r1, [r4, #0]
 80a1696:	f001 fab8 	bl	80a2c0a <_ZN7TwoWire11requestFromEhh>
  return Wire.read();
 80a169a:	f001 fb9b 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a169e:	6803      	ldr	r3, [r0, #0]
 80a16a0:	695b      	ldr	r3, [r3, #20]
 80a16a2:	4798      	blx	r3
}
 80a16a4:	b2c0      	uxtb	r0, r0
 80a16a6:	bd38      	pop	{r3, r4, r5, pc}

080a16a8 <_ZN16Adafruit_PCA96856write8Ehh>:
/**
 * Write a byte to a given address on the driver
 * @param addr  The address
 * @param val   The byte to be written
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
 80a16a8:	b570      	push	{r4, r5, r6, lr}
 80a16aa:	4606      	mov	r6, r0
 80a16ac:	4614      	mov	r4, r2
 80a16ae:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a16b0:	f001 fb90 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a16b4:	7831      	ldrb	r1, [r6, #0]
 80a16b6:	f001 fab0 	bl	80a2c1a <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a16ba:	f001 fb8b 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a16be:	6803      	ldr	r3, [r0, #0]
 80a16c0:	4629      	mov	r1, r5
 80a16c2:	689b      	ldr	r3, [r3, #8]
 80a16c4:	4798      	blx	r3
  Wire.write(val);
 80a16c6:	f001 fb85 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a16ca:	6803      	ldr	r3, [r0, #0]
 80a16cc:	4621      	mov	r1, r4
 80a16ce:	689b      	ldr	r3, [r3, #8]
 80a16d0:	4798      	blx	r3
  Wire.endTransmission();
 80a16d2:	f001 fb7f 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
}
 80a16d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(addr);
  Wire.write(val);
  Wire.endTransmission();
 80a16da:	f001 baa9 	b.w	80a2c30 <_ZN7TwoWire15endTransmissionEv>

080a16de <_ZN16Adafruit_PCA96855resetEv>:

/**
 * Setup the driver's modes
 */
void Adafruit_PCA9685::reset(void) {
 write8(MODE1, 0x0);  // See page 13 of datasheet
 80a16de:	2200      	movs	r2, #0
 80a16e0:	4611      	mov	r1, r2
 80a16e2:	f7ff bfe1 	b.w	80a16a8 <_ZN16Adafruit_PCA96856write8Ehh>

080a16e6 <_ZN16Adafruit_PCA96855beginEv>:
}

/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 80a16e6:	b510      	push	{r4, lr}
 80a16e8:	4604      	mov	r4, r0
 Wire.begin();
 80a16ea:	f001 fb73 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a16ee:	f001 fa7d 	bl	80a2bec <_ZN7TwoWire5beginEv>
 reset();
 80a16f2:	4620      	mov	r0, r4
}
 80a16f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 Wire.begin();
 reset();
 80a16f8:	f7ff bff1 	b.w	80a16de <_ZN16Adafruit_PCA96855resetEv>
 80a16fc:	0000      	movs	r0, r0
	...

080a1700 <_ZN16Adafruit_PCA968510setPWMFreqEf>:

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1700:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if ( _debug ) {
 80a1702:	7843      	ldrb	r3, [r0, #1]

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1704:	4604      	mov	r4, r0
 80a1706:	460d      	mov	r5, r1
  if ( _debug ) {
 80a1708:	b18b      	cbz	r3, 80a172e <_ZN16Adafruit_PCA968510setPWMFreqEf+0x2e>
    Serial.print("Attempting to set freq "); Serial.println(freq);
 80a170a:	f001 f94f 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a170e:	493c      	ldr	r1, [pc, #240]	; (80a1800 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x100>)
 80a1710:	f000 fbf2 	bl	80a1ef8 <_ZN5Print5printEPKc>
 80a1714:	f001 f94a 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a1718:	4606      	mov	r6, r0
 80a171a:	4628      	mov	r0, r5
 80a171c:	f002 f94c 	bl	80a39b8 <__aeabi_f2d>
 80a1720:	2302      	movs	r3, #2
 80a1722:	9300      	str	r3, [sp, #0]
 80a1724:	4602      	mov	r2, r0
 80a1726:	460b      	mov	r3, r1
 80a1728:	4630      	mov	r0, r6
 80a172a:	f000 fd15 	bl	80a2158 <_ZN5Print7printlnEdi>
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
 80a172e:	4628      	mov	r0, r5
 80a1730:	f002 f942 	bl	80a39b8 <__aeabi_f2d>
 80a1734:	a330      	add	r3, pc, #192	; (adr r3, 80a17f8 <_ZN16Adafruit_PCA968510setPWMFreqEf+0xf8>)
 80a1736:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a173a:	f002 f991 	bl	80a3a60 <__aeabi_dmul>
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
 80a173e:	f002 fc87 	bl	80a4050 <__aeabi_d2f>
 80a1742:	4601      	mov	r1, r0
 80a1744:	482f      	ldr	r0, [pc, #188]	; (80a1804 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x104>)
 80a1746:	f002 fe95 	bl	80a4474 <__aeabi_fdiv>
  prescaleval -= 1;
 80a174a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a174e:	f002 fcd3 	bl	80a40f8 <__aeabi_fsub>
  if ( _debug ) {
 80a1752:	7863      	ldrb	r3, [r4, #1]
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
 80a1754:	4605      	mov	r5, r0
  if ( _debug ) {
 80a1756:	b18b      	cbz	r3, 80a177c <_ZN16Adafruit_PCA968510setPWMFreqEf+0x7c>
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
 80a1758:	f001 f928 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a175c:	492a      	ldr	r1, [pc, #168]	; (80a1808 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x108>)
 80a175e:	f000 fbcb 	bl	80a1ef8 <_ZN5Print5printEPKc>
 80a1762:	f001 f923 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a1766:	4606      	mov	r6, r0
 80a1768:	4628      	mov	r0, r5
 80a176a:	f002 f925 	bl	80a39b8 <__aeabi_f2d>
 80a176e:	2302      	movs	r3, #2
 80a1770:	9300      	str	r3, [sp, #0]
 80a1772:	4602      	mov	r2, r0
 80a1774:	460b      	mov	r3, r1
 80a1776:	4630      	mov	r0, r6
 80a1778:	f000 fcee 	bl	80a2158 <_ZN5Print7printlnEdi>
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a177c:	4628      	mov	r0, r5
 80a177e:	f002 f91b 	bl	80a39b8 <__aeabi_f2d>
 80a1782:	4b22      	ldr	r3, [pc, #136]	; (80a180c <_ZN16Adafruit_PCA968510setPWMFreqEf+0x10c>)
 80a1784:	2200      	movs	r2, #0
 80a1786:	f001 ffb9 	bl	80a36fc <__adddf3>
 80a178a:	f001 fcad 	bl	80a30e8 <floor>
 80a178e:	f002 fc3f 	bl	80a4010 <__aeabi_d2uiz>
  if ( _debug ) {
 80a1792:	7863      	ldrb	r3, [r4, #1]
  prescaleval /= freq;
  prescaleval -= 1;
  if ( _debug ) {
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a1794:	b2c6      	uxtb	r6, r0
  if ( _debug ) {
 80a1796:	b153      	cbz	r3, 80a17ae <_ZN16Adafruit_PCA968510setPWMFreqEf+0xae>
    Serial.print("Final pre-scale: "); Serial.println(prescale);
 80a1798:	f001 f908 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a179c:	491c      	ldr	r1, [pc, #112]	; (80a1810 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x110>)
 80a179e:	f000 fbab 	bl	80a1ef8 <_ZN5Print5printEPKc>
 80a17a2:	f001 f903 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a17a6:	220a      	movs	r2, #10
 80a17a8:	4631      	mov	r1, r6
 80a17aa:	f000 fbee 	bl	80a1f8a <_ZN5Print7printlnEhi>
  }
  
  uint8_t oldmode = read8(MODE1);
 80a17ae:	2100      	movs	r1, #0
 80a17b0:	4620      	mov	r0, r4
 80a17b2:	f7ff ff5a 	bl	80a166a <_ZN16Adafruit_PCA96855read8Eh>
 80a17b6:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
 80a17b8:	f000 026f 	and.w	r2, r0, #111	; 0x6f
 80a17bc:	f042 0210 	orr.w	r2, r2, #16
 80a17c0:	4620      	mov	r0, r4
 80a17c2:	2100      	movs	r1, #0
 80a17c4:	f7ff ff70 	bl	80a16a8 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(PRESCALE, prescale); // set the prescaler
 80a17c8:	4632      	mov	r2, r6
 80a17ca:	4620      	mov	r0, r4
 80a17cc:	21fe      	movs	r1, #254	; 0xfe
 80a17ce:	f7ff ff6b 	bl	80a16a8 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(MODE1, oldmode);
 80a17d2:	462a      	mov	r2, r5
 80a17d4:	2100      	movs	r1, #0
 80a17d6:	4620      	mov	r0, r4
 80a17d8:	f7ff ff66 	bl	80a16a8 <_ZN16Adafruit_PCA96856write8Ehh>
  delay(5);
 80a17dc:	2005      	movs	r0, #5
 80a17de:	f000 fce3 	bl	80a21a8 <delay>
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a17e2:	4620      	mov	r0, r4
 80a17e4:	f065 025e 	orn	r2, r5, #94	; 0x5e
 80a17e8:	b2d2      	uxtb	r2, r2
 80a17ea:	2100      	movs	r1, #0
}
 80a17ec:	b002      	add	sp, #8
 80a17ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
  write8(PRESCALE, prescale); // set the prescaler
  write8(MODE1, oldmode);
  delay(5);
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a17f2:	f7ff bf59 	b.w	80a16a8 <_ZN16Adafruit_PCA96856write8Ehh>
 80a17f6:	bf00      	nop
 80a17f8:	cccccccd 	.word	0xcccccccd
 80a17fc:	3feccccc 	.word	0x3feccccc
 80a1800:	080a4984 	.word	0x080a4984
 80a1804:	45bebc20 	.word	0x45bebc20
 80a1808:	080a499c 	.word	0x080a499c
 80a180c:	3fe00000 	.word	0x3fe00000
 80a1810:	080a49b2 	.word	0x080a49b2

080a1814 <_GLOBAL__sub_I__ZN16Adafruit_PCA9685C2Ehb>:
 80a1814:	f000 b800 	b.w	80a1818 <HAL_Pin_Map>

080a1818 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a1818:	b508      	push	{r3, lr}
 80a181a:	4b02      	ldr	r3, [pc, #8]	; (80a1824 <HAL_Pin_Map+0xc>)
 80a181c:	681b      	ldr	r3, [r3, #0]
 80a181e:	681b      	ldr	r3, [r3, #0]
 80a1820:	9301      	str	r3, [sp, #4]
 80a1822:	bd08      	pop	{r3, pc}
 80a1824:	080601b0 	.word	0x080601b0

080a1828 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1828:	b508      	push	{r3, lr}
 80a182a:	4b02      	ldr	r3, [pc, #8]	; (80a1834 <HAL_Pin_Mode+0xc>)
 80a182c:	681b      	ldr	r3, [r3, #0]
 80a182e:	689b      	ldr	r3, [r3, #8]
 80a1830:	9301      	str	r3, [sp, #4]
 80a1832:	bd08      	pop	{r3, pc}
 80a1834:	080601b0 	.word	0x080601b0

080a1838 <HAL_GPIO_Read>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1838:	b508      	push	{r3, lr}
 80a183a:	4b02      	ldr	r3, [pc, #8]	; (80a1844 <HAL_GPIO_Read+0xc>)
 80a183c:	681b      	ldr	r3, [r3, #0]
 80a183e:	695b      	ldr	r3, [r3, #20]
 80a1840:	9301      	str	r3, [sp, #4]
 80a1842:	bd08      	pop	{r3, pc}
 80a1844:	080601b0 	.word	0x080601b0

080a1848 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a1848:	b508      	push	{r3, lr}
 80a184a:	4b02      	ldr	r3, [pc, #8]	; (80a1854 <HAL_Interrupts_Enable_All+0xc>)
 80a184c:	681b      	ldr	r3, [r3, #0]
 80a184e:	6a1b      	ldr	r3, [r3, #32]
 80a1850:	9301      	str	r3, [sp, #4]
 80a1852:	bd08      	pop	{r3, pc}
 80a1854:	080601b0 	.word	0x080601b0

080a1858 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a1858:	b508      	push	{r3, lr}
 80a185a:	4b02      	ldr	r3, [pc, #8]	; (80a1864 <HAL_Interrupts_Disable_All+0xc>)
 80a185c:	681b      	ldr	r3, [r3, #0]
 80a185e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1860:	9301      	str	r3, [sp, #4]
 80a1862:	bd08      	pop	{r3, pc}
 80a1864:	080601b0 	.word	0x080601b0

080a1868 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1868:	b508      	push	{r3, lr}
 80a186a:	4b02      	ldr	r3, [pc, #8]	; (80a1874 <HAL_SPI_Init+0xc>)
 80a186c:	681b      	ldr	r3, [r3, #0]
 80a186e:	69db      	ldr	r3, [r3, #28]
 80a1870:	9301      	str	r3, [sp, #4]
 80a1872:	bd08      	pop	{r3, pc}
 80a1874:	080601b4 	.word	0x080601b4

080a1878 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1878:	b508      	push	{r3, lr}
 80a187a:	4b02      	ldr	r3, [pc, #8]	; (80a1884 <HAL_SPI_Is_Enabled+0xc>)
 80a187c:	681b      	ldr	r3, [r3, #0]
 80a187e:	6a1b      	ldr	r3, [r3, #32]
 80a1880:	9301      	str	r3, [sp, #4]
 80a1882:	bd08      	pop	{r3, pc}
 80a1884:	080601b4 	.word	0x080601b4

080a1888 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1888:	b508      	push	{r3, lr}
 80a188a:	4b02      	ldr	r3, [pc, #8]	; (80a1894 <HAL_RNG_GetRandomNumber+0xc>)
 80a188c:	681b      	ldr	r3, [r3, #0]
 80a188e:	685b      	ldr	r3, [r3, #4]
 80a1890:	9301      	str	r3, [sp, #4]
 80a1892:	bd08      	pop	{r3, pc}
 80a1894:	0806019c 	.word	0x0806019c

080a1898 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80a1898:	b508      	push	{r3, lr}
 80a189a:	4b02      	ldr	r3, [pc, #8]	; (80a18a4 <HAL_Delay_Milliseconds+0xc>)
 80a189c:	681b      	ldr	r3, [r3, #0]
 80a189e:	689b      	ldr	r3, [r3, #8]
 80a18a0:	9301      	str	r3, [sp, #4]
 80a18a2:	bd08      	pop	{r3, pc}
 80a18a4:	0806019c 	.word	0x0806019c

080a18a8 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a18a8:	b508      	push	{r3, lr}
 80a18aa:	4b02      	ldr	r3, [pc, #8]	; (80a18b4 <HAL_Delay_Microseconds+0xc>)
 80a18ac:	681b      	ldr	r3, [r3, #0]
 80a18ae:	68db      	ldr	r3, [r3, #12]
 80a18b0:	9301      	str	r3, [sp, #4]
 80a18b2:	bd08      	pop	{r3, pc}
 80a18b4:	0806019c 	.word	0x0806019c

080a18b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a18b8:	b508      	push	{r3, lr}
 80a18ba:	4b02      	ldr	r3, [pc, #8]	; (80a18c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a18bc:	681b      	ldr	r3, [r3, #0]
 80a18be:	695b      	ldr	r3, [r3, #20]
 80a18c0:	9301      	str	r3, [sp, #4]
 80a18c2:	bd08      	pop	{r3, pc}
 80a18c4:	0806019c 	.word	0x0806019c

080a18c8 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a18c8:	b508      	push	{r3, lr}
 80a18ca:	4b02      	ldr	r3, [pc, #8]	; (80a18d4 <HAL_Core_System_Reset_Ex+0xc>)
 80a18cc:	681b      	ldr	r3, [r3, #0]
 80a18ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a18d0:	9301      	str	r3, [sp, #4]
 80a18d2:	bd08      	pop	{r3, pc}
 80a18d4:	080601b8 	.word	0x080601b8

080a18d8 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a18d8:	b508      	push	{r3, lr}
 80a18da:	4b02      	ldr	r3, [pc, #8]	; (80a18e4 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a18dc:	681b      	ldr	r3, [r3, #0]
 80a18de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a18e0:	9301      	str	r3, [sp, #4]
 80a18e2:	bd08      	pop	{r3, pc}
 80a18e4:	080601b8 	.word	0x080601b8

080a18e8 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a18e8:	b508      	push	{r3, lr}
 80a18ea:	4b02      	ldr	r3, [pc, #8]	; (80a18f4 <os_thread_create+0xc>)
 80a18ec:	681b      	ldr	r3, [r3, #0]
 80a18ee:	685b      	ldr	r3, [r3, #4]
 80a18f0:	9301      	str	r3, [sp, #4]
 80a18f2:	bd08      	pop	{r3, pc}
 80a18f4:	080601d0 	.word	0x080601d0

080a18f8 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80a18f8:	b508      	push	{r3, lr}
 80a18fa:	4b02      	ldr	r3, [pc, #8]	; (80a1904 <os_thread_is_current+0xc>)
 80a18fc:	681b      	ldr	r3, [r3, #0]
 80a18fe:	689b      	ldr	r3, [r3, #8]
 80a1900:	9301      	str	r3, [sp, #4]
 80a1902:	bd08      	pop	{r3, pc}
 80a1904:	080601d0 	.word	0x080601d0

080a1908 <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80a1908:	b508      	push	{r3, lr}
 80a190a:	4b02      	ldr	r3, [pc, #8]	; (80a1914 <os_thread_yield+0xc>)
 80a190c:	681b      	ldr	r3, [r3, #0]
 80a190e:	68db      	ldr	r3, [r3, #12]
 80a1910:	9301      	str	r3, [sp, #4]
 80a1912:	bd08      	pop	{r3, pc}
 80a1914:	080601d0 	.word	0x080601d0

080a1918 <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80a1918:	b508      	push	{r3, lr}
 80a191a:	4b02      	ldr	r3, [pc, #8]	; (80a1924 <os_thread_join+0xc>)
 80a191c:	681b      	ldr	r3, [r3, #0]
 80a191e:	691b      	ldr	r3, [r3, #16]
 80a1920:	9301      	str	r3, [sp, #4]
 80a1922:	bd08      	pop	{r3, pc}
 80a1924:	080601d0 	.word	0x080601d0

080a1928 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80a1928:	b508      	push	{r3, lr}
 80a192a:	4b02      	ldr	r3, [pc, #8]	; (80a1934 <os_thread_cleanup+0xc>)
 80a192c:	681b      	ldr	r3, [r3, #0]
 80a192e:	695b      	ldr	r3, [r3, #20]
 80a1930:	9301      	str	r3, [sp, #4]
 80a1932:	bd08      	pop	{r3, pc}
 80a1934:	080601d0 	.word	0x080601d0

080a1938 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1938:	b508      	push	{r3, lr}
 80a193a:	4b02      	ldr	r3, [pc, #8]	; (80a1944 <os_mutex_create+0xc>)
 80a193c:	681b      	ldr	r3, [r3, #0]
 80a193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1940:	9301      	str	r3, [sp, #4]
 80a1942:	bd08      	pop	{r3, pc}
 80a1944:	080601d0 	.word	0x080601d0

080a1948 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80a1948:	b508      	push	{r3, lr}
 80a194a:	4b02      	ldr	r3, [pc, #8]	; (80a1954 <os_thread_exit+0xc>)
 80a194c:	681b      	ldr	r3, [r3, #0]
 80a194e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1950:	9301      	str	r3, [sp, #4]
 80a1952:	bd08      	pop	{r3, pc}
 80a1954:	080601d0 	.word	0x080601d0

080a1958 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1958:	b508      	push	{r3, lr}
 80a195a:	4b02      	ldr	r3, [pc, #8]	; (80a1964 <HAL_USART_Init+0xc>)
 80a195c:	681b      	ldr	r3, [r3, #0]
 80a195e:	699b      	ldr	r3, [r3, #24]
 80a1960:	9301      	str	r3, [sp, #4]
 80a1962:	bd08      	pop	{r3, pc}
 80a1964:	080601c4 	.word	0x080601c4

080a1968 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1968:	b508      	push	{r3, lr}
 80a196a:	4b02      	ldr	r3, [pc, #8]	; (80a1974 <HAL_USART_Write_Data+0xc>)
 80a196c:	681b      	ldr	r3, [r3, #0]
 80a196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1970:	9301      	str	r3, [sp, #4]
 80a1972:	bd08      	pop	{r3, pc}
 80a1974:	080601c4 	.word	0x080601c4

080a1978 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1978:	b508      	push	{r3, lr}
 80a197a:	4b02      	ldr	r3, [pc, #8]	; (80a1984 <HAL_USART_Available_Data+0xc>)
 80a197c:	681b      	ldr	r3, [r3, #0]
 80a197e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1980:	9301      	str	r3, [sp, #4]
 80a1982:	bd08      	pop	{r3, pc}
 80a1984:	080601c4 	.word	0x080601c4

080a1988 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1988:	b508      	push	{r3, lr}
 80a198a:	4b02      	ldr	r3, [pc, #8]	; (80a1994 <HAL_USART_Read_Data+0xc>)
 80a198c:	681b      	ldr	r3, [r3, #0]
 80a198e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1990:	9301      	str	r3, [sp, #4]
 80a1992:	bd08      	pop	{r3, pc}
 80a1994:	080601c4 	.word	0x080601c4

080a1998 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1998:	b508      	push	{r3, lr}
 80a199a:	4b02      	ldr	r3, [pc, #8]	; (80a19a4 <HAL_USART_Peek_Data+0xc>)
 80a199c:	681b      	ldr	r3, [r3, #0]
 80a199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a19a0:	9301      	str	r3, [sp, #4]
 80a19a2:	bd08      	pop	{r3, pc}
 80a19a4:	080601c4 	.word	0x080601c4

080a19a8 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a19a8:	b508      	push	{r3, lr}
 80a19aa:	4b02      	ldr	r3, [pc, #8]	; (80a19b4 <HAL_USART_Flush_Data+0xc>)
 80a19ac:	681b      	ldr	r3, [r3, #0]
 80a19ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a19b0:	9301      	str	r3, [sp, #4]
 80a19b2:	bd08      	pop	{r3, pc}
 80a19b4:	080601c4 	.word	0x080601c4

080a19b8 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a19b8:	b508      	push	{r3, lr}
 80a19ba:	4b02      	ldr	r3, [pc, #8]	; (80a19c4 <HAL_USART_Is_Enabled+0xc>)
 80a19bc:	681b      	ldr	r3, [r3, #0]
 80a19be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a19c0:	9301      	str	r3, [sp, #4]
 80a19c2:	bd08      	pop	{r3, pc}
 80a19c4:	080601c4 	.word	0x080601c4

080a19c8 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a19c8:	b508      	push	{r3, lr}
 80a19ca:	4b02      	ldr	r3, [pc, #8]	; (80a19d4 <HAL_USART_Available_Data_For_Write+0xc>)
 80a19cc:	681b      	ldr	r3, [r3, #0]
 80a19ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a19d0:	9301      	str	r3, [sp, #4]
 80a19d2:	bd08      	pop	{r3, pc}
 80a19d4:	080601c4 	.word	0x080601c4

080a19d8 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a19d8:	b508      	push	{r3, lr}
 80a19da:	4b02      	ldr	r3, [pc, #8]	; (80a19e4 <HAL_I2C_Begin+0xc>)
 80a19dc:	681b      	ldr	r3, [r3, #0]
 80a19de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a19e0:	9301      	str	r3, [sp, #4]
 80a19e2:	bd08      	pop	{r3, pc}
 80a19e4:	080601ac 	.word	0x080601ac

080a19e8 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a19e8:	b508      	push	{r3, lr}
 80a19ea:	4b02      	ldr	r3, [pc, #8]	; (80a19f4 <HAL_I2C_Request_Data+0xc>)
 80a19ec:	681b      	ldr	r3, [r3, #0]
 80a19ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a19f0:	9301      	str	r3, [sp, #4]
 80a19f2:	bd08      	pop	{r3, pc}
 80a19f4:	080601ac 	.word	0x080601ac

080a19f8 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a19f8:	b508      	push	{r3, lr}
 80a19fa:	4b02      	ldr	r3, [pc, #8]	; (80a1a04 <HAL_I2C_Begin_Transmission+0xc>)
 80a19fc:	681b      	ldr	r3, [r3, #0]
 80a19fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1a00:	9301      	str	r3, [sp, #4]
 80a1a02:	bd08      	pop	{r3, pc}
 80a1a04:	080601ac 	.word	0x080601ac

080a1a08 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1a08:	b508      	push	{r3, lr}
 80a1a0a:	4b02      	ldr	r3, [pc, #8]	; (80a1a14 <HAL_I2C_End_Transmission+0xc>)
 80a1a0c:	681b      	ldr	r3, [r3, #0]
 80a1a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1a10:	9301      	str	r3, [sp, #4]
 80a1a12:	bd08      	pop	{r3, pc}
 80a1a14:	080601ac 	.word	0x080601ac

080a1a18 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1a18:	b508      	push	{r3, lr}
 80a1a1a:	4b02      	ldr	r3, [pc, #8]	; (80a1a24 <HAL_I2C_Write_Data+0xc>)
 80a1a1c:	681b      	ldr	r3, [r3, #0]
 80a1a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1a20:	9301      	str	r3, [sp, #4]
 80a1a22:	bd08      	pop	{r3, pc}
 80a1a24:	080601ac 	.word	0x080601ac

080a1a28 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1a28:	b508      	push	{r3, lr}
 80a1a2a:	4b02      	ldr	r3, [pc, #8]	; (80a1a34 <HAL_I2C_Available_Data+0xc>)
 80a1a2c:	681b      	ldr	r3, [r3, #0]
 80a1a2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1a30:	9301      	str	r3, [sp, #4]
 80a1a32:	bd08      	pop	{r3, pc}
 80a1a34:	080601ac 	.word	0x080601ac

080a1a38 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1a38:	b508      	push	{r3, lr}
 80a1a3a:	4b02      	ldr	r3, [pc, #8]	; (80a1a44 <HAL_I2C_Read_Data+0xc>)
 80a1a3c:	681b      	ldr	r3, [r3, #0]
 80a1a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1a40:	9301      	str	r3, [sp, #4]
 80a1a42:	bd08      	pop	{r3, pc}
 80a1a44:	080601ac 	.word	0x080601ac

080a1a48 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1a48:	b508      	push	{r3, lr}
 80a1a4a:	4b02      	ldr	r3, [pc, #8]	; (80a1a54 <HAL_I2C_Peek_Data+0xc>)
 80a1a4c:	681b      	ldr	r3, [r3, #0]
 80a1a4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1a50:	9301      	str	r3, [sp, #4]
 80a1a52:	bd08      	pop	{r3, pc}
 80a1a54:	080601ac 	.word	0x080601ac

080a1a58 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1a58:	b508      	push	{r3, lr}
 80a1a5a:	4b02      	ldr	r3, [pc, #8]	; (80a1a64 <HAL_I2C_Flush_Data+0xc>)
 80a1a5c:	681b      	ldr	r3, [r3, #0]
 80a1a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1a60:	9301      	str	r3, [sp, #4]
 80a1a62:	bd08      	pop	{r3, pc}
 80a1a64:	080601ac 	.word	0x080601ac

080a1a68 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1a68:	b508      	push	{r3, lr}
 80a1a6a:	4b02      	ldr	r3, [pc, #8]	; (80a1a74 <HAL_I2C_Is_Enabled+0xc>)
 80a1a6c:	681b      	ldr	r3, [r3, #0]
 80a1a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1a70:	9301      	str	r3, [sp, #4]
 80a1a72:	bd08      	pop	{r3, pc}
 80a1a74:	080601ac 	.word	0x080601ac

080a1a78 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1a78:	b508      	push	{r3, lr}
 80a1a7a:	4b03      	ldr	r3, [pc, #12]	; (80a1a88 <HAL_I2C_Init+0x10>)
 80a1a7c:	681b      	ldr	r3, [r3, #0]
 80a1a7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1a82:	9301      	str	r3, [sp, #4]
 80a1a84:	bd08      	pop	{r3, pc}
 80a1a86:	0000      	.short	0x0000
 80a1a88:	080601ac 	.word	0x080601ac

080a1a8c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1a8c:	b508      	push	{r3, lr}
 80a1a8e:	4b02      	ldr	r3, [pc, #8]	; (80a1a98 <HAL_USB_USART_Init+0xc>)
 80a1a90:	681b      	ldr	r3, [r3, #0]
 80a1a92:	681b      	ldr	r3, [r3, #0]
 80a1a94:	9301      	str	r3, [sp, #4]
 80a1a96:	bd08      	pop	{r3, pc}
 80a1a98:	080601d8 	.word	0x080601d8

080a1a9c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1a9c:	b508      	push	{r3, lr}
 80a1a9e:	4b02      	ldr	r3, [pc, #8]	; (80a1aa8 <HAL_USB_USART_Available_Data+0xc>)
 80a1aa0:	681b      	ldr	r3, [r3, #0]
 80a1aa2:	691b      	ldr	r3, [r3, #16]
 80a1aa4:	9301      	str	r3, [sp, #4]
 80a1aa6:	bd08      	pop	{r3, pc}
 80a1aa8:	080601d8 	.word	0x080601d8

080a1aac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1aac:	b508      	push	{r3, lr}
 80a1aae:	4b02      	ldr	r3, [pc, #8]	; (80a1ab8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1ab0:	681b      	ldr	r3, [r3, #0]
 80a1ab2:	695b      	ldr	r3, [r3, #20]
 80a1ab4:	9301      	str	r3, [sp, #4]
 80a1ab6:	bd08      	pop	{r3, pc}
 80a1ab8:	080601d8 	.word	0x080601d8

080a1abc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1abc:	b508      	push	{r3, lr}
 80a1abe:	4b02      	ldr	r3, [pc, #8]	; (80a1ac8 <HAL_USB_USART_Receive_Data+0xc>)
 80a1ac0:	681b      	ldr	r3, [r3, #0]
 80a1ac2:	699b      	ldr	r3, [r3, #24]
 80a1ac4:	9301      	str	r3, [sp, #4]
 80a1ac6:	bd08      	pop	{r3, pc}
 80a1ac8:	080601d8 	.word	0x080601d8

080a1acc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1acc:	b508      	push	{r3, lr}
 80a1ace:	4b02      	ldr	r3, [pc, #8]	; (80a1ad8 <HAL_USB_USART_Send_Data+0xc>)
 80a1ad0:	681b      	ldr	r3, [r3, #0]
 80a1ad2:	69db      	ldr	r3, [r3, #28]
 80a1ad4:	9301      	str	r3, [sp, #4]
 80a1ad6:	bd08      	pop	{r3, pc}
 80a1ad8:	080601d8 	.word	0x080601d8

080a1adc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1adc:	b508      	push	{r3, lr}
 80a1ade:	4b02      	ldr	r3, [pc, #8]	; (80a1ae8 <HAL_USB_USART_Flush_Data+0xc>)
 80a1ae0:	681b      	ldr	r3, [r3, #0]
 80a1ae2:	6a1b      	ldr	r3, [r3, #32]
 80a1ae4:	9301      	str	r3, [sp, #4]
 80a1ae6:	bd08      	pop	{r3, pc}
 80a1ae8:	080601d8 	.word	0x080601d8

080a1aec <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1aec:	b508      	push	{r3, lr}
 80a1aee:	4b02      	ldr	r3, [pc, #8]	; (80a1af8 <set_system_mode+0xc>)
 80a1af0:	681b      	ldr	r3, [r3, #0]
 80a1af2:	685b      	ldr	r3, [r3, #4]
 80a1af4:	9301      	str	r3, [sp, #4]
 80a1af6:	bd08      	pop	{r3, pc}
 80a1af8:	080601a4 	.word	0x080601a4

080a1afc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1afc:	b508      	push	{r3, lr}
 80a1afe:	4b02      	ldr	r3, [pc, #8]	; (80a1b08 <system_delay_ms+0xc>)
 80a1b00:	681b      	ldr	r3, [r3, #0]
 80a1b02:	695b      	ldr	r3, [r3, #20]
 80a1b04:	9301      	str	r3, [sp, #4]
 80a1b06:	bd08      	pop	{r3, pc}
 80a1b08:	080601a4 	.word	0x080601a4

080a1b0c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1b0c:	b508      	push	{r3, lr}
 80a1b0e:	4b02      	ldr	r3, [pc, #8]	; (80a1b18 <application_thread_current+0xc>)
 80a1b10:	681b      	ldr	r3, [r3, #0]
 80a1b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1b14:	9301      	str	r3, [sp, #4]
 80a1b16:	bd08      	pop	{r3, pc}
 80a1b18:	080601a4 	.word	0x080601a4

080a1b1c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1b1c:	b508      	push	{r3, lr}
 80a1b1e:	4b02      	ldr	r3, [pc, #8]	; (80a1b28 <application_thread_invoke+0xc>)
 80a1b20:	681b      	ldr	r3, [r3, #0]
 80a1b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1b24:	9301      	str	r3, [sp, #4]
 80a1b26:	bd08      	pop	{r3, pc}
 80a1b28:	080601a4 	.word	0x080601a4

080a1b2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1b2c:	b508      	push	{r3, lr}
 80a1b2e:	4b03      	ldr	r3, [pc, #12]	; (80a1b3c <system_ctrl_set_app_request_handler+0x10>)
 80a1b30:	681b      	ldr	r3, [r3, #0]
 80a1b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1b36:	9301      	str	r3, [sp, #4]
 80a1b38:	bd08      	pop	{r3, pc}
 80a1b3a:	0000      	.short	0x0000
 80a1b3c:	080601a4 	.word	0x080601a4

080a1b40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1b40:	b508      	push	{r3, lr}
 80a1b42:	4b03      	ldr	r3, [pc, #12]	; (80a1b50 <system_ctrl_set_result+0x10>)
 80a1b44:	681b      	ldr	r3, [r3, #0]
 80a1b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1b4a:	9301      	str	r3, [sp, #4]
 80a1b4c:	bd08      	pop	{r3, pc}
 80a1b4e:	0000      	.short	0x0000
 80a1b50:	080601a4 	.word	0x080601a4

080a1b54 <network_ready>:

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1b54:	b508      	push	{r3, lr}
 80a1b56:	4b02      	ldr	r3, [pc, #8]	; (80a1b60 <network_ready+0xc>)
 80a1b58:	681b      	ldr	r3, [r3, #0]
 80a1b5a:	691b      	ldr	r3, [r3, #16]
 80a1b5c:	9301      	str	r3, [sp, #4]
 80a1b5e:	bd08      	pop	{r3, pc}
 80a1b60:	080601c8 	.word	0x080601c8

080a1b64 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 80a1b64:	b508      	push	{r3, lr}
 80a1b66:	4b02      	ldr	r3, [pc, #8]	; (80a1b70 <spark_variable+0xc>)
 80a1b68:	681b      	ldr	r3, [r3, #0]
 80a1b6a:	681b      	ldr	r3, [r3, #0]
 80a1b6c:	9301      	str	r3, [sp, #4]
 80a1b6e:	bd08      	pop	{r3, pc}
 80a1b70:	080601cc 	.word	0x080601cc

080a1b74 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1b74:	b508      	push	{r3, lr}
 80a1b76:	4b02      	ldr	r3, [pc, #8]	; (80a1b80 <spark_function+0xc>)
 80a1b78:	681b      	ldr	r3, [r3, #0]
 80a1b7a:	685b      	ldr	r3, [r3, #4]
 80a1b7c:	9301      	str	r3, [sp, #4]
 80a1b7e:	bd08      	pop	{r3, pc}
 80a1b80:	080601cc 	.word	0x080601cc

080a1b84 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1b84:	b508      	push	{r3, lr}
 80a1b86:	4b02      	ldr	r3, [pc, #8]	; (80a1b90 <spark_send_event+0xc>)
 80a1b88:	681b      	ldr	r3, [r3, #0]
 80a1b8a:	6a1b      	ldr	r3, [r3, #32]
 80a1b8c:	9301      	str	r3, [sp, #4]
 80a1b8e:	bd08      	pop	{r3, pc}
 80a1b90:	080601cc 	.word	0x080601cc

080a1b94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1b94:	b508      	push	{r3, lr}
 80a1b96:	4b02      	ldr	r3, [pc, #8]	; (80a1ba0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1b98:	681b      	ldr	r3, [r3, #0]
 80a1b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1b9c:	9301      	str	r3, [sp, #4]
 80a1b9e:	bd08      	pop	{r3, pc}
 80a1ba0:	080601cc 	.word	0x080601cc

080a1ba4 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1ba4:	b508      	push	{r3, lr}
 80a1ba6:	4b02      	ldr	r3, [pc, #8]	; (80a1bb0 <malloc+0xc>)
 80a1ba8:	681b      	ldr	r3, [r3, #0]
 80a1baa:	681b      	ldr	r3, [r3, #0]
 80a1bac:	9301      	str	r3, [sp, #4]
 80a1bae:	bd08      	pop	{r3, pc}
 80a1bb0:	080601a0 	.word	0x080601a0

080a1bb4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1bb4:	b508      	push	{r3, lr}
 80a1bb6:	4b02      	ldr	r3, [pc, #8]	; (80a1bc0 <free+0xc>)
 80a1bb8:	681b      	ldr	r3, [r3, #0]
 80a1bba:	685b      	ldr	r3, [r3, #4]
 80a1bbc:	9301      	str	r3, [sp, #4]
 80a1bbe:	bd08      	pop	{r3, pc}
 80a1bc0:	080601a0 	.word	0x080601a0

080a1bc4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1bc4:	b508      	push	{r3, lr}
 80a1bc6:	4b02      	ldr	r3, [pc, #8]	; (80a1bd0 <realloc+0xc>)
 80a1bc8:	681b      	ldr	r3, [r3, #0]
 80a1bca:	689b      	ldr	r3, [r3, #8]
 80a1bcc:	9301      	str	r3, [sp, #4]
 80a1bce:	bd08      	pop	{r3, pc}
 80a1bd0:	080601a0 	.word	0x080601a0

080a1bd4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a1bd4:	b508      	push	{r3, lr}
 80a1bd6:	4b02      	ldr	r3, [pc, #8]	; (80a1be0 <snprintf+0xc>)
 80a1bd8:	681b      	ldr	r3, [r3, #0]
 80a1bda:	69db      	ldr	r3, [r3, #28]
 80a1bdc:	9301      	str	r3, [sp, #4]
 80a1bde:	bd08      	pop	{r3, pc}
 80a1be0:	080601a0 	.word	0x080601a0

080a1be4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1be4:	b508      	push	{r3, lr}
 80a1be6:	4b02      	ldr	r3, [pc, #8]	; (80a1bf0 <abort+0xc>)
 80a1be8:	681b      	ldr	r3, [r3, #0]
 80a1bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1bec:	9301      	str	r3, [sp, #4]
 80a1bee:	bd08      	pop	{r3, pc}
 80a1bf0:	080601a0 	.word	0x080601a0

080a1bf4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1bf4:	b508      	push	{r3, lr}
 80a1bf6:	4b02      	ldr	r3, [pc, #8]	; (80a1c00 <_malloc_r+0xc>)
 80a1bf8:	681b      	ldr	r3, [r3, #0]
 80a1bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1bfc:	9301      	str	r3, [sp, #4]
 80a1bfe:	bd08      	pop	{r3, pc}
 80a1c00:	080601a0 	.word	0x080601a0

080a1c04 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1c04:	4770      	bx	lr

080a1c06 <_ZN8SPIClassD0Ev>:
 80a1c06:	b510      	push	{r4, lr}
 80a1c08:	4604      	mov	r4, r0
 80a1c0a:	f7fe fa48 	bl	80a009e <_ZdlPv>
 80a1c0e:	4620      	mov	r0, r4
 80a1c10:	bd10      	pop	{r4, pc}
	...

080a1c14 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1c14:	b570      	push	{r4, r5, r6, lr}
 80a1c16:	4604      	mov	r4, r0
 80a1c18:	460e      	mov	r6, r1
 80a1c1a:	4b07      	ldr	r3, [pc, #28]	; (80a1c38 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1c1c:	2500      	movs	r5, #0
 80a1c1e:	6003      	str	r3, [r0, #0]
 80a1c20:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1c24:	f7ff fe88 	bl	80a1938 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1c28:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1c2a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1c2c:	f7ff fe1c 	bl	80a1868 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1c30:	60a5      	str	r5, [r4, #8]
}
 80a1c32:	4620      	mov	r0, r4
 80a1c34:	bd70      	pop	{r4, r5, r6, pc}
 80a1c36:	bf00      	nop
 80a1c38:	080a49cc 	.word	0x080a49cc

080a1c3c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1c3c:	7900      	ldrb	r0, [r0, #4]
 80a1c3e:	f7ff be1b 	b.w	80a1878 <HAL_SPI_Is_Enabled>

080a1c42 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a1c42:	4601      	mov	r1, r0
 80a1c44:	2200      	movs	r2, #0
 80a1c46:	208c      	movs	r0, #140	; 0x8c
 80a1c48:	f7ff be3e 	b.w	80a18c8 <HAL_Core_System_Reset_Ex>

080a1c4c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a1c4c:	2000      	movs	r0, #0
 80a1c4e:	f7ff bff8 	b.w	80a1c42 <_ZN11SystemClass5resetEm>
	...

080a1c54 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1c54:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a1c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a1c5a:	4c0d      	ldr	r4, [pc, #52]	; (80a1c90 <_GLOBAL__sub_I_System+0x3c>)
 80a1c5c:	2500      	movs	r5, #0
 80a1c5e:	8063      	strh	r3, [r4, #2]
 80a1c60:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c64:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1c66:	80a3      	strh	r3, [r4, #4]
 80a1c68:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1c6a:	f7ff ff3f 	bl	80a1aec <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a1c6e:	a802      	add	r0, sp, #8
 80a1c70:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1c74:	462a      	mov	r2, r5
 80a1c76:	4629      	mov	r1, r5
 80a1c78:	f7ff fe2e 	bl	80a18d8 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1c7c:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a1c7e:	2b1e      	cmp	r3, #30
 80a1c80:	d104      	bne.n	80a1c8c <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a1c82:	2303      	movs	r3, #3
 80a1c84:	7023      	strb	r3, [r4, #0]
 80a1c86:	2311      	movs	r3, #17
 80a1c88:	8065      	strh	r5, [r4, #2]
 80a1c8a:	80a3      	strh	r3, [r4, #4]
 80a1c8c:	b003      	add	sp, #12
 80a1c8e:	bd30      	pop	{r4, r5, pc}
 80a1c90:	2000049a 	.word	0x2000049a

080a1c94 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1c94:	b510      	push	{r4, lr}
 80a1c96:	4604      	mov	r4, r0
{
	free(buffer);
 80a1c98:	6800      	ldr	r0, [r0, #0]
 80a1c9a:	f7ff ff8b 	bl	80a1bb4 <free>
}
 80a1c9e:	4620      	mov	r0, r4
 80a1ca0:	bd10      	pop	{r4, pc}

080a1ca2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1ca2:	b510      	push	{r4, lr}
 80a1ca4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1ca6:	6800      	ldr	r0, [r0, #0]
 80a1ca8:	b108      	cbz	r0, 80a1cae <_ZN6String10invalidateEv+0xc>
 80a1caa:	f7ff ff83 	bl	80a1bb4 <free>
	buffer = NULL;
 80a1cae:	2300      	movs	r3, #0
 80a1cb0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1cb2:	60a3      	str	r3, [r4, #8]
 80a1cb4:	6063      	str	r3, [r4, #4]
 80a1cb6:	bd10      	pop	{r4, pc}

080a1cb8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1cb8:	b538      	push	{r3, r4, r5, lr}
 80a1cba:	4604      	mov	r4, r0
 80a1cbc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a1cbe:	6800      	ldr	r0, [r0, #0]
 80a1cc0:	3101      	adds	r1, #1
 80a1cc2:	f7ff ff7f 	bl	80a1bc4 <realloc>
	if (newbuffer) {
 80a1cc6:	b110      	cbz	r0, 80a1cce <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1cc8:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a1ccc:	2001      	movs	r0, #1
	}
	return 0;
}
 80a1cce:	bd38      	pop	{r3, r4, r5, pc}

080a1cd0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1cd0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a1cd2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a1cd4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a1cd6:	b113      	cbz	r3, 80a1cde <_ZN6String7reserveEj+0xe>
 80a1cd8:	6843      	ldr	r3, [r0, #4]
 80a1cda:	428b      	cmp	r3, r1
 80a1cdc:	d207      	bcs.n	80a1cee <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a1cde:	4620      	mov	r0, r4
 80a1ce0:	f7ff ffea 	bl	80a1cb8 <_ZN6String12changeBufferEj>
 80a1ce4:	b120      	cbz	r0, 80a1cf0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a1ce6:	68a3      	ldr	r3, [r4, #8]
 80a1ce8:	b90b      	cbnz	r3, 80a1cee <_ZN6String7reserveEj+0x1e>
 80a1cea:	6822      	ldr	r2, [r4, #0]
 80a1cec:	7013      	strb	r3, [r2, #0]
 80a1cee:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a1cf0:	bd10      	pop	{r4, pc}

080a1cf2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1cf2:	b570      	push	{r4, r5, r6, lr}
 80a1cf4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a1cf6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a1cf8:	4604      	mov	r4, r0
 80a1cfa:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a1cfc:	f7ff ffe8 	bl	80a1cd0 <_ZN6String7reserveEj>
 80a1d00:	b918      	cbnz	r0, 80a1d0a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a1d02:	4620      	mov	r0, r4
 80a1d04:	f7ff ffcd 	bl	80a1ca2 <_ZN6String10invalidateEv>
		return *this;
 80a1d08:	e009      	b.n	80a1d1e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a1d0a:	462a      	mov	r2, r5
 80a1d0c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a1d0e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a1d10:	6820      	ldr	r0, [r4, #0]
 80a1d12:	f002 fc79 	bl	80a4608 <memcpy>
	buffer[len] = 0;
 80a1d16:	6822      	ldr	r2, [r4, #0]
 80a1d18:	68a3      	ldr	r3, [r4, #8]
 80a1d1a:	2100      	movs	r1, #0
 80a1d1c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1d1e:	4620      	mov	r0, r4
 80a1d20:	bd70      	pop	{r4, r5, r6, pc}

080a1d22 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1d22:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d24:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1d26:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1d28:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1d2a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1d2c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1d2e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1d30:	460d      	mov	r5, r1
 80a1d32:	b139      	cbz	r1, 80a1d44 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1d34:	4608      	mov	r0, r1
 80a1d36:	f002 fcc6 	bl	80a46c6 <strlen>
 80a1d3a:	4629      	mov	r1, r5
 80a1d3c:	4602      	mov	r2, r0
 80a1d3e:	4620      	mov	r0, r4
 80a1d40:	f7ff ffd7 	bl	80a1cf2 <_ZN6String4copyEPKcj>
}
 80a1d44:	4620      	mov	r0, r4
 80a1d46:	bd38      	pop	{r3, r4, r5, pc}

080a1d48 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1d48:	b538      	push	{r3, r4, r5, lr}
 80a1d4a:	4605      	mov	r5, r0
	if (buffer) {
 80a1d4c:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a1d4e:	460c      	mov	r4, r1
	if (buffer) {
 80a1d50:	b160      	cbz	r0, 80a1d6c <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a1d52:	686a      	ldr	r2, [r5, #4]
 80a1d54:	688b      	ldr	r3, [r1, #8]
 80a1d56:	429a      	cmp	r2, r3
 80a1d58:	d306      	bcc.n	80a1d68 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a1d5a:	6809      	ldr	r1, [r1, #0]
 80a1d5c:	f002 fc90 	bl	80a4680 <strcpy>
			len = rhs.len;
 80a1d60:	68a3      	ldr	r3, [r4, #8]
 80a1d62:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a1d64:	2300      	movs	r3, #0
 80a1d66:	e00a      	b.n	80a1d7e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a1d68:	f7ff ff24 	bl	80a1bb4 <free>
		}
	}
	buffer = rhs.buffer;
 80a1d6c:	6823      	ldr	r3, [r4, #0]
 80a1d6e:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a1d70:	6863      	ldr	r3, [r4, #4]
 80a1d72:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a1d74:	68a3      	ldr	r3, [r4, #8]
 80a1d76:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a1d78:	2300      	movs	r3, #0
 80a1d7a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a1d7c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a1d7e:	60a3      	str	r3, [r4, #8]
 80a1d80:	bd38      	pop	{r3, r4, r5, pc}

080a1d82 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1d82:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1d84:	b510      	push	{r4, lr}
 80a1d86:	460b      	mov	r3, r1
 80a1d88:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1d8a:	d007      	beq.n	80a1d9c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1d8c:	6809      	ldr	r1, [r1, #0]
 80a1d8e:	b119      	cbz	r1, 80a1d98 <_ZN6StringaSERKS_+0x16>
 80a1d90:	689a      	ldr	r2, [r3, #8]
 80a1d92:	f7ff ffae 	bl	80a1cf2 <_ZN6String4copyEPKcj>
 80a1d96:	e001      	b.n	80a1d9c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1d98:	f7ff ff83 	bl	80a1ca2 <_ZN6String10invalidateEv>

	return *this;
}
 80a1d9c:	4620      	mov	r0, r4
 80a1d9e:	bd10      	pop	{r4, pc}

080a1da0 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1da0:	b510      	push	{r4, lr}
 80a1da2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1da4:	2300      	movs	r3, #0
 80a1da6:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1da8:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1daa:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1dac:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1dae:	f7ff ffe8 	bl	80a1d82 <_ZN6StringaSERKS_>
}
 80a1db2:	4620      	mov	r0, r4
 80a1db4:	bd10      	pop	{r4, pc}

080a1db6 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a1db6:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a1db8:	b510      	push	{r4, lr}
 80a1dba:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a1dbc:	d001      	beq.n	80a1dc2 <_ZN6StringaSEOS_+0xc>
 80a1dbe:	f7ff ffc3 	bl	80a1d48 <_ZN6String4moveERS_>
	return *this;
}
 80a1dc2:	4620      	mov	r0, r4
 80a1dc4:	bd10      	pop	{r4, pc}

080a1dc6 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a1dc6:	b538      	push	{r3, r4, r5, lr}
 80a1dc8:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1dca:	460c      	mov	r4, r1
 80a1dcc:	b141      	cbz	r1, 80a1de0 <_ZN6StringaSEPKc+0x1a>
 80a1dce:	4608      	mov	r0, r1
 80a1dd0:	f002 fc79 	bl	80a46c6 <strlen>
 80a1dd4:	4621      	mov	r1, r4
 80a1dd6:	4602      	mov	r2, r0
 80a1dd8:	4628      	mov	r0, r5
 80a1dda:	f7ff ff8a 	bl	80a1cf2 <_ZN6String4copyEPKcj>
 80a1dde:	e001      	b.n	80a1de4 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1de0:	f7ff ff5f 	bl	80a1ca2 <_ZN6String10invalidateEv>

	return *this;
}
 80a1de4:	4628      	mov	r0, r5
 80a1de6:	bd38      	pop	{r3, r4, r5, pc}

080a1de8 <_ZNK6String16equalsIgnoreCaseERKS_>:
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
 80a1de8:	4288      	cmp	r0, r1
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
 80a1dea:	b570      	push	{r4, r5, r6, lr}
	if (this == &s2) return 1;
 80a1dec:	d015      	beq.n	80a1e1a <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
	if (len != s2.len) return 0;
 80a1dee:	6883      	ldr	r3, [r0, #8]
 80a1df0:	688a      	ldr	r2, [r1, #8]
 80a1df2:	4293      	cmp	r3, r2
 80a1df4:	d10f      	bne.n	80a1e16 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
	if (len == 0) return 1;
 80a1df6:	b183      	cbz	r3, 80a1e1a <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
 80a1df8:	6804      	ldr	r4, [r0, #0]
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
 80a1dfa:	680d      	ldr	r5, [r1, #0]
 80a1dfc:	3c01      	subs	r4, #1
	while (*p1) {
 80a1dfe:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80a1e02:	b150      	cbz	r0, 80a1e1a <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
 80a1e04:	f002 fd12 	bl	80a482c <tolower>
 80a1e08:	4606      	mov	r6, r0
 80a1e0a:	f815 0b01 	ldrb.w	r0, [r5], #1
 80a1e0e:	f002 fd0d 	bl	80a482c <tolower>
 80a1e12:	4286      	cmp	r6, r0
 80a1e14:	d0f3      	beq.n	80a1dfe <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
 80a1e16:	2000      	movs	r0, #0
 80a1e18:	bd70      	pop	{r4, r5, r6, pc}
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
 80a1e1a:	2001      	movs	r0, #1
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	}
	return 1;
}
 80a1e1c:	bd70      	pop	{r4, r5, r6, pc}

080a1e1e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a1e1e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a1e20:	6883      	ldr	r3, [r0, #8]
 80a1e22:	4293      	cmp	r3, r2
 80a1e24:	d907      	bls.n	80a1e36 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a1e26:	6804      	ldr	r4, [r0, #0]
 80a1e28:	6809      	ldr	r1, [r1, #0]
 80a1e2a:	18a0      	adds	r0, r4, r2
 80a1e2c:	f002 fc53 	bl	80a46d6 <strstr>
	if (found == NULL) return -1;
 80a1e30:	b108      	cbz	r0, 80a1e36 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a1e32:	1b00      	subs	r0, r0, r4
 80a1e34:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 80a1e36:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
 80a1e3a:	bd10      	pop	{r4, pc}

080a1e3c <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
 80a1e3c:	2200      	movs	r2, #0
 80a1e3e:	f7ff bfee 	b.w	80a1e1e <_ZNK6String7indexOfERKS_j>
	...

080a1e44 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1e48:	461c      	mov	r4, r3
	if (left > right) {
 80a1e4a:	429a      	cmp	r2, r3
 80a1e4c:	bf88      	it	hi
 80a1e4e:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1e50:	460e      	mov	r6, r1
 80a1e52:	4615      	mov	r5, r2
	if (left > right) {
 80a1e54:	bf88      	it	hi
 80a1e56:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a1e58:	490d      	ldr	r1, [pc, #52]	; (80a1e90 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a1e5a:	bf88      	it	hi
 80a1e5c:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a1e5e:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a1e60:	f7ff ff5f 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a1e64:	68b1      	ldr	r1, [r6, #8]
 80a1e66:	428d      	cmp	r5, r1
 80a1e68:	d80f      	bhi.n	80a1e8a <_ZNK6String9substringEjj+0x46>
 80a1e6a:	428c      	cmp	r4, r1
 80a1e6c:	bf28      	it	cs
 80a1e6e:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a1e70:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a1e72:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a1e74:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a1e78:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a1e7a:	6831      	ldr	r1, [r6, #0]
 80a1e7c:	4638      	mov	r0, r7
 80a1e7e:	4429      	add	r1, r5
 80a1e80:	f7ff ffa1 	bl	80a1dc6 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a1e84:	6833      	ldr	r3, [r6, #0]
 80a1e86:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a1e8a:	4638      	mov	r0, r7
 80a1e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1e90:	080a49f6 	.word	0x080a49f6

080a1e94 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a1e94:	b510      	push	{r4, lr}
 80a1e96:	4604      	mov	r4, r0
	return substring(left, len);
 80a1e98:	688b      	ldr	r3, [r1, #8]
 80a1e9a:	f7ff ffd3 	bl	80a1e44 <_ZNK6String9substringEjj>
}
 80a1e9e:	4620      	mov	r0, r4
 80a1ea0:	bd10      	pop	{r4, pc}

080a1ea2 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a1ea2:	6800      	ldr	r0, [r0, #0]
 80a1ea4:	b108      	cbz	r0, 80a1eaa <_ZNK6String5toIntEv+0x8>
 80a1ea6:	f002 bb97 	b.w	80a45d8 <atol>
	return 0;
}
 80a1eaa:	4770      	bx	lr

080a1eac <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1eae:	4606      	mov	r6, r0
 80a1eb0:	460d      	mov	r5, r1
 80a1eb2:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1eb4:	2400      	movs	r4, #0
  while (size--) {
 80a1eb6:	42bd      	cmp	r5, r7
 80a1eb8:	d00c      	beq.n	80a1ed4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1eba:	6833      	ldr	r3, [r6, #0]
 80a1ebc:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1ec0:	689b      	ldr	r3, [r3, #8]
 80a1ec2:	4630      	mov	r0, r6
 80a1ec4:	4798      	blx	r3
     if (chunk>=0)
 80a1ec6:	2800      	cmp	r0, #0
 80a1ec8:	db01      	blt.n	80a1ece <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1eca:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1ecc:	e7f3      	b.n	80a1eb6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1ece:	2c00      	cmp	r4, #0
 80a1ed0:	bf08      	it	eq
 80a1ed2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1ed4:	4620      	mov	r0, r4
 80a1ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1ed8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1ed8:	b570      	push	{r4, r5, r6, lr}
 80a1eda:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1edc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1ede:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1ee0:	b149      	cbz	r1, 80a1ef6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1ee2:	f002 fbf0 	bl	80a46c6 <strlen>
 80a1ee6:	682b      	ldr	r3, [r5, #0]
 80a1ee8:	4602      	mov	r2, r0
 80a1eea:	4621      	mov	r1, r4
 80a1eec:	4628      	mov	r0, r5
    }
 80a1eee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1ef2:	68db      	ldr	r3, [r3, #12]
 80a1ef4:	4718      	bx	r3
    }
 80a1ef6:	bd70      	pop	{r4, r5, r6, pc}

080a1ef8 <_ZN5Print5printEPKc>:
 80a1ef8:	b508      	push	{r3, lr}
 80a1efa:	f7ff ffed 	bl	80a1ed8 <_ZN5Print5writeEPKc>
 80a1efe:	bd08      	pop	{r3, pc}

080a1f00 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1f00:	6803      	ldr	r3, [r0, #0]
 80a1f02:	689b      	ldr	r3, [r3, #8]
 80a1f04:	4718      	bx	r3

080a1f06 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1f06:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1f08:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1f0a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1f0c:	f7ff fff8 	bl	80a1f00 <_ZN5Print5printEc>
  n += print('\n');
 80a1f10:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1f12:	4604      	mov	r4, r0
  n += print('\n');
 80a1f14:	4628      	mov	r0, r5
 80a1f16:	f7ff fff3 	bl	80a1f00 <_ZN5Print5printEc>
  return n;
}
 80a1f1a:	4420      	add	r0, r4
 80a1f1c:	bd38      	pop	{r3, r4, r5, pc}

080a1f1e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a1f1e:	b538      	push	{r3, r4, r5, lr}
 80a1f20:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1f22:	f7ff ffd9 	bl	80a1ed8 <_ZN5Print5writeEPKc>
 80a1f26:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a1f28:	4628      	mov	r0, r5
 80a1f2a:	f7ff ffec 	bl	80a1f06 <_ZN5Print7printlnEv>
  return n;
}
 80a1f2e:	4420      	add	r0, r4
 80a1f30:	bd38      	pop	{r3, r4, r5, pc}

080a1f32 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1f32:	2a01      	cmp	r2, #1
 80a1f34:	bf98      	it	ls
 80a1f36:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1f38:	b530      	push	{r4, r5, lr}
 80a1f3a:	460b      	mov	r3, r1
 80a1f3c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1f3e:	2100      	movs	r1, #0
 80a1f40:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1f44:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1f48:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1f4c:	fb05 3312 	mls	r3, r5, r2, r3
 80a1f50:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1f52:	2b09      	cmp	r3, #9
 80a1f54:	bf94      	ite	ls
 80a1f56:	3330      	addls	r3, #48	; 0x30
 80a1f58:	3337      	addhi	r3, #55	; 0x37
 80a1f5a:	b2db      	uxtb	r3, r3
 80a1f5c:	4621      	mov	r1, r4
 80a1f5e:	f804 3901 	strb.w	r3, [r4], #-1
 80a1f62:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1f64:	2d00      	cmp	r5, #0
 80a1f66:	d1ef      	bne.n	80a1f48 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1f68:	f7ff ffb6 	bl	80a1ed8 <_ZN5Print5writeEPKc>
}
 80a1f6c:	b00b      	add	sp, #44	; 0x2c
 80a1f6e:	bd30      	pop	{r4, r5, pc}

080a1f70 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1f70:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1f72:	b922      	cbnz	r2, 80a1f7e <_ZN5Print5printEmi+0xe>
 80a1f74:	6803      	ldr	r3, [r0, #0]
 80a1f76:	b2c9      	uxtb	r1, r1
 80a1f78:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1f7a:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1f7c:	4718      	bx	r3
  else return printNumber(n, base);
 80a1f7e:	b2d2      	uxtb	r2, r2
}
 80a1f80:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1f82:	f7ff bfd6 	b.w	80a1f32 <_ZN5Print11printNumberEmh>

080a1f86 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1f86:	f7ff bff3 	b.w	80a1f70 <_ZN5Print5printEmi>

080a1f8a <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a1f8a:	b538      	push	{r3, r4, r5, lr}
 80a1f8c:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1f8e:	f7ff ffef 	bl	80a1f70 <_ZN5Print5printEmi>
 80a1f92:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a1f94:	4628      	mov	r0, r5
 80a1f96:	f7ff ffb6 	bl	80a1f06 <_ZN5Print7printlnEv>
  return n;
}
 80a1f9a:	4420      	add	r0, r4
 80a1f9c:	bd38      	pop	{r3, r4, r5, pc}

080a1f9e <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1fa2:	4607      	mov	r7, r0
 80a1fa4:	460e      	mov	r6, r1
  if (base == 0) {
 80a1fa6:	4615      	mov	r5, r2
 80a1fa8:	b92a      	cbnz	r2, 80a1fb6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1faa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1fae:	6803      	ldr	r3, [r0, #0]
 80a1fb0:	b2c9      	uxtb	r1, r1
 80a1fb2:	689b      	ldr	r3, [r3, #8]
 80a1fb4:	4718      	bx	r3
  } else if (base == 10) {
 80a1fb6:	2a0a      	cmp	r2, #10
 80a1fb8:	d102      	bne.n	80a1fc0 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1fba:	2900      	cmp	r1, #0
 80a1fbc:	da01      	bge.n	80a1fc2 <_ZN5Print5printEli+0x24>
 80a1fbe:	e004      	b.n	80a1fca <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1fc0:	b2d2      	uxtb	r2, r2
  }
}
 80a1fc2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1fc6:	f7ff bfb4 	b.w	80a1f32 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1fca:	212d      	movs	r1, #45	; 0x2d
 80a1fcc:	f7ff ff98 	bl	80a1f00 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1fd0:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1fd2:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1fd4:	4271      	negs	r1, r6
 80a1fd6:	4638      	mov	r0, r7
 80a1fd8:	f7ff ffab 	bl	80a1f32 <_ZN5Print11printNumberEmh>
 80a1fdc:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1fe2 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1fe2:	f7ff bfdc 	b.w	80a1f9e <_ZN5Print5printEli>

080a1fe6 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a1fe6:	b538      	push	{r3, r4, r5, lr}
 80a1fe8:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1fea:	f7ff ffd8 	bl	80a1f9e <_ZN5Print5printEli>
 80a1fee:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a1ff0:	4628      	mov	r0, r5
 80a1ff2:	f7ff ff88 	bl	80a1f06 <_ZN5Print7printlnEv>
  return n;
}
 80a1ff6:	4420      	add	r0, r4
 80a1ff8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1ffc <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2000:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2002:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2004:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2006:	4617      	mov	r7, r2
 80a2008:	461e      	mov	r6, r3
 80a200a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a200e:	f001 ffc1 	bl	80a3f94 <__aeabi_dcmpun>
 80a2012:	b108      	cbz	r0, 80a2018 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2014:	4947      	ldr	r1, [pc, #284]	; (80a2134 <_ZN5Print10printFloatEdh+0x138>)
 80a2016:	e012      	b.n	80a203e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2018:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a201c:	f04f 32ff 	mov.w	r2, #4294967295
 80a2020:	4b45      	ldr	r3, [pc, #276]	; (80a2138 <_ZN5Print10printFloatEdh+0x13c>)
 80a2022:	4638      	mov	r0, r7
 80a2024:	4621      	mov	r1, r4
 80a2026:	f001 ffb5 	bl	80a3f94 <__aeabi_dcmpun>
 80a202a:	b968      	cbnz	r0, 80a2048 <_ZN5Print10printFloatEdh+0x4c>
 80a202c:	f04f 32ff 	mov.w	r2, #4294967295
 80a2030:	4b41      	ldr	r3, [pc, #260]	; (80a2138 <_ZN5Print10printFloatEdh+0x13c>)
 80a2032:	4638      	mov	r0, r7
 80a2034:	4621      	mov	r1, r4
 80a2036:	f001 ff8f 	bl	80a3f58 <__aeabi_dcmple>
 80a203a:	b928      	cbnz	r0, 80a2048 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a203c:	493f      	ldr	r1, [pc, #252]	; (80a213c <_ZN5Print10printFloatEdh+0x140>)
 80a203e:	4640      	mov	r0, r8
 80a2040:	f7ff ff4a 	bl	80a1ed8 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a2048:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a204c:	4b3c      	ldr	r3, [pc, #240]	; (80a2140 <_ZN5Print10printFloatEdh+0x144>)
 80a204e:	4638      	mov	r0, r7
 80a2050:	4631      	mov	r1, r6
 80a2052:	f001 ff95 	bl	80a3f80 <__aeabi_dcmpgt>
 80a2056:	b108      	cbz	r0, 80a205c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2058:	493a      	ldr	r1, [pc, #232]	; (80a2144 <_ZN5Print10printFloatEdh+0x148>)
 80a205a:	e7f0      	b.n	80a203e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a205c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a2060:	4b39      	ldr	r3, [pc, #228]	; (80a2148 <_ZN5Print10printFloatEdh+0x14c>)
 80a2062:	4638      	mov	r0, r7
 80a2064:	4631      	mov	r1, r6
 80a2066:	f001 ff6d 	bl	80a3f44 <__aeabi_dcmplt>
 80a206a:	2800      	cmp	r0, #0
 80a206c:	d1f4      	bne.n	80a2058 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a206e:	2200      	movs	r2, #0
 80a2070:	2300      	movs	r3, #0
 80a2072:	4638      	mov	r0, r7
 80a2074:	4631      	mov	r1, r6
 80a2076:	f001 ff65 	bl	80a3f44 <__aeabi_dcmplt>
 80a207a:	b138      	cbz	r0, 80a208c <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a207c:	212d      	movs	r1, #45	; 0x2d
 80a207e:	4640      	mov	r0, r8
 80a2080:	f7ff ff3e 	bl	80a1f00 <_ZN5Print5printEc>
     number = -number;
 80a2084:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a2088:	4604      	mov	r4, r0
 80a208a:	e000      	b.n	80a208e <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a208c:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a208e:	492f      	ldr	r1, [pc, #188]	; (80a214c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2090:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2094:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a2096:	fa5f f389 	uxtb.w	r3, r9
 80a209a:	429d      	cmp	r5, r3
 80a209c:	d906      	bls.n	80a20ac <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a209e:	2200      	movs	r2, #0
 80a20a0:	4b2b      	ldr	r3, [pc, #172]	; (80a2150 <_ZN5Print10printFloatEdh+0x154>)
 80a20a2:	f001 fe07 	bl	80a3cb4 <__aeabi_ddiv>
 80a20a6:	f109 0901 	add.w	r9, r9, #1
 80a20aa:	e7f4      	b.n	80a2096 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a20ac:	463a      	mov	r2, r7
 80a20ae:	4633      	mov	r3, r6
 80a20b0:	f001 fb24 	bl	80a36fc <__adddf3>
 80a20b4:	460f      	mov	r7, r1
 80a20b6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a20b8:	f001 ffaa 	bl	80a4010 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a20bc:	220a      	movs	r2, #10
 80a20be:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a20c0:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a20c2:	4640      	mov	r0, r8
 80a20c4:	f7ff ff35 	bl	80a1f32 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a20c8:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a20ca:	b37d      	cbz	r5, 80a212c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a20cc:	4648      	mov	r0, r9
 80a20ce:	f001 fc51 	bl	80a3974 <__aeabi_ui2d>
 80a20d2:	4602      	mov	r2, r0
 80a20d4:	460b      	mov	r3, r1
 80a20d6:	4630      	mov	r0, r6
 80a20d8:	4639      	mov	r1, r7
 80a20da:	f001 fb0d 	bl	80a36f8 <__aeabi_dsub>
 80a20de:	4606      	mov	r6, r0
 80a20e0:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a20e2:	4640      	mov	r0, r8
 80a20e4:	491b      	ldr	r1, [pc, #108]	; (80a2154 <_ZN5Print10printFloatEdh+0x158>)
 80a20e6:	f7ff fef7 	bl	80a1ed8 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a20ea:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a20ec:	4b18      	ldr	r3, [pc, #96]	; (80a2150 <_ZN5Print10printFloatEdh+0x154>)
 80a20ee:	2200      	movs	r2, #0
 80a20f0:	4630      	mov	r0, r6
 80a20f2:	4639      	mov	r1, r7
 80a20f4:	f001 fcb4 	bl	80a3a60 <__aeabi_dmul>
 80a20f8:	460f      	mov	r7, r1
 80a20fa:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a20fc:	f001 ff60 	bl	80a3fc0 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2100:	220a      	movs	r2, #10
 80a2102:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a2104:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2106:	4640      	mov	r0, r8
 80a2108:	f7ff ff49 	bl	80a1f9e <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a210c:	4404      	add	r4, r0
    remainder -= toPrint;
 80a210e:	4648      	mov	r0, r9
 80a2110:	f001 fc40 	bl	80a3994 <__aeabi_i2d>
 80a2114:	4602      	mov	r2, r0
 80a2116:	460b      	mov	r3, r1
 80a2118:	4630      	mov	r0, r6
 80a211a:	4639      	mov	r1, r7
 80a211c:	f001 faec 	bl	80a36f8 <__aeabi_dsub>
 80a2120:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a2122:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a2126:	4606      	mov	r6, r0
 80a2128:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a212a:	d1df      	bne.n	80a20ec <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a212c:	4620      	mov	r0, r4
 80a212e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2132:	bf00      	nop
 80a2134:	080a49d4 	.word	0x080a49d4
 80a2138:	7fefffff 	.word	0x7fefffff
 80a213c:	080a49de 	.word	0x080a49de
 80a2140:	41efffff 	.word	0x41efffff
 80a2144:	080a49d8 	.word	0x080a49d8
 80a2148:	c1efffff 	.word	0xc1efffff
 80a214c:	3fe00000 	.word	0x3fe00000
 80a2150:	40240000 	.word	0x40240000
 80a2154:	080a49dc 	.word	0x080a49dc

080a2158 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a2158:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a215a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a215e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a2160:	9100      	str	r1, [sp, #0]
 80a2162:	f7ff ff4b 	bl	80a1ffc <_ZN5Print10printFloatEdh>
 80a2166:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a2168:	4628      	mov	r0, r5
 80a216a:	f7ff fecc 	bl	80a1f06 <_ZN5Print7printlnEv>
  return n;
}
 80a216e:	4420      	add	r0, r4
 80a2170:	b003      	add	sp, #12
 80a2172:	bd30      	pop	{r4, r5, pc}

080a2174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a2174:	680b      	ldr	r3, [r1, #0]
 80a2176:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a2178:	b113      	cbz	r3, 80a2180 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a217a:	685a      	ldr	r2, [r3, #4]
 80a217c:	3201      	adds	r2, #1
 80a217e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a2180:	4770      	bx	lr
	...

080a2184 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a2184:	4a01      	ldr	r2, [pc, #4]	; (80a218c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a2186:	4b02      	ldr	r3, [pc, #8]	; (80a2190 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2188:	601a      	str	r2, [r3, #0]
 80a218a:	4770      	bx	lr
 80a218c:	080a4a9b 	.word	0x080a4a9b
 80a2190:	200004a0 	.word	0x200004a0

080a2194 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a2194:	4b02      	ldr	r3, [pc, #8]	; (80a21a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a2196:	681a      	ldr	r2, [r3, #0]
 80a2198:	4b02      	ldr	r3, [pc, #8]	; (80a21a4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a219a:	601a      	str	r2, [r3, #0]
 80a219c:	4770      	bx	lr
 80a219e:	bf00      	nop
 80a21a0:	20000334 	.word	0x20000334
 80a21a4:	200004a4 	.word	0x200004a4

080a21a8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a21a8:	2100      	movs	r1, #0
 80a21aa:	f7ff bca7 	b.w	80a1afc <system_delay_ms>

080a21ae <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a21ae:	b510      	push	{r4, lr}
 80a21b0:	4604      	mov	r4, r0
 80a21b2:	f7fe f80c 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
 80a21b6:	4620      	mov	r0, r4
 80a21b8:	bd10      	pop	{r4, pc}

080a21ba <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a21ba:	b513      	push	{r0, r1, r4, lr}
 80a21bc:	460b      	mov	r3, r1
 80a21be:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a21c0:	c803      	ldmia	r0, {r0, r1}
 80a21c2:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a21c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a21ca:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a21ce:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a21d2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a21d6:	b002      	add	sp, #8
 80a21d8:	bd10      	pop	{r4, pc}
	...

080a21dc <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a21dc:	4803      	ldr	r0, [pc, #12]	; (80a21ec <_GLOBAL__sub_I_RGB+0x10>)
 80a21de:	2300      	movs	r3, #0
 80a21e0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a21e2:	4a03      	ldr	r2, [pc, #12]	; (80a21f0 <_GLOBAL__sub_I_RGB+0x14>)
 80a21e4:	4903      	ldr	r1, [pc, #12]	; (80a21f4 <_GLOBAL__sub_I_RGB+0x18>)
 80a21e6:	f000 be15 	b.w	80a2e14 <__aeabi_atexit>
 80a21ea:	bf00      	nop
 80a21ec:	200004a8 	.word	0x200004a8
 80a21f0:	200003a4 	.word	0x200003a4
 80a21f4:	080a21af 	.word	0x080a21af

080a21f8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a21f8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a21fa:	4b14      	ldr	r3, [pc, #80]	; (80a224c <serialEventRun+0x54>)
 80a21fc:	b133      	cbz	r3, 80a220c <serialEventRun+0x14>
 80a21fe:	f000 fbd5 	bl	80a29ac <_Z16_fetch_usbserialv>
 80a2202:	6803      	ldr	r3, [r0, #0]
 80a2204:	691b      	ldr	r3, [r3, #16]
 80a2206:	4798      	blx	r3
 80a2208:	2800      	cmp	r0, #0
 80a220a:	dc16      	bgt.n	80a223a <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a220c:	4b10      	ldr	r3, [pc, #64]	; (80a2250 <serialEventRun+0x58>)
 80a220e:	b133      	cbz	r3, 80a221e <serialEventRun+0x26>
 80a2210:	f000 fc76 	bl	80a2b00 <_Z22__fetch_global_Serial1v>
 80a2214:	6803      	ldr	r3, [r0, #0]
 80a2216:	691b      	ldr	r3, [r3, #16]
 80a2218:	4798      	blx	r3
 80a221a:	2800      	cmp	r0, #0
 80a221c:	dc10      	bgt.n	80a2240 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a221e:	4b0d      	ldr	r3, [pc, #52]	; (80a2254 <serialEventRun+0x5c>)
 80a2220:	b10b      	cbz	r3, 80a2226 <serialEventRun+0x2e>
 80a2222:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a2226:	4b0c      	ldr	r3, [pc, #48]	; (80a2258 <serialEventRun+0x60>)
 80a2228:	b17b      	cbz	r3, 80a224a <serialEventRun+0x52>
 80a222a:	f000 fbfb 	bl	80a2a24 <_Z17_fetch_usbserial1v>
 80a222e:	6803      	ldr	r3, [r0, #0]
 80a2230:	691b      	ldr	r3, [r3, #16]
 80a2232:	4798      	blx	r3
 80a2234:	2800      	cmp	r0, #0
 80a2236:	dc06      	bgt.n	80a2246 <serialEventRun+0x4e>
 80a2238:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a223a:	f3af 8000 	nop.w
 80a223e:	e7e5      	b.n	80a220c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a2240:	f3af 8000 	nop.w
 80a2244:	e7eb      	b.n	80a221e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a2246:	f3af 8000 	nop.w
 80a224a:	bd08      	pop	{r3, pc}
	...

080a225c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a225c:	b508      	push	{r3, lr}
	serialEventRun();
 80a225e:	f7ff ffcb 	bl	80a21f8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2262:	f7ff fb29 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a2266:	4b01      	ldr	r3, [pc, #4]	; (80a226c <_post_loop+0x10>)
 80a2268:	6018      	str	r0, [r3, #0]
 80a226a:	bd08      	pop	{r3, pc}
 80a226c:	20000940 	.word	0x20000940

080a2270 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a2270:	4802      	ldr	r0, [pc, #8]	; (80a227c <_Z33system_initialize_user_backup_ramv+0xc>)
 80a2272:	4a03      	ldr	r2, [pc, #12]	; (80a2280 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a2274:	4903      	ldr	r1, [pc, #12]	; (80a2284 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a2276:	1a12      	subs	r2, r2, r0
 80a2278:	f002 b9c6 	b.w	80a4608 <memcpy>
 80a227c:	40024000 	.word	0x40024000
 80a2280:	40024064 	.word	0x40024064
 80a2284:	080a4d70 	.word	0x080a4d70

080a2288 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2288:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a228a:	2300      	movs	r3, #0
 80a228c:	9300      	str	r3, [sp, #0]
 80a228e:	461a      	mov	r2, r3
 80a2290:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2294:	f7ff fc54 	bl	80a1b40 <system_ctrl_set_result>
}
 80a2298:	b003      	add	sp, #12
 80a229a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a22a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a22a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a22a2:	8843      	ldrh	r3, [r0, #2]
 80a22a4:	2b0a      	cmp	r3, #10
 80a22a6:	d008      	beq.n	80a22ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a22a8:	2b50      	cmp	r3, #80	; 0x50
 80a22aa:	d109      	bne.n	80a22c0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a22ac:	4b09      	ldr	r3, [pc, #36]	; (80a22d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a22ae:	681b      	ldr	r3, [r3, #0]
 80a22b0:	b13b      	cbz	r3, 80a22c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a22b2:	b003      	add	sp, #12
 80a22b4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a22b8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a22ba:	f7ff ffe5 	bl	80a2288 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a22be:	e006      	b.n	80a22ce <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a22c0:	2300      	movs	r3, #0
 80a22c2:	9300      	str	r3, [sp, #0]
 80a22c4:	461a      	mov	r2, r3
 80a22c6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a22ca:	f7ff fc39 	bl	80a1b40 <system_ctrl_set_result>
        break;
    }
}
 80a22ce:	b003      	add	sp, #12
 80a22d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80a22d4:	200004b8 	.word	0x200004b8

080a22d8 <module_user_init_hook>:

void module_user_init_hook()
{
 80a22d8:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a22da:	4c10      	ldr	r4, [pc, #64]	; (80a231c <module_user_init_hook+0x44>)
 80a22dc:	4d10      	ldr	r5, [pc, #64]	; (80a2320 <module_user_init_hook+0x48>)
 80a22de:	6823      	ldr	r3, [r4, #0]
 80a22e0:	42ab      	cmp	r3, r5
 80a22e2:	4b10      	ldr	r3, [pc, #64]	; (80a2324 <module_user_init_hook+0x4c>)
 80a22e4:	bf0c      	ite	eq
 80a22e6:	2201      	moveq	r2, #1
 80a22e8:	2200      	movne	r2, #0
 80a22ea:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a22ec:	d002      	beq.n	80a22f4 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a22ee:	f7ff ffbf 	bl	80a2270 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a22f2:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a22f4:	f7ff fac8 	bl	80a1888 <HAL_RNG_GetRandomNumber>
 80a22f8:	f002 f99a 	bl	80a4630 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a22fc:	4b0a      	ldr	r3, [pc, #40]	; (80a2328 <module_user_init_hook+0x50>)
 80a22fe:	b11b      	cbz	r3, 80a2308 <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a2300:	f7ff fac2 	bl	80a1888 <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a2304:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2308:	2100      	movs	r1, #0
 80a230a:	4807      	ldr	r0, [pc, #28]	; (80a2328 <module_user_init_hook+0x50>)
 80a230c:	f7ff fc42 	bl	80a1b94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a2314:	2100      	movs	r1, #0
 80a2316:	4805      	ldr	r0, [pc, #20]	; (80a232c <module_user_init_hook+0x54>)
 80a2318:	f7ff bc08 	b.w	80a1b2c <system_ctrl_set_app_request_handler>
 80a231c:	40024060 	.word	0x40024060
 80a2320:	9a271c1e 	.word	0x9a271c1e
 80a2324:	200004bc 	.word	0x200004bc
 80a2328:	00000000 	.word	0x00000000
 80a232c:	080a22a1 	.word	0x080a22a1

080a2330 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2330:	4770      	bx	lr

080a2332 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a2332:	2000      	movs	r0, #0
 80a2334:	4770      	bx	lr

080a2336 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a2336:	b510      	push	{r4, lr}
 80a2338:	4604      	mov	r4, r0
 80a233a:	f7fd feb0 	bl	80a009e <_ZdlPv>
 80a233e:	4620      	mov	r0, r4
 80a2340:	bd10      	pop	{r4, pc}

080a2342 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a2342:	b508      	push	{r3, lr}
      { delete this; }
 80a2344:	b108      	cbz	r0, 80a234a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a2346:	f7ff fff6 	bl	80a2336 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a234a:	bd08      	pop	{r3, pc}

080a234c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a234c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a234e:	68c4      	ldr	r4, [r0, #12]
 80a2350:	b1d4      	cbz	r4, 80a2388 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a2352:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a2354:	2b02      	cmp	r3, #2
 80a2356:	d102      	bne.n	80a235e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a2358:	68e0      	ldr	r0, [r4, #12]
 80a235a:	f7ff fc2b 	bl	80a1bb4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a235e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2360:	b12d      	cbz	r5, 80a236e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2362:	4628      	mov	r0, r5
 80a2364:	f7fd ff33 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
 80a2368:	4628      	mov	r0, r5
 80a236a:	f7fd fe98 	bl	80a009e <_ZdlPv>
 80a236e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a2370:	b12d      	cbz	r5, 80a237e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a2372:	4628      	mov	r0, r5
 80a2374:	f7fd ff2b 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
 80a2378:	4628      	mov	r0, r5
 80a237a:	f7fd fe90 	bl	80a009e <_ZdlPv>
 80a237e:	4620      	mov	r0, r4
 80a2380:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2384:	f7fd be8b 	b.w	80a009e <_ZdlPv>
 80a2388:	bd38      	pop	{r3, r4, r5, pc}

080a238a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a238a:	b510      	push	{r4, lr}
 80a238c:	b088      	sub	sp, #32
 80a238e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2390:	4668      	mov	r0, sp
 80a2392:	f7ff fcc6 	bl	80a1d22 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a2396:	4669      	mov	r1, sp
 80a2398:	a804      	add	r0, sp, #16
 80a239a:	f7ff fd01 	bl	80a1da0 <_ZN6StringC1ERKS_>
 80a239e:	a804      	add	r0, sp, #16
 80a23a0:	47a0      	blx	r4
 80a23a2:	4604      	mov	r4, r0
 80a23a4:	a804      	add	r0, sp, #16
 80a23a6:	f7ff fc75 	bl	80a1c94 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a23aa:	4668      	mov	r0, sp
 80a23ac:	f7ff fc72 	bl	80a1c94 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a23b0:	4620      	mov	r0, r4
 80a23b2:	b008      	add	sp, #32
 80a23b4:	bd10      	pop	{r4, pc}

080a23b6 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a23b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a23b8:	4607      	mov	r7, r0
 80a23ba:	460e      	mov	r6, r1
 80a23bc:	4615      	mov	r5, r2
 80a23be:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 80a23c0:	2410      	movs	r4, #16
 80a23c2:	4622      	mov	r2, r4
 80a23c4:	2100      	movs	r1, #0
 80a23c6:	4668      	mov	r0, sp
 80a23c8:	f002 f929 	bl	80a461e <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a23cc:	2200      	movs	r2, #0
 80a23ce:	4669      	mov	r1, sp
 80a23d0:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 80a23d2:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 80a23d6:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a23d8:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a23da:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a23dc:	f7ff fbca 	bl	80a1b74 <spark_function>
}
 80a23e0:	b005      	add	sp, #20
 80a23e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a23e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a23e4:	b513      	push	{r0, r1, r4, lr}
 80a23e6:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a23e8:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a23ec:	2300      	movs	r3, #0
 80a23ee:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a23f0:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a23f2:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a23f4:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a23f6:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a23f8:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a23fa:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a23fc:	f7fe f83c 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2400:	4620      	mov	r0, r4
 80a2402:	b002      	add	sp, #8
 80a2404:	bd10      	pop	{r4, pc}

080a2406 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a2406:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2408:	460c      	mov	r4, r1
 80a240a:	4606      	mov	r6, r0
 80a240c:	460f      	mov	r7, r1
 80a240e:	f854 3b04 	ldr.w	r3, [r4], #4
 80a2412:	ad02      	add	r5, sp, #8
 80a2414:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2418:	4621      	mov	r1, r4
 80a241a:	a801      	add	r0, sp, #4
 80a241c:	f7ff feaa 	bl	80a2174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a2420:	4629      	mov	r1, r5
 80a2422:	4630      	mov	r0, r6
 80a2424:	f7ff ffde 	bl	80a23e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2428:	a801      	add	r0, sp, #4
 80a242a:	f7fe f825 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a242e:	4620      	mov	r0, r4
 80a2430:	f7fe f822 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a2434:	4638      	mov	r0, r7
 80a2436:	f7fd fe32 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a243a:	4630      	mov	r0, r6
 80a243c:	b003      	add	sp, #12
 80a243e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2440 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2440:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2442:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2444:	b90a      	cbnz	r2, 80a244a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a2446:	f000 fd02 	bl	80a2e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a244a:	68c3      	ldr	r3, [r0, #12]
    }
 80a244c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2450:	4718      	bx	r3

080a2452 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2452:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2454:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2456:	f100 0110 	add.w	r1, r0, #16
 80a245a:	f7ff fff1 	bl	80a2440 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a245e:	bd08      	pop	{r3, pc}

080a2460 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2460:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a2462:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2464:	b90a      	cbnz	r2, 80a246a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a2466:	f000 fcf2 	bl	80a2e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a246a:	68c3      	ldr	r3, [r0, #12]
    }
 80a246c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2470:	4718      	bx	r3

080a2472 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a2472:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2474:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a2476:	f100 0110 	add.w	r1, r0, #16
 80a247a:	f7ff fff1 	bl	80a2460 <_ZNKSt8functionIFvRKbEEclES1_>
 80a247e:	bd08      	pop	{r3, pc}

080a2480 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2480:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2482:	2300      	movs	r3, #0
 80a2484:	6083      	str	r3, [r0, #8]
 80a2486:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2488:	4604      	mov	r4, r0
 80a248a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a248c:	b12b      	cbz	r3, 80a249a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a248e:	2202      	movs	r2, #2
 80a2490:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2492:	68eb      	ldr	r3, [r5, #12]
 80a2494:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2496:	68ab      	ldr	r3, [r5, #8]
 80a2498:	60a3      	str	r3, [r4, #8]
	}
    }
 80a249a:	4620      	mov	r0, r4
 80a249c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a24a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a24a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a24a4:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a24a8:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a24aa:	f04f 0002 	mov.w	r0, #2
 80a24ae:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a24b0:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24b4:	808b      	strh	r3, [r1, #4]
 80a24b6:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a24b8:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a24ba:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a24be:	600b      	str	r3, [r1, #0]
 80a24c0:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a24c4:	4299      	cmp	r1, r3
 80a24c6:	d103      	bne.n	80a24d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a24c8:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a24cc:	2d00      	cmp	r5, #0
 80a24ce:	d1f7      	bne.n	80a24c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a24d0:	d002      	beq.n	80a24d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a24d2:	f88d 1000 	strb.w	r1, [sp]
 80a24d6:	e06b      	b.n	80a25b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a24d8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a24dc:	bf1c      	itt	ne
 80a24de:	60e7      	strne	r7, [r4, #12]
 80a24e0:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a24e2:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a24e6:	bf18      	it	ne
 80a24e8:	461f      	movne	r7, r3
 80a24ea:	2301      	movs	r3, #1
 80a24ec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a24ee:	f3bf 8f5f 	dmb	sy
 80a24f2:	f104 0308 	add.w	r3, r4, #8
 80a24f6:	2000      	movs	r0, #0
 80a24f8:	e853 6f00 	ldrex	r6, [r3]
 80a24fc:	e843 0200 	strex	r2, r0, [r3]
 80a2500:	2a00      	cmp	r2, #0
 80a2502:	d1f9      	bne.n	80a24f8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a2504:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2508:	2e00      	cmp	r6, #0
 80a250a:	d051      	beq.n	80a25b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a250c:	f7ff fafe 	bl	80a1b0c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2510:	b120      	cbz	r0, 80a251c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2512:	4629      	mov	r1, r5
 80a2514:	4630      	mov	r0, r6
 80a2516:	f7ff ff93 	bl	80a2440 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a251a:	e043      	b.n	80a25a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a251c:	4631      	mov	r1, r6
 80a251e:	4668      	mov	r0, sp
 80a2520:	f7ff ffae 	bl	80a2480 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2524:	68e0      	ldr	r0, [r4, #12]
 80a2526:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a252a:	b108      	cbz	r0, 80a2530 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a252c:	f002 f8b0 	bl	80a4690 <strdup>
 80a2530:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2532:	2010      	movs	r0, #16
 80a2534:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a2538:	f7fd fdaf 	bl	80a009a <_Znwj>
 80a253c:	4605      	mov	r5, r0
 80a253e:	b330      	cbz	r0, 80a258e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2540:	f04f 0800 	mov.w	r8, #0
 80a2544:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2548:	2018      	movs	r0, #24
 80a254a:	f7fd fda6 	bl	80a009a <_Znwj>
 80a254e:	4604      	mov	r4, r0
 80a2550:	b1c0      	cbz	r0, 80a2584 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2552:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2556:	4601      	mov	r1, r0
 80a2558:	4668      	mov	r0, sp
 80a255a:	f7ff fe2e 	bl	80a21ba <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a255e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2560:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2562:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2564:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2566:	9202      	str	r2, [sp, #8]
 80a2568:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a256a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a256c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a2570:	9203      	str	r2, [sp, #12]
 80a2572:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2574:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a2578:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a257c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a257e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2582:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2584:	4b0d      	ldr	r3, [pc, #52]	; (80a25bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2586:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2588:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a258a:	4b0d      	ldr	r3, [pc, #52]	; (80a25c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a258c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a258e:	9804      	ldr	r0, [sp, #16]
 80a2590:	f7ff fb10 	bl	80a1bb4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2594:	4668      	mov	r0, sp
 80a2596:	f7fd fe1a 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a259a:	2200      	movs	r2, #0
 80a259c:	4629      	mov	r1, r5
 80a259e:	4809      	ldr	r0, [pc, #36]	; (80a25c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a25a0:	f7ff fabc 	bl	80a1b1c <application_thread_invoke>
 80a25a4:	4630      	mov	r0, r6
 80a25a6:	f7fd fe12 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a25aa:	4630      	mov	r0, r6
 80a25ac:	f7fd fd77 	bl	80a009e <_ZdlPv>
 80a25b0:	4638      	mov	r0, r7
 80a25b2:	f7ff faff 	bl	80a1bb4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a25b6:	b006      	add	sp, #24
 80a25b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a25bc:	080a2453 	.word	0x080a2453
 80a25c0:	080a26b1 	.word	0x080a26b1
 80a25c4:	080a2b4d 	.word	0x080a2b4d

080a25c8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a25c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25cc:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a25ce:	ad07      	add	r5, sp, #28
 80a25d0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a25d4:	4606      	mov	r6, r0
 80a25d6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a25d8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a25da:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a25dc:	460f      	mov	r7, r1
 80a25de:	4690      	mov	r8, r2
 80a25e0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a25e4:	f8c5 b004 	str.w	fp, [r5, #4]
 80a25e8:	f8c5 b008 	str.w	fp, [r5, #8]
 80a25ec:	9307      	str	r3, [sp, #28]
 80a25ee:	f7fd fd54 	bl	80a009a <_Znwj>
 80a25f2:	4604      	mov	r4, r0
 80a25f4:	b138      	cbz	r0, 80a2606 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a25f6:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a25fa:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a25fe:	f8c0 b004 	str.w	fp, [r0, #4]
 80a2602:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2606:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2608:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a260a:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a260c:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a260e:	f7fd fd44 	bl	80a009a <_Znwj>
 80a2612:	b128      	cbz	r0, 80a2620 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2614:	2301      	movs	r3, #1
 80a2616:	6043      	str	r3, [r0, #4]
 80a2618:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a261a:	4b23      	ldr	r3, [pc, #140]	; (80a26a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a261c:	60c4      	str	r4, [r0, #12]
 80a261e:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2620:	4b22      	ldr	r3, [pc, #136]	; (80a26ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2622:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2624:	2008      	movs	r0, #8
 80a2626:	9308      	str	r3, [sp, #32]
 80a2628:	f7fd fd37 	bl	80a009a <_Znwj>
 80a262c:	4604      	mov	r4, r0
 80a262e:	b128      	cbz	r0, 80a263c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2630:	9b03      	ldr	r3, [sp, #12]
 80a2632:	a904      	add	r1, sp, #16
 80a2634:	f840 3b04 	str.w	r3, [r0], #4
 80a2638:	f7ff fd9c 	bl	80a2174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a263c:	9500      	str	r5, [sp, #0]
 80a263e:	fa5f f38a 	uxtb.w	r3, sl
 80a2642:	464a      	mov	r2, r9
 80a2644:	4641      	mov	r1, r8
 80a2646:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2648:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a264a:	f7ff fa9b 	bl	80a1b84 <spark_send_event>
 80a264e:	b9b8      	cbnz	r0, 80a2680 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2650:	9b03      	ldr	r3, [sp, #12]
 80a2652:	785b      	ldrb	r3, [r3, #1]
 80a2654:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2658:	b993      	cbnz	r3, 80a2680 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a265a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a265e:	a905      	add	r1, sp, #20
 80a2660:	a803      	add	r0, sp, #12
 80a2662:	9205      	str	r2, [sp, #20]
 80a2664:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2668:	f7ff ff1a 	bl	80a24a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a266c:	9805      	ldr	r0, [sp, #20]
 80a266e:	f7ff faa1 	bl	80a1bb4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2672:	a805      	add	r0, sp, #20
 80a2674:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2676:	f7ff fec6 	bl	80a2406 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a267a:	a806      	add	r0, sp, #24
 80a267c:	f7fd fefc 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2680:	9b03      	ldr	r3, [sp, #12]
 80a2682:	a904      	add	r1, sp, #16
 80a2684:	a806      	add	r0, sp, #24
 80a2686:	9305      	str	r3, [sp, #20]
 80a2688:	f7ff fd74 	bl	80a2174 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a268c:	a905      	add	r1, sp, #20
 80a268e:	4630      	mov	r0, r6
 80a2690:	f7ff fea8 	bl	80a23e4 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2694:	a806      	add	r0, sp, #24
 80a2696:	f7fd feef 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a269a:	a804      	add	r0, sp, #16
 80a269c:	f7fd feec 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a26a0:	4630      	mov	r0, r6
 80a26a2:	b00b      	add	sp, #44	; 0x2c
 80a26a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a26a8:	080a4af4 	.word	0x080a4af4
 80a26ac:	080a2819 	.word	0x080a2819

080a26b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a26b0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a26b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a26b4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a26b6:	d006      	beq.n	80a26c6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a26b8:	2a03      	cmp	r2, #3
 80a26ba:	d017      	beq.n	80a26ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a26bc:	2a01      	cmp	r2, #1
 80a26be:	d120      	bne.n	80a2702 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a26c0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a26c2:	6003      	str	r3, [r0, #0]
	      break;
 80a26c4:	e01d      	b.n	80a2702 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a26c6:	2018      	movs	r0, #24
 80a26c8:	680e      	ldr	r6, [r1, #0]
 80a26ca:	f7fd fce6 	bl	80a009a <_Znwj>
 80a26ce:	4605      	mov	r5, r0
 80a26d0:	b150      	cbz	r0, 80a26e8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a26d2:	4631      	mov	r1, r6
 80a26d4:	f7ff fed4 	bl	80a2480 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a26d8:	6930      	ldr	r0, [r6, #16]
 80a26da:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a26de:	b108      	cbz	r0, 80a26e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a26e0:	f001 ffd6 	bl	80a4690 <strdup>
 80a26e4:	6128      	str	r0, [r5, #16]
 80a26e6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a26e8:	6025      	str	r5, [r4, #0]
 80a26ea:	e00a      	b.n	80a2702 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a26ec:	6804      	ldr	r4, [r0, #0]
 80a26ee:	b144      	cbz	r4, 80a2702 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a26f0:	6920      	ldr	r0, [r4, #16]
 80a26f2:	f7ff fa5f 	bl	80a1bb4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a26f6:	4620      	mov	r0, r4
 80a26f8:	f7fd fd69 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a26fc:	4620      	mov	r0, r4
 80a26fe:	f7fd fcce 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2702:	2000      	movs	r0, #0
 80a2704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2706 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2706:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2708:	2300      	movs	r3, #0
 80a270a:	6083      	str	r3, [r0, #8]
 80a270c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a270e:	4604      	mov	r4, r0
 80a2710:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2712:	b12b      	cbz	r3, 80a2720 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2714:	2202      	movs	r2, #2
 80a2716:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2718:	68eb      	ldr	r3, [r5, #12]
 80a271a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a271c:	68ab      	ldr	r3, [r5, #8]
 80a271e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2720:	4620      	mov	r0, r4
 80a2722:	bd38      	pop	{r3, r4, r5, pc}

080a2724 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2724:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2726:	b570      	push	{r4, r5, r6, lr}
 80a2728:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a272a:	d006      	beq.n	80a273a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a272c:	2a03      	cmp	r2, #3
 80a272e:	d011      	beq.n	80a2754 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2730:	2a01      	cmp	r2, #1
 80a2732:	d117      	bne.n	80a2764 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2734:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2736:	6003      	str	r3, [r0, #0]
	      break;
 80a2738:	e014      	b.n	80a2764 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a273a:	2014      	movs	r0, #20
 80a273c:	680e      	ldr	r6, [r1, #0]
 80a273e:	f7fd fcac 	bl	80a009a <_Znwj>
 80a2742:	4605      	mov	r5, r0
 80a2744:	b120      	cbz	r0, 80a2750 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2746:	4631      	mov	r1, r6
 80a2748:	f7ff ffdd 	bl	80a2706 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a274c:	7c33      	ldrb	r3, [r6, #16]
 80a274e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2750:	6025      	str	r5, [r4, #0]
 80a2752:	e007      	b.n	80a2764 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2754:	6804      	ldr	r4, [r0, #0]
 80a2756:	b12c      	cbz	r4, 80a2764 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2758:	4620      	mov	r0, r4
 80a275a:	f7fd fd38 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a275e:	4620      	mov	r0, r4
 80a2760:	f7fd fc9d 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2764:	2000      	movs	r0, #0
 80a2766:	bd70      	pop	{r4, r5, r6, pc}

080a2768 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2768:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a276a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a276c:	f3bf 8f5f 	dmb	sy
 80a2770:	b087      	sub	sp, #28
 80a2772:	2300      	movs	r3, #0
 80a2774:	e850 6f00 	ldrex	r6, [r0]
 80a2778:	e840 3200 	strex	r2, r3, [r0]
 80a277c:	2a00      	cmp	r2, #0
 80a277e:	d1f9      	bne.n	80a2774 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2780:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2784:	2e00      	cmp	r6, #0
 80a2786:	d03e      	beq.n	80a2806 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2788:	4618      	mov	r0, r3
 80a278a:	f7ff f9bf 	bl	80a1b0c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a278e:	4607      	mov	r7, r0
 80a2790:	b120      	cbz	r0, 80a279c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2792:	4621      	mov	r1, r4
 80a2794:	4630      	mov	r0, r6
 80a2796:	f7ff fe63 	bl	80a2460 <_ZNKSt8functionIFvRKbEEclES1_>
 80a279a:	e02e      	b.n	80a27fa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a279c:	4631      	mov	r1, r6
 80a279e:	a801      	add	r0, sp, #4
 80a27a0:	f7ff ffb1 	bl	80a2706 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a27a4:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a27a6:	2010      	movs	r0, #16
 80a27a8:	f88d 3014 	strb.w	r3, [sp, #20]
 80a27ac:	f7fd fc75 	bl	80a009a <_Znwj>
 80a27b0:	4605      	mov	r5, r0
 80a27b2:	b1d0      	cbz	r0, 80a27ea <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a27b4:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a27b6:	2014      	movs	r0, #20
 80a27b8:	f7fd fc6f 	bl	80a009a <_Znwj>
 80a27bc:	4604      	mov	r4, r0
 80a27be:	b178      	cbz	r0, 80a27e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a27c0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a27c2:	4601      	mov	r1, r0
 80a27c4:	a801      	add	r0, sp, #4
 80a27c6:	f7ff fcf8 	bl	80a21ba <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a27ca:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a27cc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a27ce:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a27d0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a27d2:	9203      	str	r2, [sp, #12]
 80a27d4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a27d6:	60e3      	str	r3, [r4, #12]
 80a27d8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a27dc:	9204      	str	r2, [sp, #16]
 80a27de:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a27e0:	4b0a      	ldr	r3, [pc, #40]	; (80a280c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a27e2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a27e4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a27e6:	4b0a      	ldr	r3, [pc, #40]	; (80a2810 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a27e8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a27ea:	a801      	add	r0, sp, #4
 80a27ec:	f7fd fcef 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a27f0:	2200      	movs	r2, #0
 80a27f2:	4629      	mov	r1, r5
 80a27f4:	4807      	ldr	r0, [pc, #28]	; (80a2814 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a27f6:	f7ff f991 	bl	80a1b1c <application_thread_invoke>
 80a27fa:	4630      	mov	r0, r6
 80a27fc:	f7fd fce7 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2800:	4630      	mov	r0, r6
 80a2802:	f7fd fc4c 	bl	80a009e <_ZdlPv>
        }
    }
 80a2806:	b007      	add	sp, #28
 80a2808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a280a:	bf00      	nop
 80a280c:	080a2473 	.word	0x080a2473
 80a2810:	080a2725 	.word	0x080a2725
 80a2814:	080a2b4d 	.word	0x080a2b4d

080a2818 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2818:	b530      	push	{r4, r5, lr}
 80a281a:	4604      	mov	r4, r0
 80a281c:	b085      	sub	sp, #20
 80a281e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2820:	4668      	mov	r0, sp
 80a2822:	4611      	mov	r1, r2
 80a2824:	f7ff fdef 	bl	80a2406 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2828:	b17c      	cbz	r4, 80a284a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a282a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a282c:	4628      	mov	r0, r5
 80a282e:	b10d      	cbz	r5, 80a2834 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2830:	f001 ff2e 	bl	80a4690 <strdup>
 80a2834:	9002      	str	r0, [sp, #8]
 80a2836:	a902      	add	r1, sp, #8
 80a2838:	4668      	mov	r0, sp
 80a283a:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a283e:	f7ff fe2f 	bl	80a24a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a2842:	9802      	ldr	r0, [sp, #8]
 80a2844:	f7ff f9b6 	bl	80a1bb4 <free>
 80a2848:	e01d      	b.n	80a2886 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a284a:	f04f 0201 	mov.w	r2, #1
 80a284e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2850:	f88d 4008 	strb.w	r4, [sp, #8]
 80a2854:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2858:	42a3      	cmp	r3, r4
 80a285a:	d103      	bne.n	80a2864 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a285c:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2860:	2900      	cmp	r1, #0
 80a2862:	d1f7      	bne.n	80a2854 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2864:	d002      	beq.n	80a286c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2866:	f88d 3008 	strb.w	r3, [sp, #8]
 80a286a:	e00c      	b.n	80a2886 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a286c:	f110 010c 	adds.w	r1, r0, #12
 80a2870:	f04f 0301 	mov.w	r3, #1
 80a2874:	bf18      	it	ne
 80a2876:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2878:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a287c:	3004      	adds	r0, #4
 80a287e:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2882:	f7ff ff71 	bl	80a2768 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2886:	a801      	add	r0, sp, #4
 80a2888:	f7fd fdf6 	bl	80a0478 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a288c:	b005      	add	sp, #20
 80a288e:	bd30      	pop	{r4, r5, pc}

080a2890 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2890:	4770      	bx	lr

080a2892 <_ZN9IPAddressD0Ev>:
 80a2892:	b510      	push	{r4, lr}
 80a2894:	4604      	mov	r4, r0
 80a2896:	f7fd fc02 	bl	80a009e <_ZdlPv>
 80a289a:	4620      	mov	r0, r4
 80a289c:	bd10      	pop	{r4, pc}

080a289e <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a289e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a28a0:	460f      	mov	r7, r1
 80a28a2:	f100 0608 	add.w	r6, r0, #8
 80a28a6:	1d05      	adds	r5, r0, #4
 80a28a8:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a28aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a28ae:	220a      	movs	r2, #10
 80a28b0:	4638      	mov	r0, r7
 80a28b2:	f7ff fb68 	bl	80a1f86 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a28b6:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a28b8:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a28ba:	d007      	beq.n	80a28cc <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a28bc:	2c00      	cmp	r4, #0
 80a28be:	d0f4      	beq.n	80a28aa <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a28c0:	212e      	movs	r1, #46	; 0x2e
 80a28c2:	4638      	mov	r0, r7
 80a28c4:	f7ff fb1c 	bl	80a1f00 <_ZN5Print5printEc>
 80a28c8:	4404      	add	r4, r0
 80a28ca:	e7ee      	b.n	80a28aa <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a28cc:	4620      	mov	r0, r4
 80a28ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a28d0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a28d0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a28d2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a28d6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a28da:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a28de:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a28e2:	2304      	movs	r3, #4
 80a28e4:	6041      	str	r1, [r0, #4]
 80a28e6:	7503      	strb	r3, [r0, #20]
 80a28e8:	bd10      	pop	{r4, pc}
	...

080a28ec <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a28ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a28ee:	4d04      	ldr	r5, [pc, #16]	; (80a2900 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a28f0:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a28f2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a28f6:	9500      	str	r5, [sp, #0]
 80a28f8:	f7ff ffea 	bl	80a28d0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a28fc:	b003      	add	sp, #12
 80a28fe:	bd30      	pop	{r4, r5, pc}
 80a2900:	080a4b10 	.word	0x080a4b10

080a2904 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2904:	7441      	strb	r1, [r0, #17]
 80a2906:	4770      	bx	lr

080a2908 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a2908:	4770      	bx	lr

080a290a <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a290a:	2100      	movs	r1, #0
 80a290c:	7c00      	ldrb	r0, [r0, #16]
 80a290e:	f7ff b8d5 	b.w	80a1abc <HAL_USB_USART_Receive_Data>

080a2912 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a2912:	2101      	movs	r1, #1
 80a2914:	7c00      	ldrb	r0, [r0, #16]
 80a2916:	f7ff b8d1 	b.w	80a1abc <HAL_USB_USART_Receive_Data>

080a291a <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a291a:	7c00      	ldrb	r0, [r0, #16]
 80a291c:	f7ff b8c6 	b.w	80a1aac <HAL_USB_USART_Available_Data_For_Write>

080a2920 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a2920:	7c00      	ldrb	r0, [r0, #16]
 80a2922:	f7ff b8bb 	b.w	80a1a9c <HAL_USB_USART_Available_Data>

080a2926 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a2926:	b538      	push	{r3, r4, r5, lr}
 80a2928:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a292a:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a292c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a292e:	f7ff f8bd 	bl	80a1aac <HAL_USB_USART_Available_Data_For_Write>
 80a2932:	2800      	cmp	r0, #0
 80a2934:	dc01      	bgt.n	80a293a <_ZN9USBSerial5writeEh+0x14>
 80a2936:	7c60      	ldrb	r0, [r4, #17]
 80a2938:	b120      	cbz	r0, 80a2944 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a293a:	4629      	mov	r1, r5
 80a293c:	7c20      	ldrb	r0, [r4, #16]
 80a293e:	f7ff f8c5 	bl	80a1acc <HAL_USB_USART_Send_Data>
    return 1;
 80a2942:	2001      	movs	r0, #1
  }
  return 0;
}
 80a2944:	bd38      	pop	{r3, r4, r5, pc}

080a2946 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2946:	7c00      	ldrb	r0, [r0, #16]
 80a2948:	f7ff b8c8 	b.w	80a1adc <HAL_USB_USART_Flush_Data>

080a294c <_ZN9USBSerialD0Ev>:
 80a294c:	b510      	push	{r4, lr}
 80a294e:	4604      	mov	r4, r0
 80a2950:	f7fd fba5 	bl	80a009e <_ZdlPv>
 80a2954:	4620      	mov	r0, r4
 80a2956:	bd10      	pop	{r4, pc}

080a2958 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2958:	b510      	push	{r4, lr}
 80a295a:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a295c:	2300      	movs	r3, #0
 80a295e:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2964:	60a3      	str	r3, [r4, #8]
 80a2966:	4b05      	ldr	r3, [pc, #20]	; (80a297c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2968:	4608      	mov	r0, r1
 80a296a:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a296c:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a296e:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2970:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2972:	4611      	mov	r1, r2
 80a2974:	f7ff f88a 	bl	80a1a8c <HAL_USB_USART_Init>
}
 80a2978:	4620      	mov	r0, r4
 80a297a:	bd10      	pop	{r4, pc}
 80a297c:	080a4b24 	.word	0x080a4b24

080a2980 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2980:	b510      	push	{r4, lr}
 80a2982:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2984:	2214      	movs	r2, #20
 80a2986:	2100      	movs	r1, #0
 80a2988:	f001 fe49 	bl	80a461e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a298c:	4b05      	ldr	r3, [pc, #20]	; (80a29a4 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a298e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2990:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2992:	4b05      	ldr	r3, [pc, #20]	; (80a29a8 <_Z19acquireSerialBufferv+0x28>)
 80a2994:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2996:	f240 1301 	movw	r3, #257	; 0x101
 80a299a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a299c:	2381      	movs	r3, #129	; 0x81
 80a299e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a29a0:	bd10      	pop	{r4, pc}
 80a29a2:	bf00      	nop
 80a29a4:	20000545 	.word	0x20000545
 80a29a8:	200004c4 	.word	0x200004c4

080a29ac <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a29ac:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a29ae:	4d0e      	ldr	r5, [pc, #56]	; (80a29e8 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a29b0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a29b2:	a801      	add	r0, sp, #4
 80a29b4:	f7ff ffe4 	bl	80a2980 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a29b8:	6829      	ldr	r1, [r5, #0]
 80a29ba:	f011 0401 	ands.w	r4, r1, #1
 80a29be:	d110      	bne.n	80a29e2 <_Z16_fetch_usbserialv+0x36>
 80a29c0:	4628      	mov	r0, r5
 80a29c2:	f7fd fb6e 	bl	80a00a2 <__cxa_guard_acquire>
 80a29c6:	b160      	cbz	r0, 80a29e2 <_Z16_fetch_usbserialv+0x36>
 80a29c8:	aa01      	add	r2, sp, #4
 80a29ca:	4621      	mov	r1, r4
 80a29cc:	4807      	ldr	r0, [pc, #28]	; (80a29ec <_Z16_fetch_usbserialv+0x40>)
 80a29ce:	f7ff ffc3 	bl	80a2958 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a29d2:	4628      	mov	r0, r5
 80a29d4:	f7fd fb6a 	bl	80a00ac <__cxa_guard_release>
 80a29d8:	4a05      	ldr	r2, [pc, #20]	; (80a29f0 <_Z16_fetch_usbserialv+0x44>)
 80a29da:	4906      	ldr	r1, [pc, #24]	; (80a29f4 <_Z16_fetch_usbserialv+0x48>)
 80a29dc:	4803      	ldr	r0, [pc, #12]	; (80a29ec <_Z16_fetch_usbserialv+0x40>)
 80a29de:	f000 fa19 	bl	80a2e14 <__aeabi_atexit>
	return _usbserial;
}
 80a29e2:	4802      	ldr	r0, [pc, #8]	; (80a29ec <_Z16_fetch_usbserialv+0x40>)
 80a29e4:	b007      	add	sp, #28
 80a29e6:	bd30      	pop	{r4, r5, pc}
 80a29e8:	200004c0 	.word	0x200004c0
 80a29ec:	20000648 	.word	0x20000648
 80a29f0:	200003a4 	.word	0x200003a4
 80a29f4:	080a2909 	.word	0x080a2909

080a29f8 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a29f8:	b510      	push	{r4, lr}
 80a29fa:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a29fc:	2214      	movs	r2, #20
 80a29fe:	2100      	movs	r1, #0
 80a2a00:	f001 fe0d 	bl	80a461e <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2a04:	4b05      	ldr	r3, [pc, #20]	; (80a2a1c <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2a06:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2a08:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2a0a:	4b05      	ldr	r3, [pc, #20]	; (80a2a20 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2a0c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2a0e:	f240 1301 	movw	r3, #257	; 0x101
 80a2a12:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2a14:	2381      	movs	r3, #129	; 0x81
 80a2a16:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2a18:	bd10      	pop	{r4, pc}
 80a2a1a:	bf00      	nop
 80a2a1c:	200006f8 	.word	0x200006f8
 80a2a20:	20000660 	.word	0x20000660

080a2a24 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2a24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2a26:	4c0e      	ldr	r4, [pc, #56]	; (80a2a60 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2a28:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2a2a:	a801      	add	r0, sp, #4
 80a2a2c:	f7ff ffe4 	bl	80a29f8 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2a30:	6823      	ldr	r3, [r4, #0]
 80a2a32:	07db      	lsls	r3, r3, #31
 80a2a34:	d410      	bmi.n	80a2a58 <_Z17_fetch_usbserial1v+0x34>
 80a2a36:	4620      	mov	r0, r4
 80a2a38:	f7fd fb33 	bl	80a00a2 <__cxa_guard_acquire>
 80a2a3c:	b160      	cbz	r0, 80a2a58 <_Z17_fetch_usbserial1v+0x34>
 80a2a3e:	aa01      	add	r2, sp, #4
 80a2a40:	2101      	movs	r1, #1
 80a2a42:	4808      	ldr	r0, [pc, #32]	; (80a2a64 <_Z17_fetch_usbserial1v+0x40>)
 80a2a44:	f7ff ff88 	bl	80a2958 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2a48:	4620      	mov	r0, r4
 80a2a4a:	f7fd fb2f 	bl	80a00ac <__cxa_guard_release>
 80a2a4e:	4a06      	ldr	r2, [pc, #24]	; (80a2a68 <_Z17_fetch_usbserial1v+0x44>)
 80a2a50:	4906      	ldr	r1, [pc, #24]	; (80a2a6c <_Z17_fetch_usbserial1v+0x48>)
 80a2a52:	4804      	ldr	r0, [pc, #16]	; (80a2a64 <_Z17_fetch_usbserial1v+0x40>)
 80a2a54:	f000 f9de 	bl	80a2e14 <__aeabi_atexit>
  return _usbserial1;
}
 80a2a58:	4802      	ldr	r0, [pc, #8]	; (80a2a64 <_Z17_fetch_usbserial1v+0x40>)
 80a2a5a:	b006      	add	sp, #24
 80a2a5c:	bd10      	pop	{r4, pc}
 80a2a5e:	bf00      	nop
 80a2a60:	2000065c 	.word	0x2000065c
 80a2a64:	200006e4 	.word	0x200006e4
 80a2a68:	200003a4 	.word	0x200003a4
 80a2a6c:	080a2909 	.word	0x080a2909

080a2a70 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a2a70:	f7fe bef2 	b.w	80a1858 <HAL_Interrupts_Disable_All>

080a2a74 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a2a74:	f7fe bee8 	b.w	80a1848 <HAL_Interrupts_Enable_All>

080a2a78 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2a78:	4770      	bx	lr

080a2a7a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2a7a:	7441      	strb	r1, [r0, #17]
 80a2a7c:	4770      	bx	lr

080a2a7e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a2a7e:	7c00      	ldrb	r0, [r0, #16]
 80a2a80:	f7fe bfa2 	b.w	80a19c8 <HAL_USART_Available_Data_For_Write>

080a2a84 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a2a84:	7c00      	ldrb	r0, [r0, #16]
 80a2a86:	f7fe bf77 	b.w	80a1978 <HAL_USART_Available_Data>

080a2a8a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a2a8a:	7c00      	ldrb	r0, [r0, #16]
 80a2a8c:	f7fe bf84 	b.w	80a1998 <HAL_USART_Peek_Data>

080a2a90 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a2a90:	7c00      	ldrb	r0, [r0, #16]
 80a2a92:	f7fe bf79 	b.w	80a1988 <HAL_USART_Read_Data>

080a2a96 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2a96:	7c00      	ldrb	r0, [r0, #16]
 80a2a98:	f7fe bf86 	b.w	80a19a8 <HAL_USART_Flush_Data>

080a2a9c <_ZN11USARTSerialD0Ev>:
 80a2a9c:	b510      	push	{r4, lr}
 80a2a9e:	4604      	mov	r4, r0
 80a2aa0:	f7fd fafd 	bl	80a009e <_ZdlPv>
 80a2aa4:	4620      	mov	r0, r4
 80a2aa6:	bd10      	pop	{r4, pc}

080a2aa8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2aa8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2aaa:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2aac:	4604      	mov	r4, r0
 80a2aae:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2ab0:	b925      	cbnz	r5, 80a2abc <_ZN11USARTSerial5writeEh+0x14>
 80a2ab2:	7c00      	ldrb	r0, [r0, #16]
 80a2ab4:	f7fe ff88 	bl	80a19c8 <HAL_USART_Available_Data_For_Write>
 80a2ab8:	2800      	cmp	r0, #0
 80a2aba:	dd05      	ble.n	80a2ac8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2abc:	4631      	mov	r1, r6
 80a2abe:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2ac0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2ac4:	f7fe bf50 	b.w	80a1968 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2ac8:	4628      	mov	r0, r5
 80a2aca:	bd70      	pop	{r4, r5, r6, pc}

080a2acc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2acc:	b510      	push	{r4, lr}
 80a2ace:	4604      	mov	r4, r0
 80a2ad0:	4608      	mov	r0, r1
 80a2ad2:	4611      	mov	r1, r2
 80a2ad4:	2200      	movs	r2, #0
 80a2ad6:	6062      	str	r2, [r4, #4]
 80a2ad8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2adc:	60a2      	str	r2, [r4, #8]
 80a2ade:	4a05      	ldr	r2, [pc, #20]	; (80a2af4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2ae0:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2ae2:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2ae4:	2201      	movs	r2, #1
 80a2ae6:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2ae8:	461a      	mov	r2, r3
 80a2aea:	f7fe ff35 	bl	80a1958 <HAL_USART_Init>
}
 80a2aee:	4620      	mov	r0, r4
 80a2af0:	bd10      	pop	{r4, pc}
 80a2af2:	bf00      	nop
 80a2af4:	080a4b54 	.word	0x080a4b54

080a2af8 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2af8:	7c00      	ldrb	r0, [r0, #16]
 80a2afa:	f7fe bf5d 	b.w	80a19b8 <HAL_USART_Is_Enabled>
	...

080a2b00 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2b00:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2b02:	4d0c      	ldr	r5, [pc, #48]	; (80a2b34 <_Z22__fetch_global_Serial1v+0x34>)
 80a2b04:	6829      	ldr	r1, [r5, #0]
 80a2b06:	f011 0401 	ands.w	r4, r1, #1
 80a2b0a:	d111      	bne.n	80a2b30 <_Z22__fetch_global_Serial1v+0x30>
 80a2b0c:	4628      	mov	r0, r5
 80a2b0e:	f7fd fac8 	bl	80a00a2 <__cxa_guard_acquire>
 80a2b12:	b168      	cbz	r0, 80a2b30 <_Z22__fetch_global_Serial1v+0x30>
 80a2b14:	4a08      	ldr	r2, [pc, #32]	; (80a2b38 <_Z22__fetch_global_Serial1v+0x38>)
 80a2b16:	4621      	mov	r1, r4
 80a2b18:	4b08      	ldr	r3, [pc, #32]	; (80a2b3c <_Z22__fetch_global_Serial1v+0x3c>)
 80a2b1a:	4809      	ldr	r0, [pc, #36]	; (80a2b40 <_Z22__fetch_global_Serial1v+0x40>)
 80a2b1c:	f7ff ffd6 	bl	80a2acc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2b20:	4628      	mov	r0, r5
 80a2b22:	f7fd fac3 	bl	80a00ac <__cxa_guard_release>
 80a2b26:	4a07      	ldr	r2, [pc, #28]	; (80a2b44 <_Z22__fetch_global_Serial1v+0x44>)
 80a2b28:	4907      	ldr	r1, [pc, #28]	; (80a2b48 <_Z22__fetch_global_Serial1v+0x48>)
 80a2b2a:	4805      	ldr	r0, [pc, #20]	; (80a2b40 <_Z22__fetch_global_Serial1v+0x40>)
 80a2b2c:	f000 f972 	bl	80a2e14 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2b30:	4803      	ldr	r0, [pc, #12]	; (80a2b40 <_Z22__fetch_global_Serial1v+0x40>)
 80a2b32:	bd38      	pop	{r3, r4, r5, pc}
 80a2b34:	20000894 	.word	0x20000894
 80a2b38:	20000898 	.word	0x20000898
 80a2b3c:	20000810 	.word	0x20000810
 80a2b40:	200007fc 	.word	0x200007fc
 80a2b44:	200003a4 	.word	0x200003a4
 80a2b48:	080a2a79 	.word	0x080a2a79

080a2b4c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2b4c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2b4e:	6883      	ldr	r3, [r0, #8]
 80a2b50:	4604      	mov	r4, r0
 80a2b52:	b90b      	cbnz	r3, 80a2b58 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2b54:	f000 f97b 	bl	80a2e4e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2b58:	68c3      	ldr	r3, [r0, #12]
 80a2b5a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2b5c:	68a3      	ldr	r3, [r4, #8]
 80a2b5e:	b11b      	cbz	r3, 80a2b68 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a2b60:	2203      	movs	r2, #3
 80a2b62:	4621      	mov	r1, r4
 80a2b64:	4620      	mov	r0, r4
 80a2b66:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2b68:	4620      	mov	r0, r4
}
 80a2b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2b6e:	f7fd ba96 	b.w	80a009e <_ZdlPv>

080a2b72 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2b72:	4770      	bx	lr

080a2b74 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2b76:	4606      	mov	r6, r0
 80a2b78:	4615      	mov	r5, r2
 80a2b7a:	460c      	mov	r4, r1
 80a2b7c:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2b7e:	42bc      	cmp	r4, r7
 80a2b80:	d006      	beq.n	80a2b90 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2b82:	6833      	ldr	r3, [r6, #0]
 80a2b84:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2b88:	689b      	ldr	r3, [r3, #8]
 80a2b8a:	4630      	mov	r0, r6
 80a2b8c:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a2b8e:	e7f6      	b.n	80a2b7e <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a2b90:	4628      	mov	r0, r5
 80a2b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2b94 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2b94:	2200      	movs	r2, #0
 80a2b96:	7c00      	ldrb	r0, [r0, #16]
 80a2b98:	f7fe bf3e 	b.w	80a1a18 <HAL_I2C_Write_Data>

080a2b9c <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a2b9c:	2100      	movs	r1, #0
 80a2b9e:	7c00      	ldrb	r0, [r0, #16]
 80a2ba0:	f7fe bf42 	b.w	80a1a28 <HAL_I2C_Available_Data>

080a2ba4 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2ba4:	2100      	movs	r1, #0
 80a2ba6:	7c00      	ldrb	r0, [r0, #16]
 80a2ba8:	f7fe bf46 	b.w	80a1a38 <HAL_I2C_Read_Data>

080a2bac <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a2bac:	2100      	movs	r1, #0
 80a2bae:	7c00      	ldrb	r0, [r0, #16]
 80a2bb0:	f7fe bf4a 	b.w	80a1a48 <HAL_I2C_Peek_Data>

080a2bb4 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a2bb4:	2100      	movs	r1, #0
 80a2bb6:	7c00      	ldrb	r0, [r0, #16]
 80a2bb8:	f7fe bf4e 	b.w	80a1a58 <HAL_I2C_Flush_Data>

080a2bbc <_ZN7TwoWireD0Ev>:
 80a2bbc:	b510      	push	{r4, lr}
 80a2bbe:	4604      	mov	r4, r0
 80a2bc0:	f7fd fa6d 	bl	80a009e <_ZdlPv>
 80a2bc4:	4620      	mov	r0, r4
 80a2bc6:	bd10      	pop	{r4, pc}

080a2bc8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2bc8:	b510      	push	{r4, lr}
 80a2bca:	4604      	mov	r4, r0
 80a2bcc:	4608      	mov	r0, r1
 80a2bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2bd2:	60a3      	str	r3, [r4, #8]
 80a2bd4:	4b04      	ldr	r3, [pc, #16]	; (80a2be8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a2bd6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a2bd8:	7420      	strb	r0, [r4, #16]
 80a2bda:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a2bdc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a2bde:	f7fe ff4b 	bl	80a1a78 <HAL_I2C_Init>

}
 80a2be2:	4620      	mov	r0, r4
 80a2be4:	bd10      	pop	{r4, pc}
 80a2be6:	bf00      	nop
 80a2be8:	080a4b84 	.word	0x080a4b84

080a2bec <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a2bec:	2300      	movs	r3, #0
 80a2bee:	461a      	mov	r2, r3
 80a2bf0:	4619      	mov	r1, r3
 80a2bf2:	7c00      	ldrb	r0, [r0, #16]
 80a2bf4:	f7fe bef0 	b.w	80a19d8 <HAL_I2C_Begin>

080a2bf8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a2bf8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a2bfa:	2400      	movs	r4, #0
 80a2bfc:	7c00      	ldrb	r0, [r0, #16]
 80a2bfe:	9400      	str	r4, [sp, #0]
 80a2c00:	f7fe fef2 	bl	80a19e8 <HAL_I2C_Request_Data>
  return result;
}
 80a2c04:	b2c0      	uxtb	r0, r0
 80a2c06:	b002      	add	sp, #8
 80a2c08:	bd10      	pop	{r4, pc}

080a2c0a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2c0a:	2301      	movs	r3, #1
 80a2c0c:	f7ff bff4 	b.w	80a2bf8 <_ZN7TwoWire11requestFromEhhh>

080a2c10 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a2c10:	2301      	movs	r3, #1
 80a2c12:	b2d2      	uxtb	r2, r2
 80a2c14:	b2c9      	uxtb	r1, r1
 80a2c16:	f7ff bfef 	b.w	80a2bf8 <_ZN7TwoWire11requestFromEhhh>

080a2c1a <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2c1a:	2200      	movs	r2, #0
 80a2c1c:	7c00      	ldrb	r0, [r0, #16]
 80a2c1e:	f7fe beeb 	b.w	80a19f8 <HAL_I2C_Begin_Transmission>

080a2c22 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a2c22:	b2c9      	uxtb	r1, r1
 80a2c24:	f7ff bff9 	b.w	80a2c1a <_ZN7TwoWire17beginTransmissionEh>

080a2c28 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a2c28:	2200      	movs	r2, #0
 80a2c2a:	7c00      	ldrb	r0, [r0, #16]
 80a2c2c:	f7fe beec 	b.w	80a1a08 <HAL_I2C_End_Transmission>

080a2c30 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2c30:	2101      	movs	r1, #1
 80a2c32:	f7ff bff9 	b.w	80a2c28 <_ZN7TwoWire15endTransmissionEh>

080a2c36 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a2c36:	2100      	movs	r1, #0
 80a2c38:	7c00      	ldrb	r0, [r0, #16]
 80a2c3a:	f7fe bf15 	b.w	80a1a68 <HAL_I2C_Is_Enabled>

080a2c3e <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a2c3e:	4770      	bx	lr

080a2c40 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2c40:	2200      	movs	r2, #0
 80a2c42:	4611      	mov	r1, r2
 80a2c44:	4610      	mov	r0, r2
 80a2c46:	f7fe bf85 	b.w	80a1b54 <network_ready>
	...

080a2c4c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a2c4c:	4803      	ldr	r0, [pc, #12]	; (80a2c5c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a2c4e:	4b04      	ldr	r3, [pc, #16]	; (80a2c60 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a2c50:	4a04      	ldr	r2, [pc, #16]	; (80a2c64 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a2c52:	4905      	ldr	r1, [pc, #20]	; (80a2c68 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a2c54:	6003      	str	r3, [r0, #0]
 80a2c56:	f000 b8dd 	b.w	80a2e14 <__aeabi_atexit>
 80a2c5a:	bf00      	nop
 80a2c5c:	2000091c 	.word	0x2000091c
 80a2c60:	080a4bac 	.word	0x080a4bac
 80a2c64:	200003a4 	.word	0x200003a4
 80a2c68:	080a2c3f 	.word	0x080a2c3f

080a2c6c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2c6c:	b510      	push	{r4, lr}
 80a2c6e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2c70:	480f      	ldr	r0, [pc, #60]	; (80a2cb0 <pinAvailable+0x44>)
 80a2c72:	f7fe ffe3 	bl	80a1c3c <_ZN8SPIClass9isEnabledEv>
 80a2c76:	b128      	cbz	r0, 80a2c84 <pinAvailable+0x18>
 80a2c78:	f1a4 030d 	sub.w	r3, r4, #13
 80a2c7c:	2b02      	cmp	r3, #2
 80a2c7e:	d801      	bhi.n	80a2c84 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2c80:	2000      	movs	r0, #0
 80a2c82:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2c84:	f000 f8a6 	bl	80a2dd4 <_Z19__fetch_global_Wirev>
 80a2c88:	f7ff ffd5 	bl	80a2c36 <_ZN7TwoWire9isEnabledEv>
 80a2c8c:	b108      	cbz	r0, 80a2c92 <pinAvailable+0x26>
 80a2c8e:	2c01      	cmp	r4, #1
 80a2c90:	d9f6      	bls.n	80a2c80 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2c92:	f7ff ff35 	bl	80a2b00 <_Z22__fetch_global_Serial1v>
 80a2c96:	f7ff ff2f 	bl	80a2af8 <_ZN11USARTSerial9isEnabledEv>
 80a2c9a:	b118      	cbz	r0, 80a2ca4 <pinAvailable+0x38>
 80a2c9c:	f1a4 0312 	sub.w	r3, r4, #18
 80a2ca0:	2b01      	cmp	r3, #1
 80a2ca2:	d9ed      	bls.n	80a2c80 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2ca4:	2c17      	cmp	r4, #23
 80a2ca6:	bf8c      	ite	hi
 80a2ca8:	2000      	movhi	r0, #0
 80a2caa:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2cac:	bd10      	pop	{r4, pc}
 80a2cae:	bf00      	nop
 80a2cb0:	20000920 	.word	0x20000920

080a2cb4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2cb4:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2cb6:	b538      	push	{r3, r4, r5, lr}
 80a2cb8:	4604      	mov	r4, r0
 80a2cba:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2cbc:	d80a      	bhi.n	80a2cd4 <pinMode+0x20>
 80a2cbe:	29ff      	cmp	r1, #255	; 0xff
 80a2cc0:	d008      	beq.n	80a2cd4 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2cc2:	f7ff ffd3 	bl	80a2c6c <pinAvailable>
 80a2cc6:	b128      	cbz	r0, 80a2cd4 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2cc8:	4629      	mov	r1, r5
 80a2cca:	4620      	mov	r0, r4
}
 80a2ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2cd0:	f7fe bdaa 	b.w	80a1828 <HAL_Pin_Mode>
 80a2cd4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2cd8 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2cd8:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2cda:	4c0c      	ldr	r4, [pc, #48]	; (80a2d0c <_GLOBAL__sub_I_SPI+0x34>)
 80a2cdc:	4e0c      	ldr	r6, [pc, #48]	; (80a2d10 <_GLOBAL__sub_I_SPI+0x38>)
 80a2cde:	4d0d      	ldr	r5, [pc, #52]	; (80a2d14 <_GLOBAL__sub_I_SPI+0x3c>)
 80a2ce0:	2100      	movs	r1, #0
 80a2ce2:	4620      	mov	r0, r4
 80a2ce4:	f7fe ff96 	bl	80a1c14 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2ce8:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2cea:	4c0b      	ldr	r4, [pc, #44]	; (80a2d18 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2cec:	4632      	mov	r2, r6
 80a2cee:	4629      	mov	r1, r5
 80a2cf0:	f000 f890 	bl	80a2e14 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2cf4:	2101      	movs	r1, #1
 80a2cf6:	4620      	mov	r0, r4
 80a2cf8:	f7fe ff8c 	bl	80a1c14 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2cfc:	4632      	mov	r2, r6
 80a2cfe:	4629      	mov	r1, r5
 80a2d00:	4620      	mov	r0, r4
 80a2d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2d06:	f000 b885 	b.w	80a2e14 <__aeabi_atexit>
 80a2d0a:	bf00      	nop
 80a2d0c:	20000920 	.word	0x20000920
 80a2d10:	200003a4 	.word	0x200003a4
 80a2d14:	080a1c05 	.word	0x080a1c05
 80a2d18:	20000930 	.word	0x20000930

080a2d1c <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a2d1c:	b530      	push	{r4, r5, lr}
 80a2d1e:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a2d20:	4d1b      	ldr	r5, [pc, #108]	; (80a2d90 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a2d22:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 80a2d24:	6820      	ldr	r0, [r4, #0]
 80a2d26:	f7fe fdb7 	bl	80a1898 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2d2a:	f7fe fdc5 	bl	80a18b8 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a2d2e:	682b      	ldr	r3, [r5, #0]
 80a2d30:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 80a2d32:	1ac0      	subs	r0, r0, r3
 80a2d34:	4290      	cmp	r0, r2
 80a2d36:	d3f5      	bcc.n	80a2d24 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 80a2d38:	6823      	ldr	r3, [r4, #0]
 80a2d3a:	b333      	cbz	r3, 80a2d8a <_ZN19ApplicationWatchdog4loopEv+0x6e>
 80a2d3c:	68e3      	ldr	r3, [r4, #12]
 80a2d3e:	b323      	cbz	r3, 80a2d8a <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2d40:	1d25      	adds	r5, r4, #4
 80a2d42:	6923      	ldr	r3, [r4, #16]
 80a2d44:	4628      	mov	r0, r5
 80a2d46:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d48:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2d4a:	a904      	add	r1, sp, #16
 80a2d4c:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2d4e:	9302      	str	r3, [sp, #8]
 80a2d50:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2d52:	f7ff fa32 	bl	80a21ba <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d56:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2d58:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d5a:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2d5c:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d5e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2d60:	9a07      	ldr	r2, [sp, #28]
 80a2d62:	4629      	mov	r1, r5
 80a2d64:	a804      	add	r0, sp, #16
 80a2d66:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d68:	9307      	str	r3, [sp, #28]
 80a2d6a:	f7ff fa26 	bl	80a21ba <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d6e:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a2d70:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d72:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2d74:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a2d76:	9206      	str	r2, [sp, #24]
 80a2d78:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2d7a:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80a2d7c:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2d7e:	9207      	str	r2, [sp, #28]
 80a2d80:	f7fd fa25 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
 80a2d84:	4668      	mov	r0, sp
 80a2d86:	f7fd fa22 	bl	80a01ce <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80a2d8a:	b009      	add	sp, #36	; 0x24
 80a2d8c:	bd30      	pop	{r4, r5, pc}
 80a2d8e:	bf00      	nop
 80a2d90:	20000940 	.word	0x20000940

080a2d94 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80a2d94:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80a2d96:	f7ff ffc1 	bl	80a2d1c <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80a2d9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80a2d9e:	2000      	movs	r0, #0
 80a2da0:	f7fe bdc2 	b.w	80a1928 <os_thread_cleanup>

080a2da4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2da4:	b513      	push	{r0, r1, r4, lr}
 80a2da6:	4c08      	ldr	r4, [pc, #32]	; (80a2dc8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2da8:	2300      	movs	r3, #0
 80a2daa:	461a      	mov	r2, r3
 80a2dac:	4619      	mov	r1, r3
 80a2dae:	9300      	str	r3, [sp, #0]
 80a2db0:	4620      	mov	r0, r4
 80a2db2:	f7ff fd9b 	bl	80a28ec <_ZN9IPAddressC1Ehhhh>
 80a2db6:	4620      	mov	r0, r4
 80a2db8:	4a04      	ldr	r2, [pc, #16]	; (80a2dcc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2dba:	4905      	ldr	r1, [pc, #20]	; (80a2dd0 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2dbc:	b002      	add	sp, #8
 80a2dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2dc2:	f000 b827 	b.w	80a2e14 <__aeabi_atexit>
 80a2dc6:	bf00      	nop
 80a2dc8:	20000944 	.word	0x20000944
 80a2dcc:	200003a4 	.word	0x200003a4
 80a2dd0:	080a2891 	.word	0x080a2891

080a2dd4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2dd4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2dd6:	4d0b      	ldr	r5, [pc, #44]	; (80a2e04 <_Z19__fetch_global_Wirev+0x30>)
 80a2dd8:	6829      	ldr	r1, [r5, #0]
 80a2dda:	f011 0401 	ands.w	r4, r1, #1
 80a2dde:	d10f      	bne.n	80a2e00 <_Z19__fetch_global_Wirev+0x2c>
 80a2de0:	4628      	mov	r0, r5
 80a2de2:	f7fd f95e 	bl	80a00a2 <__cxa_guard_acquire>
 80a2de6:	b158      	cbz	r0, 80a2e00 <_Z19__fetch_global_Wirev+0x2c>
 80a2de8:	4621      	mov	r1, r4
 80a2dea:	4807      	ldr	r0, [pc, #28]	; (80a2e08 <_Z19__fetch_global_Wirev+0x34>)
 80a2dec:	f7ff feec 	bl	80a2bc8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2df0:	4628      	mov	r0, r5
 80a2df2:	f7fd f95b 	bl	80a00ac <__cxa_guard_release>
 80a2df6:	4a05      	ldr	r2, [pc, #20]	; (80a2e0c <_Z19__fetch_global_Wirev+0x38>)
 80a2df8:	4905      	ldr	r1, [pc, #20]	; (80a2e10 <_Z19__fetch_global_Wirev+0x3c>)
 80a2dfa:	4803      	ldr	r0, [pc, #12]	; (80a2e08 <_Z19__fetch_global_Wirev+0x34>)
 80a2dfc:	f000 f80a 	bl	80a2e14 <__aeabi_atexit>
	return wire;
}
 80a2e00:	4801      	ldr	r0, [pc, #4]	; (80a2e08 <_Z19__fetch_global_Wirev+0x34>)
 80a2e02:	bd38      	pop	{r3, r4, r5, pc}
 80a2e04:	2000095c 	.word	0x2000095c
 80a2e08:	20000960 	.word	0x20000960
 80a2e0c:	200003a4 	.word	0x200003a4
 80a2e10:	080a2b73 	.word	0x080a2b73

080a2e14 <__aeabi_atexit>:
 80a2e14:	460b      	mov	r3, r1
 80a2e16:	4601      	mov	r1, r0
 80a2e18:	4618      	mov	r0, r3
 80a2e1a:	f001 bbe1 	b.w	80a45e0 <__cxa_atexit>
	...

080a2e20 <_ZSt15get_new_handlerv>:
 80a2e20:	4b02      	ldr	r3, [pc, #8]	; (80a2e2c <_ZSt15get_new_handlerv+0xc>)
 80a2e22:	6818      	ldr	r0, [r3, #0]
 80a2e24:	f3bf 8f5f 	dmb	sy
 80a2e28:	4770      	bx	lr
 80a2e2a:	bf00      	nop
 80a2e2c:	20000974 	.word	0x20000974

080a2e30 <_ZnwjRKSt9nothrow_t>:
 80a2e30:	b510      	push	{r4, lr}
 80a2e32:	2800      	cmp	r0, #0
 80a2e34:	bf14      	ite	ne
 80a2e36:	4604      	movne	r4, r0
 80a2e38:	2401      	moveq	r4, #1
 80a2e3a:	4620      	mov	r0, r4
 80a2e3c:	f7fe feb2 	bl	80a1ba4 <malloc>
 80a2e40:	b920      	cbnz	r0, 80a2e4c <_ZnwjRKSt9nothrow_t+0x1c>
 80a2e42:	f7ff ffed 	bl	80a2e20 <_ZSt15get_new_handlerv>
 80a2e46:	b108      	cbz	r0, 80a2e4c <_ZnwjRKSt9nothrow_t+0x1c>
 80a2e48:	4780      	blx	r0
 80a2e4a:	e7f6      	b.n	80a2e3a <_ZnwjRKSt9nothrow_t+0xa>
 80a2e4c:	bd10      	pop	{r4, pc}

080a2e4e <_ZSt25__throw_bad_function_callv>:
 80a2e4e:	b508      	push	{r3, lr}
 80a2e50:	f7fe fec8 	bl	80a1be4 <abort>

080a2e54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2e54:	4b18      	ldr	r3, [pc, #96]	; (80a2eb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2e56:	681a      	ldr	r2, [r3, #0]
 80a2e58:	07d1      	lsls	r1, r2, #31
 80a2e5a:	bf5c      	itt	pl
 80a2e5c:	2201      	movpl	r2, #1
 80a2e5e:	601a      	strpl	r2, [r3, #0]
 80a2e60:	4b16      	ldr	r3, [pc, #88]	; (80a2ebc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2e62:	681a      	ldr	r2, [r3, #0]
 80a2e64:	07d2      	lsls	r2, r2, #31
 80a2e66:	bf5c      	itt	pl
 80a2e68:	2201      	movpl	r2, #1
 80a2e6a:	601a      	strpl	r2, [r3, #0]
 80a2e6c:	4b14      	ldr	r3, [pc, #80]	; (80a2ec0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2e6e:	681a      	ldr	r2, [r3, #0]
 80a2e70:	07d0      	lsls	r0, r2, #31
 80a2e72:	bf5c      	itt	pl
 80a2e74:	2201      	movpl	r2, #1
 80a2e76:	601a      	strpl	r2, [r3, #0]
 80a2e78:	4b12      	ldr	r3, [pc, #72]	; (80a2ec4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2e7a:	681a      	ldr	r2, [r3, #0]
 80a2e7c:	07d1      	lsls	r1, r2, #31
 80a2e7e:	bf5c      	itt	pl
 80a2e80:	2201      	movpl	r2, #1
 80a2e82:	601a      	strpl	r2, [r3, #0]
 80a2e84:	4b10      	ldr	r3, [pc, #64]	; (80a2ec8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2e86:	681a      	ldr	r2, [r3, #0]
 80a2e88:	07d2      	lsls	r2, r2, #31
 80a2e8a:	bf5c      	itt	pl
 80a2e8c:	2201      	movpl	r2, #1
 80a2e8e:	601a      	strpl	r2, [r3, #0]
 80a2e90:	4b0e      	ldr	r3, [pc, #56]	; (80a2ecc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2e92:	681a      	ldr	r2, [r3, #0]
 80a2e94:	07d0      	lsls	r0, r2, #31
 80a2e96:	bf5c      	itt	pl
 80a2e98:	2201      	movpl	r2, #1
 80a2e9a:	601a      	strpl	r2, [r3, #0]
 80a2e9c:	4b0c      	ldr	r3, [pc, #48]	; (80a2ed0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2e9e:	681a      	ldr	r2, [r3, #0]
 80a2ea0:	07d1      	lsls	r1, r2, #31
 80a2ea2:	bf5c      	itt	pl
 80a2ea4:	2201      	movpl	r2, #1
 80a2ea6:	601a      	strpl	r2, [r3, #0]
 80a2ea8:	4b0a      	ldr	r3, [pc, #40]	; (80a2ed4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2eaa:	681a      	ldr	r2, [r3, #0]
 80a2eac:	07d2      	lsls	r2, r2, #31
 80a2eae:	bf5c      	itt	pl
 80a2eb0:	2201      	movpl	r2, #1
 80a2eb2:	601a      	strpl	r2, [r3, #0]
 80a2eb4:	4770      	bx	lr
 80a2eb6:	bf00      	nop
 80a2eb8:	20000994 	.word	0x20000994
 80a2ebc:	20000990 	.word	0x20000990
 80a2ec0:	2000098c 	.word	0x2000098c
 80a2ec4:	20000988 	.word	0x20000988
 80a2ec8:	20000984 	.word	0x20000984
 80a2ecc:	20000980 	.word	0x20000980
 80a2ed0:	2000097c 	.word	0x2000097c
 80a2ed4:	20000978 	.word	0x20000978

080a2ed8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2ed8:	4b24      	ldr	r3, [pc, #144]	; (80a2f6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2eda:	681a      	ldr	r2, [r3, #0]
 80a2edc:	07d0      	lsls	r0, r2, #31
 80a2ede:	bf5c      	itt	pl
 80a2ee0:	2201      	movpl	r2, #1
 80a2ee2:	601a      	strpl	r2, [r3, #0]
 80a2ee4:	4b22      	ldr	r3, [pc, #136]	; (80a2f70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2ee6:	681a      	ldr	r2, [r3, #0]
 80a2ee8:	07d1      	lsls	r1, r2, #31
 80a2eea:	bf5c      	itt	pl
 80a2eec:	2201      	movpl	r2, #1
 80a2eee:	601a      	strpl	r2, [r3, #0]
 80a2ef0:	4b20      	ldr	r3, [pc, #128]	; (80a2f74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2ef2:	681a      	ldr	r2, [r3, #0]
 80a2ef4:	07d2      	lsls	r2, r2, #31
 80a2ef6:	bf5c      	itt	pl
 80a2ef8:	2201      	movpl	r2, #1
 80a2efa:	601a      	strpl	r2, [r3, #0]
 80a2efc:	4b1e      	ldr	r3, [pc, #120]	; (80a2f78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2efe:	681a      	ldr	r2, [r3, #0]
 80a2f00:	07d0      	lsls	r0, r2, #31
 80a2f02:	bf5c      	itt	pl
 80a2f04:	2201      	movpl	r2, #1
 80a2f06:	601a      	strpl	r2, [r3, #0]
 80a2f08:	4b1c      	ldr	r3, [pc, #112]	; (80a2f7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2f0a:	681a      	ldr	r2, [r3, #0]
 80a2f0c:	07d1      	lsls	r1, r2, #31
 80a2f0e:	bf5c      	itt	pl
 80a2f10:	2201      	movpl	r2, #1
 80a2f12:	601a      	strpl	r2, [r3, #0]
 80a2f14:	4b1a      	ldr	r3, [pc, #104]	; (80a2f80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2f16:	681a      	ldr	r2, [r3, #0]
 80a2f18:	07d2      	lsls	r2, r2, #31
 80a2f1a:	bf5c      	itt	pl
 80a2f1c:	2201      	movpl	r2, #1
 80a2f1e:	601a      	strpl	r2, [r3, #0]
 80a2f20:	4b18      	ldr	r3, [pc, #96]	; (80a2f84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2f22:	681a      	ldr	r2, [r3, #0]
 80a2f24:	07d0      	lsls	r0, r2, #31
 80a2f26:	bf5c      	itt	pl
 80a2f28:	2201      	movpl	r2, #1
 80a2f2a:	601a      	strpl	r2, [r3, #0]
 80a2f2c:	4b16      	ldr	r3, [pc, #88]	; (80a2f88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2f2e:	681a      	ldr	r2, [r3, #0]
 80a2f30:	07d1      	lsls	r1, r2, #31
 80a2f32:	bf5c      	itt	pl
 80a2f34:	2201      	movpl	r2, #1
 80a2f36:	601a      	strpl	r2, [r3, #0]
 80a2f38:	4b14      	ldr	r3, [pc, #80]	; (80a2f8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2f3a:	681a      	ldr	r2, [r3, #0]
 80a2f3c:	07d2      	lsls	r2, r2, #31
 80a2f3e:	bf5c      	itt	pl
 80a2f40:	2201      	movpl	r2, #1
 80a2f42:	601a      	strpl	r2, [r3, #0]
 80a2f44:	4b12      	ldr	r3, [pc, #72]	; (80a2f90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2f46:	681a      	ldr	r2, [r3, #0]
 80a2f48:	07d0      	lsls	r0, r2, #31
 80a2f4a:	bf5c      	itt	pl
 80a2f4c:	2201      	movpl	r2, #1
 80a2f4e:	601a      	strpl	r2, [r3, #0]
 80a2f50:	4b10      	ldr	r3, [pc, #64]	; (80a2f94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2f52:	681a      	ldr	r2, [r3, #0]
 80a2f54:	07d1      	lsls	r1, r2, #31
 80a2f56:	bf5c      	itt	pl
 80a2f58:	2201      	movpl	r2, #1
 80a2f5a:	601a      	strpl	r2, [r3, #0]
 80a2f5c:	4b0e      	ldr	r3, [pc, #56]	; (80a2f98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2f5e:	681a      	ldr	r2, [r3, #0]
 80a2f60:	07d2      	lsls	r2, r2, #31
 80a2f62:	bf5c      	itt	pl
 80a2f64:	2201      	movpl	r2, #1
 80a2f66:	601a      	strpl	r2, [r3, #0]
 80a2f68:	4770      	bx	lr
 80a2f6a:	bf00      	nop
 80a2f6c:	200009c4 	.word	0x200009c4
 80a2f70:	200009c0 	.word	0x200009c0
 80a2f74:	200009bc 	.word	0x200009bc
 80a2f78:	200009b8 	.word	0x200009b8
 80a2f7c:	200009b4 	.word	0x200009b4
 80a2f80:	200009b0 	.word	0x200009b0
 80a2f84:	200009ac 	.word	0x200009ac
 80a2f88:	200009a8 	.word	0x200009a8
 80a2f8c:	200009a4 	.word	0x200009a4
 80a2f90:	200009a0 	.word	0x200009a0
 80a2f94:	2000099c 	.word	0x2000099c
 80a2f98:	20000998 	.word	0x20000998

080a2f9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2f9c:	4b24      	ldr	r3, [pc, #144]	; (80a3030 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2f9e:	681a      	ldr	r2, [r3, #0]
 80a2fa0:	07d0      	lsls	r0, r2, #31
 80a2fa2:	bf5c      	itt	pl
 80a2fa4:	2201      	movpl	r2, #1
 80a2fa6:	601a      	strpl	r2, [r3, #0]
 80a2fa8:	4b22      	ldr	r3, [pc, #136]	; (80a3034 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2faa:	681a      	ldr	r2, [r3, #0]
 80a2fac:	07d1      	lsls	r1, r2, #31
 80a2fae:	bf5c      	itt	pl
 80a2fb0:	2201      	movpl	r2, #1
 80a2fb2:	601a      	strpl	r2, [r3, #0]
 80a2fb4:	4b20      	ldr	r3, [pc, #128]	; (80a3038 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2fb6:	681a      	ldr	r2, [r3, #0]
 80a2fb8:	07d2      	lsls	r2, r2, #31
 80a2fba:	bf5c      	itt	pl
 80a2fbc:	2201      	movpl	r2, #1
 80a2fbe:	601a      	strpl	r2, [r3, #0]
 80a2fc0:	4b1e      	ldr	r3, [pc, #120]	; (80a303c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2fc2:	681a      	ldr	r2, [r3, #0]
 80a2fc4:	07d0      	lsls	r0, r2, #31
 80a2fc6:	bf5c      	itt	pl
 80a2fc8:	2201      	movpl	r2, #1
 80a2fca:	601a      	strpl	r2, [r3, #0]
 80a2fcc:	4b1c      	ldr	r3, [pc, #112]	; (80a3040 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2fce:	681a      	ldr	r2, [r3, #0]
 80a2fd0:	07d1      	lsls	r1, r2, #31
 80a2fd2:	bf5c      	itt	pl
 80a2fd4:	2201      	movpl	r2, #1
 80a2fd6:	601a      	strpl	r2, [r3, #0]
 80a2fd8:	4b1a      	ldr	r3, [pc, #104]	; (80a3044 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2fda:	681a      	ldr	r2, [r3, #0]
 80a2fdc:	07d2      	lsls	r2, r2, #31
 80a2fde:	bf5c      	itt	pl
 80a2fe0:	2201      	movpl	r2, #1
 80a2fe2:	601a      	strpl	r2, [r3, #0]
 80a2fe4:	4b18      	ldr	r3, [pc, #96]	; (80a3048 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2fe6:	681a      	ldr	r2, [r3, #0]
 80a2fe8:	07d0      	lsls	r0, r2, #31
 80a2fea:	bf5c      	itt	pl
 80a2fec:	2201      	movpl	r2, #1
 80a2fee:	601a      	strpl	r2, [r3, #0]
 80a2ff0:	4b16      	ldr	r3, [pc, #88]	; (80a304c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2ff2:	681a      	ldr	r2, [r3, #0]
 80a2ff4:	07d1      	lsls	r1, r2, #31
 80a2ff6:	bf5c      	itt	pl
 80a2ff8:	2201      	movpl	r2, #1
 80a2ffa:	601a      	strpl	r2, [r3, #0]
 80a2ffc:	4b14      	ldr	r3, [pc, #80]	; (80a3050 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2ffe:	681a      	ldr	r2, [r3, #0]
 80a3000:	07d2      	lsls	r2, r2, #31
 80a3002:	bf5c      	itt	pl
 80a3004:	2201      	movpl	r2, #1
 80a3006:	601a      	strpl	r2, [r3, #0]
 80a3008:	4b12      	ldr	r3, [pc, #72]	; (80a3054 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a300a:	681a      	ldr	r2, [r3, #0]
 80a300c:	07d0      	lsls	r0, r2, #31
 80a300e:	bf5c      	itt	pl
 80a3010:	2201      	movpl	r2, #1
 80a3012:	601a      	strpl	r2, [r3, #0]
 80a3014:	4b10      	ldr	r3, [pc, #64]	; (80a3058 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a3016:	681a      	ldr	r2, [r3, #0]
 80a3018:	07d1      	lsls	r1, r2, #31
 80a301a:	bf5c      	itt	pl
 80a301c:	2201      	movpl	r2, #1
 80a301e:	601a      	strpl	r2, [r3, #0]
 80a3020:	4b0e      	ldr	r3, [pc, #56]	; (80a305c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a3022:	681a      	ldr	r2, [r3, #0]
 80a3024:	07d2      	lsls	r2, r2, #31
 80a3026:	bf5c      	itt	pl
 80a3028:	2201      	movpl	r2, #1
 80a302a:	601a      	strpl	r2, [r3, #0]
 80a302c:	4770      	bx	lr
 80a302e:	bf00      	nop
 80a3030:	200009f4 	.word	0x200009f4
 80a3034:	200009f0 	.word	0x200009f0
 80a3038:	200009ec 	.word	0x200009ec
 80a303c:	200009e8 	.word	0x200009e8
 80a3040:	200009e4 	.word	0x200009e4
 80a3044:	200009e0 	.word	0x200009e0
 80a3048:	200009dc 	.word	0x200009dc
 80a304c:	200009d8 	.word	0x200009d8
 80a3050:	200009d4 	.word	0x200009d4
 80a3054:	200009d0 	.word	0x200009d0
 80a3058:	200009cc 	.word	0x200009cc
 80a305c:	200009c8 	.word	0x200009c8

080a3060 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3060:	4b18      	ldr	r3, [pc, #96]	; (80a30c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a3062:	681a      	ldr	r2, [r3, #0]
 80a3064:	07d1      	lsls	r1, r2, #31
 80a3066:	bf5c      	itt	pl
 80a3068:	2201      	movpl	r2, #1
 80a306a:	601a      	strpl	r2, [r3, #0]
 80a306c:	4b16      	ldr	r3, [pc, #88]	; (80a30c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a306e:	681a      	ldr	r2, [r3, #0]
 80a3070:	07d2      	lsls	r2, r2, #31
 80a3072:	bf5c      	itt	pl
 80a3074:	2201      	movpl	r2, #1
 80a3076:	601a      	strpl	r2, [r3, #0]
 80a3078:	4b14      	ldr	r3, [pc, #80]	; (80a30cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a307a:	681a      	ldr	r2, [r3, #0]
 80a307c:	07d0      	lsls	r0, r2, #31
 80a307e:	bf5c      	itt	pl
 80a3080:	2201      	movpl	r2, #1
 80a3082:	601a      	strpl	r2, [r3, #0]
 80a3084:	4b12      	ldr	r3, [pc, #72]	; (80a30d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3086:	681a      	ldr	r2, [r3, #0]
 80a3088:	07d1      	lsls	r1, r2, #31
 80a308a:	bf5c      	itt	pl
 80a308c:	2201      	movpl	r2, #1
 80a308e:	601a      	strpl	r2, [r3, #0]
 80a3090:	4b10      	ldr	r3, [pc, #64]	; (80a30d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a3092:	681a      	ldr	r2, [r3, #0]
 80a3094:	07d2      	lsls	r2, r2, #31
 80a3096:	bf5c      	itt	pl
 80a3098:	2201      	movpl	r2, #1
 80a309a:	601a      	strpl	r2, [r3, #0]
 80a309c:	4b0e      	ldr	r3, [pc, #56]	; (80a30d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a309e:	681a      	ldr	r2, [r3, #0]
 80a30a0:	07d0      	lsls	r0, r2, #31
 80a30a2:	bf5c      	itt	pl
 80a30a4:	2201      	movpl	r2, #1
 80a30a6:	601a      	strpl	r2, [r3, #0]
 80a30a8:	4b0c      	ldr	r3, [pc, #48]	; (80a30dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a30aa:	681a      	ldr	r2, [r3, #0]
 80a30ac:	07d1      	lsls	r1, r2, #31
 80a30ae:	bf5c      	itt	pl
 80a30b0:	2201      	movpl	r2, #1
 80a30b2:	601a      	strpl	r2, [r3, #0]
 80a30b4:	4b0a      	ldr	r3, [pc, #40]	; (80a30e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a30b6:	681a      	ldr	r2, [r3, #0]
 80a30b8:	07d2      	lsls	r2, r2, #31
 80a30ba:	bf5c      	itt	pl
 80a30bc:	2201      	movpl	r2, #1
 80a30be:	601a      	strpl	r2, [r3, #0]
 80a30c0:	4770      	bx	lr
 80a30c2:	bf00      	nop
 80a30c4:	20000a14 	.word	0x20000a14
 80a30c8:	20000a10 	.word	0x20000a10
 80a30cc:	20000a0c 	.word	0x20000a0c
 80a30d0:	20000a08 	.word	0x20000a08
 80a30d4:	20000a04 	.word	0x20000a04
 80a30d8:	20000a00 	.word	0x20000a00
 80a30dc:	200009fc 	.word	0x200009fc
 80a30e0:	200009f8 	.word	0x200009f8
 80a30e4:	00000000 	.word	0x00000000

080a30e8 <floor>:
 80a30e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a30ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a30f0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a30f4:	2e13      	cmp	r6, #19
 80a30f6:	460b      	mov	r3, r1
 80a30f8:	4604      	mov	r4, r0
 80a30fa:	460d      	mov	r5, r1
 80a30fc:	4688      	mov	r8, r1
 80a30fe:	4607      	mov	r7, r0
 80a3100:	dc1c      	bgt.n	80a313c <floor+0x54>
 80a3102:	2e00      	cmp	r6, #0
 80a3104:	db3f      	blt.n	80a3186 <floor+0x9e>
 80a3106:	4a3a      	ldr	r2, [pc, #232]	; (80a31f0 <floor+0x108>)
 80a3108:	4686      	mov	lr, r0
 80a310a:	fa42 f906 	asr.w	r9, r2, r6
 80a310e:	ea01 0209 	and.w	r2, r1, r9
 80a3112:	4302      	orrs	r2, r0
 80a3114:	d017      	beq.n	80a3146 <floor+0x5e>
 80a3116:	a334      	add	r3, pc, #208	; (adr r3, 80a31e8 <floor+0x100>)
 80a3118:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a311c:	f000 faee 	bl	80a36fc <__adddf3>
 80a3120:	2200      	movs	r2, #0
 80a3122:	2300      	movs	r3, #0
 80a3124:	f000 ff2c 	bl	80a3f80 <__aeabi_dcmpgt>
 80a3128:	b120      	cbz	r0, 80a3134 <floor+0x4c>
 80a312a:	2d00      	cmp	r5, #0
 80a312c:	db40      	blt.n	80a31b0 <floor+0xc8>
 80a312e:	ea28 0509 	bic.w	r5, r8, r9
 80a3132:	2700      	movs	r7, #0
 80a3134:	4638      	mov	r0, r7
 80a3136:	4629      	mov	r1, r5
 80a3138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a313c:	2e33      	cmp	r6, #51	; 0x33
 80a313e:	dd06      	ble.n	80a314e <floor+0x66>
 80a3140:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a3144:	d02f      	beq.n	80a31a6 <floor+0xbe>
 80a3146:	4620      	mov	r0, r4
 80a3148:	4619      	mov	r1, r3
 80a314a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a314e:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a3152:	f04f 39ff 	mov.w	r9, #4294967295
 80a3156:	fa29 f902 	lsr.w	r9, r9, r2
 80a315a:	ea10 0f09 	tst.w	r0, r9
 80a315e:	d0f2      	beq.n	80a3146 <floor+0x5e>
 80a3160:	a321      	add	r3, pc, #132	; (adr r3, 80a31e8 <floor+0x100>)
 80a3162:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3166:	f000 fac9 	bl	80a36fc <__adddf3>
 80a316a:	2200      	movs	r2, #0
 80a316c:	2300      	movs	r3, #0
 80a316e:	f000 ff07 	bl	80a3f80 <__aeabi_dcmpgt>
 80a3172:	2800      	cmp	r0, #0
 80a3174:	d0de      	beq.n	80a3134 <floor+0x4c>
 80a3176:	2d00      	cmp	r5, #0
 80a3178:	db20      	blt.n	80a31bc <floor+0xd4>
 80a317a:	4645      	mov	r5, r8
 80a317c:	ea27 0709 	bic.w	r7, r7, r9
 80a3180:	4638      	mov	r0, r7
 80a3182:	4629      	mov	r1, r5
 80a3184:	e7d8      	b.n	80a3138 <floor+0x50>
 80a3186:	a318      	add	r3, pc, #96	; (adr r3, 80a31e8 <floor+0x100>)
 80a3188:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a318c:	f000 fab6 	bl	80a36fc <__adddf3>
 80a3190:	2200      	movs	r2, #0
 80a3192:	2300      	movs	r3, #0
 80a3194:	f000 fef4 	bl	80a3f80 <__aeabi_dcmpgt>
 80a3198:	2800      	cmp	r0, #0
 80a319a:	d0cb      	beq.n	80a3134 <floor+0x4c>
 80a319c:	2d00      	cmp	r5, #0
 80a319e:	db18      	blt.n	80a31d2 <floor+0xea>
 80a31a0:	2700      	movs	r7, #0
 80a31a2:	463d      	mov	r5, r7
 80a31a4:	e7c6      	b.n	80a3134 <floor+0x4c>
 80a31a6:	4602      	mov	r2, r0
 80a31a8:	460b      	mov	r3, r1
 80a31aa:	f000 faa7 	bl	80a36fc <__adddf3>
 80a31ae:	e7cc      	b.n	80a314a <floor+0x62>
 80a31b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a31b4:	fa43 f606 	asr.w	r6, r3, r6
 80a31b8:	44b0      	add	r8, r6
 80a31ba:	e7b8      	b.n	80a312e <floor+0x46>
 80a31bc:	2e14      	cmp	r6, #20
 80a31be:	d010      	beq.n	80a31e2 <floor+0xfa>
 80a31c0:	2301      	movs	r3, #1
 80a31c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a31c6:	fa03 f606 	lsl.w	r6, r3, r6
 80a31ca:	1937      	adds	r7, r6, r4
 80a31cc:	bf28      	it	cs
 80a31ce:	4498      	addcs	r8, r3
 80a31d0:	e7d3      	b.n	80a317a <floor+0x92>
 80a31d2:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a31d6:	4b07      	ldr	r3, [pc, #28]	; (80a31f4 <floor+0x10c>)
 80a31d8:	4322      	orrs	r2, r4
 80a31da:	bf18      	it	ne
 80a31dc:	461d      	movne	r5, r3
 80a31de:	2700      	movs	r7, #0
 80a31e0:	e7a8      	b.n	80a3134 <floor+0x4c>
 80a31e2:	f105 0801 	add.w	r8, r5, #1
 80a31e6:	e7c8      	b.n	80a317a <floor+0x92>
 80a31e8:	8800759c 	.word	0x8800759c
 80a31ec:	7e37e43c 	.word	0x7e37e43c
 80a31f0:	000fffff 	.word	0x000fffff
 80a31f4:	bff00000 	.word	0xbff00000

080a31f8 <log>:
 80a31f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a31fc:	b08a      	sub	sp, #40	; 0x28
 80a31fe:	4604      	mov	r4, r0
 80a3200:	460d      	mov	r5, r1
 80a3202:	f000 f879 	bl	80a32f8 <__ieee754_log>
 80a3206:	4b37      	ldr	r3, [pc, #220]	; (80a32e4 <log+0xec>)
 80a3208:	4606      	mov	r6, r0
 80a320a:	f993 8000 	ldrsb.w	r8, [r3]
 80a320e:	460f      	mov	r7, r1
 80a3210:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a3214:	d00d      	beq.n	80a3232 <log+0x3a>
 80a3216:	4622      	mov	r2, r4
 80a3218:	462b      	mov	r3, r5
 80a321a:	4620      	mov	r0, r4
 80a321c:	4629      	mov	r1, r5
 80a321e:	f000 feb9 	bl	80a3f94 <__aeabi_dcmpun>
 80a3222:	b930      	cbnz	r0, 80a3232 <log+0x3a>
 80a3224:	2200      	movs	r2, #0
 80a3226:	2300      	movs	r3, #0
 80a3228:	4620      	mov	r0, r4
 80a322a:	4629      	mov	r1, r5
 80a322c:	f000 fea8 	bl	80a3f80 <__aeabi_dcmpgt>
 80a3230:	b120      	cbz	r0, 80a323c <log+0x44>
 80a3232:	4630      	mov	r0, r6
 80a3234:	4639      	mov	r1, r7
 80a3236:	b00a      	add	sp, #40	; 0x28
 80a3238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a323c:	4b2a      	ldr	r3, [pc, #168]	; (80a32e8 <log+0xf0>)
 80a323e:	9008      	str	r0, [sp, #32]
 80a3240:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a3244:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a3248:	9301      	str	r3, [sp, #4]
 80a324a:	f1b8 0f00 	cmp.w	r8, #0
 80a324e:	d119      	bne.n	80a3284 <log+0x8c>
 80a3250:	4f26      	ldr	r7, [pc, #152]	; (80a32ec <log+0xf4>)
 80a3252:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a3256:	4620      	mov	r0, r4
 80a3258:	4629      	mov	r1, r5
 80a325a:	2200      	movs	r2, #0
 80a325c:	2300      	movs	r3, #0
 80a325e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3262:	f000 fe65 	bl	80a3f30 <__aeabi_dcmpeq>
 80a3266:	2800      	cmp	r0, #0
 80a3268:	d034      	beq.n	80a32d4 <log+0xdc>
 80a326a:	2302      	movs	r3, #2
 80a326c:	9300      	str	r3, [sp, #0]
 80a326e:	4668      	mov	r0, sp
 80a3270:	f000 fa36 	bl	80a36e0 <matherr>
 80a3274:	b1a8      	cbz	r0, 80a32a2 <log+0xaa>
 80a3276:	9b08      	ldr	r3, [sp, #32]
 80a3278:	b9c3      	cbnz	r3, 80a32ac <log+0xb4>
 80a327a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a327e:	b00a      	add	sp, #40	; 0x28
 80a3280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3284:	4f1a      	ldr	r7, [pc, #104]	; (80a32f0 <log+0xf8>)
 80a3286:	2600      	movs	r6, #0
 80a3288:	4620      	mov	r0, r4
 80a328a:	4629      	mov	r1, r5
 80a328c:	2200      	movs	r2, #0
 80a328e:	2300      	movs	r3, #0
 80a3290:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a3294:	f000 fe4c 	bl	80a3f30 <__aeabi_dcmpeq>
 80a3298:	b168      	cbz	r0, 80a32b6 <log+0xbe>
 80a329a:	2302      	movs	r3, #2
 80a329c:	4598      	cmp	r8, r3
 80a329e:	9300      	str	r3, [sp, #0]
 80a32a0:	d1e5      	bne.n	80a326e <log+0x76>
 80a32a2:	f001 f9ab 	bl	80a45fc <__errno>
 80a32a6:	2322      	movs	r3, #34	; 0x22
 80a32a8:	6003      	str	r3, [r0, #0]
 80a32aa:	e7e4      	b.n	80a3276 <log+0x7e>
 80a32ac:	f001 f9a6 	bl	80a45fc <__errno>
 80a32b0:	9b08      	ldr	r3, [sp, #32]
 80a32b2:	6003      	str	r3, [r0, #0]
 80a32b4:	e7e1      	b.n	80a327a <log+0x82>
 80a32b6:	2301      	movs	r3, #1
 80a32b8:	f1b8 0f02 	cmp.w	r8, #2
 80a32bc:	9300      	str	r3, [sp, #0]
 80a32be:	d10b      	bne.n	80a32d8 <log+0xe0>
 80a32c0:	f001 f99c 	bl	80a45fc <__errno>
 80a32c4:	2321      	movs	r3, #33	; 0x21
 80a32c6:	6003      	str	r3, [r0, #0]
 80a32c8:	480a      	ldr	r0, [pc, #40]	; (80a32f4 <log+0xfc>)
 80a32ca:	f000 fa0b 	bl	80a36e4 <nan>
 80a32ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a32d2:	e7d0      	b.n	80a3276 <log+0x7e>
 80a32d4:	2301      	movs	r3, #1
 80a32d6:	9300      	str	r3, [sp, #0]
 80a32d8:	4668      	mov	r0, sp
 80a32da:	f000 fa01 	bl	80a36e0 <matherr>
 80a32de:	2800      	cmp	r0, #0
 80a32e0:	d1f2      	bne.n	80a32c8 <log+0xd0>
 80a32e2:	e7ed      	b.n	80a32c0 <log+0xc8>
 80a32e4:	20000338 	.word	0x20000338
 80a32e8:	080a4bb4 	.word	0x080a4bb4
 80a32ec:	c7efffff 	.word	0xc7efffff
 80a32f0:	fff00000 	.word	0xfff00000
 80a32f4:	080a4bb8 	.word	0x080a4bb8

080a32f8 <__ieee754_log>:
 80a32f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a32fc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3300:	b085      	sub	sp, #20
 80a3302:	4606      	mov	r6, r0
 80a3304:	460f      	mov	r7, r1
 80a3306:	460b      	mov	r3, r1
 80a3308:	da5a      	bge.n	80a33c0 <__ieee754_log+0xc8>
 80a330a:	4602      	mov	r2, r0
 80a330c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a3310:	4322      	orrs	r2, r4
 80a3312:	f000 80f7 	beq.w	80a3504 <__ieee754_log+0x20c>
 80a3316:	2900      	cmp	r1, #0
 80a3318:	f2c0 8179 	blt.w	80a360e <__ieee754_log+0x316>
 80a331c:	2200      	movs	r2, #0
 80a331e:	4bd6      	ldr	r3, [pc, #856]	; (80a3678 <__ieee754_log+0x380>)
 80a3320:	f000 fb9e 	bl	80a3a60 <__aeabi_dmul>
 80a3324:	460b      	mov	r3, r1
 80a3326:	460f      	mov	r7, r1
 80a3328:	49d4      	ldr	r1, [pc, #848]	; (80a367c <__ieee754_log+0x384>)
 80a332a:	4606      	mov	r6, r0
 80a332c:	428b      	cmp	r3, r1
 80a332e:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a3332:	dc49      	bgt.n	80a33c8 <__ieee754_log+0xd0>
 80a3334:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a3338:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a333c:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a3340:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a3344:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a3348:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a334c:	151b      	asrs	r3, r3, #20
 80a334e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a3352:	ea41 0705 	orr.w	r7, r1, r5
 80a3356:	189c      	adds	r4, r3, r2
 80a3358:	4630      	mov	r0, r6
 80a335a:	2200      	movs	r2, #0
 80a335c:	4bc8      	ldr	r3, [pc, #800]	; (80a3680 <__ieee754_log+0x388>)
 80a335e:	4639      	mov	r1, r7
 80a3360:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a3364:	f000 f9c8 	bl	80a36f8 <__aeabi_dsub>
 80a3368:	1cab      	adds	r3, r5, #2
 80a336a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a336e:	2b02      	cmp	r3, #2
 80a3370:	4682      	mov	sl, r0
 80a3372:	468b      	mov	fp, r1
 80a3374:	f04f 0200 	mov.w	r2, #0
 80a3378:	dc2f      	bgt.n	80a33da <__ieee754_log+0xe2>
 80a337a:	2300      	movs	r3, #0
 80a337c:	f000 fdd8 	bl	80a3f30 <__aeabi_dcmpeq>
 80a3380:	2800      	cmp	r0, #0
 80a3382:	f000 80c8 	beq.w	80a3516 <__ieee754_log+0x21e>
 80a3386:	2c00      	cmp	r4, #0
 80a3388:	f000 814a 	beq.w	80a3620 <__ieee754_log+0x328>
 80a338c:	4620      	mov	r0, r4
 80a338e:	f000 fb01 	bl	80a3994 <__aeabi_i2d>
 80a3392:	a3a5      	add	r3, pc, #660	; (adr r3, 80a3628 <__ieee754_log+0x330>)
 80a3394:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3398:	4606      	mov	r6, r0
 80a339a:	460f      	mov	r7, r1
 80a339c:	f000 fb60 	bl	80a3a60 <__aeabi_dmul>
 80a33a0:	a3a3      	add	r3, pc, #652	; (adr r3, 80a3630 <__ieee754_log+0x338>)
 80a33a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33a6:	4604      	mov	r4, r0
 80a33a8:	460d      	mov	r5, r1
 80a33aa:	4630      	mov	r0, r6
 80a33ac:	4639      	mov	r1, r7
 80a33ae:	f000 fb57 	bl	80a3a60 <__aeabi_dmul>
 80a33b2:	4602      	mov	r2, r0
 80a33b4:	460b      	mov	r3, r1
 80a33b6:	4620      	mov	r0, r4
 80a33b8:	4629      	mov	r1, r5
 80a33ba:	f000 f99f 	bl	80a36fc <__adddf3>
 80a33be:	e009      	b.n	80a33d4 <__ieee754_log+0xdc>
 80a33c0:	49ae      	ldr	r1, [pc, #696]	; (80a367c <__ieee754_log+0x384>)
 80a33c2:	2200      	movs	r2, #0
 80a33c4:	428b      	cmp	r3, r1
 80a33c6:	ddb5      	ble.n	80a3334 <__ieee754_log+0x3c>
 80a33c8:	4632      	mov	r2, r6
 80a33ca:	463b      	mov	r3, r7
 80a33cc:	4630      	mov	r0, r6
 80a33ce:	4639      	mov	r1, r7
 80a33d0:	f000 f994 	bl	80a36fc <__adddf3>
 80a33d4:	b005      	add	sp, #20
 80a33d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a33da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a33de:	f000 f98d 	bl	80a36fc <__adddf3>
 80a33e2:	4602      	mov	r2, r0
 80a33e4:	460b      	mov	r3, r1
 80a33e6:	4650      	mov	r0, sl
 80a33e8:	4659      	mov	r1, fp
 80a33ea:	f000 fc63 	bl	80a3cb4 <__aeabi_ddiv>
 80a33ee:	4606      	mov	r6, r0
 80a33f0:	4620      	mov	r0, r4
 80a33f2:	460f      	mov	r7, r1
 80a33f4:	f000 face 	bl	80a3994 <__aeabi_i2d>
 80a33f8:	4632      	mov	r2, r6
 80a33fa:	e9cd 0100 	strd	r0, r1, [sp]
 80a33fe:	463b      	mov	r3, r7
 80a3400:	4630      	mov	r0, r6
 80a3402:	4639      	mov	r1, r7
 80a3404:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3408:	f000 fb2a 	bl	80a3a60 <__aeabi_dmul>
 80a340c:	4602      	mov	r2, r0
 80a340e:	460b      	mov	r3, r1
 80a3410:	4680      	mov	r8, r0
 80a3412:	4689      	mov	r9, r1
 80a3414:	f000 fb24 	bl	80a3a60 <__aeabi_dmul>
 80a3418:	a387      	add	r3, pc, #540	; (adr r3, 80a3638 <__ieee754_log+0x340>)
 80a341a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a341e:	4606      	mov	r6, r0
 80a3420:	460f      	mov	r7, r1
 80a3422:	f000 fb1d 	bl	80a3a60 <__aeabi_dmul>
 80a3426:	a386      	add	r3, pc, #536	; (adr r3, 80a3640 <__ieee754_log+0x348>)
 80a3428:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a342c:	f000 f966 	bl	80a36fc <__adddf3>
 80a3430:	4632      	mov	r2, r6
 80a3432:	463b      	mov	r3, r7
 80a3434:	f000 fb14 	bl	80a3a60 <__aeabi_dmul>
 80a3438:	a383      	add	r3, pc, #524	; (adr r3, 80a3648 <__ieee754_log+0x350>)
 80a343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a343e:	f000 f95d 	bl	80a36fc <__adddf3>
 80a3442:	4632      	mov	r2, r6
 80a3444:	463b      	mov	r3, r7
 80a3446:	f000 fb0b 	bl	80a3a60 <__aeabi_dmul>
 80a344a:	a381      	add	r3, pc, #516	; (adr r3, 80a3650 <__ieee754_log+0x358>)
 80a344c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3450:	f000 f954 	bl	80a36fc <__adddf3>
 80a3454:	4642      	mov	r2, r8
 80a3456:	464b      	mov	r3, r9
 80a3458:	f000 fb02 	bl	80a3a60 <__aeabi_dmul>
 80a345c:	a37e      	add	r3, pc, #504	; (adr r3, 80a3658 <__ieee754_log+0x360>)
 80a345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3462:	4680      	mov	r8, r0
 80a3464:	4689      	mov	r9, r1
 80a3466:	4630      	mov	r0, r6
 80a3468:	4639      	mov	r1, r7
 80a346a:	f000 faf9 	bl	80a3a60 <__aeabi_dmul>
 80a346e:	a37c      	add	r3, pc, #496	; (adr r3, 80a3660 <__ieee754_log+0x368>)
 80a3470:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3474:	f000 f942 	bl	80a36fc <__adddf3>
 80a3478:	4632      	mov	r2, r6
 80a347a:	463b      	mov	r3, r7
 80a347c:	f000 faf0 	bl	80a3a60 <__aeabi_dmul>
 80a3480:	a379      	add	r3, pc, #484	; (adr r3, 80a3668 <__ieee754_log+0x370>)
 80a3482:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3486:	f000 f939 	bl	80a36fc <__adddf3>
 80a348a:	4632      	mov	r2, r6
 80a348c:	463b      	mov	r3, r7
 80a348e:	f000 fae7 	bl	80a3a60 <__aeabi_dmul>
 80a3492:	460b      	mov	r3, r1
 80a3494:	4602      	mov	r2, r0
 80a3496:	4649      	mov	r1, r9
 80a3498:	4640      	mov	r0, r8
 80a349a:	f000 f92f 	bl	80a36fc <__adddf3>
 80a349e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a34a2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a34a6:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a34aa:	3551      	adds	r5, #81	; 0x51
 80a34ac:	431d      	orrs	r5, r3
 80a34ae:	2d00      	cmp	r5, #0
 80a34b0:	4680      	mov	r8, r0
 80a34b2:	4689      	mov	r9, r1
 80a34b4:	dd56      	ble.n	80a3564 <__ieee754_log+0x26c>
 80a34b6:	2200      	movs	r2, #0
 80a34b8:	4b72      	ldr	r3, [pc, #456]	; (80a3684 <__ieee754_log+0x38c>)
 80a34ba:	4650      	mov	r0, sl
 80a34bc:	4659      	mov	r1, fp
 80a34be:	f000 facf 	bl	80a3a60 <__aeabi_dmul>
 80a34c2:	4652      	mov	r2, sl
 80a34c4:	465b      	mov	r3, fp
 80a34c6:	f000 facb 	bl	80a3a60 <__aeabi_dmul>
 80a34ca:	4606      	mov	r6, r0
 80a34cc:	460f      	mov	r7, r1
 80a34ce:	2c00      	cmp	r4, #0
 80a34d0:	d168      	bne.n	80a35a4 <__ieee754_log+0x2ac>
 80a34d2:	4632      	mov	r2, r6
 80a34d4:	463b      	mov	r3, r7
 80a34d6:	4640      	mov	r0, r8
 80a34d8:	4649      	mov	r1, r9
 80a34da:	f000 f90f 	bl	80a36fc <__adddf3>
 80a34de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a34e2:	f000 fabd 	bl	80a3a60 <__aeabi_dmul>
 80a34e6:	4602      	mov	r2, r0
 80a34e8:	460b      	mov	r3, r1
 80a34ea:	4630      	mov	r0, r6
 80a34ec:	4639      	mov	r1, r7
 80a34ee:	f000 f903 	bl	80a36f8 <__aeabi_dsub>
 80a34f2:	4602      	mov	r2, r0
 80a34f4:	460b      	mov	r3, r1
 80a34f6:	4650      	mov	r0, sl
 80a34f8:	4659      	mov	r1, fp
 80a34fa:	f000 f8fd 	bl	80a36f8 <__aeabi_dsub>
 80a34fe:	b005      	add	sp, #20
 80a3500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3504:	2200      	movs	r2, #0
 80a3506:	2300      	movs	r3, #0
 80a3508:	2000      	movs	r0, #0
 80a350a:	495f      	ldr	r1, [pc, #380]	; (80a3688 <__ieee754_log+0x390>)
 80a350c:	f000 fbd2 	bl	80a3cb4 <__aeabi_ddiv>
 80a3510:	b005      	add	sp, #20
 80a3512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3516:	a356      	add	r3, pc, #344	; (adr r3, 80a3670 <__ieee754_log+0x378>)
 80a3518:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a351c:	4650      	mov	r0, sl
 80a351e:	4659      	mov	r1, fp
 80a3520:	f000 fa9e 	bl	80a3a60 <__aeabi_dmul>
 80a3524:	4602      	mov	r2, r0
 80a3526:	460b      	mov	r3, r1
 80a3528:	2000      	movs	r0, #0
 80a352a:	4956      	ldr	r1, [pc, #344]	; (80a3684 <__ieee754_log+0x38c>)
 80a352c:	f000 f8e4 	bl	80a36f8 <__aeabi_dsub>
 80a3530:	4652      	mov	r2, sl
 80a3532:	4606      	mov	r6, r0
 80a3534:	460f      	mov	r7, r1
 80a3536:	465b      	mov	r3, fp
 80a3538:	4650      	mov	r0, sl
 80a353a:	4659      	mov	r1, fp
 80a353c:	f000 fa90 	bl	80a3a60 <__aeabi_dmul>
 80a3540:	4602      	mov	r2, r0
 80a3542:	460b      	mov	r3, r1
 80a3544:	4630      	mov	r0, r6
 80a3546:	4639      	mov	r1, r7
 80a3548:	f000 fa8a 	bl	80a3a60 <__aeabi_dmul>
 80a354c:	4606      	mov	r6, r0
 80a354e:	460f      	mov	r7, r1
 80a3550:	2c00      	cmp	r4, #0
 80a3552:	f040 809b 	bne.w	80a368c <__ieee754_log+0x394>
 80a3556:	4602      	mov	r2, r0
 80a3558:	460b      	mov	r3, r1
 80a355a:	4650      	mov	r0, sl
 80a355c:	4659      	mov	r1, fp
 80a355e:	f000 f8cb 	bl	80a36f8 <__aeabi_dsub>
 80a3562:	e737      	b.n	80a33d4 <__ieee754_log+0xdc>
 80a3564:	2c00      	cmp	r4, #0
 80a3566:	f000 80a5 	beq.w	80a36b4 <__ieee754_log+0x3bc>
 80a356a:	a32f      	add	r3, pc, #188	; (adr r3, 80a3628 <__ieee754_log+0x330>)
 80a356c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3570:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3574:	f000 fa74 	bl	80a3a60 <__aeabi_dmul>
 80a3578:	4642      	mov	r2, r8
 80a357a:	464b      	mov	r3, r9
 80a357c:	4604      	mov	r4, r0
 80a357e:	460d      	mov	r5, r1
 80a3580:	4650      	mov	r0, sl
 80a3582:	4659      	mov	r1, fp
 80a3584:	f000 f8b8 	bl	80a36f8 <__aeabi_dsub>
 80a3588:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a358c:	f000 fa68 	bl	80a3a60 <__aeabi_dmul>
 80a3590:	a327      	add	r3, pc, #156	; (adr r3, 80a3630 <__ieee754_log+0x338>)
 80a3592:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3596:	4606      	mov	r6, r0
 80a3598:	460f      	mov	r7, r1
 80a359a:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a359e:	f000 fa5f 	bl	80a3a60 <__aeabi_dmul>
 80a35a2:	e021      	b.n	80a35e8 <__ieee754_log+0x2f0>
 80a35a4:	a320      	add	r3, pc, #128	; (adr r3, 80a3628 <__ieee754_log+0x330>)
 80a35a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a35ae:	f000 fa57 	bl	80a3a60 <__aeabi_dmul>
 80a35b2:	4632      	mov	r2, r6
 80a35b4:	463b      	mov	r3, r7
 80a35b6:	4604      	mov	r4, r0
 80a35b8:	460d      	mov	r5, r1
 80a35ba:	4640      	mov	r0, r8
 80a35bc:	4649      	mov	r1, r9
 80a35be:	f000 f89d 	bl	80a36fc <__adddf3>
 80a35c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a35c6:	f000 fa4b 	bl	80a3a60 <__aeabi_dmul>
 80a35ca:	a319      	add	r3, pc, #100	; (adr r3, 80a3630 <__ieee754_log+0x338>)
 80a35cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a35d0:	4680      	mov	r8, r0
 80a35d2:	4689      	mov	r9, r1
 80a35d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a35d8:	f000 fa42 	bl	80a3a60 <__aeabi_dmul>
 80a35dc:	4602      	mov	r2, r0
 80a35de:	460b      	mov	r3, r1
 80a35e0:	4640      	mov	r0, r8
 80a35e2:	4649      	mov	r1, r9
 80a35e4:	f000 f88a 	bl	80a36fc <__adddf3>
 80a35e8:	4602      	mov	r2, r0
 80a35ea:	460b      	mov	r3, r1
 80a35ec:	4630      	mov	r0, r6
 80a35ee:	4639      	mov	r1, r7
 80a35f0:	f000 f882 	bl	80a36f8 <__aeabi_dsub>
 80a35f4:	4652      	mov	r2, sl
 80a35f6:	465b      	mov	r3, fp
 80a35f8:	f000 f87e 	bl	80a36f8 <__aeabi_dsub>
 80a35fc:	4602      	mov	r2, r0
 80a35fe:	460b      	mov	r3, r1
 80a3600:	4620      	mov	r0, r4
 80a3602:	4629      	mov	r1, r5
 80a3604:	f000 f878 	bl	80a36f8 <__aeabi_dsub>
 80a3608:	b005      	add	sp, #20
 80a360a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a360e:	4602      	mov	r2, r0
 80a3610:	460b      	mov	r3, r1
 80a3612:	f000 f871 	bl	80a36f8 <__aeabi_dsub>
 80a3616:	2200      	movs	r2, #0
 80a3618:	2300      	movs	r3, #0
 80a361a:	f000 fb4b 	bl	80a3cb4 <__aeabi_ddiv>
 80a361e:	e6d9      	b.n	80a33d4 <__ieee754_log+0xdc>
 80a3620:	2000      	movs	r0, #0
 80a3622:	2100      	movs	r1, #0
 80a3624:	e6d6      	b.n	80a33d4 <__ieee754_log+0xdc>
 80a3626:	bf00      	nop
 80a3628:	fee00000 	.word	0xfee00000
 80a362c:	3fe62e42 	.word	0x3fe62e42
 80a3630:	35793c76 	.word	0x35793c76
 80a3634:	3dea39ef 	.word	0x3dea39ef
 80a3638:	df3e5244 	.word	0xdf3e5244
 80a363c:	3fc2f112 	.word	0x3fc2f112
 80a3640:	96cb03de 	.word	0x96cb03de
 80a3644:	3fc74664 	.word	0x3fc74664
 80a3648:	94229359 	.word	0x94229359
 80a364c:	3fd24924 	.word	0x3fd24924
 80a3650:	55555593 	.word	0x55555593
 80a3654:	3fe55555 	.word	0x3fe55555
 80a3658:	d078c69f 	.word	0xd078c69f
 80a365c:	3fc39a09 	.word	0x3fc39a09
 80a3660:	1d8e78af 	.word	0x1d8e78af
 80a3664:	3fcc71c5 	.word	0x3fcc71c5
 80a3668:	9997fa04 	.word	0x9997fa04
 80a366c:	3fd99999 	.word	0x3fd99999
 80a3670:	55555555 	.word	0x55555555
 80a3674:	3fd55555 	.word	0x3fd55555
 80a3678:	43500000 	.word	0x43500000
 80a367c:	7fefffff 	.word	0x7fefffff
 80a3680:	3ff00000 	.word	0x3ff00000
 80a3684:	3fe00000 	.word	0x3fe00000
 80a3688:	c3500000 	.word	0xc3500000
 80a368c:	4620      	mov	r0, r4
 80a368e:	f000 f981 	bl	80a3994 <__aeabi_i2d>
 80a3692:	a30f      	add	r3, pc, #60	; (adr r3, 80a36d0 <__ieee754_log+0x3d8>)
 80a3694:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3698:	4680      	mov	r8, r0
 80a369a:	4689      	mov	r9, r1
 80a369c:	f000 f9e0 	bl	80a3a60 <__aeabi_dmul>
 80a36a0:	a30d      	add	r3, pc, #52	; (adr r3, 80a36d8 <__ieee754_log+0x3e0>)
 80a36a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a36a6:	4604      	mov	r4, r0
 80a36a8:	460d      	mov	r5, r1
 80a36aa:	4640      	mov	r0, r8
 80a36ac:	4649      	mov	r1, r9
 80a36ae:	f000 f9d7 	bl	80a3a60 <__aeabi_dmul>
 80a36b2:	e799      	b.n	80a35e8 <__ieee754_log+0x2f0>
 80a36b4:	4602      	mov	r2, r0
 80a36b6:	460b      	mov	r3, r1
 80a36b8:	4650      	mov	r0, sl
 80a36ba:	4659      	mov	r1, fp
 80a36bc:	f000 f81c 	bl	80a36f8 <__aeabi_dsub>
 80a36c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a36c4:	f000 f9cc 	bl	80a3a60 <__aeabi_dmul>
 80a36c8:	e713      	b.n	80a34f2 <__ieee754_log+0x1fa>
 80a36ca:	bf00      	nop
 80a36cc:	f3af 8000 	nop.w
 80a36d0:	fee00000 	.word	0xfee00000
 80a36d4:	3fe62e42 	.word	0x3fe62e42
 80a36d8:	35793c76 	.word	0x35793c76
 80a36dc:	3dea39ef 	.word	0x3dea39ef

080a36e0 <matherr>:
 80a36e0:	2000      	movs	r0, #0
 80a36e2:	4770      	bx	lr

080a36e4 <nan>:
 80a36e4:	2000      	movs	r0, #0
 80a36e6:	4901      	ldr	r1, [pc, #4]	; (80a36ec <nan+0x8>)
 80a36e8:	4770      	bx	lr
 80a36ea:	bf00      	nop
 80a36ec:	7ff80000 	.word	0x7ff80000

080a36f0 <__aeabi_drsub>:
 80a36f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a36f4:	e002      	b.n	80a36fc <__adddf3>
 80a36f6:	bf00      	nop

080a36f8 <__aeabi_dsub>:
 80a36f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a36fc <__adddf3>:
 80a36fc:	b530      	push	{r4, r5, lr}
 80a36fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3702:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3706:	ea94 0f05 	teq	r4, r5
 80a370a:	bf08      	it	eq
 80a370c:	ea90 0f02 	teqeq	r0, r2
 80a3710:	bf1f      	itttt	ne
 80a3712:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3716:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a371a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a371e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3722:	f000 80e2 	beq.w	80a38ea <__adddf3+0x1ee>
 80a3726:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a372a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a372e:	bfb8      	it	lt
 80a3730:	426d      	neglt	r5, r5
 80a3732:	dd0c      	ble.n	80a374e <__adddf3+0x52>
 80a3734:	442c      	add	r4, r5
 80a3736:	ea80 0202 	eor.w	r2, r0, r2
 80a373a:	ea81 0303 	eor.w	r3, r1, r3
 80a373e:	ea82 0000 	eor.w	r0, r2, r0
 80a3742:	ea83 0101 	eor.w	r1, r3, r1
 80a3746:	ea80 0202 	eor.w	r2, r0, r2
 80a374a:	ea81 0303 	eor.w	r3, r1, r3
 80a374e:	2d36      	cmp	r5, #54	; 0x36
 80a3750:	bf88      	it	hi
 80a3752:	bd30      	pophi	{r4, r5, pc}
 80a3754:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a375c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3760:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3764:	d002      	beq.n	80a376c <__adddf3+0x70>
 80a3766:	4240      	negs	r0, r0
 80a3768:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a376c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3774:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3778:	d002      	beq.n	80a3780 <__adddf3+0x84>
 80a377a:	4252      	negs	r2, r2
 80a377c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3780:	ea94 0f05 	teq	r4, r5
 80a3784:	f000 80a7 	beq.w	80a38d6 <__adddf3+0x1da>
 80a3788:	f1a4 0401 	sub.w	r4, r4, #1
 80a378c:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3790:	db0d      	blt.n	80a37ae <__adddf3+0xb2>
 80a3792:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3796:	fa22 f205 	lsr.w	r2, r2, r5
 80a379a:	1880      	adds	r0, r0, r2
 80a379c:	f141 0100 	adc.w	r1, r1, #0
 80a37a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80a37a4:	1880      	adds	r0, r0, r2
 80a37a6:	fa43 f305 	asr.w	r3, r3, r5
 80a37aa:	4159      	adcs	r1, r3
 80a37ac:	e00e      	b.n	80a37cc <__adddf3+0xd0>
 80a37ae:	f1a5 0520 	sub.w	r5, r5, #32
 80a37b2:	f10e 0e20 	add.w	lr, lr, #32
 80a37b6:	2a01      	cmp	r2, #1
 80a37b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a37bc:	bf28      	it	cs
 80a37be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a37c2:	fa43 f305 	asr.w	r3, r3, r5
 80a37c6:	18c0      	adds	r0, r0, r3
 80a37c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a37cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a37d0:	d507      	bpl.n	80a37e2 <__adddf3+0xe6>
 80a37d2:	f04f 0e00 	mov.w	lr, #0
 80a37d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80a37da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a37de:	eb6e 0101 	sbc.w	r1, lr, r1
 80a37e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a37e6:	d31b      	bcc.n	80a3820 <__adddf3+0x124>
 80a37e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a37ec:	d30c      	bcc.n	80a3808 <__adddf3+0x10c>
 80a37ee:	0849      	lsrs	r1, r1, #1
 80a37f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80a37f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a37f8:	f104 0401 	add.w	r4, r4, #1
 80a37fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3800:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3804:	f080 809a 	bcs.w	80a393c <__adddf3+0x240>
 80a3808:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a380c:	bf08      	it	eq
 80a380e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3812:	f150 0000 	adcs.w	r0, r0, #0
 80a3816:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a381a:	ea41 0105 	orr.w	r1, r1, r5
 80a381e:	bd30      	pop	{r4, r5, pc}
 80a3820:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3824:	4140      	adcs	r0, r0
 80a3826:	eb41 0101 	adc.w	r1, r1, r1
 80a382a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a382e:	f1a4 0401 	sub.w	r4, r4, #1
 80a3832:	d1e9      	bne.n	80a3808 <__adddf3+0x10c>
 80a3834:	f091 0f00 	teq	r1, #0
 80a3838:	bf04      	itt	eq
 80a383a:	4601      	moveq	r1, r0
 80a383c:	2000      	moveq	r0, #0
 80a383e:	fab1 f381 	clz	r3, r1
 80a3842:	bf08      	it	eq
 80a3844:	3320      	addeq	r3, #32
 80a3846:	f1a3 030b 	sub.w	r3, r3, #11
 80a384a:	f1b3 0220 	subs.w	r2, r3, #32
 80a384e:	da0c      	bge.n	80a386a <__adddf3+0x16e>
 80a3850:	320c      	adds	r2, #12
 80a3852:	dd08      	ble.n	80a3866 <__adddf3+0x16a>
 80a3854:	f102 0c14 	add.w	ip, r2, #20
 80a3858:	f1c2 020c 	rsb	r2, r2, #12
 80a385c:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3860:	fa21 f102 	lsr.w	r1, r1, r2
 80a3864:	e00c      	b.n	80a3880 <__adddf3+0x184>
 80a3866:	f102 0214 	add.w	r2, r2, #20
 80a386a:	bfd8      	it	le
 80a386c:	f1c2 0c20 	rsble	ip, r2, #32
 80a3870:	fa01 f102 	lsl.w	r1, r1, r2
 80a3874:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3878:	bfdc      	itt	le
 80a387a:	ea41 010c 	orrle.w	r1, r1, ip
 80a387e:	4090      	lslle	r0, r2
 80a3880:	1ae4      	subs	r4, r4, r3
 80a3882:	bfa2      	ittt	ge
 80a3884:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3888:	4329      	orrge	r1, r5
 80a388a:	bd30      	popge	{r4, r5, pc}
 80a388c:	ea6f 0404 	mvn.w	r4, r4
 80a3890:	3c1f      	subs	r4, #31
 80a3892:	da1c      	bge.n	80a38ce <__adddf3+0x1d2>
 80a3894:	340c      	adds	r4, #12
 80a3896:	dc0e      	bgt.n	80a38b6 <__adddf3+0x1ba>
 80a3898:	f104 0414 	add.w	r4, r4, #20
 80a389c:	f1c4 0220 	rsb	r2, r4, #32
 80a38a0:	fa20 f004 	lsr.w	r0, r0, r4
 80a38a4:	fa01 f302 	lsl.w	r3, r1, r2
 80a38a8:	ea40 0003 	orr.w	r0, r0, r3
 80a38ac:	fa21 f304 	lsr.w	r3, r1, r4
 80a38b0:	ea45 0103 	orr.w	r1, r5, r3
 80a38b4:	bd30      	pop	{r4, r5, pc}
 80a38b6:	f1c4 040c 	rsb	r4, r4, #12
 80a38ba:	f1c4 0220 	rsb	r2, r4, #32
 80a38be:	fa20 f002 	lsr.w	r0, r0, r2
 80a38c2:	fa01 f304 	lsl.w	r3, r1, r4
 80a38c6:	ea40 0003 	orr.w	r0, r0, r3
 80a38ca:	4629      	mov	r1, r5
 80a38cc:	bd30      	pop	{r4, r5, pc}
 80a38ce:	fa21 f004 	lsr.w	r0, r1, r4
 80a38d2:	4629      	mov	r1, r5
 80a38d4:	bd30      	pop	{r4, r5, pc}
 80a38d6:	f094 0f00 	teq	r4, #0
 80a38da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a38de:	bf06      	itte	eq
 80a38e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a38e4:	3401      	addeq	r4, #1
 80a38e6:	3d01      	subne	r5, #1
 80a38e8:	e74e      	b.n	80a3788 <__adddf3+0x8c>
 80a38ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a38ee:	bf18      	it	ne
 80a38f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a38f4:	d029      	beq.n	80a394a <__adddf3+0x24e>
 80a38f6:	ea94 0f05 	teq	r4, r5
 80a38fa:	bf08      	it	eq
 80a38fc:	ea90 0f02 	teqeq	r0, r2
 80a3900:	d005      	beq.n	80a390e <__adddf3+0x212>
 80a3902:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3906:	bf04      	itt	eq
 80a3908:	4619      	moveq	r1, r3
 80a390a:	4610      	moveq	r0, r2
 80a390c:	bd30      	pop	{r4, r5, pc}
 80a390e:	ea91 0f03 	teq	r1, r3
 80a3912:	bf1e      	ittt	ne
 80a3914:	2100      	movne	r1, #0
 80a3916:	2000      	movne	r0, #0
 80a3918:	bd30      	popne	{r4, r5, pc}
 80a391a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a391e:	d105      	bne.n	80a392c <__adddf3+0x230>
 80a3920:	0040      	lsls	r0, r0, #1
 80a3922:	4149      	adcs	r1, r1
 80a3924:	bf28      	it	cs
 80a3926:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a392a:	bd30      	pop	{r4, r5, pc}
 80a392c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3930:	bf3c      	itt	cc
 80a3932:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3936:	bd30      	popcc	{r4, r5, pc}
 80a3938:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a393c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3940:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3944:	f04f 0000 	mov.w	r0, #0
 80a3948:	bd30      	pop	{r4, r5, pc}
 80a394a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a394e:	bf1a      	itte	ne
 80a3950:	4619      	movne	r1, r3
 80a3952:	4610      	movne	r0, r2
 80a3954:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3958:	bf1c      	itt	ne
 80a395a:	460b      	movne	r3, r1
 80a395c:	4602      	movne	r2, r0
 80a395e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3962:	bf06      	itte	eq
 80a3964:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3968:	ea91 0f03 	teqeq	r1, r3
 80a396c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3970:	bd30      	pop	{r4, r5, pc}
 80a3972:	bf00      	nop

080a3974 <__aeabi_ui2d>:
 80a3974:	f090 0f00 	teq	r0, #0
 80a3978:	bf04      	itt	eq
 80a397a:	2100      	moveq	r1, #0
 80a397c:	4770      	bxeq	lr
 80a397e:	b530      	push	{r4, r5, lr}
 80a3980:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3984:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3988:	f04f 0500 	mov.w	r5, #0
 80a398c:	f04f 0100 	mov.w	r1, #0
 80a3990:	e750      	b.n	80a3834 <__adddf3+0x138>
 80a3992:	bf00      	nop

080a3994 <__aeabi_i2d>:
 80a3994:	f090 0f00 	teq	r0, #0
 80a3998:	bf04      	itt	eq
 80a399a:	2100      	moveq	r1, #0
 80a399c:	4770      	bxeq	lr
 80a399e:	b530      	push	{r4, r5, lr}
 80a39a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a39a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a39a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a39ac:	bf48      	it	mi
 80a39ae:	4240      	negmi	r0, r0
 80a39b0:	f04f 0100 	mov.w	r1, #0
 80a39b4:	e73e      	b.n	80a3834 <__adddf3+0x138>
 80a39b6:	bf00      	nop

080a39b8 <__aeabi_f2d>:
 80a39b8:	0042      	lsls	r2, r0, #1
 80a39ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a39be:	ea4f 0131 	mov.w	r1, r1, rrx
 80a39c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a39c6:	bf1f      	itttt	ne
 80a39c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a39cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a39d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a39d4:	4770      	bxne	lr
 80a39d6:	f092 0f00 	teq	r2, #0
 80a39da:	bf14      	ite	ne
 80a39dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a39e0:	4770      	bxeq	lr
 80a39e2:	b530      	push	{r4, r5, lr}
 80a39e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a39e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a39ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a39f0:	e720      	b.n	80a3834 <__adddf3+0x138>
 80a39f2:	bf00      	nop

080a39f4 <__aeabi_ul2d>:
 80a39f4:	ea50 0201 	orrs.w	r2, r0, r1
 80a39f8:	bf08      	it	eq
 80a39fa:	4770      	bxeq	lr
 80a39fc:	b530      	push	{r4, r5, lr}
 80a39fe:	f04f 0500 	mov.w	r5, #0
 80a3a02:	e00a      	b.n	80a3a1a <__aeabi_l2d+0x16>

080a3a04 <__aeabi_l2d>:
 80a3a04:	ea50 0201 	orrs.w	r2, r0, r1
 80a3a08:	bf08      	it	eq
 80a3a0a:	4770      	bxeq	lr
 80a3a0c:	b530      	push	{r4, r5, lr}
 80a3a0e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a3a12:	d502      	bpl.n	80a3a1a <__aeabi_l2d+0x16>
 80a3a14:	4240      	negs	r0, r0
 80a3a16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3a1a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3a1e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3a22:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a3a26:	f43f aedc 	beq.w	80a37e2 <__adddf3+0xe6>
 80a3a2a:	f04f 0203 	mov.w	r2, #3
 80a3a2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3a32:	bf18      	it	ne
 80a3a34:	3203      	addne	r2, #3
 80a3a36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3a3a:	bf18      	it	ne
 80a3a3c:	3203      	addne	r2, #3
 80a3a3e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a3a42:	f1c2 0320 	rsb	r3, r2, #32
 80a3a46:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3a4a:	fa20 f002 	lsr.w	r0, r0, r2
 80a3a4e:	fa01 fe03 	lsl.w	lr, r1, r3
 80a3a52:	ea40 000e 	orr.w	r0, r0, lr
 80a3a56:	fa21 f102 	lsr.w	r1, r1, r2
 80a3a5a:	4414      	add	r4, r2
 80a3a5c:	e6c1      	b.n	80a37e2 <__adddf3+0xe6>
 80a3a5e:	bf00      	nop

080a3a60 <__aeabi_dmul>:
 80a3a60:	b570      	push	{r4, r5, r6, lr}
 80a3a62:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3a66:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3a6a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3a6e:	bf1d      	ittte	ne
 80a3a70:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3a74:	ea94 0f0c 	teqne	r4, ip
 80a3a78:	ea95 0f0c 	teqne	r5, ip
 80a3a7c:	f000 f8de 	bleq	80a3c3c <__aeabi_dmul+0x1dc>
 80a3a80:	442c      	add	r4, r5
 80a3a82:	ea81 0603 	eor.w	r6, r1, r3
 80a3a86:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a3a8a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a3a8e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a3a92:	bf18      	it	ne
 80a3a94:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a3a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3a9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a3aa0:	d038      	beq.n	80a3b14 <__aeabi_dmul+0xb4>
 80a3aa2:	fba0 ce02 	umull	ip, lr, r0, r2
 80a3aa6:	f04f 0500 	mov.w	r5, #0
 80a3aaa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a3aae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a3ab2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a3ab6:	f04f 0600 	mov.w	r6, #0
 80a3aba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a3abe:	f09c 0f00 	teq	ip, #0
 80a3ac2:	bf18      	it	ne
 80a3ac4:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3ac8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3acc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3ad0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a3ad4:	d204      	bcs.n	80a3ae0 <__aeabi_dmul+0x80>
 80a3ad6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3ada:	416d      	adcs	r5, r5
 80a3adc:	eb46 0606 	adc.w	r6, r6, r6
 80a3ae0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a3ae4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3ae8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3aec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3af0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a3af4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3af8:	bf88      	it	hi
 80a3afa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3afe:	d81e      	bhi.n	80a3b3e <__aeabi_dmul+0xde>
 80a3b00:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a3b04:	bf08      	it	eq
 80a3b06:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3b0a:	f150 0000 	adcs.w	r0, r0, #0
 80a3b0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3b12:	bd70      	pop	{r4, r5, r6, pc}
 80a3b14:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3b18:	ea46 0101 	orr.w	r1, r6, r1
 80a3b1c:	ea40 0002 	orr.w	r0, r0, r2
 80a3b20:	ea81 0103 	eor.w	r1, r1, r3
 80a3b24:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3b28:	bfc2      	ittt	gt
 80a3b2a:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3b2e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3b32:	bd70      	popgt	{r4, r5, r6, pc}
 80a3b34:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3b38:	f04f 0e00 	mov.w	lr, #0
 80a3b3c:	3c01      	subs	r4, #1
 80a3b3e:	f300 80ab 	bgt.w	80a3c98 <__aeabi_dmul+0x238>
 80a3b42:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a3b46:	bfde      	ittt	le
 80a3b48:	2000      	movle	r0, #0
 80a3b4a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3b4e:	bd70      	pople	{r4, r5, r6, pc}
 80a3b50:	f1c4 0400 	rsb	r4, r4, #0
 80a3b54:	3c20      	subs	r4, #32
 80a3b56:	da35      	bge.n	80a3bc4 <__aeabi_dmul+0x164>
 80a3b58:	340c      	adds	r4, #12
 80a3b5a:	dc1b      	bgt.n	80a3b94 <__aeabi_dmul+0x134>
 80a3b5c:	f104 0414 	add.w	r4, r4, #20
 80a3b60:	f1c4 0520 	rsb	r5, r4, #32
 80a3b64:	fa00 f305 	lsl.w	r3, r0, r5
 80a3b68:	fa20 f004 	lsr.w	r0, r0, r4
 80a3b6c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3b70:	ea40 0002 	orr.w	r0, r0, r2
 80a3b74:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a3b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3b7c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3b80:	fa21 f604 	lsr.w	r6, r1, r4
 80a3b84:	eb42 0106 	adc.w	r1, r2, r6
 80a3b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3b8c:	bf08      	it	eq
 80a3b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3b92:	bd70      	pop	{r4, r5, r6, pc}
 80a3b94:	f1c4 040c 	rsb	r4, r4, #12
 80a3b98:	f1c4 0520 	rsb	r5, r4, #32
 80a3b9c:	fa00 f304 	lsl.w	r3, r0, r4
 80a3ba0:	fa20 f005 	lsr.w	r0, r0, r5
 80a3ba4:	fa01 f204 	lsl.w	r2, r1, r4
 80a3ba8:	ea40 0002 	orr.w	r0, r0, r2
 80a3bac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3bb0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a3bb4:	f141 0100 	adc.w	r1, r1, #0
 80a3bb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3bbc:	bf08      	it	eq
 80a3bbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3bc2:	bd70      	pop	{r4, r5, r6, pc}
 80a3bc4:	f1c4 0520 	rsb	r5, r4, #32
 80a3bc8:	fa00 f205 	lsl.w	r2, r0, r5
 80a3bcc:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3bd0:	fa20 f304 	lsr.w	r3, r0, r4
 80a3bd4:	fa01 f205 	lsl.w	r2, r1, r5
 80a3bd8:	ea43 0302 	orr.w	r3, r3, r2
 80a3bdc:	fa21 f004 	lsr.w	r0, r1, r4
 80a3be0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3be4:	fa21 f204 	lsr.w	r2, r1, r4
 80a3be8:	ea20 0002 	bic.w	r0, r0, r2
 80a3bec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3bf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3bf4:	bf08      	it	eq
 80a3bf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3bfa:	bd70      	pop	{r4, r5, r6, pc}
 80a3bfc:	f094 0f00 	teq	r4, #0
 80a3c00:	d10f      	bne.n	80a3c22 <__aeabi_dmul+0x1c2>
 80a3c02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3c06:	0040      	lsls	r0, r0, #1
 80a3c08:	eb41 0101 	adc.w	r1, r1, r1
 80a3c0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3c10:	bf08      	it	eq
 80a3c12:	3c01      	subeq	r4, #1
 80a3c14:	d0f7      	beq.n	80a3c06 <__aeabi_dmul+0x1a6>
 80a3c16:	ea41 0106 	orr.w	r1, r1, r6
 80a3c1a:	f095 0f00 	teq	r5, #0
 80a3c1e:	bf18      	it	ne
 80a3c20:	4770      	bxne	lr
 80a3c22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3c26:	0052      	lsls	r2, r2, #1
 80a3c28:	eb43 0303 	adc.w	r3, r3, r3
 80a3c2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3c30:	bf08      	it	eq
 80a3c32:	3d01      	subeq	r5, #1
 80a3c34:	d0f7      	beq.n	80a3c26 <__aeabi_dmul+0x1c6>
 80a3c36:	ea43 0306 	orr.w	r3, r3, r6
 80a3c3a:	4770      	bx	lr
 80a3c3c:	ea94 0f0c 	teq	r4, ip
 80a3c40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3c44:	bf18      	it	ne
 80a3c46:	ea95 0f0c 	teqne	r5, ip
 80a3c4a:	d00c      	beq.n	80a3c66 <__aeabi_dmul+0x206>
 80a3c4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3c50:	bf18      	it	ne
 80a3c52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3c56:	d1d1      	bne.n	80a3bfc <__aeabi_dmul+0x19c>
 80a3c58:	ea81 0103 	eor.w	r1, r1, r3
 80a3c5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3c60:	f04f 0000 	mov.w	r0, #0
 80a3c64:	bd70      	pop	{r4, r5, r6, pc}
 80a3c66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3c6a:	bf06      	itte	eq
 80a3c6c:	4610      	moveq	r0, r2
 80a3c6e:	4619      	moveq	r1, r3
 80a3c70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3c74:	d019      	beq.n	80a3caa <__aeabi_dmul+0x24a>
 80a3c76:	ea94 0f0c 	teq	r4, ip
 80a3c7a:	d102      	bne.n	80a3c82 <__aeabi_dmul+0x222>
 80a3c7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3c80:	d113      	bne.n	80a3caa <__aeabi_dmul+0x24a>
 80a3c82:	ea95 0f0c 	teq	r5, ip
 80a3c86:	d105      	bne.n	80a3c94 <__aeabi_dmul+0x234>
 80a3c88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3c8c:	bf1c      	itt	ne
 80a3c8e:	4610      	movne	r0, r2
 80a3c90:	4619      	movne	r1, r3
 80a3c92:	d10a      	bne.n	80a3caa <__aeabi_dmul+0x24a>
 80a3c94:	ea81 0103 	eor.w	r1, r1, r3
 80a3c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3c9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3ca0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3ca4:	f04f 0000 	mov.w	r0, #0
 80a3ca8:	bd70      	pop	{r4, r5, r6, pc}
 80a3caa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3cae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3cb2:	bd70      	pop	{r4, r5, r6, pc}

080a3cb4 <__aeabi_ddiv>:
 80a3cb4:	b570      	push	{r4, r5, r6, lr}
 80a3cb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3cba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3cbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3cc2:	bf1d      	ittte	ne
 80a3cc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3cc8:	ea94 0f0c 	teqne	r4, ip
 80a3ccc:	ea95 0f0c 	teqne	r5, ip
 80a3cd0:	f000 f8a7 	bleq	80a3e22 <__aeabi_ddiv+0x16e>
 80a3cd4:	eba4 0405 	sub.w	r4, r4, r5
 80a3cd8:	ea81 0e03 	eor.w	lr, r1, r3
 80a3cdc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3ce0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3ce4:	f000 8088 	beq.w	80a3df8 <__aeabi_ddiv+0x144>
 80a3ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3cec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3cf0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3cf4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3cf8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3cfc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3d00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3d04:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3d08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3d0c:	429d      	cmp	r5, r3
 80a3d0e:	bf08      	it	eq
 80a3d10:	4296      	cmpeq	r6, r2
 80a3d12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3d16:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3d1a:	d202      	bcs.n	80a3d22 <__aeabi_ddiv+0x6e>
 80a3d1c:	085b      	lsrs	r3, r3, #1
 80a3d1e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d22:	1ab6      	subs	r6, r6, r2
 80a3d24:	eb65 0503 	sbc.w	r5, r5, r3
 80a3d28:	085b      	lsrs	r3, r3, #1
 80a3d2a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3d32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3d36:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d3e:	bf22      	ittt	cs
 80a3d40:	1ab6      	subcs	r6, r6, r2
 80a3d42:	4675      	movcs	r5, lr
 80a3d44:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3d48:	085b      	lsrs	r3, r3, #1
 80a3d4a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d4e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d52:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d56:	bf22      	ittt	cs
 80a3d58:	1ab6      	subcs	r6, r6, r2
 80a3d5a:	4675      	movcs	r5, lr
 80a3d5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3d60:	085b      	lsrs	r3, r3, #1
 80a3d62:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d66:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d6e:	bf22      	ittt	cs
 80a3d70:	1ab6      	subcs	r6, r6, r2
 80a3d72:	4675      	movcs	r5, lr
 80a3d74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3d78:	085b      	lsrs	r3, r3, #1
 80a3d7a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3d7e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3d82:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3d86:	bf22      	ittt	cs
 80a3d88:	1ab6      	subcs	r6, r6, r2
 80a3d8a:	4675      	movcs	r5, lr
 80a3d8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3d90:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3d94:	d018      	beq.n	80a3dc8 <__aeabi_ddiv+0x114>
 80a3d96:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3d9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3d9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3da2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3da6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3daa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3dae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3db2:	d1c0      	bne.n	80a3d36 <__aeabi_ddiv+0x82>
 80a3db4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3db8:	d10b      	bne.n	80a3dd2 <__aeabi_ddiv+0x11e>
 80a3dba:	ea41 0100 	orr.w	r1, r1, r0
 80a3dbe:	f04f 0000 	mov.w	r0, #0
 80a3dc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3dc6:	e7b6      	b.n	80a3d36 <__aeabi_ddiv+0x82>
 80a3dc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3dcc:	bf04      	itt	eq
 80a3dce:	4301      	orreq	r1, r0
 80a3dd0:	2000      	moveq	r0, #0
 80a3dd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3dd6:	bf88      	it	hi
 80a3dd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3ddc:	f63f aeaf 	bhi.w	80a3b3e <__aeabi_dmul+0xde>
 80a3de0:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3de4:	bf04      	itt	eq
 80a3de6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3dea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3dee:	f150 0000 	adcs.w	r0, r0, #0
 80a3df2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3df6:	bd70      	pop	{r4, r5, r6, pc}
 80a3df8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3dfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3e00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3e04:	bfc2      	ittt	gt
 80a3e06:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3e0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3e0e:	bd70      	popgt	{r4, r5, r6, pc}
 80a3e10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3e14:	f04f 0e00 	mov.w	lr, #0
 80a3e18:	3c01      	subs	r4, #1
 80a3e1a:	e690      	b.n	80a3b3e <__aeabi_dmul+0xde>
 80a3e1c:	ea45 0e06 	orr.w	lr, r5, r6
 80a3e20:	e68d      	b.n	80a3b3e <__aeabi_dmul+0xde>
 80a3e22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3e26:	ea94 0f0c 	teq	r4, ip
 80a3e2a:	bf08      	it	eq
 80a3e2c:	ea95 0f0c 	teqeq	r5, ip
 80a3e30:	f43f af3b 	beq.w	80a3caa <__aeabi_dmul+0x24a>
 80a3e34:	ea94 0f0c 	teq	r4, ip
 80a3e38:	d10a      	bne.n	80a3e50 <__aeabi_ddiv+0x19c>
 80a3e3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3e3e:	f47f af34 	bne.w	80a3caa <__aeabi_dmul+0x24a>
 80a3e42:	ea95 0f0c 	teq	r5, ip
 80a3e46:	f47f af25 	bne.w	80a3c94 <__aeabi_dmul+0x234>
 80a3e4a:	4610      	mov	r0, r2
 80a3e4c:	4619      	mov	r1, r3
 80a3e4e:	e72c      	b.n	80a3caa <__aeabi_dmul+0x24a>
 80a3e50:	ea95 0f0c 	teq	r5, ip
 80a3e54:	d106      	bne.n	80a3e64 <__aeabi_ddiv+0x1b0>
 80a3e56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3e5a:	f43f aefd 	beq.w	80a3c58 <__aeabi_dmul+0x1f8>
 80a3e5e:	4610      	mov	r0, r2
 80a3e60:	4619      	mov	r1, r3
 80a3e62:	e722      	b.n	80a3caa <__aeabi_dmul+0x24a>
 80a3e64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3e68:	bf18      	it	ne
 80a3e6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3e6e:	f47f aec5 	bne.w	80a3bfc <__aeabi_dmul+0x19c>
 80a3e72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3e76:	f47f af0d 	bne.w	80a3c94 <__aeabi_dmul+0x234>
 80a3e7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3e7e:	f47f aeeb 	bne.w	80a3c58 <__aeabi_dmul+0x1f8>
 80a3e82:	e712      	b.n	80a3caa <__aeabi_dmul+0x24a>

080a3e84 <__gedf2>:
 80a3e84:	f04f 3cff 	mov.w	ip, #4294967295
 80a3e88:	e006      	b.n	80a3e98 <__cmpdf2+0x4>
 80a3e8a:	bf00      	nop

080a3e8c <__ledf2>:
 80a3e8c:	f04f 0c01 	mov.w	ip, #1
 80a3e90:	e002      	b.n	80a3e98 <__cmpdf2+0x4>
 80a3e92:	bf00      	nop

080a3e94 <__cmpdf2>:
 80a3e94:	f04f 0c01 	mov.w	ip, #1
 80a3e98:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3e9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3ea0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ea4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3ea8:	bf18      	it	ne
 80a3eaa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3eae:	d01b      	beq.n	80a3ee8 <__cmpdf2+0x54>
 80a3eb0:	b001      	add	sp, #4
 80a3eb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3eb6:	bf0c      	ite	eq
 80a3eb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3ebc:	ea91 0f03 	teqne	r1, r3
 80a3ec0:	bf02      	ittt	eq
 80a3ec2:	ea90 0f02 	teqeq	r0, r2
 80a3ec6:	2000      	moveq	r0, #0
 80a3ec8:	4770      	bxeq	lr
 80a3eca:	f110 0f00 	cmn.w	r0, #0
 80a3ece:	ea91 0f03 	teq	r1, r3
 80a3ed2:	bf58      	it	pl
 80a3ed4:	4299      	cmppl	r1, r3
 80a3ed6:	bf08      	it	eq
 80a3ed8:	4290      	cmpeq	r0, r2
 80a3eda:	bf2c      	ite	cs
 80a3edc:	17d8      	asrcs	r0, r3, #31
 80a3ede:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3ee2:	f040 0001 	orr.w	r0, r0, #1
 80a3ee6:	4770      	bx	lr
 80a3ee8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3eec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3ef0:	d102      	bne.n	80a3ef8 <__cmpdf2+0x64>
 80a3ef2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3ef6:	d107      	bne.n	80a3f08 <__cmpdf2+0x74>
 80a3ef8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3efc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3f00:	d1d6      	bne.n	80a3eb0 <__cmpdf2+0x1c>
 80a3f02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3f06:	d0d3      	beq.n	80a3eb0 <__cmpdf2+0x1c>
 80a3f08:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3f0c:	4770      	bx	lr
 80a3f0e:	bf00      	nop

080a3f10 <__aeabi_cdrcmple>:
 80a3f10:	4684      	mov	ip, r0
 80a3f12:	4610      	mov	r0, r2
 80a3f14:	4662      	mov	r2, ip
 80a3f16:	468c      	mov	ip, r1
 80a3f18:	4619      	mov	r1, r3
 80a3f1a:	4663      	mov	r3, ip
 80a3f1c:	e000      	b.n	80a3f20 <__aeabi_cdcmpeq>
 80a3f1e:	bf00      	nop

080a3f20 <__aeabi_cdcmpeq>:
 80a3f20:	b501      	push	{r0, lr}
 80a3f22:	f7ff ffb7 	bl	80a3e94 <__cmpdf2>
 80a3f26:	2800      	cmp	r0, #0
 80a3f28:	bf48      	it	mi
 80a3f2a:	f110 0f00 	cmnmi.w	r0, #0
 80a3f2e:	bd01      	pop	{r0, pc}

080a3f30 <__aeabi_dcmpeq>:
 80a3f30:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f34:	f7ff fff4 	bl	80a3f20 <__aeabi_cdcmpeq>
 80a3f38:	bf0c      	ite	eq
 80a3f3a:	2001      	moveq	r0, #1
 80a3f3c:	2000      	movne	r0, #0
 80a3f3e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f42:	bf00      	nop

080a3f44 <__aeabi_dcmplt>:
 80a3f44:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f48:	f7ff ffea 	bl	80a3f20 <__aeabi_cdcmpeq>
 80a3f4c:	bf34      	ite	cc
 80a3f4e:	2001      	movcc	r0, #1
 80a3f50:	2000      	movcs	r0, #0
 80a3f52:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f56:	bf00      	nop

080a3f58 <__aeabi_dcmple>:
 80a3f58:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f5c:	f7ff ffe0 	bl	80a3f20 <__aeabi_cdcmpeq>
 80a3f60:	bf94      	ite	ls
 80a3f62:	2001      	movls	r0, #1
 80a3f64:	2000      	movhi	r0, #0
 80a3f66:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f6a:	bf00      	nop

080a3f6c <__aeabi_dcmpge>:
 80a3f6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f70:	f7ff ffce 	bl	80a3f10 <__aeabi_cdrcmple>
 80a3f74:	bf94      	ite	ls
 80a3f76:	2001      	movls	r0, #1
 80a3f78:	2000      	movhi	r0, #0
 80a3f7a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f7e:	bf00      	nop

080a3f80 <__aeabi_dcmpgt>:
 80a3f80:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3f84:	f7ff ffc4 	bl	80a3f10 <__aeabi_cdrcmple>
 80a3f88:	bf34      	ite	cc
 80a3f8a:	2001      	movcc	r0, #1
 80a3f8c:	2000      	movcs	r0, #0
 80a3f8e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3f92:	bf00      	nop

080a3f94 <__aeabi_dcmpun>:
 80a3f94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3f98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3f9c:	d102      	bne.n	80a3fa4 <__aeabi_dcmpun+0x10>
 80a3f9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3fa2:	d10a      	bne.n	80a3fba <__aeabi_dcmpun+0x26>
 80a3fa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3fa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3fac:	d102      	bne.n	80a3fb4 <__aeabi_dcmpun+0x20>
 80a3fae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3fb2:	d102      	bne.n	80a3fba <__aeabi_dcmpun+0x26>
 80a3fb4:	f04f 0000 	mov.w	r0, #0
 80a3fb8:	4770      	bx	lr
 80a3fba:	f04f 0001 	mov.w	r0, #1
 80a3fbe:	4770      	bx	lr

080a3fc0 <__aeabi_d2iz>:
 80a3fc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3fc4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3fc8:	d215      	bcs.n	80a3ff6 <__aeabi_d2iz+0x36>
 80a3fca:	d511      	bpl.n	80a3ff0 <__aeabi_d2iz+0x30>
 80a3fcc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3fd0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3fd4:	d912      	bls.n	80a3ffc <__aeabi_d2iz+0x3c>
 80a3fd6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3fda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3fde:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3fe2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3fe6:	fa23 f002 	lsr.w	r0, r3, r2
 80a3fea:	bf18      	it	ne
 80a3fec:	4240      	negne	r0, r0
 80a3fee:	4770      	bx	lr
 80a3ff0:	f04f 0000 	mov.w	r0, #0
 80a3ff4:	4770      	bx	lr
 80a3ff6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3ffa:	d105      	bne.n	80a4008 <__aeabi_d2iz+0x48>
 80a3ffc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4000:	bf08      	it	eq
 80a4002:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4006:	4770      	bx	lr
 80a4008:	f04f 0000 	mov.w	r0, #0
 80a400c:	4770      	bx	lr
 80a400e:	bf00      	nop

080a4010 <__aeabi_d2uiz>:
 80a4010:	004a      	lsls	r2, r1, #1
 80a4012:	d211      	bcs.n	80a4038 <__aeabi_d2uiz+0x28>
 80a4014:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4018:	d211      	bcs.n	80a403e <__aeabi_d2uiz+0x2e>
 80a401a:	d50d      	bpl.n	80a4038 <__aeabi_d2uiz+0x28>
 80a401c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4020:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a4024:	d40e      	bmi.n	80a4044 <__aeabi_d2uiz+0x34>
 80a4026:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a402a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a402e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a4032:	fa23 f002 	lsr.w	r0, r3, r2
 80a4036:	4770      	bx	lr
 80a4038:	f04f 0000 	mov.w	r0, #0
 80a403c:	4770      	bx	lr
 80a403e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4042:	d102      	bne.n	80a404a <__aeabi_d2uiz+0x3a>
 80a4044:	f04f 30ff 	mov.w	r0, #4294967295
 80a4048:	4770      	bx	lr
 80a404a:	f04f 0000 	mov.w	r0, #0
 80a404e:	4770      	bx	lr

080a4050 <__aeabi_d2f>:
 80a4050:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a4054:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4058:	bf24      	itt	cs
 80a405a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a405e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a4062:	d90d      	bls.n	80a4080 <__aeabi_d2f+0x30>
 80a4064:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4068:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a406c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4070:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a4074:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4078:	bf08      	it	eq
 80a407a:	f020 0001 	biceq.w	r0, r0, #1
 80a407e:	4770      	bx	lr
 80a4080:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a4084:	d121      	bne.n	80a40ca <__aeabi_d2f+0x7a>
 80a4086:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a408a:	bfbc      	itt	lt
 80a408c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a4090:	4770      	bxlt	lr
 80a4092:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4096:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a409a:	f1c2 0218 	rsb	r2, r2, #24
 80a409e:	f1c2 0c20 	rsb	ip, r2, #32
 80a40a2:	fa10 f30c 	lsls.w	r3, r0, ip
 80a40a6:	fa20 f002 	lsr.w	r0, r0, r2
 80a40aa:	bf18      	it	ne
 80a40ac:	f040 0001 	orrne.w	r0, r0, #1
 80a40b0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a40b4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a40b8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a40bc:	ea40 000c 	orr.w	r0, r0, ip
 80a40c0:	fa23 f302 	lsr.w	r3, r3, r2
 80a40c4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a40c8:	e7cc      	b.n	80a4064 <__aeabi_d2f+0x14>
 80a40ca:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a40ce:	d107      	bne.n	80a40e0 <__aeabi_d2f+0x90>
 80a40d0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a40d4:	bf1e      	ittt	ne
 80a40d6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a40da:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a40de:	4770      	bxne	lr
 80a40e0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a40e4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a40e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a40ec:	4770      	bx	lr
 80a40ee:	bf00      	nop

080a40f0 <__aeabi_frsub>:
 80a40f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a40f4:	e002      	b.n	80a40fc <__addsf3>
 80a40f6:	bf00      	nop

080a40f8 <__aeabi_fsub>:
 80a40f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a40fc <__addsf3>:
 80a40fc:	0042      	lsls	r2, r0, #1
 80a40fe:	bf1f      	itttt	ne
 80a4100:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a4104:	ea92 0f03 	teqne	r2, r3
 80a4108:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a410c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4110:	d06a      	beq.n	80a41e8 <__addsf3+0xec>
 80a4112:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a4116:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a411a:	bfc1      	itttt	gt
 80a411c:	18d2      	addgt	r2, r2, r3
 80a411e:	4041      	eorgt	r1, r0
 80a4120:	4048      	eorgt	r0, r1
 80a4122:	4041      	eorgt	r1, r0
 80a4124:	bfb8      	it	lt
 80a4126:	425b      	neglt	r3, r3
 80a4128:	2b19      	cmp	r3, #25
 80a412a:	bf88      	it	hi
 80a412c:	4770      	bxhi	lr
 80a412e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a4132:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4136:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a413a:	bf18      	it	ne
 80a413c:	4240      	negne	r0, r0
 80a413e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4142:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a4146:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a414a:	bf18      	it	ne
 80a414c:	4249      	negne	r1, r1
 80a414e:	ea92 0f03 	teq	r2, r3
 80a4152:	d03f      	beq.n	80a41d4 <__addsf3+0xd8>
 80a4154:	f1a2 0201 	sub.w	r2, r2, #1
 80a4158:	fa41 fc03 	asr.w	ip, r1, r3
 80a415c:	eb10 000c 	adds.w	r0, r0, ip
 80a4160:	f1c3 0320 	rsb	r3, r3, #32
 80a4164:	fa01 f103 	lsl.w	r1, r1, r3
 80a4168:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a416c:	d502      	bpl.n	80a4174 <__addsf3+0x78>
 80a416e:	4249      	negs	r1, r1
 80a4170:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a4174:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4178:	d313      	bcc.n	80a41a2 <__addsf3+0xa6>
 80a417a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a417e:	d306      	bcc.n	80a418e <__addsf3+0x92>
 80a4180:	0840      	lsrs	r0, r0, #1
 80a4182:	ea4f 0131 	mov.w	r1, r1, rrx
 80a4186:	f102 0201 	add.w	r2, r2, #1
 80a418a:	2afe      	cmp	r2, #254	; 0xfe
 80a418c:	d251      	bcs.n	80a4232 <__addsf3+0x136>
 80a418e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a4192:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4196:	bf08      	it	eq
 80a4198:	f020 0001 	biceq.w	r0, r0, #1
 80a419c:	ea40 0003 	orr.w	r0, r0, r3
 80a41a0:	4770      	bx	lr
 80a41a2:	0049      	lsls	r1, r1, #1
 80a41a4:	eb40 0000 	adc.w	r0, r0, r0
 80a41a8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a41ac:	f1a2 0201 	sub.w	r2, r2, #1
 80a41b0:	d1ed      	bne.n	80a418e <__addsf3+0x92>
 80a41b2:	fab0 fc80 	clz	ip, r0
 80a41b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80a41ba:	ebb2 020c 	subs.w	r2, r2, ip
 80a41be:	fa00 f00c 	lsl.w	r0, r0, ip
 80a41c2:	bfaa      	itet	ge
 80a41c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a41c8:	4252      	neglt	r2, r2
 80a41ca:	4318      	orrge	r0, r3
 80a41cc:	bfbc      	itt	lt
 80a41ce:	40d0      	lsrlt	r0, r2
 80a41d0:	4318      	orrlt	r0, r3
 80a41d2:	4770      	bx	lr
 80a41d4:	f092 0f00 	teq	r2, #0
 80a41d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a41dc:	bf06      	itte	eq
 80a41de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a41e2:	3201      	addeq	r2, #1
 80a41e4:	3b01      	subne	r3, #1
 80a41e6:	e7b5      	b.n	80a4154 <__addsf3+0x58>
 80a41e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a41ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a41f0:	bf18      	it	ne
 80a41f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a41f6:	d021      	beq.n	80a423c <__addsf3+0x140>
 80a41f8:	ea92 0f03 	teq	r2, r3
 80a41fc:	d004      	beq.n	80a4208 <__addsf3+0x10c>
 80a41fe:	f092 0f00 	teq	r2, #0
 80a4202:	bf08      	it	eq
 80a4204:	4608      	moveq	r0, r1
 80a4206:	4770      	bx	lr
 80a4208:	ea90 0f01 	teq	r0, r1
 80a420c:	bf1c      	itt	ne
 80a420e:	2000      	movne	r0, #0
 80a4210:	4770      	bxne	lr
 80a4212:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a4216:	d104      	bne.n	80a4222 <__addsf3+0x126>
 80a4218:	0040      	lsls	r0, r0, #1
 80a421a:	bf28      	it	cs
 80a421c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4220:	4770      	bx	lr
 80a4222:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a4226:	bf3c      	itt	cc
 80a4228:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a422c:	4770      	bxcc	lr
 80a422e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4232:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a4236:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a423a:	4770      	bx	lr
 80a423c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4240:	bf16      	itet	ne
 80a4242:	4608      	movne	r0, r1
 80a4244:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4248:	4601      	movne	r1, r0
 80a424a:	0242      	lsls	r2, r0, #9
 80a424c:	bf06      	itte	eq
 80a424e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a4252:	ea90 0f01 	teqeq	r0, r1
 80a4256:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a425a:	4770      	bx	lr

080a425c <__aeabi_ui2f>:
 80a425c:	f04f 0300 	mov.w	r3, #0
 80a4260:	e004      	b.n	80a426c <__aeabi_i2f+0x8>
 80a4262:	bf00      	nop

080a4264 <__aeabi_i2f>:
 80a4264:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4268:	bf48      	it	mi
 80a426a:	4240      	negmi	r0, r0
 80a426c:	ea5f 0c00 	movs.w	ip, r0
 80a4270:	bf08      	it	eq
 80a4272:	4770      	bxeq	lr
 80a4274:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4278:	4601      	mov	r1, r0
 80a427a:	f04f 0000 	mov.w	r0, #0
 80a427e:	e01c      	b.n	80a42ba <__aeabi_l2f+0x2a>

080a4280 <__aeabi_ul2f>:
 80a4280:	ea50 0201 	orrs.w	r2, r0, r1
 80a4284:	bf08      	it	eq
 80a4286:	4770      	bxeq	lr
 80a4288:	f04f 0300 	mov.w	r3, #0
 80a428c:	e00a      	b.n	80a42a4 <__aeabi_l2f+0x14>
 80a428e:	bf00      	nop

080a4290 <__aeabi_l2f>:
 80a4290:	ea50 0201 	orrs.w	r2, r0, r1
 80a4294:	bf08      	it	eq
 80a4296:	4770      	bxeq	lr
 80a4298:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a429c:	d502      	bpl.n	80a42a4 <__aeabi_l2f+0x14>
 80a429e:	4240      	negs	r0, r0
 80a42a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a42a4:	ea5f 0c01 	movs.w	ip, r1
 80a42a8:	bf02      	ittt	eq
 80a42aa:	4684      	moveq	ip, r0
 80a42ac:	4601      	moveq	r1, r0
 80a42ae:	2000      	moveq	r0, #0
 80a42b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a42b4:	bf08      	it	eq
 80a42b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a42ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a42be:	fabc f28c 	clz	r2, ip
 80a42c2:	3a08      	subs	r2, #8
 80a42c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a42c8:	db10      	blt.n	80a42ec <__aeabi_l2f+0x5c>
 80a42ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80a42ce:	4463      	add	r3, ip
 80a42d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80a42d4:	f1c2 0220 	rsb	r2, r2, #32
 80a42d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a42dc:	fa20 f202 	lsr.w	r2, r0, r2
 80a42e0:	eb43 0002 	adc.w	r0, r3, r2
 80a42e4:	bf08      	it	eq
 80a42e6:	f020 0001 	biceq.w	r0, r0, #1
 80a42ea:	4770      	bx	lr
 80a42ec:	f102 0220 	add.w	r2, r2, #32
 80a42f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80a42f4:	f1c2 0220 	rsb	r2, r2, #32
 80a42f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a42fc:	fa21 f202 	lsr.w	r2, r1, r2
 80a4300:	eb43 0002 	adc.w	r0, r3, r2
 80a4304:	bf08      	it	eq
 80a4306:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a430a:	4770      	bx	lr

080a430c <__aeabi_fmul>:
 80a430c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4310:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4314:	bf1e      	ittt	ne
 80a4316:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a431a:	ea92 0f0c 	teqne	r2, ip
 80a431e:	ea93 0f0c 	teqne	r3, ip
 80a4322:	d06f      	beq.n	80a4404 <__aeabi_fmul+0xf8>
 80a4324:	441a      	add	r2, r3
 80a4326:	ea80 0c01 	eor.w	ip, r0, r1
 80a432a:	0240      	lsls	r0, r0, #9
 80a432c:	bf18      	it	ne
 80a432e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a4332:	d01e      	beq.n	80a4372 <__aeabi_fmul+0x66>
 80a4334:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4338:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a433c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4340:	fba0 3101 	umull	r3, r1, r0, r1
 80a4344:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4348:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a434c:	bf3e      	ittt	cc
 80a434e:	0049      	lslcc	r1, r1, #1
 80a4350:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a4354:	005b      	lslcc	r3, r3, #1
 80a4356:	ea40 0001 	orr.w	r0, r0, r1
 80a435a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a435e:	2afd      	cmp	r2, #253	; 0xfd
 80a4360:	d81d      	bhi.n	80a439e <__aeabi_fmul+0x92>
 80a4362:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a4366:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a436a:	bf08      	it	eq
 80a436c:	f020 0001 	biceq.w	r0, r0, #1
 80a4370:	4770      	bx	lr
 80a4372:	f090 0f00 	teq	r0, #0
 80a4376:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a437a:	bf08      	it	eq
 80a437c:	0249      	lsleq	r1, r1, #9
 80a437e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4382:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a4386:	3a7f      	subs	r2, #127	; 0x7f
 80a4388:	bfc2      	ittt	gt
 80a438a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a438e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4392:	4770      	bxgt	lr
 80a4394:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4398:	f04f 0300 	mov.w	r3, #0
 80a439c:	3a01      	subs	r2, #1
 80a439e:	dc5d      	bgt.n	80a445c <__aeabi_fmul+0x150>
 80a43a0:	f112 0f19 	cmn.w	r2, #25
 80a43a4:	bfdc      	itt	le
 80a43a6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a43aa:	4770      	bxle	lr
 80a43ac:	f1c2 0200 	rsb	r2, r2, #0
 80a43b0:	0041      	lsls	r1, r0, #1
 80a43b2:	fa21 f102 	lsr.w	r1, r1, r2
 80a43b6:	f1c2 0220 	rsb	r2, r2, #32
 80a43ba:	fa00 fc02 	lsl.w	ip, r0, r2
 80a43be:	ea5f 0031 	movs.w	r0, r1, rrx
 80a43c2:	f140 0000 	adc.w	r0, r0, #0
 80a43c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a43ca:	bf08      	it	eq
 80a43cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a43d0:	4770      	bx	lr
 80a43d2:	f092 0f00 	teq	r2, #0
 80a43d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a43da:	bf02      	ittt	eq
 80a43dc:	0040      	lsleq	r0, r0, #1
 80a43de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a43e2:	3a01      	subeq	r2, #1
 80a43e4:	d0f9      	beq.n	80a43da <__aeabi_fmul+0xce>
 80a43e6:	ea40 000c 	orr.w	r0, r0, ip
 80a43ea:	f093 0f00 	teq	r3, #0
 80a43ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a43f2:	bf02      	ittt	eq
 80a43f4:	0049      	lsleq	r1, r1, #1
 80a43f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a43fa:	3b01      	subeq	r3, #1
 80a43fc:	d0f9      	beq.n	80a43f2 <__aeabi_fmul+0xe6>
 80a43fe:	ea41 010c 	orr.w	r1, r1, ip
 80a4402:	e78f      	b.n	80a4324 <__aeabi_fmul+0x18>
 80a4404:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4408:	ea92 0f0c 	teq	r2, ip
 80a440c:	bf18      	it	ne
 80a440e:	ea93 0f0c 	teqne	r3, ip
 80a4412:	d00a      	beq.n	80a442a <__aeabi_fmul+0x11e>
 80a4414:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4418:	bf18      	it	ne
 80a441a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a441e:	d1d8      	bne.n	80a43d2 <__aeabi_fmul+0xc6>
 80a4420:	ea80 0001 	eor.w	r0, r0, r1
 80a4424:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4428:	4770      	bx	lr
 80a442a:	f090 0f00 	teq	r0, #0
 80a442e:	bf17      	itett	ne
 80a4430:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4434:	4608      	moveq	r0, r1
 80a4436:	f091 0f00 	teqne	r1, #0
 80a443a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a443e:	d014      	beq.n	80a446a <__aeabi_fmul+0x15e>
 80a4440:	ea92 0f0c 	teq	r2, ip
 80a4444:	d101      	bne.n	80a444a <__aeabi_fmul+0x13e>
 80a4446:	0242      	lsls	r2, r0, #9
 80a4448:	d10f      	bne.n	80a446a <__aeabi_fmul+0x15e>
 80a444a:	ea93 0f0c 	teq	r3, ip
 80a444e:	d103      	bne.n	80a4458 <__aeabi_fmul+0x14c>
 80a4450:	024b      	lsls	r3, r1, #9
 80a4452:	bf18      	it	ne
 80a4454:	4608      	movne	r0, r1
 80a4456:	d108      	bne.n	80a446a <__aeabi_fmul+0x15e>
 80a4458:	ea80 0001 	eor.w	r0, r0, r1
 80a445c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4460:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4464:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4468:	4770      	bx	lr
 80a446a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a446e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4472:	4770      	bx	lr

080a4474 <__aeabi_fdiv>:
 80a4474:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4478:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a447c:	bf1e      	ittt	ne
 80a447e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4482:	ea92 0f0c 	teqne	r2, ip
 80a4486:	ea93 0f0c 	teqne	r3, ip
 80a448a:	d069      	beq.n	80a4560 <__aeabi_fdiv+0xec>
 80a448c:	eba2 0203 	sub.w	r2, r2, r3
 80a4490:	ea80 0c01 	eor.w	ip, r0, r1
 80a4494:	0249      	lsls	r1, r1, #9
 80a4496:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a449a:	d037      	beq.n	80a450c <__aeabi_fdiv+0x98>
 80a449c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a44a0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a44a4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a44a8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a44ac:	428b      	cmp	r3, r1
 80a44ae:	bf38      	it	cc
 80a44b0:	005b      	lslcc	r3, r3, #1
 80a44b2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a44b6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a44ba:	428b      	cmp	r3, r1
 80a44bc:	bf24      	itt	cs
 80a44be:	1a5b      	subcs	r3, r3, r1
 80a44c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80a44c4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a44c8:	bf24      	itt	cs
 80a44ca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a44ce:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a44d2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a44d6:	bf24      	itt	cs
 80a44d8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a44dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a44e0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a44e4:	bf24      	itt	cs
 80a44e6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a44ea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a44ee:	011b      	lsls	r3, r3, #4
 80a44f0:	bf18      	it	ne
 80a44f2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a44f6:	d1e0      	bne.n	80a44ba <__aeabi_fdiv+0x46>
 80a44f8:	2afd      	cmp	r2, #253	; 0xfd
 80a44fa:	f63f af50 	bhi.w	80a439e <__aeabi_fmul+0x92>
 80a44fe:	428b      	cmp	r3, r1
 80a4500:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4504:	bf08      	it	eq
 80a4506:	f020 0001 	biceq.w	r0, r0, #1
 80a450a:	4770      	bx	lr
 80a450c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4510:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4514:	327f      	adds	r2, #127	; 0x7f
 80a4516:	bfc2      	ittt	gt
 80a4518:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a451c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4520:	4770      	bxgt	lr
 80a4522:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4526:	f04f 0300 	mov.w	r3, #0
 80a452a:	3a01      	subs	r2, #1
 80a452c:	e737      	b.n	80a439e <__aeabi_fmul+0x92>
 80a452e:	f092 0f00 	teq	r2, #0
 80a4532:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4536:	bf02      	ittt	eq
 80a4538:	0040      	lsleq	r0, r0, #1
 80a453a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a453e:	3a01      	subeq	r2, #1
 80a4540:	d0f9      	beq.n	80a4536 <__aeabi_fdiv+0xc2>
 80a4542:	ea40 000c 	orr.w	r0, r0, ip
 80a4546:	f093 0f00 	teq	r3, #0
 80a454a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a454e:	bf02      	ittt	eq
 80a4550:	0049      	lsleq	r1, r1, #1
 80a4552:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4556:	3b01      	subeq	r3, #1
 80a4558:	d0f9      	beq.n	80a454e <__aeabi_fdiv+0xda>
 80a455a:	ea41 010c 	orr.w	r1, r1, ip
 80a455e:	e795      	b.n	80a448c <__aeabi_fdiv+0x18>
 80a4560:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4564:	ea92 0f0c 	teq	r2, ip
 80a4568:	d108      	bne.n	80a457c <__aeabi_fdiv+0x108>
 80a456a:	0242      	lsls	r2, r0, #9
 80a456c:	f47f af7d 	bne.w	80a446a <__aeabi_fmul+0x15e>
 80a4570:	ea93 0f0c 	teq	r3, ip
 80a4574:	f47f af70 	bne.w	80a4458 <__aeabi_fmul+0x14c>
 80a4578:	4608      	mov	r0, r1
 80a457a:	e776      	b.n	80a446a <__aeabi_fmul+0x15e>
 80a457c:	ea93 0f0c 	teq	r3, ip
 80a4580:	d104      	bne.n	80a458c <__aeabi_fdiv+0x118>
 80a4582:	024b      	lsls	r3, r1, #9
 80a4584:	f43f af4c 	beq.w	80a4420 <__aeabi_fmul+0x114>
 80a4588:	4608      	mov	r0, r1
 80a458a:	e76e      	b.n	80a446a <__aeabi_fmul+0x15e>
 80a458c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4590:	bf18      	it	ne
 80a4592:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4596:	d1ca      	bne.n	80a452e <__aeabi_fdiv+0xba>
 80a4598:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a459c:	f47f af5c 	bne.w	80a4458 <__aeabi_fmul+0x14c>
 80a45a0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a45a4:	f47f af3c 	bne.w	80a4420 <__aeabi_fmul+0x114>
 80a45a8:	e75f      	b.n	80a446a <__aeabi_fmul+0x15e>
 80a45aa:	bf00      	nop

080a45ac <__aeabi_fcmpun>:
 80a45ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a45b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a45b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a45b8:	d102      	bne.n	80a45c0 <__aeabi_fcmpun+0x14>
 80a45ba:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a45be:	d108      	bne.n	80a45d2 <__aeabi_fcmpun+0x26>
 80a45c0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a45c4:	d102      	bne.n	80a45cc <__aeabi_fcmpun+0x20>
 80a45c6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a45ca:	d102      	bne.n	80a45d2 <__aeabi_fcmpun+0x26>
 80a45cc:	f04f 0000 	mov.w	r0, #0
 80a45d0:	4770      	bx	lr
 80a45d2:	f04f 0001 	mov.w	r0, #1
 80a45d6:	4770      	bx	lr

080a45d8 <atol>:
 80a45d8:	220a      	movs	r2, #10
 80a45da:	2100      	movs	r1, #0
 80a45dc:	f000 b91c 	b.w	80a4818 <strtol>

080a45e0 <__cxa_atexit>:
 80a45e0:	b510      	push	{r4, lr}
 80a45e2:	4c05      	ldr	r4, [pc, #20]	; (80a45f8 <__cxa_atexit+0x18>)
 80a45e4:	4613      	mov	r3, r2
 80a45e6:	b12c      	cbz	r4, 80a45f4 <__cxa_atexit+0x14>
 80a45e8:	460a      	mov	r2, r1
 80a45ea:	4601      	mov	r1, r0
 80a45ec:	2002      	movs	r0, #2
 80a45ee:	f3af 8000 	nop.w
 80a45f2:	bd10      	pop	{r4, pc}
 80a45f4:	4620      	mov	r0, r4
 80a45f6:	bd10      	pop	{r4, pc}
 80a45f8:	00000000 	.word	0x00000000

080a45fc <__errno>:
 80a45fc:	4b01      	ldr	r3, [pc, #4]	; (80a4604 <__errno+0x8>)
 80a45fe:	6818      	ldr	r0, [r3, #0]
 80a4600:	4770      	bx	lr
 80a4602:	bf00      	nop
 80a4604:	200003a0 	.word	0x200003a0

080a4608 <memcpy>:
 80a4608:	b510      	push	{r4, lr}
 80a460a:	1e43      	subs	r3, r0, #1
 80a460c:	440a      	add	r2, r1
 80a460e:	4291      	cmp	r1, r2
 80a4610:	d004      	beq.n	80a461c <memcpy+0x14>
 80a4612:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4616:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a461a:	e7f8      	b.n	80a460e <memcpy+0x6>
 80a461c:	bd10      	pop	{r4, pc}

080a461e <memset>:
 80a461e:	4603      	mov	r3, r0
 80a4620:	4402      	add	r2, r0
 80a4622:	4293      	cmp	r3, r2
 80a4624:	d002      	beq.n	80a462c <memset+0xe>
 80a4626:	f803 1b01 	strb.w	r1, [r3], #1
 80a462a:	e7fa      	b.n	80a4622 <memset+0x4>
 80a462c:	4770      	bx	lr
	...

080a4630 <srand>:
 80a4630:	b538      	push	{r3, r4, r5, lr}
 80a4632:	4b12      	ldr	r3, [pc, #72]	; (80a467c <srand+0x4c>)
 80a4634:	4605      	mov	r5, r0
 80a4636:	681c      	ldr	r4, [r3, #0]
 80a4638:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a463a:	b9d3      	cbnz	r3, 80a4672 <srand+0x42>
 80a463c:	2018      	movs	r0, #24
 80a463e:	f7fd fab1 	bl	80a1ba4 <malloc>
 80a4642:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4646:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4648:	8003      	strh	r3, [r0, #0]
 80a464a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a464e:	8043      	strh	r3, [r0, #2]
 80a4650:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4654:	8083      	strh	r3, [r0, #4]
 80a4656:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a465a:	80c3      	strh	r3, [r0, #6]
 80a465c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4660:	8103      	strh	r3, [r0, #8]
 80a4662:	2305      	movs	r3, #5
 80a4664:	8143      	strh	r3, [r0, #10]
 80a4666:	230b      	movs	r3, #11
 80a4668:	8183      	strh	r3, [r0, #12]
 80a466a:	2201      	movs	r2, #1
 80a466c:	2300      	movs	r3, #0
 80a466e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4674:	2200      	movs	r2, #0
 80a4676:	611d      	str	r5, [r3, #16]
 80a4678:	615a      	str	r2, [r3, #20]
 80a467a:	bd38      	pop	{r3, r4, r5, pc}
 80a467c:	200003a0 	.word	0x200003a0

080a4680 <strcpy>:
 80a4680:	4603      	mov	r3, r0
 80a4682:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4686:	f803 2b01 	strb.w	r2, [r3], #1
 80a468a:	2a00      	cmp	r2, #0
 80a468c:	d1f9      	bne.n	80a4682 <strcpy+0x2>
 80a468e:	4770      	bx	lr

080a4690 <strdup>:
 80a4690:	4b02      	ldr	r3, [pc, #8]	; (80a469c <strdup+0xc>)
 80a4692:	4601      	mov	r1, r0
 80a4694:	6818      	ldr	r0, [r3, #0]
 80a4696:	f000 b803 	b.w	80a46a0 <_strdup_r>
 80a469a:	bf00      	nop
 80a469c:	200003a0 	.word	0x200003a0

080a46a0 <_strdup_r>:
 80a46a0:	b570      	push	{r4, r5, r6, lr}
 80a46a2:	4606      	mov	r6, r0
 80a46a4:	4608      	mov	r0, r1
 80a46a6:	460c      	mov	r4, r1
 80a46a8:	f000 f80d 	bl	80a46c6 <strlen>
 80a46ac:	1c45      	adds	r5, r0, #1
 80a46ae:	4629      	mov	r1, r5
 80a46b0:	4630      	mov	r0, r6
 80a46b2:	f7fd fa9f 	bl	80a1bf4 <_malloc_r>
 80a46b6:	4606      	mov	r6, r0
 80a46b8:	b118      	cbz	r0, 80a46c2 <_strdup_r+0x22>
 80a46ba:	462a      	mov	r2, r5
 80a46bc:	4621      	mov	r1, r4
 80a46be:	f7ff ffa3 	bl	80a4608 <memcpy>
 80a46c2:	4630      	mov	r0, r6
 80a46c4:	bd70      	pop	{r4, r5, r6, pc}

080a46c6 <strlen>:
 80a46c6:	4603      	mov	r3, r0
 80a46c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a46cc:	2a00      	cmp	r2, #0
 80a46ce:	d1fb      	bne.n	80a46c8 <strlen+0x2>
 80a46d0:	1a18      	subs	r0, r3, r0
 80a46d2:	3801      	subs	r0, #1
 80a46d4:	4770      	bx	lr

080a46d6 <strstr>:
 80a46d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a46d8:	7803      	ldrb	r3, [r0, #0]
 80a46da:	b963      	cbnz	r3, 80a46f6 <strstr+0x20>
 80a46dc:	780b      	ldrb	r3, [r1, #0]
 80a46de:	2b00      	cmp	r3, #0
 80a46e0:	bf18      	it	ne
 80a46e2:	2000      	movne	r0, #0
 80a46e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a46e6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a46ea:	b162      	cbz	r2, 80a4706 <strstr+0x30>
 80a46ec:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a46f0:	4630      	mov	r0, r6
 80a46f2:	4297      	cmp	r7, r2
 80a46f4:	d0f7      	beq.n	80a46e6 <strstr+0x10>
 80a46f6:	4603      	mov	r3, r0
 80a46f8:	1c46      	adds	r6, r0, #1
 80a46fa:	7800      	ldrb	r0, [r0, #0]
 80a46fc:	b110      	cbz	r0, 80a4704 <strstr+0x2e>
 80a46fe:	1e4d      	subs	r5, r1, #1
 80a4700:	1e5c      	subs	r4, r3, #1
 80a4702:	e7f0      	b.n	80a46e6 <strstr+0x10>
 80a4704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4706:	4618      	mov	r0, r3
 80a4708:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a470c <_strtol_r>:
 80a470c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4710:	460f      	mov	r7, r1
 80a4712:	4680      	mov	r8, r0
 80a4714:	483f      	ldr	r0, [pc, #252]	; (80a4814 <_strtol_r+0x108>)
 80a4716:	f8d0 9000 	ldr.w	r9, [r0]
 80a471a:	463d      	mov	r5, r7
 80a471c:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4720:	eb09 0004 	add.w	r0, r9, r4
 80a4724:	7840      	ldrb	r0, [r0, #1]
 80a4726:	f000 0008 	and.w	r0, r0, #8
 80a472a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a472e:	b108      	cbz	r0, 80a4734 <_strtol_r+0x28>
 80a4730:	462f      	mov	r7, r5
 80a4732:	e7f2      	b.n	80a471a <_strtol_r+0xe>
 80a4734:	2c2d      	cmp	r4, #45	; 0x2d
 80a4736:	d103      	bne.n	80a4740 <_strtol_r+0x34>
 80a4738:	1cbd      	adds	r5, r7, #2
 80a473a:	787c      	ldrb	r4, [r7, #1]
 80a473c:	2601      	movs	r6, #1
 80a473e:	e003      	b.n	80a4748 <_strtol_r+0x3c>
 80a4740:	2c2b      	cmp	r4, #43	; 0x2b
 80a4742:	bf04      	itt	eq
 80a4744:	787c      	ldrbeq	r4, [r7, #1]
 80a4746:	1cbd      	addeq	r5, r7, #2
 80a4748:	b113      	cbz	r3, 80a4750 <_strtol_r+0x44>
 80a474a:	2b10      	cmp	r3, #16
 80a474c:	d10a      	bne.n	80a4764 <_strtol_r+0x58>
 80a474e:	e05b      	b.n	80a4808 <_strtol_r+0xfc>
 80a4750:	2c30      	cmp	r4, #48	; 0x30
 80a4752:	d157      	bne.n	80a4804 <_strtol_r+0xf8>
 80a4754:	7828      	ldrb	r0, [r5, #0]
 80a4756:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a475a:	2858      	cmp	r0, #88	; 0x58
 80a475c:	d14d      	bne.n	80a47fa <_strtol_r+0xee>
 80a475e:	786c      	ldrb	r4, [r5, #1]
 80a4760:	2310      	movs	r3, #16
 80a4762:	3502      	adds	r5, #2
 80a4764:	2e00      	cmp	r6, #0
 80a4766:	bf14      	ite	ne
 80a4768:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a476c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a4770:	fbbc faf3 	udiv	sl, ip, r3
 80a4774:	2700      	movs	r7, #0
 80a4776:	4638      	mov	r0, r7
 80a4778:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a477c:	eb09 0e04 	add.w	lr, r9, r4
 80a4780:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a4784:	f01e 0f04 	tst.w	lr, #4
 80a4788:	d001      	beq.n	80a478e <_strtol_r+0x82>
 80a478a:	3c30      	subs	r4, #48	; 0x30
 80a478c:	e00b      	b.n	80a47a6 <_strtol_r+0x9a>
 80a478e:	f01e 0e03 	ands.w	lr, lr, #3
 80a4792:	d01b      	beq.n	80a47cc <_strtol_r+0xc0>
 80a4794:	f1be 0f01 	cmp.w	lr, #1
 80a4798:	bf0c      	ite	eq
 80a479a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a479e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a47a2:	ebce 0404 	rsb	r4, lr, r4
 80a47a6:	42a3      	cmp	r3, r4
 80a47a8:	dd10      	ble.n	80a47cc <_strtol_r+0xc0>
 80a47aa:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a47ae:	d00a      	beq.n	80a47c6 <_strtol_r+0xba>
 80a47b0:	4550      	cmp	r0, sl
 80a47b2:	d806      	bhi.n	80a47c2 <_strtol_r+0xb6>
 80a47b4:	d101      	bne.n	80a47ba <_strtol_r+0xae>
 80a47b6:	4564      	cmp	r4, ip
 80a47b8:	dc03      	bgt.n	80a47c2 <_strtol_r+0xb6>
 80a47ba:	fb03 4000 	mla	r0, r3, r0, r4
 80a47be:	2701      	movs	r7, #1
 80a47c0:	e001      	b.n	80a47c6 <_strtol_r+0xba>
 80a47c2:	f04f 37ff 	mov.w	r7, #4294967295
 80a47c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a47ca:	e7d7      	b.n	80a477c <_strtol_r+0x70>
 80a47cc:	1c7b      	adds	r3, r7, #1
 80a47ce:	d10c      	bne.n	80a47ea <_strtol_r+0xde>
 80a47d0:	2e00      	cmp	r6, #0
 80a47d2:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a47d6:	bf14      	ite	ne
 80a47d8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a47dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a47e0:	f8c8 3000 	str.w	r3, [r8]
 80a47e4:	b92a      	cbnz	r2, 80a47f2 <_strtol_r+0xe6>
 80a47e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a47ea:	b106      	cbz	r6, 80a47ee <_strtol_r+0xe2>
 80a47ec:	4240      	negs	r0, r0
 80a47ee:	b172      	cbz	r2, 80a480e <_strtol_r+0x102>
 80a47f0:	b107      	cbz	r7, 80a47f4 <_strtol_r+0xe8>
 80a47f2:	1e69      	subs	r1, r5, #1
 80a47f4:	6011      	str	r1, [r2, #0]
 80a47f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a47fa:	2430      	movs	r4, #48	; 0x30
 80a47fc:	2b00      	cmp	r3, #0
 80a47fe:	d1b1      	bne.n	80a4764 <_strtol_r+0x58>
 80a4800:	2308      	movs	r3, #8
 80a4802:	e7af      	b.n	80a4764 <_strtol_r+0x58>
 80a4804:	230a      	movs	r3, #10
 80a4806:	e7ad      	b.n	80a4764 <_strtol_r+0x58>
 80a4808:	2c30      	cmp	r4, #48	; 0x30
 80a480a:	d0a3      	beq.n	80a4754 <_strtol_r+0x48>
 80a480c:	e7aa      	b.n	80a4764 <_strtol_r+0x58>
 80a480e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4812:	bf00      	nop
 80a4814:	2000033c 	.word	0x2000033c

080a4818 <strtol>:
 80a4818:	4613      	mov	r3, r2
 80a481a:	460a      	mov	r2, r1
 80a481c:	4601      	mov	r1, r0
 80a481e:	4802      	ldr	r0, [pc, #8]	; (80a4828 <strtol+0x10>)
 80a4820:	6800      	ldr	r0, [r0, #0]
 80a4822:	f7ff bf73 	b.w	80a470c <_strtol_r>
 80a4826:	bf00      	nop
 80a4828:	200003a0 	.word	0x200003a0

080a482c <tolower>:
 80a482c:	4b04      	ldr	r3, [pc, #16]	; (80a4840 <tolower+0x14>)
 80a482e:	681b      	ldr	r3, [r3, #0]
 80a4830:	4403      	add	r3, r0
 80a4832:	785b      	ldrb	r3, [r3, #1]
 80a4834:	f003 0303 	and.w	r3, r3, #3
 80a4838:	2b01      	cmp	r3, #1
 80a483a:	bf08      	it	eq
 80a483c:	3020      	addeq	r0, #32
 80a483e:	4770      	bx	lr
 80a4840:	2000033c 	.word	0x2000033c

080a4844 <dynalib_user>:
 80a4844:	080a001d 080a005d 080a0089 080a008d     ....]...........
 80a4854:	00000000 77707061 49007464 6c61766e     ....appwdt.Inval
 80a4864:	72206469 69646165 6f00676e 666f006e     id reading.on.of
 80a4874:	65640066 69746361 65746176 676f7400     f.deactivate.tog
 80a4884:	00656c67 70696c66 6c657200 6f007961     gle.flip.relay.o
 80a4894:	75707475 61620074 61006b6e 25006c6c     utput.bank.all.%
 80a48a4:	2666322e 66322e25 322e2526 2e252666     .2f&%.2f&%.2f&%.
 80a48b4:	25266632 2666322e 66322e25 322e2526     2f&%.2f&%.2f&%.2
 80a48c4:	2e252666 25266632 2666322e 66322e25     f&%.2f&%.2f&%.2f
 80a48d4:	322e2526 2e252666 64006632 4d455473     &%.2f&%.2f.dsTEM
 80a48e4:	64005350 73705f73 65520069 4379616c     PS.ds_psi.RelayC
 80a48f4:	72746e6f 54006c6f 00315658 32565854     ontrol.TXV1.TXV2
 80a4904:	74655300 706d6144 4d007265 34335043     .SetDamper.MCP34
 80a4914:	69003832 65646332 65636976 77615200     28.i2cdevice.Raw
 80a4924:	6364615f 005d305b                       _adc[0].

080a492c <_ZL5psiFS>:
 80a492c:	000001f4 000000c8 000001f4 00000000     ................
 80a493c:	000000c8 00000000 000001f4 000000c8     ................
 80a494c:	000000ff 000000ff 00202d20 75706e49     ........ - .Inpu
 80a495c:	74532074 73757461 74655300 676e6974     t Status.Setting
 80a496c:	4d575020 726f6620 44454c20 74200020      PWM for LED . t
 80a497c:	2000206f 00203e2d 65747441 6974706d     o . -> .Attempti
 80a498c:	7420676e 6573206f 72662074 00207165     ng to set freq .
 80a499c:	69747345 6574616d 72702064 63732d65     Estimated pre-sc
 80a49ac:	3a656c61 69460020 206c616e 2d657270     ale: .Final pre-
 80a49bc:	6c616373 00203a65                       scale: .

080a49c4 <_ZTV8SPIClass>:
	...
 80a49cc:	080a1c05 080a1c07 006e616e 0066766f     ........nan.ovf.
 80a49dc:	6e69002e 6e6c0066 006e6600 65646f63     ..inf.ln.fn.code
 80a49ec:	74656400 006c6961 25000a0d 75303130     .detail....%010u
 80a49fc:	205d0020 00642500 2800202c 00203a29      .] .%d., .(): .
 80a4a0c:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
 80a4a1c:	6c696174 203d2073 75616200 65530064     tails = .baud.Se
 80a4a2c:	6c616972 42535500 69726553 00316c61     rial.USBSerial1.
 80a4a3c:	65707974 72617000 63006d61 6900646d     type.param.cmd.i
 80a4a4c:	6e680064 74730064 66006d72 00746c69     d.hnd.strm.filt.
 80a4a5c:	006c766c 48646461 6c646e61 72007265     lvl.addHandler.r
 80a4a6c:	766f6d65 6e614865 72656c64 756e6500     emoveHandler.enu
 80a4a7c:	6e61486d 72656c64 534a0073 74534e4f     mHandlers.JSONSt
 80a4a8c:	6d616572 48676f4c 6c646e61 61007265     reamLogHandler.a
 80a4a9c:	6e007070 00656e6f 63617274 6e690065     pp.none.trace.in
 80a4aac:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
 80a4abc:	0063696e 2b25005a 3a643330 75323025     nic.Z.%+03d:%02u
 80a4acc:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
 80a4adc:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

080a4aec <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a4af4:	080a2331 080a2337 080a234d 080a2343     1#..7#..M#..C#..
 80a4b04:	080a2333                                3#..

080a4b08 <_ZTV9IPAddress>:
	...
 80a4b10:	080a289f 080a2891 080a2893              .(...(...(..

080a4b1c <_ZTV9USBSerial>:
	...
 80a4b24:	080a2909 080a294d 080a2927 080a1ead     .)..M)..')......
 80a4b34:	080a2921 080a290b 080a2913 080a2947     !)...)...)..G)..
 80a4b44:	080a291b 080a2905                       .)...)..

080a4b4c <_ZTV11USARTSerial>:
	...
 80a4b54:	080a2a79 080a2a9d 080a2aa9 080a1ead     y*...*...*......
 80a4b64:	080a2a85 080a2a91 080a2a8b 080a2a97     .*...*...*...*..
 80a4b74:	080a2a7b 080a2a7f                       {*...*..

080a4b7c <_ZTV7TwoWire>:
	...
 80a4b84:	080a2b73 080a2bbd 080a2b95 080a2b75     s+...+...+..u+..
 80a4b94:	080a2b9d 080a2ba5 080a2bad 080a2bb5     .+...+...+...+..

080a4ba4 <_ZTVN5spark9WiFiClassE>:
	...
 80a4bac:	080a2c41                                A,..

080a4bb0 <_ZSt7nothrow>:
 80a4bb0:	00000000 00676f6c 00000000              ....log.....

080a4bbc <_ctype_>:
 80a4bbc:	20202000 20202020 28282020 20282828     .         ((((( 
 80a4bcc:	20202020 20202020 20202020 20202020                     
 80a4bdc:	10108820 10101010 10101010 10101010      ...............
 80a4bec:	04040410 04040404 10040404 10101010     ................
 80a4bfc:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4c0c:	01010101 01010101 01010101 10101010     ................
 80a4c1c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4c2c:	02020202 02020202 02020202 10101010     ................
 80a4c3c:	00000020 00000000 00000000 00000000      ...............
	...

080a4cc0 <__sf_fake_stdin>:
	...

080a4ce0 <__sf_fake_stdout>:
	...

080a4d00 <__sf_fake_stderr>:
	...
 80a4d20:	00000043                                         C.

080a4d22 <link_const_variable_data_end>:
	...

080a4d24 <link_constructors_location>:
 80a4d24:	080a08d1 	.word	0x080a08d1
 80a4d28:	080a0cad 	.word	0x080a0cad
 80a4d2c:	080a0cb1 	.word	0x080a0cb1
 80a4d30:	080a1211 	.word	0x080a1211
 80a4d34:	080a140d 	.word	0x080a140d
 80a4d38:	080a1565 	.word	0x080a1565
 80a4d3c:	080a1815 	.word	0x080a1815
 80a4d40:	080a1c55 	.word	0x080a1c55
 80a4d44:	080a2185 	.word	0x080a2185
 80a4d48:	080a2195 	.word	0x080a2195
 80a4d4c:	080a21dd 	.word	0x080a21dd
 80a4d50:	080a2c4d 	.word	0x080a2c4d
 80a4d54:	080a2cd9 	.word	0x080a2cd9
 80a4d58:	080a2da5 	.word	0x080a2da5
 80a4d5c:	080a2e55 	.word	0x080a2e55
 80a4d60:	080a2ed9 	.word	0x080a2ed9
 80a4d64:	080a2f9d 	.word	0x080a2f9d
 80a4d68:	080a3061 	.word	0x080a3061

080a4d6c <link_constructors_end>:
 80a4d6c:	00000000 	.word	0x00000000
