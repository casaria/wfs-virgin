
c:/Users/casaria3/Documents/workbench/wfs-virgin/wfs-virgin/target/wfs-virgin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000054a0  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000064  40024000  080a54c0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  20000000  080a5524  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000006a0  200000a4  200000a4  000400a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a55c8  080a55c8  000355c8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a55f0  080a55f0  000355f0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f240d  00000000  00000000  000355f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015a9b  00000000  00000000  00127a01  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001873d  00000000  00000000  0013d49c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025a0  00000000  00000000  00155bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ab0  00000000  00000000  00158179  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002e32d  00000000  00000000  0015bc29  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00033295  00000000  00000000  00189f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ac007  00000000  00000000  001bd1eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cce4  00000000  00000000  002691f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 fe65 	bl	80a4d00 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 fe6a 	bl	80a4d16 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a5524 	.word	0x080a5524
 80a0050:	200000a4 	.word	0x200000a4
 80a0054:	200000a4 	.word	0x200000a4
 80a0058:	20000744 	.word	0x20000744
 80a005c:	20000744 	.word	0x20000744

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f002 fafd 	bl	80a2660 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a546c 	.word	0x080a546c
 80a0088:	080a54bc 	.word	0x080a54bc

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 bce8 	b.w	80a0a60 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fbb7 	bl	80a0804 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f002 baa3 	b.w	80a25e4 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bf55 	b.w	80a1f4c <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bf5b 	b.w	80a1f5c <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b6:	6803      	ldr	r3, [r0, #0]
 80a00b8:	4718      	bx	r3

080a00ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00ba:	2a01      	cmp	r2, #1
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00be:	2a02      	cmp	r2, #2
 80a00c0:	d002      	beq.n	80a00c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00c2:	e004      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c4:	6001      	str	r1, [r0, #0]
	      break;
 80a00c6:	e002      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c8:	680b      	ldr	r3, [r1, #0]
 80a00ca:	b100      	cbz	r0, 80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00cc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ce:	2000      	movs	r0, #0
 80a00d0:	4770      	bx	lr
	...

080a00d4 <_Z12cmdSetDamper6String>:
float psi[8];
const int psiFS[8] {5000,300,300,0,500,0,0,0};   

//HP2,   LP2

int cmdSetDamper(String command){
 80a00d4:	b530      	push	{r4, r5, lr}
 80a00d6:	b089      	sub	sp, #36	; 0x24
 80a00d8:	4605      	mov	r5, r0
           // Wire.reset();
 String valueString; 
 80a00da:	4915      	ldr	r1, [pc, #84]	; (80a0130 <_Z12cmdSetDamper6String+0x5c>)
 80a00dc:	4668      	mov	r0, sp
 80a00de:	f001 ffe8 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 for (int i = 0; i < 4; i++){
 80a00e2:	2400      	movs	r4, #0
 80a00e4:	00a2      	lsls	r2, r4, #2
     valueString = command.substring(i*4, (i*4+4));
 80a00e6:	1d13      	adds	r3, r2, #4
 80a00e8:	4629      	mov	r1, r5
 80a00ea:	a804      	add	r0, sp, #16
 80a00ec:	f002 f872 	bl	80a21d4 <_ZNK6String9substringEjj>
 80a00f0:	a904      	add	r1, sp, #16
 80a00f2:	4668      	mov	r0, sp
 80a00f4:	f002 f827 	bl	80a2146 <_ZN6StringaSEOS_>
 80a00f8:	a804      	add	r0, sp, #16
 80a00fa:	f001 ff93 	bl	80a2024 <_ZN6StringD1Ev>
     cmdPosArray[i] = valueString.toInt();
 80a00fe:	4668      	mov	r0, sp
 80a0100:	f002 f897 	bl	80a2232 <_ZNK6String5toIntEv>
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
 80a0104:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000

int cmdSetDamper(String command){
           // Wire.reset();
 String valueString; 
 for (int i = 0; i < 4; i++){
     valueString = command.substring(i*4, (i*4+4));
 80a0108:	f104 0401 	add.w	r4, r4, #1
     cmdPosArray[i] = valueString.toInt();
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
 80a010c:	db07      	blt.n	80a011e <_Z12cmdSetDamper6String+0x4a>
//HP2,   LP2

int cmdSetDamper(String command){
           // Wire.reset();
 String valueString; 
 for (int i = 0; i < 4; i++){
 80a010e:	2c04      	cmp	r4, #4
 80a0110:	d1e8      	bne.n	80a00e4 <_Z12cmdSetDamper6String+0x10>

//HP2,   LP2

int cmdSetDamper(String command){
           // Wire.reset();
 String valueString; 
 80a0112:	4668      	mov	r0, sp
 80a0114:	f001 ff86 	bl	80a2024 <_ZN6StringD1Ev>
     cmdPosArray[i] = valueString.toInt();
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
    }
  return 1;
}
 80a0118:	2001      	movs	r0, #1
 80a011a:	b009      	add	sp, #36	; 0x24
 80a011c:	bd30      	pop	{r4, r5, pc}
 String valueString; 
 for (int i = 0; i < 4; i++){
     valueString = command.substring(i*4, (i*4+4));
     cmdPosArray[i] = valueString.toInt();
     //TXV2 PWM output is 8 (skipped 3)
     if (cmdPosArray[i] < 4096) damper.setVal(i+((i<6) ? 0:3) ,cmdPosArray[i]);
 80a011e:	1e61      	subs	r1, r4, #1
 80a0120:	b282      	uxth	r2, r0
 80a0122:	2300      	movs	r3, #0
 80a0124:	b2c9      	uxtb	r1, r1
 80a0126:	4803      	ldr	r0, [pc, #12]	; (80a0134 <_Z12cmdSetDamper6String+0x60>)
 80a0128:	f001 fc0a 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
 80a012c:	e7ef      	b.n	80a010e <_Z12cmdSetDamper6String+0x3a>
 80a012e:	bf00      	nop
 80a0130:	080a5178 	.word	0x080a5178
 80a0134:	200000d0 	.word	0x200000d0

080a0138 <_Z7cmdTXV26String>:
    }
  return 1;
}


int cmdTXV2(String command){
 80a0138:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos =  command.toInt();
 80a013a:	f002 f87a 	bl	80a2232 <_ZNK6String5toIntEv>
  if (TXVpos <= 4096) {
 80a013e:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
}


int cmdTXV2(String command){
  int TXVpos;
  TXVpos =  command.toInt();
 80a0142:	4604      	mov	r4, r0
  if (TXVpos <= 4096) {
 80a0144:	dc05      	bgt.n	80a0152 <_Z7cmdTXV26String+0x1a>
    damper.setVal(4,TXVpos);
 80a0146:	b282      	uxth	r2, r0
 80a0148:	2300      	movs	r3, #0
 80a014a:	2104      	movs	r1, #4
 80a014c:	4802      	ldr	r0, [pc, #8]	; (80a0158 <_Z7cmdTXV26String+0x20>)
 80a014e:	f001 fbf7 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
  }
  return TXVpos;
            
}
 80a0152:	4620      	mov	r0, r4
 80a0154:	bd10      	pop	{r4, pc}
 80a0156:	bf00      	nop
 80a0158:	200000d0 	.word	0x200000d0

080a015c <_Z7cmdTXV16String>:

int cmdTXV1(String command){
 80a015c:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos =  command.toInt();
 80a015e:	f002 f868 	bl	80a2232 <_ZNK6String5toIntEv>
  if (TXVpos <= 4096) {
 80a0162:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
            
}

int cmdTXV1(String command){
  int TXVpos;
  TXVpos =  command.toInt();
 80a0166:	4604      	mov	r4, r0
  if (TXVpos <= 4096) {
 80a0168:	dc05      	bgt.n	80a0176 <_Z7cmdTXV16String+0x1a>
     damper.setVal(8,TXVpos);
 80a016a:	b282      	uxth	r2, r0
 80a016c:	2300      	movs	r3, #0
 80a016e:	2108      	movs	r1, #8
 80a0170:	4802      	ldr	r0, [pc, #8]	; (80a017c <_Z7cmdTXV16String+0x20>)
 80a0172:	f001 fbe5 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
  }     
  return TXVpos;
}
 80a0176:	4620      	mov	r0, r4
 80a0178:	bd10      	pop	{r4, pc}
 80a017a:	bf00      	nop
 80a017c:	200000d0 	.word	0x200000d0

080a0180 <_Z12triggerRelay6String>:


    
}

int triggerRelay(String command){
 80a0180:	b51f      	push	{r0, r1, r2, r3, r4, lr}

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
 80a0182:	4601      	mov	r1, r0
 80a0184:	4668      	mov	r0, sp
 80a0186:	f001 ffd3 	bl	80a2130 <_ZN6StringC1ERKS_>
 80a018a:	4669      	mov	r1, sp
 80a018c:	4804      	ldr	r0, [pc, #16]	; (80a01a0 <_Z12triggerRelay6String+0x20>)
 80a018e:	f001 f84f 	bl	80a1230 <_ZN16CASARIA_MCP230179relayTalkE6String>
 80a0192:	4668      	mov	r0, sp
 80a0194:	f001 ff46 	bl	80a2024 <_ZN6StringD1Ev>
      return 1;
}
 80a0198:	2001      	movs	r0, #1
 80a019a:	b005      	add	sp, #20
 80a019c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a01a0:	200000d4 	.word	0x200000d4

080a01a4 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a01a4:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80a01a6:	2301      	movs	r3, #1
 80a01a8:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80a01aa:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a01ac:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80a01ae:	b10b      	cbz	r3, 80a01b4 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80a01b0:	68c0      	ldr	r0, [r0, #12]
 80a01b2:	e006      	b.n	80a01c2 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a01b4:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80a01b6:	b128      	cbz	r0, 80a01c4 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a01b8:	6883      	ldr	r3, [r0, #8]
 80a01ba:	b90b      	cbnz	r3, 80a01c0 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80a01bc:	f003 f953 	bl	80a3466 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a01c0:	68c3      	ldr	r3, [r0, #12]
 80a01c2:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80a01c4:	2301      	movs	r3, #1
 80a01c6:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80a01c8:	2000      	movs	r0, #0
    }
 80a01ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80a01ce:	f001 bd3f 	b.w	80a1c50 <os_thread_exit>

080a01d2 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01d2:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a01d4:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a01d6:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a01d8:	b113      	cbz	r3, 80a01e0 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a01da:	2203      	movs	r2, #3
 80a01dc:	4601      	mov	r1, r0
 80a01de:	4798      	blx	r3
    }
 80a01e0:	4620      	mov	r0, r4
 80a01e2:	bd10      	pop	{r4, pc}

080a01e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 80a01e4:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a01e6:	4604      	mov	r4, r0
 80a01e8:	b170      	cbz	r0, 80a0208 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a01ea:	6805      	ldr	r5, [r0, #0]
 80a01ec:	b135      	cbz	r5, 80a01fc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a01ee:	4628      	mov	r0, r5
 80a01f0:	f7ff ffef 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a01f4:	2110      	movs	r1, #16
 80a01f6:	4628      	mov	r0, r5
 80a01f8:	f003 f924 	bl	80a3444 <_ZdlPvj>
 80a01fc:	4620      	mov	r0, r4
      }
 80a01fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a0202:	2114      	movs	r1, #20
 80a0204:	f003 b91e 	b.w	80a3444 <_ZdlPvj>
 80a0208:	bd38      	pop	{r3, r4, r5, pc}

080a020a <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
 80a020a:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a020c:	6943      	ldr	r3, [r0, #20]
 80a020e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
 80a0210:	b1bb      	cbz	r3, 80a0242 <_ZN19ApplicationWatchdogD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 80a0212:	6858      	ldr	r0, [r3, #4]
 80a0214:	f001 fcfc 	bl	80a1c10 <os_thread_is_current>
 80a0218:	b978      	cbnz	r0, 80a023a <_ZN19ApplicationWatchdogD1Ev+0x30>
 80a021a:	6963      	ldr	r3, [r4, #20]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 80a021c:	7c5a      	ldrb	r2, [r3, #17]
 80a021e:	b912      	cbnz	r2, 80a0226 <_ZN19ApplicationWatchdogD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 80a0220:	6858      	ldr	r0, [r3, #4]
 80a0222:	f001 fcfd 	bl	80a1c20 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 80a0226:	6963      	ldr	r3, [r4, #20]
 80a0228:	6858      	ldr	r0, [r3, #4]
 80a022a:	f001 fd01 	bl	80a1c30 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a022e:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0230:	2300      	movs	r3, #0
 80a0232:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a0234:	b128      	cbz	r0, 80a0242 <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__p);
 80a0236:	f7ff ffd5 	bl	80a01e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a023a:	6960      	ldr	r0, [r4, #20]
 80a023c:	b108      	cbz	r0, 80a0242 <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__ptr);
 80a023e:	f7ff ffd1 	bl	80a01e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
 80a0242:	1d20      	adds	r0, r4, #4
 80a0244:	f7ff ffc5 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
 80a0248:	4620      	mov	r0, r4
 80a024a:	bd10      	pop	{r4, pc}

080a024c <_ZN19ApplicationWatchdogC1EjPFvvEj>:
		checkin();
	}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 80a024c:	b530      	push	{r4, r5, lr}
 80a024e:	461d      	mov	r5, r3
 80a0250:	b087      	sub	sp, #28
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0252:	2300      	movs	r3, #0
 80a0254:	4604      	mov	r4, r0
 80a0256:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80a0258:	b122      	cbz	r2, 80a0264 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a025a:	4b22      	ldr	r3, [pc, #136]	; (80a02e4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x98>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a025c:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a025e:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0260:	4b21      	ldr	r3, [pc, #132]	; (80a02e8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9c>)
 80a0262:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0264:	2300      	movs	r3, #0
 80a0266:	60e3      	str	r3, [r4, #12]
 80a0268:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80a026a:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a026c:	b13b      	cbz	r3, 80a027e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a026e:	2202      	movs	r2, #2
 80a0270:	a902      	add	r1, sp, #8
 80a0272:	1d20      	adds	r0, r4, #4
 80a0274:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0276:	9b05      	ldr	r3, [sp, #20]
 80a0278:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 80a027a:	9b04      	ldr	r3, [sp, #16]
 80a027c:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80a027e:	491b      	ldr	r1, [pc, #108]	; (80a02ec <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa0>)
 80a0280:	2014      	movs	r0, #20
 80a0282:	f003 f8e1 	bl	80a3448 <_ZnwjRKSt9nothrow_t>
 80a0286:	b130      	cbz	r0, 80a0296 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80a0288:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80a028a:	7403      	strb	r3, [r0, #16]
 80a028c:	6003      	str	r3, [r0, #0]
 80a028e:	6043      	str	r3, [r0, #4]
 80a0290:	6083      	str	r3, [r0, #8]
 80a0292:	60c3      	str	r3, [r0, #12]
 80a0294:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0296:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80a0298:	b1a0      	cbz	r0, 80a02c4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 80a029a:	4b15      	ldr	r3, [pc, #84]	; (80a02f0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa4>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a029c:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 80a029e:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a02a0:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a02a2:	4914      	ldr	r1, [pc, #80]	; (80a02f4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa8>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 80a02a4:	60dc      	str	r4, [r3, #12]
 80a02a6:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a02a8:	4b13      	ldr	r3, [pc, #76]	; (80a02f8 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xac>)
 80a02aa:	e88d 0021 	stmia.w	sp, {r0, r5}
 80a02ae:	3004      	adds	r0, #4
 80a02b0:	f001 fca6 	bl	80a1c00 <os_thread_create>
 80a02b4:	b930      	cbnz	r0, 80a02c4 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 80a02b6:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 80a02b8:	7c1b      	ldrb	r3, [r3, #16]
 80a02ba:	b94b      	cbnz	r3, 80a02d0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 80a02bc:	2001      	movs	r0, #1
 80a02be:	f001 fc7f 	bl	80a1bc0 <HAL_Delay_Milliseconds>
 80a02c2:	e7f8      	b.n	80a02b6 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a02c4:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a02c6:	2300      	movs	r3, #0
 80a02c8:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a02ca:	b108      	cbz	r0, 80a02d0 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
	  get_deleter()(__p);
 80a02cc:	f7ff ff8a 	bl	80a01e4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a02d0:	f001 fc86 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a02d4:	4b09      	ldr	r3, [pc, #36]	; (80a02fc <_ZN19ApplicationWatchdogC1EjPFvvEj+0xb0>)
 80a02d6:	6018      	str	r0, [r3, #0]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a02d8:	a802      	add	r0, sp, #8
 80a02da:	f7ff ff7a 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 80a02de:	4620      	mov	r0, r4
 80a02e0:	b007      	add	sp, #28
 80a02e2:	bd30      	pop	{r4, r5, pc}
 80a02e4:	080a00b7 	.word	0x080a00b7
 80a02e8:	080a00bb 	.word	0x080a00bb
 80a02ec:	080a52f8 	.word	0x080a52f8
 80a02f0:	080a33a9 	.word	0x080a33a9
 80a02f4:	080a4f70 	.word	0x080a4f70
 80a02f8:	080a01a5 	.word	0x080a01a5
 80a02fc:	2000066c 	.word	0x2000066c

080a0300 <_Z12relayOff8574v>:
   HaltTemp = FALSE;
   relayOn8574();
   return 0;
}

void relayOff8574(){
 80a0300:	b510      	push	{r4, lr}
       Wire.begin();
 80a0302:	f003 f871 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0306:	f002 fed1 	bl	80a30ac <_ZN7TwoWire5beginEv>
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
      // Select GPIO as input
      relayMap=0xff;
 80a030a:	4c0a      	ldr	r4, [pc, #40]	; (80a0334 <_Z12relayOff8574v+0x34>)
}

void relayOff8574(){
       Wire.begin();
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
 80a030c:	f003 f86c 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0310:	2124      	movs	r1, #36	; 0x24
 80a0312:	f002 fee6 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
      // Select GPIO as input
      relayMap=0xff;
 80a0316:	23ff      	movs	r3, #255	; 0xff
 80a0318:	7023      	strb	r3, [r4, #0]
      Wire.write(relayMap);  //Wire.write(0xff);
 80a031a:	f003 f865 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a031e:	6803      	ldr	r3, [r0, #0]
 80a0320:	7821      	ldrb	r1, [r4, #0]
 80a0322:	689b      	ldr	r3, [r3, #8]
 80a0324:	4798      	blx	r3


      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a0326:	f003 f85f 	bl	80a33e8 <_Z19__fetch_global_Wirev>
}
 80a032a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      Wire.write(relayMap);  //Wire.write(0xff);


      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a032e:	f002 bedf 	b.w	80a30f0 <_ZN7TwoWire15endTransmissionEv>
 80a0332:	bf00      	nop
 80a0334:	20000030 	.word	0x20000030

080a0338 <_Z11relayOn8574v>:
}

void relayOn8574(){
 80a0338:	b510      	push	{r4, lr}
       Wire.begin();
 80a033a:	f003 f855 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a033e:	f002 feb5 	bl	80a30ac <_ZN7TwoWire5beginEv>
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
      // Select GPIO as input
      relayMap=0x00 ;
 80a0342:	4c0a      	ldr	r4, [pc, #40]	; (80a036c <_Z11relayOn8574v+0x34>)
}

void relayOn8574(){
       Wire.begin();
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
 80a0344:	f003 f850 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0348:	2124      	movs	r1, #36	; 0x24
 80a034a:	f002 feca 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
      // Select GPIO as input
      relayMap=0x00 ;
 80a034e:	2300      	movs	r3, #0
 80a0350:	7023      	strb	r3, [r4, #0]
      Wire.write(relayMap);  //Wire.write(0xff);
 80a0352:	f003 f849 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0356:	6803      	ldr	r3, [r0, #0]
 80a0358:	7821      	ldrb	r1, [r4, #0]
 80a035a:	689b      	ldr	r3, [r3, #8]
 80a035c:	4798      	blx	r3


      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a035e:	f003 f843 	bl	80a33e8 <_Z19__fetch_global_Wirev>
}
 80a0362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      Wire.write(relayMap);  //Wire.write(0xff);


      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a0366:	f002 bec3 	b.w	80a30f0 <_ZN7TwoWire15endTransmissionEv>
 80a036a:	bf00      	nop
 80a036c:	20000030 	.word	0x20000030

080a0370 <_Z12cmdTempReset6String>:
    InReverse2 = !InReverse2;
    if (InReverse2) msStartReverse2 = millis();
    return 0;
}

int cmdTempReset(String command){
 80a0370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HaltTemp = TRUE;
 80a0372:	4d14      	ldr	r5, [pc, #80]	; (80a03c4 <_Z12cmdTempReset6String+0x54>)
 80a0374:	2301      	movs	r3, #1
 80a0376:	702b      	strb	r3, [r5, #0]
  relayOff8574();
 80a0378:	f7ff ffc2 	bl	80a0300 <_Z12relayOff8574v>
  delay(2000);
 80a037c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80a0380:	f002 f8d6 	bl	80a2530 <delay>
   //find all temp sensors
  ds18b20.resetsearch();
 80a0384:	4810      	ldr	r0, [pc, #64]	; (80a03c8 <_Z12cmdTempReset6String+0x58>)
 80a0386:	f001 f910 	bl	80a15aa <_ZN7DS18B2011resetsearchEv>
  delay(200);                 // initialise for sensor search
 80a038a:	20c8      	movs	r0, #200	; 0xc8
 80a038c:	f002 f8d0 	bl	80a2530 <delay>
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a0390:	4f0e      	ldr	r7, [pc, #56]	; (80a03cc <_Z12cmdTempReset6String+0x5c>)
  relayOff8574();
  delay(2000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(200);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
 80a0392:	2400      	movs	r4, #0
        ds18b20.search(sensorAddresses[i]); // and if available store
        delay(300); 
        celsius[i]= 0;
 80a0394:	2600      	movs	r6, #0
  delay(2000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(200);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a0396:	210c      	movs	r1, #12
 80a0398:	fb01 7104 	mla	r1, r1, r4, r7
 80a039c:	480a      	ldr	r0, [pc, #40]	; (80a03c8 <_Z12cmdTempReset6String+0x58>)
 80a039e:	f001 f8e8 	bl	80a1572 <_ZN7DS18B206searchEPh>
        delay(300); 
 80a03a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a03a6:	f002 f8c3 	bl	80a2530 <delay>
        celsius[i]= 0;
 80a03aa:	4b09      	ldr	r3, [pc, #36]	; (80a03d0 <_Z12cmdTempReset6String+0x60>)
 80a03ac:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
  relayOff8574();
  delay(2000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(200);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
 80a03b0:	3401      	adds	r4, #1
 80a03b2:	2c0c      	cmp	r4, #12
 80a03b4:	d1ef      	bne.n	80a0396 <_Z12cmdTempReset6String+0x26>
        ds18b20.search(sensorAddresses[i]); // and if available store
        delay(300); 
        celsius[i]= 0;
   }
   HaltTemp = FALSE;
 80a03b6:	2400      	movs	r4, #0
 80a03b8:	702c      	strb	r4, [r5, #0]
   relayOn8574();
 80a03ba:	f7ff ffbd 	bl	80a0338 <_Z11relayOn8574v>
   return 0;
}
 80a03be:	4620      	mov	r0, r4
 80a03c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a03c2:	bf00      	nop
 80a03c4:	200000a8 	.word	0x200000a8
 80a03c8:	20000194 	.word	0x20000194
 80a03cc:	40024000 	.word	0x40024000
 80a03d0:	20000000 	.word	0x20000000

080a03d4 <_Z7getTempPh>:
}




double getTemp(uint8_t addr[8]) {
 80a03d4:	b570      	push	{r4, r5, r6, lr}
 80a03d6:	4606      	mov	r6, r0

      double _temp;
      int   i = 0;
 80a03d8:	2400      	movs	r4, #0
    
      do {
        _temp = ds18b20.getTemperature(addr);
 80a03da:	2200      	movs	r2, #0
 80a03dc:	4631      	mov	r1, r6
 80a03de:	480a      	ldr	r0, [pc, #40]	; (80a0408 <_Z7getTempPh+0x34>)
 80a03e0:	f001 f8e6 	bl	80a15b0 <_ZN7DS18B2014getTemperatureEPhb>
 80a03e4:	4605      	mov	r5, r0
      } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a03e6:	4808      	ldr	r0, [pc, #32]	; (80a0408 <_Z7getTempPh+0x34>)
 80a03e8:	f001 f99c 	bl	80a1724 <_ZN7DS18B208crcCheckEv>
 80a03ec:	b928      	cbnz	r0, 80a03fa <_Z7getTempPh+0x26>
 80a03ee:	3401      	adds	r4, #1
 80a03f0:	2c04      	cmp	r4, #4
 80a03f2:	d1f2      	bne.n	80a03da <_Z7getTempPh+0x6>
      if (i < MAXRETRY) {
        //_temp = ds18b20.convertToFahrenheit(_temp);
       // Serial.println(_temp);
      }
      else {
        _temp = -99;
 80a03f4:	2000      	movs	r0, #0
 80a03f6:	4905      	ldr	r1, [pc, #20]	; (80a040c <_Z7getTempPh+0x38>)
 80a03f8:	bd70      	pop	{r4, r5, r6, pc}
      do {
        _temp = ds18b20.getTemperature(addr);
      } while (!ds18b20.crcCheck() && MAXRETRY > i++);
      
    
      if (i < MAXRETRY) {
 80a03fa:	2c03      	cmp	r4, #3
 80a03fc:	d0fa      	beq.n	80a03f4 <_Z7getTempPh+0x20>

      double _temp;
      int   i = 0;
    
      do {
        _temp = ds18b20.getTemperature(addr);
 80a03fe:	4628      	mov	r0, r5
 80a0400:	f003 fde6 	bl	80a3fd0 <__aeabi_f2d>
      else {
        _temp = -99;
       // Serial.println("Invalid reading");
      }
      return _temp; 
}   
 80a0404:	bd70      	pop	{r4, r5, r6, pc}
 80a0406:	bf00      	nop
 80a0408:	20000194 	.word	0x20000194
 80a040c:	c058c000 	.word	0xc058c000

080a0410 <_Z5bitophhi>:
        Wire.endTransmission();
    }
    
}
byte bitop(byte b1, byte b2, int op){
    switch(op){
 80a0410:	2a02      	cmp	r2, #2
 80a0412:	d005      	beq.n	80a0420 <_Z5bitophhi+0x10>
 80a0414:	2a03      	cmp	r2, #3
 80a0416:	d006      	beq.n	80a0426 <_Z5bitophhi+0x16>
 80a0418:	2a01      	cmp	r2, #1
 80a041a:	d106      	bne.n	80a042a <_Z5bitophhi+0x1a>
        case 1:
            return b1 | b2;
 80a041c:	4308      	orrs	r0, r1
 80a041e:	4770      	bx	lr
        case 2:
            return b1 & ~b2;
 80a0420:	ea20 0001 	bic.w	r0, r0, r1
 80a0424:	4770      	bx	lr
        case 3:
            return b1 ^ b2;
 80a0426:	4048      	eors	r0, r1
 80a0428:	4770      	bx	lr
    }
    return 0;
 80a042a:	2000      	movs	r0, #0
}
 80a042c:	4770      	bx	lr
	...

080a0430 <_Z7relayOpii>:
    damper.setVal(0, dutyCycle);
    return dutyCycle;
}

void relayOp(int relay, int op){
    if(relay > 8){
 80a0430:	2808      	cmp	r0, #8
    } 
    damper.setVal(0, dutyCycle);
    return dutyCycle;
}

void relayOp(int relay, int op){
 80a0432:	b570      	push	{r4, r5, r6, lr}
 80a0434:	4604      	mov	r4, r0
 80a0436:	460e      	mov	r6, r1
    if(relay > 8){
 80a0438:	dc1a      	bgt.n	80a0470 <_Z7relayOpii+0x40>
      
    }else{
        byte rbit = (1<<(relay-1));
        Wire.beginTransmission(Addr8574);
 80a043a:	f002 ffd5 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a043e:	2124      	movs	r1, #36	; 0x24
 80a0440:	f002 fe4f 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
        // Select GPIO as input                                                                                                                                                                                                            
        //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
         //Wire.write(0x00); 
        // Stop I2C transmission
        relayMap = bitop(relayMap, rbit, op);
 80a0444:	4d0b      	ldr	r5, [pc, #44]	; (80a0474 <_Z7relayOpii+0x44>)
 80a0446:	3c01      	subs	r4, #1
 80a0448:	2101      	movs	r1, #1
 80a044a:	40a1      	lsls	r1, r4
 80a044c:	4632      	mov	r2, r6
 80a044e:	7828      	ldrb	r0, [r5, #0]
 80a0450:	b2c9      	uxtb	r1, r1
 80a0452:	f7ff ffdd 	bl	80a0410 <_Z5bitophhi>
 80a0456:	7028      	strb	r0, [r5, #0]
        Wire.write(relayMap);
 80a0458:	f002 ffc6 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a045c:	6803      	ldr	r3, [r0, #0]
 80a045e:	7829      	ldrb	r1, [r5, #0]
 80a0460:	689b      	ldr	r3, [r3, #8]
 80a0462:	4798      	blx	r3
        Wire.endTransmission();
 80a0464:	f002 ffc0 	bl	80a33e8 <_Z19__fetch_global_Wirev>
    }
    
}
 80a0468:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
         //Wire.write(0x00); 
        // Stop I2C transmission
        relayMap = bitop(relayMap, rbit, op);
        Wire.write(relayMap);
        Wire.endTransmission();
 80a046c:	f002 be40 	b.w	80a30f0 <_ZN7TwoWire15endTransmissionEv>
 80a0470:	bd70      	pop	{r4, r5, r6, pc}
 80a0472:	bf00      	nop
 80a0474:	20000030 	.word	0x20000030

080a0478 <_Z11turnOnRelayi>:
    }
    return 0;
}

void turnOnRelay(int relay){
    relayOp(relay, 2);
 80a0478:	2102      	movs	r1, #2
 80a047a:	f7ff bfd9 	b.w	80a0430 <_Z7relayOpii>
	...

080a0480 <_Z15cmdStopDefrost16String>:
    if (InReverse1) msStartReverse1 = millis();

    return 1;
}

int cmdStopDefrost1(String command) {
 80a0480:	b510      	push	{r4, lr}
   turnOnRelay(RelayCool1);
 80a0482:	2003      	movs	r0, #3
 80a0484:	f7ff fff8 	bl	80a0478 <_Z11turnOnRelayi>
   turnOnRelay(RelayFan1);
 80a0488:	2002      	movs	r0, #2
 80a048a:	f7ff fff5 	bl	80a0478 <_Z11turnOnRelayi>
   turnOnRelay(RelayBypassDamper1);
 80a048e:	2004      	movs	r0, #4
 80a0490:	f7ff fff2 	bl	80a0478 <_Z11turnOnRelayi>
   InReverse1=0;
 80a0494:	4b06      	ldr	r3, [pc, #24]	; (80a04b0 <_Z15cmdStopDefrost16String+0x30>)
 80a0496:	2400      	movs	r4, #0
 80a0498:	701c      	strb	r4, [r3, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a049a:	f001 fba1 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
   msDefrost2 = millis() + defrostTimer -100000;
 80a049e:	4b05      	ldr	r3, [pc, #20]	; (80a04b4 <_Z15cmdStopDefrost16String+0x34>)
 80a04a0:	f500 20b9 	add.w	r0, r0, #378880	; 0x5c800
 80a04a4:	f500 608c 	add.w	r0, r0, #1120	; 0x460
 80a04a8:	6018      	str	r0, [r3, #0]
   return 0;
}
 80a04aa:	4620      	mov	r0, r4
 80a04ac:	bd10      	pop	{r4, pc}
 80a04ae:	bf00      	nop
 80a04b0:	20000134 	.word	0x20000134
 80a04b4:	2000013c 	.word	0x2000013c

080a04b8 <_Z15cmdStopDefrost26String>:

int cmdStopDefrost2(String command) {
 80a04b8:	b508      	push	{r3, lr}
   turnOnRelay(RelayCool2);
 80a04ba:	2005      	movs	r0, #5
 80a04bc:	f7ff ffdc 	bl	80a0478 <_Z11turnOnRelayi>
   turnOnRelay(RelayFan2);
 80a04c0:	2007      	movs	r0, #7
 80a04c2:	f7ff ffd9 	bl	80a0478 <_Z11turnOnRelayi>
   turnOnRelay(RelayBypassDamper2);
 80a04c6:	2006      	movs	r0, #6
 80a04c8:	f7ff ffd6 	bl	80a0478 <_Z11turnOnRelayi>
   InReverse2=0;
 80a04cc:	4b01      	ldr	r3, [pc, #4]	; (80a04d4 <_Z15cmdStopDefrost26String+0x1c>)
 80a04ce:	2000      	movs	r0, #0
 80a04d0:	7018      	strb	r0, [r3, #0]
   return 0;
}
 80a04d2:	bd08      	pop	{r3, pc}
 80a04d4:	20000168 	.word	0x20000168

080a04d8 <_Z11toggleRelayi>:
}
void turnOffRelay(int relay){
    relayOp(relay, 1);
}
void toggleRelay(int relay){
    relayOp(relay, 3);
 80a04d8:	2103      	movs	r1, #3
 80a04da:	f7ff bfa9 	b.w	80a0430 <_Z7relayOpii>
	...

080a04e0 <_Z7cmdRev16String>:
     damper.setVal(8,TXVpos);
  }     
  return TXVpos;
}

int cmdRev1(String command){
 80a04e0:	b508      	push	{r3, lr}

    toggleRelay(RelayCool1);
 80a04e2:	2003      	movs	r0, #3
 80a04e4:	f7ff fff8 	bl	80a04d8 <_Z11toggleRelayi>
    toggleRelay(RelayFan1);
 80a04e8:	2002      	movs	r0, #2
 80a04ea:	f7ff fff5 	bl	80a04d8 <_Z11toggleRelayi>
    toggleRelay(RelayBypassDamper1);
 80a04ee:	2004      	movs	r0, #4
 80a04f0:	f7ff fff2 	bl	80a04d8 <_Z11toggleRelayi>
    InReverse1 = !InReverse1;
 80a04f4:	4a05      	ldr	r2, [pc, #20]	; (80a050c <_Z7cmdRev16String+0x2c>)
 80a04f6:	7813      	ldrb	r3, [r2, #0]
 80a04f8:	f083 0301 	eor.w	r3, r3, #1
 80a04fc:	7013      	strb	r3, [r2, #0]
    if (InReverse1) msStartReverse1 = millis();
 80a04fe:	b11b      	cbz	r3, 80a0508 <_Z7cmdRev16String+0x28>
 80a0500:	f001 fb6e 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
 80a0504:	4b02      	ldr	r3, [pc, #8]	; (80a0510 <_Z7cmdRev16String+0x30>)
 80a0506:	6018      	str	r0, [r3, #0]

    return 1;
}
 80a0508:	2001      	movs	r0, #1
 80a050a:	bd08      	pop	{r3, pc}
 80a050c:	20000134 	.word	0x20000134
 80a0510:	200000ac 	.word	0x200000ac

080a0514 <_Z7cmdRev26String>:
   turnOnRelay(RelayBypassDamper2);
   InReverse2=0;
   return 0;
}

int cmdRev2(String command){
 80a0514:	b508      	push	{r3, lr}
    toggleRelay(RelayCool2);
 80a0516:	2005      	movs	r0, #5
 80a0518:	f7ff ffde 	bl	80a04d8 <_Z11toggleRelayi>
    toggleRelay(RelayFan2);
 80a051c:	2007      	movs	r0, #7
 80a051e:	f7ff ffdb 	bl	80a04d8 <_Z11toggleRelayi>
    toggleRelay(RelayBypassDamper2);
 80a0522:	2006      	movs	r0, #6
 80a0524:	f7ff ffd8 	bl	80a04d8 <_Z11toggleRelayi>
    InReverse2 = !InReverse2;
 80a0528:	4a05      	ldr	r2, [pc, #20]	; (80a0540 <_Z7cmdRev26String+0x2c>)
 80a052a:	7813      	ldrb	r3, [r2, #0]
 80a052c:	f083 0301 	eor.w	r3, r3, #1
 80a0530:	7013      	strb	r3, [r2, #0]
    if (InReverse2) msStartReverse2 = millis();
 80a0532:	b11b      	cbz	r3, 80a053c <_Z7cmdRev26String+0x28>
 80a0534:	f001 fb54 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
 80a0538:	4b02      	ldr	r3, [pc, #8]	; (80a0544 <_Z7cmdRev26String+0x30>)
 80a053a:	6018      	str	r0, [r3, #0]
    return 0;
}
 80a053c:	2000      	movs	r0, #0
 80a053e:	bd08      	pop	{r3, pc}
 80a0540:	20000168 	.word	0x20000168
 80a0544:	200000cc 	.word	0x200000cc

080a0548 <_Z9Relay8574hb>:
void toggleRelay(int relay){
    relayOp(relay, 3);
}


void Relay8574(byte bitnum, boolean value){
 80a0548:	b508      	push	{r3, lr}
  static bool toggle;


  Wire.beginTransmission(Addr8574);
 80a054a:	f002 ff4d 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a054e:	2124      	movs	r1, #36	; 0x24
 80a0550:	f002 fdc7 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input                                                                                                                                                                                                            
   //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
 //Wire.write(0x00); 
  // Stop I2C transmission
  Wire.write(0x00);
 80a0554:	f002 ff48 	bl	80a33e8 <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0558:	6803      	ldr	r3, [r0, #0]
 80a055a:	2100      	movs	r1, #0
 80a055c:	689b      	ldr	r3, [r3, #8]
 80a055e:	4798      	blx	r3
  relayMap= 0x00;
 80a0560:	4b06      	ldr	r3, [pc, #24]	; (80a057c <_Z9Relay8574hb+0x34>)
 80a0562:	2200      	movs	r2, #0
 80a0564:	701a      	strb	r2, [r3, #0]
  Wire.endTransmission();
 80a0566:	f002 ff3f 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a056a:	f002 fdc1 	bl	80a30f0 <_ZN7TwoWire15endTransmissionEv>
  toggle= !toggle;
 80a056e:	4a04      	ldr	r2, [pc, #16]	; (80a0580 <_Z9Relay8574hb+0x38>)
 80a0570:	7813      	ldrb	r3, [r2, #0]
 80a0572:	f083 0301 	eor.w	r3, r3, #1
 80a0576:	7013      	strb	r3, [r2, #0]
 80a0578:	bd08      	pop	{r3, pc}
 80a057a:	bf00      	nop
 80a057c:	20000030 	.word	0x20000030
 80a0580:	20000104 	.word	0x20000104

080a0584 <_Z6getMCPv>:
  wd.checkin(); // resets the AWDT count    
}



void getMCP(){
 80a0584:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}


 byte error;
    int8_t address;

    address = mcp1.devAddr; 
 80a0588:	4b37      	ldr	r3, [pc, #220]	; (80a0668 <_Z6getMCPv+0xe4>)
 80a058a:	f993 400e 	ldrsb.w	r4, [r3, #14]
    // The i2c_scanner uses the  return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
 80a058e:	f002 ff2b 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0592:	4621      	mov	r1, r4
 80a0594:	f002 fda5 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
    error = Wire.endTransmission();
 80a0598:	f002 ff26 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a059c:	f002 fda8 	bl	80a30f0 <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
 80a05a0:	b190      	cbz	r0, 80a05c8 <_Z6getMCPv+0x44>
        
    }  
    
    
    
    address = mcp2.devAddr;
 80a05a2:	4b32      	ldr	r3, [pc, #200]	; (80a066c <_Z6getMCPv+0xe8>)
 80a05a4:	f993 400e 	ldrsb.w	r4, [r3, #14]
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
 80a05a8:	f002 ff1e 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a05ac:	4621      	mov	r1, r4
 80a05ae:	f002 fd98 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
    error = Wire.endTransmission();
 80a05b2:	f002 ff19 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a05b6:	f002 fd9b 	bl	80a30f0 <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
 80a05ba:	2800      	cmp	r0, #0
 80a05bc:	d150      	bne.n	80a0660 <_Z6getMCPv+0xdc>
 80a05be:	4f2c      	ldr	r7, [pc, #176]	; (80a0670 <_Z6getMCPv+0xec>)
 80a05c0:	4e2c      	ldr	r6, [pc, #176]	; (80a0674 <_Z6getMCPv+0xf0>)
 80a05c2:	4d2d      	ldr	r5, [pc, #180]	; (80a0678 <_Z6getMCPv+0xf4>)
 80a05c4:	2404      	movs	r4, #4
 80a05c6:	e028      	b.n	80a061a <_Z6getMCPv+0x96>
 80a05c8:	4604      	mov	r4, r0

        for(int i=1;i<=4;i++)
        {
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp1.SetConfiguration(i,16,1,2);
 80a05ca:	1c65      	adds	r5, r4, #1
 80a05cc:	2302      	movs	r3, #2
 80a05ce:	2210      	movs	r2, #16
 80a05d0:	b2e9      	uxtb	r1, r5
 80a05d2:	9300      	str	r3, [sp, #0]
 80a05d4:	4824      	ldr	r0, [pc, #144]	; (80a0668 <_Z6getMCPv+0xe4>)
 80a05d6:	2301      	movs	r3, #1
 80a05d8:	f001 f8ba 	bl	80a1750 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>
            Raw_adc[i-1] = mcp1.readADC();
 80a05dc:	4822      	ldr	r0, [pc, #136]	; (80a0668 <_Z6getMCPv+0xe4>)
 80a05de:	f001 f91d 	bl	80a181c <_ZN15CASARIA_MCP34287readADCEv>
 80a05e2:	4b26      	ldr	r3, [pc, #152]	; (80a067c <_Z6getMCPv+0xf8>)
 80a05e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            // Note that the library waits for a complete conversion
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813)* psiFS[i-1];
 80a05e8:	f004 f948 	bl	80a487c <__aeabi_i2f>
 80a05ec:	4924      	ldr	r1, [pc, #144]	; (80a0680 <_Z6getMCPv+0xfc>)
 80a05ee:	f004 f88f 	bl	80a4710 <__aeabi_fsub>
 80a05f2:	4924      	ldr	r1, [pc, #144]	; (80a0684 <_Z6getMCPv+0x100>)
 80a05f4:	f004 fa4a 	bl	80a4a8c <__aeabi_fdiv>
 80a05f8:	4b23      	ldr	r3, [pc, #140]	; (80a0688 <_Z6getMCPv+0x104>)
 80a05fa:	4606      	mov	r6, r0
 80a05fc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a0600:	f004 f93c 	bl	80a487c <__aeabi_i2f>
 80a0604:	4601      	mov	r1, r0
 80a0606:	4630      	mov	r0, r6
 80a0608:	f004 f98c 	bl	80a4924 <__aeabi_fmul>
 80a060c:	4b1f      	ldr	r3, [pc, #124]	; (80a068c <_Z6getMCPv+0x108>)
    error = Wire.endTransmission();
    if (error == 0)
    {


        for(int i=1;i<=4;i++)
 80a060e:	2d04      	cmp	r5, #4
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp1.SetConfiguration(i,16,1,2);
            Raw_adc[i-1] = mcp1.readADC();
            // Note that the library waits for a complete conversion
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813)* psiFS[i-1];
 80a0610:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80a0614:	462c      	mov	r4, r5
    error = Wire.endTransmission();
    if (error == 0)
    {


        for(int i=1;i<=4;i++)
 80a0616:	d1d8      	bne.n	80a05ca <_Z6getMCPv+0x46>
 80a0618:	e7c3      	b.n	80a05a2 <_Z6getMCPv+0x1e>
    {
        for(int i=4;i<=8;i++)
        {
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp2.SetConfiguration(i,16,1,2);
 80a061a:	2302      	movs	r3, #2
 80a061c:	2210      	movs	r2, #16
 80a061e:	b2e1      	uxtb	r1, r4
 80a0620:	9300      	str	r3, [sp, #0]
 80a0622:	4812      	ldr	r0, [pc, #72]	; (80a066c <_Z6getMCPv+0xe8>)
 80a0624:	2301      	movs	r3, #1
 80a0626:	f001 f893 	bl	80a1750 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>

            // Note that the library waits for a complete conversion
            Raw_adc[i-1] = mcp2.readADC();
 80a062a:	4810      	ldr	r0, [pc, #64]	; (80a066c <_Z6getMCPv+0xe8>)
 80a062c:	f001 f8f6 	bl	80a181c <_ZN15CASARIA_MCP34287readADCEv>
 80a0630:	f847 0f04 	str.w	r0, [r7, #4]!
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813) * psiFS[i-1];
 80a0634:	f004 f922 	bl	80a487c <__aeabi_i2f>
 80a0638:	4911      	ldr	r1, [pc, #68]	; (80a0680 <_Z6getMCPv+0xfc>)
 80a063a:	f004 f869 	bl	80a4710 <__aeabi_fsub>
 80a063e:	4911      	ldr	r1, [pc, #68]	; (80a0684 <_Z6getMCPv+0x100>)
 80a0640:	f004 fa24 	bl	80a4a8c <__aeabi_fdiv>
 80a0644:	4680      	mov	r8, r0
 80a0646:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a064a:	f004 f917 	bl	80a487c <__aeabi_i2f>
 80a064e:	4601      	mov	r1, r0
 80a0650:	4640      	mov	r0, r8
 80a0652:	f004 f967 	bl	80a4924 <__aeabi_fmul>
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0)
    {
        for(int i=4;i<=8;i++)
 80a0656:	3401      	adds	r4, #1
 80a0658:	2c09      	cmp	r4, #9
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp2.SetConfiguration(i,16,1,2);

            // Note that the library waits for a complete conversion
            Raw_adc[i-1] = mcp2.readADC();
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813) * psiFS[i-1];
 80a065a:	f845 0f04 	str.w	r0, [r5, #4]!
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0)
    {
        for(int i=4;i<=8;i++)
 80a065e:	d1dc      	bne.n	80a061a <_Z6getMCPv+0x96>
    else
    {  //errors occurred
        
    }  

}
 80a0660:	b002      	add	sp, #8
 80a0662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0666:	bf00      	nop
 80a0668:	20000148 	.word	0x20000148
 80a066c:	20000158 	.word	0x20000158
 80a0670:	20000114 	.word	0x20000114
 80a0674:	080a4f58 	.word	0x080a4f58
 80a0678:	2000017c 	.word	0x2000017c
 80a067c:	2000010c 	.word	0x2000010c
 80a0680:	45b5a800 	.word	0x45b5a800
 80a0684:	46b83200 	.word	0x46b83200
 80a0688:	080a4f50 	.word	0x080a4f50
 80a068c:	20000174 	.word	0x20000174

080a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0690:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0692:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0694:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0696:	b17c      	cbz	r4, 80a06b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0698:	6863      	ldr	r3, [r4, #4]
 80a069a:	3b01      	subs	r3, #1
 80a069c:	6063      	str	r3, [r4, #4]
 80a069e:	b95b      	cbnz	r3, 80a06b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a06a0:	6823      	ldr	r3, [r4, #0]
 80a06a2:	4620      	mov	r0, r4
 80a06a4:	689b      	ldr	r3, [r3, #8]
 80a06a6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a06a8:	68a3      	ldr	r3, [r4, #8]
 80a06aa:	3b01      	subs	r3, #1
 80a06ac:	60a3      	str	r3, [r4, #8]
 80a06ae:	b91b      	cbnz	r3, 80a06b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a06b0:	6823      	ldr	r3, [r4, #0]
 80a06b2:	4620      	mov	r0, r4
 80a06b4:	68db      	ldr	r3, [r3, #12]
 80a06b6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a06b8:	4628      	mov	r0, r5
 80a06ba:	bd38      	pop	{r3, r4, r5, pc}

080a06bc <_Z11publishDatav>:
       // Serial.println("Invalid reading");
      }
      return _temp; 
}   
    
void publishData() {
 80a06bc:	b510      	push	{r4, lr}
  char szInfo[200];
      snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
      celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9],  celsius[10], celsius[11]);
 80a06be:	4c29      	ldr	r4, [pc, #164]	; (80a0764 <_Z11publishDatav+0xa8>)
       // Serial.println("Invalid reading");
      }
      return _temp; 
}   
    
void publishData() {
 80a06c0:	b0cc      	sub	sp, #304	; 0x130
  char szInfo[200];
      snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
      celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9],  celsius[10], celsius[11]);
 80a06c2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a06c4:	f003 fc84 	bl	80a3fd0 <__aeabi_f2d>
 80a06c8:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80a06cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a06ce:	f003 fc7f 	bl	80a3fd0 <__aeabi_f2d>
 80a06d2:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80a06d6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a06d8:	f003 fc7a 	bl	80a3fd0 <__aeabi_f2d>
 80a06dc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80a06e0:	6a20      	ldr	r0, [r4, #32]
 80a06e2:	f003 fc75 	bl	80a3fd0 <__aeabi_f2d>
 80a06e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80a06ea:	69e0      	ldr	r0, [r4, #28]
 80a06ec:	f003 fc70 	bl	80a3fd0 <__aeabi_f2d>
 80a06f0:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a06f4:	69a0      	ldr	r0, [r4, #24]
 80a06f6:	f003 fc6b 	bl	80a3fd0 <__aeabi_f2d>
 80a06fa:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a06fe:	6960      	ldr	r0, [r4, #20]
 80a0700:	f003 fc66 	bl	80a3fd0 <__aeabi_f2d>
 80a0704:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0708:	6920      	ldr	r0, [r4, #16]
 80a070a:	f003 fc61 	bl	80a3fd0 <__aeabi_f2d>
 80a070e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a0712:	68e0      	ldr	r0, [r4, #12]
 80a0714:	f003 fc5c 	bl	80a3fd0 <__aeabi_f2d>
 80a0718:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a071c:	68a0      	ldr	r0, [r4, #8]
 80a071e:	f003 fc57 	bl	80a3fd0 <__aeabi_f2d>
 80a0722:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0726:	6860      	ldr	r0, [r4, #4]
 80a0728:	f003 fc52 	bl	80a3fd0 <__aeabi_f2d>
 80a072c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0730:	6820      	ldr	r0, [r4, #0]
 80a0732:	f003 fc4d 	bl	80a3fd0 <__aeabi_f2d>
 80a0736:	4a0c      	ldr	r2, [pc, #48]	; (80a0768 <_Z11publishDatav+0xac>)
 80a0738:	e9cd 0100 	strd	r0, r1, [sp]
 80a073c:	21c8      	movs	r1, #200	; 0xc8
 80a073e:	a81a      	add	r0, sp, #104	; 0x68
 80a0740:	f001 fc1c 	bl	80a1f7c <snprintf>
 80a0744:	4b09      	ldr	r3, [pc, #36]	; (80a076c <_Z11publishDatav+0xb0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0746:	aa1a      	add	r2, sp, #104	; 0x68
 80a0748:	781b      	ldrb	r3, [r3, #0]
 80a074a:	4909      	ldr	r1, [pc, #36]	; (80a0770 <_Z11publishDatav+0xb4>)
 80a074c:	f88d 3000 	strb.w	r3, [sp]
 80a0750:	a818      	add	r0, sp, #96	; 0x60
 80a0752:	233c      	movs	r3, #60	; 0x3c
 80a0754:	f002 f91e 	bl	80a2994 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0758:	a819      	add	r0, sp, #100	; 0x64
 80a075a:	f7ff ff99 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorAddresses[4], sensorAddresses[5], sensorAddresses[6], sensorAddresses[7], sensorAddresses[8],sensorAddresses[9],sensorAddresses[10],sensorAddresses[11]);
    Particle.publish("dsAddress", szInfo, PRIVATE);
  
  }
  */
}
 80a075e:	b04c      	add	sp, #304	; 0x130
 80a0760:	bd10      	pop	{r4, pc}
 80a0762:	bf00      	nop
 80a0764:	20000000 	.word	0x20000000
 80a0768:	080a4fab 	.word	0x080a4fab
 80a076c:	200000a9 	.word	0x200000a9
 80a0770:	080a4fe7 	.word	0x080a4fe7

080a0774 <_Z15publishPressurev>:
    

void publishPressure(){   
 80a0774:	b510      	push	{r4, lr}
    char szInfo[200];
 
     //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
     // Particle.publish("dsAnalogin",szInfo, PRIVATE );
        snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", psi[0], psi[1], psi[2], psi[3], psi[4], psi[5], psi[6], psi[7]);
 80a0776:	4c1f      	ldr	r4, [pc, #124]	; (80a07f4 <_Z15publishPressurev+0x80>)
  }
  */
}
    

void publishPressure(){   
 80a0778:	b0c4      	sub	sp, #272	; 0x110
    char szInfo[200];
 
     //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
     // Particle.publish("dsAnalogin",szInfo, PRIVATE );
        snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", psi[0], psi[1], psi[2], psi[3], psi[4], psi[5], psi[6], psi[7]);
 80a077a:	69e0      	ldr	r0, [r4, #28]
 80a077c:	f003 fc28 	bl	80a3fd0 <__aeabi_f2d>
 80a0780:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a0784:	69a0      	ldr	r0, [r4, #24]
 80a0786:	f003 fc23 	bl	80a3fd0 <__aeabi_f2d>
 80a078a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a078e:	6960      	ldr	r0, [r4, #20]
 80a0790:	f003 fc1e 	bl	80a3fd0 <__aeabi_f2d>
 80a0794:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0798:	6920      	ldr	r0, [r4, #16]
 80a079a:	f003 fc19 	bl	80a3fd0 <__aeabi_f2d>
 80a079e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a07a2:	68e0      	ldr	r0, [r4, #12]
 80a07a4:	f003 fc14 	bl	80a3fd0 <__aeabi_f2d>
 80a07a8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a07ac:	68a0      	ldr	r0, [r4, #8]
 80a07ae:	f003 fc0f 	bl	80a3fd0 <__aeabi_f2d>
 80a07b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a07b6:	6860      	ldr	r0, [r4, #4]
 80a07b8:	f003 fc0a 	bl	80a3fd0 <__aeabi_f2d>
 80a07bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a07c0:	6820      	ldr	r0, [r4, #0]
 80a07c2:	f003 fc05 	bl	80a3fd0 <__aeabi_f2d>
 80a07c6:	4a0c      	ldr	r2, [pc, #48]	; (80a07f8 <_Z15publishPressurev+0x84>)
 80a07c8:	e9cd 0100 	strd	r0, r1, [sp]
 80a07cc:	21c8      	movs	r1, #200	; 0xc8
 80a07ce:	a812      	add	r0, sp, #72	; 0x48
 80a07d0:	f001 fbd4 	bl	80a1f7c <snprintf>
 80a07d4:	4b09      	ldr	r3, [pc, #36]	; (80a07fc <_Z15publishPressurev+0x88>)
 80a07d6:	aa12      	add	r2, sp, #72	; 0x48
 80a07d8:	781b      	ldrb	r3, [r3, #0]
 80a07da:	4909      	ldr	r1, [pc, #36]	; (80a0800 <_Z15publishPressurev+0x8c>)
 80a07dc:	f88d 3000 	strb.w	r3, [sp]
 80a07e0:	a810      	add	r0, sp, #64	; 0x40
 80a07e2:	233c      	movs	r3, #60	; 0x3c
 80a07e4:	f002 f8d6 	bl	80a2994 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a07e8:	a811      	add	r0, sp, #68	; 0x44
 80a07ea:	f7ff ff51 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("ds_psi",szInfo, PRIVATE );
           
}
 80a07ee:	b044      	add	sp, #272	; 0x110
 80a07f0:	bd10      	pop	{r4, pc}
 80a07f2:	bf00      	nop
 80a07f4:	20000174 	.word	0x20000174
 80a07f8:	080a4fbf 	.word	0x080a4fbf
 80a07fc:	200000a9 	.word	0x200000a9
 80a0800:	080a4fef 	.word	0x080a4fef

080a0804 <loop>:
  Wire.endTransmission();
  toggle= !toggle;
}


void loop(){
 80a0804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static uint32_t msReverse2 = 0;
  

  static uint32_t now;

  if (msDefrost1 ==0) msDefrost1 = now + defrostTimer/2;
 80a0808:	4e79      	ldr	r6, [pc, #484]	; (80a09f0 <loop+0x1ec>)
  Wire.endTransmission();
  toggle= !toggle;
}


void loop(){
 80a080a:	b085      	sub	sp, #20
  static uint32_t msReverse2 = 0;
  

  static uint32_t now;

  if (msDefrost1 ==0) msDefrost1 = now + defrostTimer/2;
 80a080c:	6833      	ldr	r3, [r6, #0]
 80a080e:	4c79      	ldr	r4, [pc, #484]	; (80a09f4 <loop+0x1f0>)
 80a0810:	b92b      	cbnz	r3, 80a081e <loop+0x1a>
 80a0812:	6823      	ldr	r3, [r4, #0]
 80a0814:	f503 336a 	add.w	r3, r3, #239616	; 0x3a800
 80a0818:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80a081c:	6033      	str	r3, [r6, #0]
  
  if (msDefrost2 ==0) msDefrost2 = now;
 80a081e:	4d76      	ldr	r5, [pc, #472]	; (80a09f8 <loop+0x1f4>)
 80a0820:	682b      	ldr	r3, [r5, #0]
 80a0822:	b90b      	cbnz	r3, 80a0828 <loop+0x24>
 80a0824:	6823      	ldr	r3, [r4, #0]
 80a0826:	602b      	str	r3, [r5, #0]
 80a0828:	f001 f9da 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
  
   
  now = millis();


  if (now - msRelaySample >= msRelaySampleTime) {
 80a082c:	4f73      	ldr	r7, [pc, #460]	; (80a09fc <loop+0x1f8>)
  if (msDefrost1 ==0) msDefrost1 = now + defrostTimer/2;
  
  if (msDefrost2 ==0) msDefrost2 = now;
  
   
  now = millis();
 80a082e:	6020      	str	r0, [r4, #0]


  if (now - msRelaySample >= msRelaySampleTime) {
 80a0830:	683b      	ldr	r3, [r7, #0]
 80a0832:	1ac0      	subs	r0, r0, r3
 80a0834:	f240 736b 	movw	r3, #1899	; 0x76b
 80a0838:	4298      	cmp	r0, r3
 80a083a:	d902      	bls.n	80a0842 <loop+0x3e>
 80a083c:	f001 f9d0 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
                        
    msRelaySample = millis();
 80a0840:	6038      	str	r0, [r7, #0]
  }   
  if (now - msDefrost1 >= defrostTimer) {
 80a0842:	6832      	ldr	r2, [r6, #0]
 80a0844:	6823      	ldr	r3, [r4, #0]
 80a0846:	1a9b      	subs	r3, r3, r2
 80a0848:	4a6d      	ldr	r2, [pc, #436]	; (80a0a00 <loop+0x1fc>)
 80a084a:	4293      	cmp	r3, r2
 80a084c:	d90d      	bls.n	80a086a <loop+0x66>
    cmdRev1("go"); 
 80a084e:	496d      	ldr	r1, [pc, #436]	; (80a0a04 <loop+0x200>)
 80a0850:	4668      	mov	r0, sp
 80a0852:	f001 fc2e 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0856:	4668      	mov	r0, sp
 80a0858:	f7ff fe42 	bl	80a04e0 <_Z7cmdRev16String>
 80a085c:	4668      	mov	r0, sp
 80a085e:	f001 fbe1 	bl	80a2024 <_ZN6StringD1Ev>
 80a0862:	f001 f9bd 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
    msDefrost1 = millis();
 80a0866:	4b62      	ldr	r3, [pc, #392]	; (80a09f0 <loop+0x1ec>)
 80a0868:	6018      	str	r0, [r3, #0]
  }    

  if (now - msDefrost2 >= defrostTimer) {
 80a086a:	682a      	ldr	r2, [r5, #0]
 80a086c:	6823      	ldr	r3, [r4, #0]
 80a086e:	1a9b      	subs	r3, r3, r2
 80a0870:	4a63      	ldr	r2, [pc, #396]	; (80a0a00 <loop+0x1fc>)
 80a0872:	4293      	cmp	r3, r2
 80a0874:	d90d      	bls.n	80a0892 <loop+0x8e>
    cmdRev2("go"); 
 80a0876:	4963      	ldr	r1, [pc, #396]	; (80a0a04 <loop+0x200>)
 80a0878:	4668      	mov	r0, sp
 80a087a:	f001 fc1a 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a087e:	4668      	mov	r0, sp
 80a0880:	f7ff fe48 	bl	80a0514 <_Z7cmdRev26String>
 80a0884:	4668      	mov	r0, sp
 80a0886:	f001 fbcd 	bl	80a2024 <_ZN6StringD1Ev>
 80a088a:	f001 f9a9 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
    msDefrost2 = millis();
 80a088e:	4b5a      	ldr	r3, [pc, #360]	; (80a09f8 <loop+0x1f4>)
 80a0890:	6018      	str	r0, [r3, #0]
  }    


  if (now - msTempSample >= msTempSampleTime) {
 80a0892:	4e5d      	ldr	r6, [pc, #372]	; (80a0a08 <loop+0x204>)
 80a0894:	6823      	ldr	r3, [r4, #0]
 80a0896:	6832      	ldr	r2, [r6, #0]
 80a0898:	1a9b      	subs	r3, r3, r2
 80a089a:	f640 723b 	movw	r2, #3899	; 0xf3b
 80a089e:	4293      	cmp	r3, r2
 80a08a0:	d930      	bls.n	80a0904 <loop+0x100>
    if (!HaltTemp){
 80a08a2:	4b5a      	ldr	r3, [pc, #360]	; (80a0a0c <loop+0x208>)
 80a08a4:	781d      	ldrb	r5, [r3, #0]
 80a08a6:	b11d      	cbz	r5, 80a08b0 <loop+0xac>
 80a08a8:	f001 f99a 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
              if (!isnan(temp)) celsius[i] = temp;
              
          }
        }
    }
    msTempSample = millis();
 80a08ac:	6030      	str	r0, [r6, #0]
 80a08ae:	e029      	b.n	80a0904 <loop+0x100>
 80a08b0:	f8df a194 	ldr.w	sl, [pc, #404]	; 80a0a48 <loop+0x244>


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);      
 80a08b4:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80a0a4c <loop+0x248>
           if (!isnan(temp))  {
             celsius[i] = temp;
          }
          else {
              temp = getTemp(sensorAddresses[i]);
              if (!isnan(temp)) celsius[i] = temp;
 80a08b8:	f8df 9194 	ldr.w	r9, [pc, #404]	; 80a0a50 <loop+0x24c>
 80a08bc:	270c      	movs	r7, #12
 80a08be:	fb07 a705 	mla	r7, r7, r5, sl


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);      
 80a08c2:	4638      	mov	r0, r7
 80a08c4:	f7ff fd86 	bl	80a03d4 <_Z7getTempPh>
 80a08c8:	f003 fece 	bl	80a4668 <__aeabi_d2f>
            
           if (!isnan(temp))  {
 80a08cc:	4601      	mov	r1, r0


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);      
 80a08ce:	4683      	mov	fp, r0
 80a08d0:	f8c8 0000 	str.w	r0, [r8]
            
           if (!isnan(temp))  {
 80a08d4:	f004 f9ec 	bl	80a4cb0 <__aeabi_fcmpun>
 80a08d8:	b910      	cbnz	r0, 80a08e0 <loop+0xdc>
             celsius[i] = temp;
 80a08da:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80a08de:	e00d      	b.n	80a08fc <loop+0xf8>
          }
          else {
              temp = getTemp(sensorAddresses[i]);
 80a08e0:	4638      	mov	r0, r7
 80a08e2:	f7ff fd77 	bl	80a03d4 <_Z7getTempPh>
 80a08e6:	f003 febf 	bl	80a4668 <__aeabi_d2f>
              if (!isnan(temp)) celsius[i] = temp;
 80a08ea:	4601      	mov	r1, r0
            
           if (!isnan(temp))  {
             celsius[i] = temp;
          }
          else {
              temp = getTemp(sensorAddresses[i]);
 80a08ec:	4607      	mov	r7, r0
 80a08ee:	f8c8 0000 	str.w	r0, [r8]
              if (!isnan(temp)) celsius[i] = temp;
 80a08f2:	f004 f9dd 	bl	80a4cb0 <__aeabi_fcmpun>
 80a08f6:	b908      	cbnz	r0, 80a08fc <loop+0xf8>
 80a08f8:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  }    


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
 80a08fc:	3501      	adds	r5, #1
 80a08fe:	2d0c      	cmp	r5, #12
 80a0900:	d1dc      	bne.n	80a08bc <loop+0xb8>
 80a0902:	e7d1      	b.n	80a08a8 <loop+0xa4>
    }
    msTempSample = millis();
  }
  
  
  if (now - msPressureSample >= msPressureSampleTime) {
 80a0904:	4d42      	ldr	r5, [pc, #264]	; (80a0a10 <loop+0x20c>)
 80a0906:	6823      	ldr	r3, [r4, #0]
 80a0908:	682a      	ldr	r2, [r5, #0]
 80a090a:	1a9b      	subs	r3, r3, r2
 80a090c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a0910:	d343      	bcc.n	80a099a <loop+0x196>
    getMCP();
 80a0912:	f7ff fe37 	bl	80a0584 <_Z6getMCPv>
 80a0916:	f001 f963 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
    msPressureSample = millis();
 80a091a:	6028      	str	r0, [r5, #0]
 80a091c:	f001 f960 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
    msReverse1 = millis() - msStartReverse1;
 80a0920:	4b3c      	ldr	r3, [pc, #240]	; (80a0a14 <loop+0x210>)
 80a0922:	4d3d      	ldr	r5, [pc, #244]	; (80a0a18 <loop+0x214>)
 80a0924:	681b      	ldr	r3, [r3, #0]
 80a0926:	1ac0      	subs	r0, r0, r3
 80a0928:	6028      	str	r0, [r5, #0]
 80a092a:	f001 f959 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
    msReverse2 = millis() - msStartReverse2;
 80a092e:	4b3b      	ldr	r3, [pc, #236]	; (80a0a1c <loop+0x218>)
 80a0930:	4a3b      	ldr	r2, [pc, #236]	; (80a0a20 <loop+0x21c>)
 80a0932:	681b      	ldr	r3, [r3, #0]
 80a0934:	4616      	mov	r6, r2
 80a0936:	1ac0      	subs	r0, r0, r3
    if ((InReverse1) && (msReverse1 > 10000) && (psi[4]>300)) {
 80a0938:	4b3a      	ldr	r3, [pc, #232]	; (80a0a24 <loop+0x220>)
  
  if (now - msPressureSample >= msPressureSampleTime) {
    getMCP();
    msPressureSample = millis();
    msReverse1 = millis() - msStartReverse1;
    msReverse2 = millis() - msStartReverse2;
 80a093a:	6010      	str	r0, [r2, #0]
    if ((InReverse1) && (msReverse1 > 10000) && (psi[4]>300)) {
 80a093c:	781b      	ldrb	r3, [r3, #0]
 80a093e:	b1a3      	cbz	r3, 80a096a <loop+0x166>
 80a0940:	f242 7310 	movw	r3, #10000	; 0x2710
 80a0944:	682a      	ldr	r2, [r5, #0]
 80a0946:	429a      	cmp	r2, r3
 80a0948:	d90f      	bls.n	80a096a <loop+0x166>
 80a094a:	4b37      	ldr	r3, [pc, #220]	; (80a0a28 <loop+0x224>)
 80a094c:	4937      	ldr	r1, [pc, #220]	; (80a0a2c <loop+0x228>)
 80a094e:	6918      	ldr	r0, [r3, #16]
 80a0950:	f004 f9a4 	bl	80a4c9c <__aeabi_fcmpgt>
 80a0954:	b148      	cbz	r0, 80a096a <loop+0x166>
      //if ( (psi[4]>300)) {
        cmdStopDefrost1("OFF");
 80a0956:	4936      	ldr	r1, [pc, #216]	; (80a0a30 <loop+0x22c>)
 80a0958:	4668      	mov	r0, sp
 80a095a:	f001 fbaa 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a095e:	4668      	mov	r0, sp
 80a0960:	f7ff fd8e 	bl	80a0480 <_Z15cmdStopDefrost16String>
 80a0964:	4668      	mov	r0, sp
 80a0966:	f001 fb5d 	bl	80a2024 <_ZN6StringD1Ev>
    }
    if ((InReverse2) && (msReverse2 > 10000) && (psi[0]>300)) {
 80a096a:	4b32      	ldr	r3, [pc, #200]	; (80a0a34 <loop+0x230>)
 80a096c:	781b      	ldrb	r3, [r3, #0]
 80a096e:	b1a3      	cbz	r3, 80a099a <loop+0x196>
 80a0970:	f242 7310 	movw	r3, #10000	; 0x2710
 80a0974:	6832      	ldr	r2, [r6, #0]
 80a0976:	429a      	cmp	r2, r3
 80a0978:	d90f      	bls.n	80a099a <loop+0x196>
 80a097a:	4b2b      	ldr	r3, [pc, #172]	; (80a0a28 <loop+0x224>)
 80a097c:	492b      	ldr	r1, [pc, #172]	; (80a0a2c <loop+0x228>)
 80a097e:	6818      	ldr	r0, [r3, #0]
 80a0980:	f004 f98c 	bl	80a4c9c <__aeabi_fcmpgt>
 80a0984:	b148      	cbz	r0, 80a099a <loop+0x196>
    //  if ( (psi[0]>300)) {
        cmdStopDefrost2("OFF");
 80a0986:	492a      	ldr	r1, [pc, #168]	; (80a0a30 <loop+0x22c>)
 80a0988:	4668      	mov	r0, sp
 80a098a:	f001 fb92 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a098e:	4668      	mov	r0, sp
 80a0990:	f7ff fd92 	bl	80a04b8 <_Z15cmdStopDefrost26String>
 80a0994:	4668      	mov	r0, sp
 80a0996:	f001 fb45 	bl	80a2024 <_ZN6StringD1Ev>
    }
  }   


  if (now - msPublish2 >= msPublishTime2) {
 80a099a:	4d27      	ldr	r5, [pc, #156]	; (80a0a38 <loop+0x234>)
 80a099c:	6823      	ldr	r3, [r4, #0]
 80a099e:	682a      	ldr	r2, [r5, #0]
 80a09a0:	1a9b      	subs	r3, r3, r2
 80a09a2:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a09a6:	4293      	cmp	r3, r2
 80a09a8:	d904      	bls.n	80a09b4 <loop+0x1b0>
 80a09aa:	f001 f919 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
    msPublish2 = millis();
 80a09ae:	6028      	str	r0, [r5, #0]
    publishPressure();
 80a09b0:	f7ff fee0 	bl	80a0774 <_Z15publishPressurev>
    //publishStatus();
    //publishDebug();
}

  if (now - msPublish3 >= msPublishTime3){
 80a09b4:	4d21      	ldr	r5, [pc, #132]	; (80a0a3c <loop+0x238>)
 80a09b6:	6823      	ldr	r3, [r4, #0]
 80a09b8:	682a      	ldr	r2, [r5, #0]
 80a09ba:	1a9b      	subs	r3, r3, r2
 80a09bc:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80a09c0:	d302      	bcc.n	80a09c8 <loop+0x1c4>
 80a09c2:	f001 f90d 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
      
      msPublish3 = millis();
 80a09c6:	6028      	str	r0, [r5, #0]

  }

  if (now - msPublish >= msPublishTime) {
 80a09c8:	4d1d      	ldr	r5, [pc, #116]	; (80a0a40 <loop+0x23c>)
 80a09ca:	6823      	ldr	r3, [r4, #0]
 80a09cc:	682a      	ldr	r2, [r5, #0]
 80a09ce:	1a9b      	subs	r3, r3, r2
 80a09d0:	f642 62df 	movw	r2, #11999	; 0x2edf
 80a09d4:	4293      	cmp	r3, r2
 80a09d6:	d904      	bls.n	80a09e2 <loop+0x1de>

    publishData();
 80a09d8:	f7ff fe70 	bl	80a06bc <_Z11publishDatav>
 80a09dc:	f001 f900 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
    //ModulateDamper(); 
    msPublish = millis();    
 80a09e0:	6028      	str	r0, [r5, #0]
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a09e2:	f001 f8fd 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a09e6:	4b17      	ldr	r3, [pc, #92]	; (80a0a44 <loop+0x240>)
 80a09e8:	6018      	str	r0, [r3, #0]
  }    
  wd.checkin(); // resets the AWDT count    
}
 80a09ea:	b005      	add	sp, #20
 80a09ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a09f0:	20000138 	.word	0x20000138
 80a09f4:	20000130 	.word	0x20000130
 80a09f8:	2000013c 	.word	0x2000013c
 80a09fc:	20000108 	.word	0x20000108
 80a0a00:	000752ff 	.word	0x000752ff
 80a0a04:	080a4ff6 	.word	0x080a4ff6
 80a0a08:	2000016c 	.word	0x2000016c
 80a0a0c:	200000a8 	.word	0x200000a8
 80a0a10:	2000012c 	.word	0x2000012c
 80a0a14:	200000ac 	.word	0x200000ac
 80a0a18:	200001b0 	.word	0x200001b0
 80a0a1c:	200000cc 	.word	0x200000cc
 80a0a20:	200001b4 	.word	0x200001b4
 80a0a24:	20000134 	.word	0x20000134
 80a0a28:	20000174 	.word	0x20000174
 80a0a2c:	43960000 	.word	0x43960000
 80a0a30:	080a4ff9 	.word	0x080a4ff9
 80a0a34:	20000168 	.word	0x20000168
 80a0a38:	20000140 	.word	0x20000140
 80a0a3c:	20000144 	.word	0x20000144
 80a0a40:	200000c8 	.word	0x200000c8
 80a0a44:	2000066c 	.word	0x2000066c
 80a0a48:	40024000 	.word	0x40024000
 80a0a4c:	20000170 	.word	0x20000170
 80a0a50:	20000000 	.word	0x20000000

080a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0a54:	4602      	mov	r2, r0
 80a0a56:	4801      	ldr	r0, [pc, #4]	; (80a0a5c <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 80a0a58:	f001 be8c 	b.w	80a2774 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0a5c:	080a2749 	.word	0x080a2749

080a0a60 <setup>:
      Wire.endTransmission();
}



void setup() {                                                                       
 80a0a60:	b570      	push	{r4, r5, r6, lr}

  delay(1000);
 80a0a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80a0a66:	f001 fd63 	bl	80a2530 <delay>
   //find all temp sensors
  ds18b20.resetsearch();
 80a0a6a:	484c      	ldr	r0, [pc, #304]	; (80a0b9c <setup+0x13c>)
 80a0a6c:	f000 fd9d 	bl	80a15aa <_ZN7DS18B2011resetsearchEv>
  delay(100);                 // initialise for sensor search
 80a0a70:	2064      	movs	r0, #100	; 0x64
 80a0a72:	f001 fd5d 	bl	80a2530 <delay>
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a0a76:	4e4a      	ldr	r6, [pc, #296]	; (80a0ba0 <setup+0x140>)

  delay(1000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(100);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
 80a0a78:	2400      	movs	r4, #0
        ds18b20.search(sensorAddresses[i]); // and if available store
        delay(300); 
        celsius[i]= 0;
 80a0a7a:	2500      	movs	r5, #0
  delay(1000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(100);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a0a7c:	210c      	movs	r1, #12
 80a0a7e:	fb01 6104 	mla	r1, r1, r4, r6
 80a0a82:	4846      	ldr	r0, [pc, #280]	; (80a0b9c <setup+0x13c>)
 80a0a84:	f000 fd75 	bl	80a1572 <_ZN7DS18B206searchEPh>
        delay(300); 
 80a0a88:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a0a8c:	f001 fd50 	bl	80a2530 <delay>
        celsius[i]= 0;
 80a0a90:	4b44      	ldr	r3, [pc, #272]	; (80a0ba4 <setup+0x144>)
 80a0a92:	f843 5024 	str.w	r5, [r3, r4, lsl #2]

  delay(1000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(100);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
 80a0a96:	3401      	adds	r4, #1
 80a0a98:	2c0c      	cmp	r4, #12
 80a0a9a:	d1ef      	bne.n	80a0a7c <setup+0x1c>
        ds18b20.search(sensorAddresses[i]); // and if available store
        delay(300); 
        celsius[i]= 0;
   }
 
    relays.setAddress(0x20);
 80a0a9c:	2120      	movs	r1, #32
 80a0a9e:	4842      	ldr	r0, [pc, #264]	; (80a0ba8 <setup+0x148>)
 80a0aa0:	f000 fab0 	bl	80a1004 <_ZN16CASARIA_MCP2301710setAddressEi>
    relays.setRelays(16);
 80a0aa4:	2110      	movs	r1, #16
 80a0aa6:	4840      	ldr	r0, [pc, #256]	; (80a0ba8 <setup+0x148>)
 80a0aa8:	f000 faae 	bl	80a1008 <_ZN16CASARIA_MCP230179setRelaysEi>
    relays.setOutputs(0x00, 0x00);
 80a0aac:	2200      	movs	r2, #0
 80a0aae:	4611      	mov	r1, r2
 80a0ab0:	483d      	ldr	r0, [pc, #244]	; (80a0ba8 <setup+0x148>)
 80a0ab2:	f000 fabc 	bl	80a102e <_ZN16CASARIA_MCP2301710setOutputsEii>
    
    // relays.setOutput(4);
    relays.init();
 80a0ab6:	483c      	ldr	r0, [pc, #240]	; (80a0ba8 <setup+0x148>)
 80a0ab8:	f000 fba0 	bl	80a11fc <_ZN16CASARIA_MCP230174initEv>

    
    //If this is a 32 channel relay board, the A0 address jumper is ALWAYS set on the second chipset, so should never be set here on the first
    
    
    Particle.function("RelayControl", triggerRelay);
 80a0abc:	493b      	ldr	r1, [pc, #236]	; (80a0bac <setup+0x14c>)
 80a0abe:	483c      	ldr	r0, [pc, #240]	; (80a0bb0 <setup+0x150>)
 80a0ac0:	f7ff ffc8 	bl	80a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("TempReset", cmdTempReset);  
 80a0ac4:	493b      	ldr	r1, [pc, #236]	; (80a0bb4 <setup+0x154>)
 80a0ac6:	483c      	ldr	r0, [pc, #240]	; (80a0bb8 <setup+0x158>)
 80a0ac8:	f7ff ffc4 	bl	80a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("TXV1", cmdTXV1);
 80a0acc:	493b      	ldr	r1, [pc, #236]	; (80a0bbc <setup+0x15c>)
 80a0ace:	483c      	ldr	r0, [pc, #240]	; (80a0bc0 <setup+0x160>)
 80a0ad0:	f7ff ffc0 	bl	80a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("TXV2", cmdTXV2);
 80a0ad4:	493b      	ldr	r1, [pc, #236]	; (80a0bc4 <setup+0x164>)
 80a0ad6:	483c      	ldr	r0, [pc, #240]	; (80a0bc8 <setup+0x168>)
 80a0ad8:	f7ff ffbc 	bl	80a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("REVRSE1",cmdRev1);
 80a0adc:	493b      	ldr	r1, [pc, #236]	; (80a0bcc <setup+0x16c>)
 80a0ade:	483c      	ldr	r0, [pc, #240]	; (80a0bd0 <setup+0x170>)
 80a0ae0:	f7ff ffb8 	bl	80a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>
    Particle.function("REVRSE2",cmdRev2);
 80a0ae4:	493b      	ldr	r1, [pc, #236]	; (80a0bd4 <setup+0x174>)
 80a0ae6:	483c      	ldr	r0, [pc, #240]	; (80a0bd8 <setup+0x178>)
 80a0ae8:	f7ff ffb4 	bl	80a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>

    Particle.function("SetDamper", cmdSetDamper);
 80a0aec:	493b      	ldr	r1, [pc, #236]	; (80a0bdc <setup+0x17c>)
 80a0aee:	483c      	ldr	r0, [pc, #240]	; (80a0be0 <setup+0x180>)
 80a0af0:	f7ff ffb0 	bl	80a0a54 <_ZN10CloudClass8functionIA8_cIPFi6StringEEEEbRKT_DpT0_>
   // Particle.variable("Bank_1", b1status);
   // Particle.variable("Bank_2", b2status);
   
    
    //Particle.variable("Input Status", b4status);
    relays.turnOffAllRelays();
 80a0af4:	482c      	ldr	r0, [pc, #176]	; (80a0ba8 <setup+0x148>)
 80a0af6:	f000 fb67 	bl	80a11c8 <_ZN16CASARIA_MCP2301716turnOffAllRelaysEv>
    pinMode(pinLED, OUTPUT);  
 80a0afa:	2101      	movs	r1, #1
 80a0afc:	2007      	movs	r0, #7
 80a0afe:	f002 fbe3 	bl	80a32c8 <pinMode>
   
   
    
    
    
    damper.begin();    // This calls Wire.begin()
 80a0b02:	4838      	ldr	r0, [pc, #224]	; (80a0be4 <setup+0x184>)
 80a0b04:	f000 ff83 	bl	80a1a0e <_ZN16Adafruit_PCA96855beginEv>
    damper.setPWMFreq(1500);     // Maximum PWM frequency is 1600
 80a0b08:	4937      	ldr	r1, [pc, #220]	; (80a0be8 <setup+0x188>)
 80a0b0a:	4836      	ldr	r0, [pc, #216]	; (80a0be4 <setup+0x184>)
 80a0b0c:	f000 ff8c 	bl	80a1a28 <_ZN16Adafruit_PCA968510setPWMFreqEf>
    
    damper.setVal(damper2_2, 2800);
 80a0b10:	2300      	movs	r3, #0
 80a0b12:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80a0b16:	2101      	movs	r1, #1
 80a0b18:	4832      	ldr	r0, [pc, #200]	; (80a0be4 <setup+0x184>)
 80a0b1a:	f000 ff11 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper2_1, 3000);
 80a0b1e:	2300      	movs	r3, #0
 80a0b20:	4619      	mov	r1, r3
 80a0b22:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0b26:	482f      	ldr	r0, [pc, #188]	; (80a0be4 <setup+0x184>)
 80a0b28:	f000 ff0a 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_2, 2800);
 80a0b2c:	2300      	movs	r3, #0
 80a0b2e:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80a0b32:	2103      	movs	r1, #3
 80a0b34:	482b      	ldr	r0, [pc, #172]	; (80a0be4 <setup+0x184>)
 80a0b36:	f000 ff03 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_1, 3000);
 80a0b3a:	2300      	movs	r3, #0
 80a0b3c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0b40:	2102      	movs	r1, #2
 80a0b42:	4828      	ldr	r0, [pc, #160]	; (80a0be4 <setup+0x184>)
 80a0b44:	f000 fefc 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv1, 3900); //default TXV2
 80a0b48:	2300      	movs	r3, #0
 80a0b4a:	f640 723c 	movw	r2, #3900	; 0xf3c
 80a0b4e:	2104      	movs	r1, #4
 80a0b50:	4824      	ldr	r0, [pc, #144]	; (80a0be4 <setup+0x184>)
 80a0b52:	f000 fef5 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv2, 3400); //default TXV
 80a0b56:	f640 5248 	movw	r2, #3400	; 0xd48
 80a0b5a:	2300      	movs	r3, #0
 80a0b5c:	2108      	movs	r1, #8
 80a0b5e:	4821      	ldr	r0, [pc, #132]	; (80a0be4 <setup+0x184>)
 80a0b60:	f000 feee 	bl	80a1940 <_ZN16Adafruit_PCA96856setValEhtb>
    // Select configuration command
    // Continuous conversion mode, Channel-1, 12-bit resolution
    //Wire.write(0x10);
    // Stop I2C Transmission
    //Wire.endTransmission();
      Wire.begin();
 80a0b64:	f002 fc40 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0b68:	f002 faa0 	bl	80a30ac <_ZN7TwoWire5beginEv>
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
      // Select GPIO as input
      relayMap=0xFF;
 80a0b6c:	4c1f      	ldr	r4, [pc, #124]	; (80a0bec <setup+0x18c>)
    //Wire.write(0x10);
    // Stop I2C Transmission
    //Wire.endTransmission();
      Wire.begin();
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
 80a0b6e:	f002 fc3b 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0b72:	2124      	movs	r1, #36	; 0x24
 80a0b74:	f002 fab5 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
      // Select GPIO as input
      relayMap=0xFF;
 80a0b78:	23ff      	movs	r3, #255	; 0xff
 80a0b7a:	7023      	strb	r3, [r4, #0]
      Wire.write(relayMap);  //Wire.write(0xff);
 80a0b7c:	f002 fc34 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a0b80:	6803      	ldr	r3, [r0, #0]
 80a0b82:	7821      	ldrb	r1, [r4, #0]
 80a0b84:	689b      	ldr	r3, [r3, #8]
 80a0b86:	4798      	blx	r3
      Relay8574(1,1);
 80a0b88:	2101      	movs	r1, #1
 80a0b8a:	4608      	mov	r0, r1
 80a0b8c:	f7ff fcdc 	bl	80a0548 <_Z9Relay8574hb>

      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a0b90:	f002 fc2a 	bl	80a33e8 <_Z19__fetch_global_Wirev>
  

  
}
 80a0b94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(relayMap);  //Wire.write(0xff);
      Relay8574(1,1);

      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a0b98:	f002 baaa 	b.w	80a30f0 <_ZN7TwoWire15endTransmissionEv>
 80a0b9c:	20000194 	.word	0x20000194
 80a0ba0:	40024000 	.word	0x40024000
 80a0ba4:	20000000 	.word	0x20000000
 80a0ba8:	200000d4 	.word	0x200000d4
 80a0bac:	080a0181 	.word	0x080a0181
 80a0bb0:	080a4ffd 	.word	0x080a4ffd
 80a0bb4:	080a0371 	.word	0x080a0371
 80a0bb8:	080a500a 	.word	0x080a500a
 80a0bbc:	080a015d 	.word	0x080a015d
 80a0bc0:	080a5014 	.word	0x080a5014
 80a0bc4:	080a0139 	.word	0x080a0139
 80a0bc8:	080a5019 	.word	0x080a5019
 80a0bcc:	080a04e1 	.word	0x080a04e1
 80a0bd0:	080a501e 	.word	0x080a501e
 80a0bd4:	080a0515 	.word	0x080a0515
 80a0bd8:	080a5026 	.word	0x080a5026
 80a0bdc:	080a00d5 	.word	0x080a00d5
 80a0be0:	080a502e 	.word	0x080a502e
 80a0be4:	200000d0 	.word	0x200000d0
 80a0be8:	44bb8000 	.word	0x44bb8000
 80a0bec:	20000030 	.word	0x20000030

080a0bf0 <_GLOBAL__sub_I_msStartReverse1>:
int triggerRelay(String command){

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
      return 1;
}
 80a0bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0bf2:	4b1f      	ldr	r3, [pc, #124]	; (80a0c70 <_GLOBAL__sub_I_msStartReverse1+0x80>)
 
// SYSTEM_THREAD(ENABLED);

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(20000, System.reset);
 80a0bf4:	4e1f      	ldr	r6, [pc, #124]	; (80a0c74 <_GLOBAL__sub_I_msStartReverse1+0x84>)
 80a0bf6:	2501      	movs	r5, #1
 80a0bf8:	4c1f      	ldr	r4, [pc, #124]	; (80a0c78 <_GLOBAL__sub_I_msStartReverse1+0x88>)
 80a0bfa:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0bfc:	f000 ffa0 	bl	80a1b40 <HAL_Pin_Map>
 80a0c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a0c04:	4a1d      	ldr	r2, [pc, #116]	; (80a0c7c <_GLOBAL__sub_I_msStartReverse1+0x8c>)
 80a0c06:	f644 6120 	movw	r1, #20000	; 0x4e20
 80a0c0a:	4630      	mov	r0, r6
 80a0c0c:	f7ff fb1e 	bl	80a024c <_ZN19ApplicationWatchdogC1EjPFvvEj>
 80a0c10:	4630      	mov	r0, r6
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
DS18B20 ds18b20(pinOneWire);
 80a0c12:	4e1b      	ldr	r6, [pc, #108]	; (80a0c80 <_GLOBAL__sub_I_msStartReverse1+0x90>)
 
// SYSTEM_THREAD(ENABLED);

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(20000, System.reset);
 80a0c14:	4622      	mov	r2, r4
 80a0c16:	491b      	ldr	r1, [pc, #108]	; (80a0c84 <_GLOBAL__sub_I_msStartReverse1+0x94>)
 80a0c18:	f002 fc06 	bl	80a3428 <__aeabi_atexit>
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
DS18B20 ds18b20(pinOneWire);
 80a0c1c:	2200      	movs	r2, #0
 80a0c1e:	2104      	movs	r1, #4
 80a0c20:	4630      	mov	r0, r6
 80a0c22:	f000 fc8f 	bl	80a1544 <_ZN7DS18B20C1Etb>
 80a0c26:	4630      	mov	r0, r6
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68);  
 80a0c28:	4e17      	ldr	r6, [pc, #92]	; (80a0c88 <_GLOBAL__sub_I_msStartReverse1+0x98>)
ApplicationWatchdog wd(20000, System.reset);
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
DS18B20 ds18b20(pinOneWire);
 80a0c2a:	4622      	mov	r2, r4
 80a0c2c:	4917      	ldr	r1, [pc, #92]	; (80a0c8c <_GLOBAL__sub_I_msStartReverse1+0x9c>)
 80a0c2e:	f002 fbfb 	bl	80a3428 <__aeabi_atexit>
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68);  
 80a0c32:	4f17      	ldr	r7, [pc, #92]	; (80a0c90 <_GLOBAL__sub_I_msStartReverse1+0xa0>)
 80a0c34:	2168      	movs	r1, #104	; 0x68
 80a0c36:	4630      	mov	r0, r6
 80a0c38:	f000 fd7c 	bl	80a1734 <_ZN15CASARIA_MCP3428C1Eh>
 80a0c3c:	4630      	mov	r0, r6
CASARIA_MCP3428  mcp2(0x6E); 
 80a0c3e:	4e15      	ldr	r6, [pc, #84]	; (80a0c94 <_GLOBAL__sub_I_msStartReverse1+0xa4>)
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68);  
 80a0c40:	4622      	mov	r2, r4
 80a0c42:	4639      	mov	r1, r7
 80a0c44:	f002 fbf0 	bl	80a3428 <__aeabi_atexit>
CASARIA_MCP3428  mcp2(0x6E); 
 80a0c48:	216e      	movs	r1, #110	; 0x6e
 80a0c4a:	4630      	mov	r0, r6
 80a0c4c:	f000 fd72 	bl	80a1734 <_ZN15CASARIA_MCP3428C1Eh>
 80a0c50:	4622      	mov	r2, r4
 80a0c52:	4639      	mov	r1, r7
 80a0c54:	4630      	mov	r0, r6
 80a0c56:	f002 fbe7 	bl	80a3428 <__aeabi_atexit>

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true);  // Use the default address, but also turn on debugging
 80a0c5a:	462a      	mov	r2, r5
 80a0c5c:	2140      	movs	r1, #64	; 0x40
 80a0c5e:	480e      	ldr	r0, [pc, #56]	; (80a0c98 <_GLOBAL__sub_I_msStartReverse1+0xa8>)
 80a0c60:	f000 fe16 	bl	80a1890 <_ZN16Adafruit_PCA9685C1Ehb>
int triggerRelay(String command){

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
      return 1;
}
 80a0c64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true);  // Use the default address, but also turn on debugging

CASARIA_MCP23017 relays;  //not used
 80a0c68:	480c      	ldr	r0, [pc, #48]	; (80a0c9c <_GLOBAL__sub_I_msStartReverse1+0xac>)
 80a0c6a:	f000 b9b5 	b.w	80a0fd8 <_ZN16CASARIA_MCP23017C1Ev>
 80a0c6e:	bf00      	nop
 80a0c70:	200000a9 	.word	0x200000a9
 80a0c74:	200000b0 	.word	0x200000b0
 80a0c78:	200000a4 	.word	0x200000a4
 80a0c7c:	080a2005 	.word	0x080a2005
 80a0c80:	20000194 	.word	0x20000194
 80a0c84:	080a020b 	.word	0x080a020b
 80a0c88:	20000148 	.word	0x20000148
 80a0c8c:	080a159b 	.word	0x080a159b
 80a0c90:	080a174d 	.word	0x080a174d
 80a0c94:	20000158 	.word	0x20000158
 80a0c98:	200000d0 	.word	0x200000d0
 80a0c9c:	200000d4 	.word	0x200000d4

080a0ca0 <_GLOBAL__sub_I_lastTime>:
 80a0ca0:	f000 bf4e 	b.w	80a1b40 <HAL_Pin_Map>

080a0ca4 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0ca4:	8802      	ldrh	r2, [r0, #0]
 80a0ca6:	231c      	movs	r3, #28
 80a0ca8:	4353      	muls	r3, r2
 80a0caa:	6842      	ldr	r2, [r0, #4]
 80a0cac:	18d1      	adds	r1, r2, r3
 80a0cae:	58d3      	ldr	r3, [r2, r3]
 80a0cb0:	888a      	ldrh	r2, [r1, #4]
 80a0cb2:	835a      	strh	r2, [r3, #26]
 80a0cb4:	4770      	bx	lr

080a0cb6 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0cb6:	b538      	push	{r3, r4, r5, lr}
 80a0cb8:	4604      	mov	r4, r0
 80a0cba:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a0cbc:	f000 ff40 	bl	80a1b40 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a0cc0:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0cc2:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a0cc4:	4628      	mov	r0, r5
 80a0cc6:	f002 faff 	bl	80a32c8 <pinMode>
    _pin = pin;
 80a0cca:	8025      	strh	r5, [r4, #0]
}
 80a0ccc:	4620      	mov	r0, r4
 80a0cce:	bd38      	pop	{r3, r4, r5, pc}

080a0cd0 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a0cd0:	b538      	push	{r3, r4, r5, lr}
 80a0cd2:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a0cd4:	f002 f912 	bl	80a2efc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0cd8:	2100      	movs	r1, #0
 80a0cda:	8828      	ldrh	r0, [r5, #0]
 80a0cdc:	f000 ff38 	bl	80a1b50 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a0ce0:	f002 f90e 	bl	80a2f00 <_Z10interruptsv>
 80a0ce4:	247d      	movs	r4, #125	; 0x7d
 80a0ce6:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 80a0ce8:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a0cec:	d02d      	beq.n	80a0d4a <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0cee:	2002      	movs	r0, #2
 80a0cf0:	f000 ff6e 	bl	80a1bd0 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0cf4:	8828      	ldrh	r0, [r5, #0]
 80a0cf6:	f000 ff33 	bl	80a1b60 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 80a0cfa:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a0cfe:	d0f2      	beq.n	80a0ce6 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 80a0d00:	f002 f8fc 	bl	80a2efc <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a0d04:	4628      	mov	r0, r5
 80a0d06:	f7ff ffcd 	bl	80a0ca4 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0d0a:	2101      	movs	r1, #1
 80a0d0c:	8828      	ldrh	r0, [r5, #0]
 80a0d0e:	f000 ff1f 	bl	80a1b50 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 80a0d12:	f002 f8f5 	bl	80a2f00 <_Z10interruptsv>
 80a0d16:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a0d1a:	f000 ff59 	bl	80a1bd0 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 80a0d1e:	f002 f8ed 	bl	80a2efc <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0d22:	2100      	movs	r1, #0
 80a0d24:	8828      	ldrh	r0, [r5, #0]
 80a0d26:	f000 ff13 	bl	80a1b50 <HAL_Pin_Mode>
 80a0d2a:	2046      	movs	r0, #70	; 0x46
 80a0d2c:	f000 ff50 	bl	80a1bd0 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0d30:	8828      	ldrh	r0, [r5, #0]
 80a0d32:	f000 ff15 	bl	80a1b60 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a0d36:	b2c0      	uxtb	r0, r0
 80a0d38:	fab0 f480 	clz	r4, r0

    interrupts();
 80a0d3c:	f002 f8e0 	bl	80a2f00 <_Z10interruptsv>
 80a0d40:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a0d44:	0964      	lsrs	r4, r4, #5
 80a0d46:	f000 ff43 	bl	80a1bd0 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 80a0d4a:	4620      	mov	r0, r4
 80a0d4c:	bd38      	pop	{r3, r4, r5, pc}

080a0d4e <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a0d4e:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a0d50:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a0d54:	4604      	mov	r4, r0
    if (v & 1) {
 80a0d56:	d013      	beq.n	80a0d80 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a0d58:	f002 f8d0 	bl	80a2efc <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a0d5c:	4620      	mov	r0, r4
 80a0d5e:	f7ff ffa1 	bl	80a0ca4 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0d62:	2101      	movs	r1, #1
 80a0d64:	8820      	ldrh	r0, [r4, #0]
 80a0d66:	f000 fef3 	bl	80a1b50 <HAL_Pin_Mode>
 80a0d6a:	200a      	movs	r0, #10
 80a0d6c:	f000 ff30 	bl	80a1bd0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0d70:	8820      	ldrh	r0, [r4, #0]
 80a0d72:	2100      	movs	r1, #0
 80a0d74:	f000 feec 	bl	80a1b50 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80a0d78:	f002 f8c2 	bl	80a2f00 <_Z10interruptsv>
 80a0d7c:	2037      	movs	r0, #55	; 0x37
 80a0d7e:	e012      	b.n	80a0da6 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80a0d80:	f002 f8bc 	bl	80a2efc <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a0d84:	4620      	mov	r0, r4
 80a0d86:	f7ff ff8d 	bl	80a0ca4 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0d8a:	2101      	movs	r1, #1
 80a0d8c:	8820      	ldrh	r0, [r4, #0]
 80a0d8e:	f000 fedf 	bl	80a1b50 <HAL_Pin_Mode>
 80a0d92:	2041      	movs	r0, #65	; 0x41
 80a0d94:	f000 ff1c 	bl	80a1bd0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0d98:	8820      	ldrh	r0, [r4, #0]
 80a0d9a:	4629      	mov	r1, r5
 80a0d9c:	f000 fed8 	bl	80a1b50 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80a0da0:	f002 f8ae 	bl	80a2f00 <_Z10interruptsv>
 80a0da4:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80a0da6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0daa:	f000 bf11 	b.w	80a1bd0 <HAL_Delay_Microseconds>

080a0dae <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a0dae:	b510      	push	{r4, lr}
 80a0db0:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80a0db2:	f002 f8a3 	bl	80a2efc <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a0db6:	4620      	mov	r0, r4
 80a0db8:	f7ff ff74 	bl	80a0ca4 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0dbc:	2101      	movs	r1, #1
 80a0dbe:	8820      	ldrh	r0, [r4, #0]
 80a0dc0:	f000 fec6 	bl	80a1b50 <HAL_Pin_Mode>
 80a0dc4:	2003      	movs	r0, #3
 80a0dc6:	f000 ff03 	bl	80a1bd0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0dca:	2100      	movs	r1, #0
 80a0dcc:	8820      	ldrh	r0, [r4, #0]
 80a0dce:	f000 febf 	bl	80a1b50 <HAL_Pin_Mode>
 80a0dd2:	200a      	movs	r0, #10
 80a0dd4:	f000 fefc 	bl	80a1bd0 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0dd8:	8820      	ldrh	r0, [r4, #0]
 80a0dda:	f000 fec1 	bl	80a1b60 <HAL_GPIO_Read>
 80a0dde:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 80a0de0:	f002 f88e 	bl	80a2f00 <_Z10interruptsv>
 80a0de4:	2035      	movs	r0, #53	; 0x35
 80a0de6:	f000 fef3 	bl	80a1bd0 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 80a0dea:	b2e0      	uxtb	r0, r4
 80a0dec:	bd10      	pop	{r4, pc}

080a0dee <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 80a0dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0df2:	4605      	mov	r5, r0
 80a0df4:	4688      	mov	r8, r1
 80a0df6:	4617      	mov	r7, r2
 80a0df8:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0dfa:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a0dfc:	ea18 0f04 	tst.w	r8, r4
 80a0e00:	bf14      	ite	ne
 80a0e02:	2101      	movne	r1, #1
 80a0e04:	2100      	moveq	r1, #0
 80a0e06:	4628      	mov	r0, r5
 80a0e08:	f7ff ffa1 	bl	80a0d4e <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0e0c:	0064      	lsls	r4, r4, #1
 80a0e0e:	3e01      	subs	r6, #1
 80a0e10:	b2e4      	uxtb	r4, r4
 80a0e12:	d1f3      	bne.n	80a0dfc <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 80a0e14:	b18f      	cbz	r7, 80a0e3a <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 80a0e16:	f002 f871 	bl	80a2efc <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0e1a:	882a      	ldrh	r2, [r5, #0]
 80a0e1c:	231c      	movs	r3, #28
 80a0e1e:	4353      	muls	r3, r2
 80a0e20:	686a      	ldr	r2, [r5, #4]
 80a0e22:	18d1      	adds	r1, r2, r3
 80a0e24:	58d3      	ldr	r3, [r2, r3]
 80a0e26:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0e28:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0e2a:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0e2c:	8828      	ldrh	r0, [r5, #0]
 80a0e2e:	f000 fe8f 	bl	80a1b50 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a0e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 80a0e36:	f002 b863 	b.w	80a2f00 <_Z10interruptsv>
 80a0e3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0e3e <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 80a0e3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0e40:	4607      	mov	r7, r0
 80a0e42:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a0e44:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0e46:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a0e48:	4638      	mov	r0, r7
 80a0e4a:	f7ff ffb0 	bl	80a0dae <_ZN7OneWire8read_bitEv>
 80a0e4e:	b100      	cbz	r0, 80a0e52 <_ZN7OneWire4readEv+0x14>
 80a0e50:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0e52:	0064      	lsls	r4, r4, #1
 80a0e54:	3e01      	subs	r6, #1
 80a0e56:	b2e4      	uxtb	r4, r4
 80a0e58:	d1f6      	bne.n	80a0e48 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 80a0e5a:	4628      	mov	r0, r5
 80a0e5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0e5e <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0e5e:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0e60:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0e62:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0e64:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0e66:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0e68:	f7ff ffc1 	bl	80a0dee <_ZN7OneWire5writeEhh>
 80a0e6c:	1e65      	subs	r5, r4, #1
 80a0e6e:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80a0e70:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a0e74:	2200      	movs	r2, #0
 80a0e76:	4630      	mov	r0, r6
 80a0e78:	f7ff ffb9 	bl	80a0dee <_ZN7OneWire5writeEhh>
 80a0e7c:	42a5      	cmp	r5, r4
 80a0e7e:	d1f7      	bne.n	80a0e70 <_ZN7OneWire6selectEPKh+0x12>
}
 80a0e80:	bd70      	pop	{r4, r5, r6, pc}

080a0e82 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
 80a0e82:	2200      	movs	r2, #0
 80a0e84:	21cc      	movs	r1, #204	; 0xcc
 80a0e86:	f7ff bfb2 	b.w	80a0dee <_ZN7OneWire5writeEhh>

080a0e8a <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a0e8a:	2300      	movs	r3, #0
 80a0e8c:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a0e8e:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a0e90:	7443      	strb	r3, [r0, #17]
 80a0e92:	f100 0210 	add.w	r2, r0, #16
 80a0e96:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a0e98:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80a0e9c:	4282      	cmp	r2, r0
 80a0e9e:	d1fb      	bne.n	80a0e98 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80a0ea0:	4770      	bx	lr

080a0ea2 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0ea2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0ea6:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0ea8:	4604      	mov	r4, r0
 80a0eaa:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0eac:	2d00      	cmp	r5, #0
 80a0eae:	d15e      	bne.n	80a0f6e <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80a0eb0:	f7ff ff0e 	bl	80a0cd0 <_ZN7OneWire5resetEv>
 80a0eb4:	b920      	cbnz	r0, 80a0ec0 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80a0eb6:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a0eb8:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a0eba:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a0ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a0ec0:	462a      	mov	r2, r5
 80a0ec2:	21f0      	movs	r1, #240	; 0xf0
 80a0ec4:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a0ec6:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a0ec8:	f7ff ff91 	bl	80a0dee <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a0ecc:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0ece:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a0ed0:	4620      	mov	r0, r4
 80a0ed2:	f7ff ff6c 	bl	80a0dae <_ZN7OneWire8read_bitEv>
 80a0ed6:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a0ed8:	4620      	mov	r0, r4
 80a0eda:	f7ff ff68 	bl	80a0dae <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a0ede:	f1b9 0f01 	cmp.w	r9, #1
 80a0ee2:	d102      	bne.n	80a0eea <_ZN7OneWire6searchEPh+0x48>
 80a0ee4:	2801      	cmp	r0, #1
 80a0ee6:	d11b      	bne.n	80a0f20 <_ZN7OneWire6searchEPh+0x7e>
 80a0ee8:	e037      	b.n	80a0f5a <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 80a0eea:	4581      	cmp	r9, r0
 80a0eec:	eb04 0305 	add.w	r3, r4, r5
 80a0ef0:	d11e      	bne.n	80a0f30 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a0ef2:	7c22      	ldrb	r2, [r4, #16]
 80a0ef4:	4297      	cmp	r7, r2
 80a0ef6:	d207      	bcs.n	80a0f08 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a0ef8:	7a1a      	ldrb	r2, [r3, #8]
 80a0efa:	4216      	tst	r6, r2
 80a0efc:	bf14      	ite	ne
 80a0efe:	f04f 0901 	movne.w	r9, #1
 80a0f02:	f04f 0900 	moveq.w	r9, #0
 80a0f06:	e004      	b.n	80a0f12 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a0f08:	bf0c      	ite	eq
 80a0f0a:	f04f 0901 	moveq.w	r9, #1
 80a0f0e:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 80a0f12:	f1b9 0f00 	cmp.w	r9, #0
 80a0f16:	d103      	bne.n	80a0f20 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a0f18:	2f08      	cmp	r7, #8
 80a0f1a:	d808      	bhi.n	80a0f2e <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a0f1c:	7467      	strb	r7, [r4, #17]
 80a0f1e:	e006      	b.n	80a0f2e <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a0f20:	1962      	adds	r2, r4, r5
 80a0f22:	7a13      	ldrb	r3, [r2, #8]
 80a0f24:	f04f 0901 	mov.w	r9, #1
 80a0f28:	4333      	orrs	r3, r6
 80a0f2a:	7213      	strb	r3, [r2, #8]
 80a0f2c:	e004      	b.n	80a0f38 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0f2e:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a0f30:	7a1a      	ldrb	r2, [r3, #8]
 80a0f32:	ea22 0206 	bic.w	r2, r2, r6
 80a0f36:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a0f38:	4649      	mov	r1, r9
 80a0f3a:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a0f3c:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a0f3e:	f7ff ff06 	bl	80a0d4e <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a0f42:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a0f46:	bf04      	itt	eq
 80a0f48:	3501      	addeq	r5, #1
 80a0f4a:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0f4c:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a0f50:	bf08      	it	eq
 80a0f52:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a0f54:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0f56:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a0f58:	d9ba      	bls.n	80a0ed0 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a0f5a:	2f40      	cmp	r7, #64	; 0x40
 80a0f5c:	d907      	bls.n	80a0f6e <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a0f5e:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a0f62:	f1ba 0f00 	cmp.w	sl, #0
 80a0f66:	d112      	bne.n	80a0f8e <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a0f68:	2301      	movs	r3, #1
 80a0f6a:	74a3      	strb	r3, [r4, #18]
 80a0f6c:	e00f      	b.n	80a0f8e <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a0f6e:	2000      	movs	r0, #0
 80a0f70:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a0f72:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a0f74:	7460      	strb	r0, [r4, #17]
 80a0f76:	1de3      	adds	r3, r4, #7
 80a0f78:	f108 38ff 	add.w	r8, r8, #4294967295
 80a0f7c:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a0f7e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a0f82:	42a3      	cmp	r3, r4
 80a0f84:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a0f88:	d1f9      	bne.n	80a0f7e <_ZN7OneWire6searchEPh+0xdc>
 80a0f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80a0f8e:	7a23      	ldrb	r3, [r4, #8]
 80a0f90:	2b00      	cmp	r3, #0
 80a0f92:	d0ec      	beq.n	80a0f6e <_ZN7OneWire6searchEPh+0xcc>
 80a0f94:	2001      	movs	r0, #1
 80a0f96:	e7ee      	b.n	80a0f76 <_ZN7OneWire6searchEPh+0xd4>

080a0f98 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a0f98:	b530      	push	{r4, r5, lr}
 80a0f9a:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a0f9c:	2000      	movs	r0, #0

    while (len--) {
 80a0f9e:	3901      	subs	r1, #1
 80a0fa0:	b2c9      	uxtb	r1, r1
 80a0fa2:	29ff      	cmp	r1, #255	; 0xff
 80a0fa4:	d013      	beq.n	80a0fce <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80a0fa6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0faa:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a0fac:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a0fb0:	f013 0f01 	tst.w	r3, #1
 80a0fb4:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a0fb8:	bf1c      	itt	ne
 80a0fba:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a0fbe:	b2d8      	uxtbne	r0, r3
 80a0fc0:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0fc2:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80a0fc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0fca:	d1ef      	bne.n	80a0fac <_ZN7OneWire4crc8EPhh+0x14>
 80a0fcc:	e7e7      	b.n	80a0f9e <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80a0fce:	bd30      	pop	{r4, r5, pc}

080a0fd0 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a0fd0:	f000 bdb6 	b.w	80a1b40 <HAL_Pin_Map>

080a0fd4 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a0fd4:	f000 bdb4 	b.w	80a1b40 <HAL_Pin_Map>

080a0fd8 <_ZN16CASARIA_MCP23017C1Ev>:

//Comment line below out to turn off Serial logging
//#define LOGGING

//Constructor
CASARIA_MCP23017::CASARIA_MCP23017(){
 80a0fd8:	4603      	mov	r3, r0
 80a0fda:	4909      	ldr	r1, [pc, #36]	; (80a1000 <_ZN16CASARIA_MCP23017C1Ev+0x28>)
 80a0fdc:	f100 020c 	add.w	r2, r0, #12
 80a0fe0:	c903      	ldmia	r1, {r0, r1}
 80a0fe2:	e882 0003 	stmia.w	r2, {r0, r1}
 80a0fe6:	2200      	movs	r2, #0
 80a0fe8:	615a      	str	r2, [r3, #20]
 80a0fea:	619a      	str	r2, [r3, #24]
 80a0fec:	771a      	strb	r2, [r3, #28]
 80a0fee:	621a      	str	r2, [r3, #32]
 80a0ff0:	2120      	movs	r1, #32
 80a0ff2:	629a      	str	r2, [r3, #40]	; 0x28
 80a0ff4:	220a      	movs	r2, #10
 80a0ff6:	6259      	str	r1, [r3, #36]	; 0x24
 80a0ff8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80a0ffc:	4618      	mov	r0, r3
 80a0ffe:	4770      	bx	lr
 80a1000:	080a5038 	.word	0x080a5038

080a1004 <_ZN16CASARIA_MCP2301710setAddressEi>:

void CASARIA_MCP23017::setAddress(int a){
    address = a;
 80a1004:	6241      	str	r1, [r0, #36]	; 0x24
 80a1006:	4770      	bx	lr

080a1008 <_ZN16CASARIA_MCP230179setRelaysEi>:
    address |= (a0*1+a1*2+a2*4);
}


void CASARIA_MCP23017::setRelays(int num){
    if(num > 8){
 80a1008:	2908      	cmp	r1, #8
 80a100a:	f04f 0301 	mov.w	r3, #1
 80a100e:	dd08      	ble.n	80a1022 <_ZN16CASARIA_MCP230179setRelaysEi+0x1a>
        outputMap[0] = 0;
 80a1010:	2200      	movs	r2, #0
 80a1012:	60c2      	str	r2, [r0, #12]
        outputMap[1] = 256 - (1 << (num-8));
 80a1014:	f1a1 0208 	sub.w	r2, r1, #8
 80a1018:	4093      	lsls	r3, r2
 80a101a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80a101e:	6103      	str	r3, [r0, #16]
 80a1020:	e003      	b.n	80a102a <_ZN16CASARIA_MCP230179setRelaysEi+0x22>
    }else{
        outputMap[0] = 256 - (1 << num);
 80a1022:	408b      	lsls	r3, r1
 80a1024:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80a1028:	60c3      	str	r3, [r0, #12]
    }
    relayCount = num;
 80a102a:	6201      	str	r1, [r0, #32]
 80a102c:	4770      	bx	lr

080a102e <_ZN16CASARIA_MCP2301710setOutputsEii>:
void CASARIA_MCP23017::setInputs(int map1, int map2){
    inputMap[0] = map1;
    inputMap[1] = map2;
}
void CASARIA_MCP23017::setOutputs(int map1, int map2){
    outputMap[0] = map1;
 80a102e:	60c1      	str	r1, [r0, #12]
    outputMap[1] = map2;
 80a1030:	6102      	str	r2, [r0, #16]
 80a1032:	4770      	bx	lr

080a1034 <_ZN16CASARIA_MCP230175bitopEhhi>:
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
    }
    
}
byte CASARIA_MCP23017::bitop(byte b1, byte b2, int op){
    switch(op){
 80a1034:	2b02      	cmp	r3, #2
 80a1036:	d006      	beq.n	80a1046 <_ZN16CASARIA_MCP230175bitopEhhi+0x12>
 80a1038:	2b03      	cmp	r3, #3
 80a103a:	d007      	beq.n	80a104c <_ZN16CASARIA_MCP230175bitopEhhi+0x18>
 80a103c:	2b01      	cmp	r3, #1
 80a103e:	d108      	bne.n	80a1052 <_ZN16CASARIA_MCP230175bitopEhhi+0x1e>
        case 1:
            return b1 | b2;
 80a1040:	ea41 0002 	orr.w	r0, r1, r2
 80a1044:	4770      	bx	lr
        case 2:
            return b1 & ~b2;
 80a1046:	ea21 0002 	bic.w	r0, r1, r2
 80a104a:	4770      	bx	lr
        case 3:
            return b1 ^ b2;
 80a104c:	ea81 0002 	eor.w	r0, r1, r2
 80a1050:	4770      	bx	lr
    }
    return 0;
 80a1052:	2000      	movs	r0, #0
}
 80a1054:	4770      	bx	lr

080a1056 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>:
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a1056:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a105a:	461d      	mov	r5, r3
        byte cmds[length];
 80a105c:	3307      	adds	r3, #7
 80a105e:	f023 0307 	bic.w	r3, r3, #7
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a1062:	af00      	add	r7, sp, #0
        byte cmds[length];
 80a1064:	ebad 0d03 	sub.w	sp, sp, r3
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a1068:	4604      	mov	r4, r0
        byte cmds[length];
 80a106a:	466e      	mov	r6, sp
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
 80a106c:	f8d7 8020 	ldr.w	r8, [r7, #32]
        byte cmds[length];
        for(int i=0;i<length;i++){
 80a1070:	2300      	movs	r3, #0
 80a1072:	42ab      	cmp	r3, r5
 80a1074:	db04      	blt.n	80a1080 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x2a>
 80a1076:	f44f 7080 	mov.w	r0, #256	; 0x100
 80a107a:	fa5f f981 	uxtb.w	r9, r1
 80a107e:	e020      	b.n	80a10c2 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x6c>
            cmds[i] = icmds[i];
 80a1080:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80a1084:	54f0      	strb	r0, [r6, r3]
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
    return sendCommand(reg, cmds, length, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int icmds[], int length, int rlen){
        byte cmds[length];
        for(int i=0;i<length;i++){
 80a1086:	3301      	adds	r3, #1
 80a1088:	e7f3      	b.n	80a1072 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x1c>
            cmds[i] = icmds[i];
        }
    int status = 256;
    while(retrys < 4 && status > 0){
 80a108a:	b1e8      	cbz	r0, 80a10c8 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x72>
        Wire.beginTransmission(address);
 80a108c:	f002 f9ac 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a1090:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a1092:	f002 f826 	bl	80a30e2 <_ZN7TwoWire17beginTransmissionEi>
        Wire.write(reg);
 80a1096:	f002 f9a7 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a109a:	6803      	ldr	r3, [r0, #0]
 80a109c:	4649      	mov	r1, r9
 80a109e:	689b      	ldr	r3, [r3, #8]
 80a10a0:	4798      	blx	r3
        if(length > 0) Wire.write(cmds, length);
 80a10a2:	2d00      	cmp	r5, #0
 80a10a4:	dd06      	ble.n	80a10b4 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x5e>
 80a10a6:	f002 f99f 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a10aa:	6803      	ldr	r3, [r0, #0]
 80a10ac:	462a      	mov	r2, r5
 80a10ae:	68db      	ldr	r3, [r3, #12]
 80a10b0:	4631      	mov	r1, r6
 80a10b2:	4798      	blx	r3
        status = Wire.endTransmission();
 80a10b4:	f002 f998 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a10b8:	f002 f81a 	bl	80a30f0 <_ZN7TwoWire15endTransmissionEv>
        retrys++;
 80a10bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a10be:	3301      	adds	r3, #1
 80a10c0:	62a3      	str	r3, [r4, #40]	; 0x28
        byte cmds[length];
        for(int i=0;i<length;i++){
            cmds[i] = icmds[i];
        }
    int status = 256;
    while(retrys < 4 && status > 0){
 80a10c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a10c4:	2b03      	cmp	r3, #3
 80a10c6:	dde0      	ble.n	80a108a <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x34>
        Wire.write(reg);
        if(length > 0) Wire.write(cmds, length);
        status = Wire.endTransmission();
        retrys++;
    }
    initialized = false;
 80a10c8:	2500      	movs	r5, #0
    int ret = 256;
    if(retrys < 4){
 80a10ca:	2b03      	cmp	r3, #3
        Wire.write(reg);
        if(length > 0) Wire.write(cmds, length);
        status = Wire.endTransmission();
        retrys++;
    }
    initialized = false;
 80a10cc:	7225      	strb	r5, [r4, #8]
    int ret = 256;
    if(retrys < 4){
 80a10ce:	dc13      	bgt.n	80a10f8 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0xa2>
        initialized = true;
 80a10d0:	2301      	movs	r3, #1
 80a10d2:	7223      	strb	r3, [r4, #8]
        Wire.requestFrom(address, rlen);
 80a10d4:	f002 f988 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a10d8:	4642      	mov	r2, r8
 80a10da:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80a10dc:	f001 fff8 	bl	80a30d0 <_ZN7TwoWire11requestFromEii>
        int rbyte = 0;
        ret = 0;
 80a10e0:	462e      	mov	r6, r5
        while(rbyte < rlen){
 80a10e2:	4545      	cmp	r5, r8
 80a10e4:	da0a      	bge.n	80a10fc <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0xa6>
            int bread = Wire.read();
 80a10e6:	f002 f97f 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a10ea:	6803      	ldr	r3, [r0, #0]
            ret = (ret << 8) + bread;
            rbyte++;
 80a10ec:	3501      	adds	r5, #1
        initialized = true;
        Wire.requestFrom(address, rlen);
        int rbyte = 0;
        ret = 0;
        while(rbyte < rlen){
            int bread = Wire.read();
 80a10ee:	695b      	ldr	r3, [r3, #20]
 80a10f0:	4798      	blx	r3
            ret = (ret << 8) + bread;
 80a10f2:	eb00 2606 	add.w	r6, r0, r6, lsl #8
    if(retrys < 4){
        initialized = true;
        Wire.requestFrom(address, rlen);
        int rbyte = 0;
        ret = 0;
        while(rbyte < rlen){
 80a10f6:	e7f4      	b.n	80a10e2 <_ZN16CASARIA_MCP2301711sendCommandEiPiii+0x8c>
        if(length > 0) Wire.write(cmds, length);
        status = Wire.endTransmission();
        retrys++;
    }
    initialized = false;
    int ret = 256;
 80a10f8:	f44f 7680 	mov.w	r6, #256	; 0x100
            rbyte++;
        }
    }
    retrys = 0;
    return ret;
}
 80a10fc:	4630      	mov	r0, r6
            int bread = Wire.read();
            ret = (ret << 8) + bread;
            rbyte++;
        }
    }
    retrys = 0;
 80a10fe:	2300      	movs	r3, #0
 80a1100:	62a3      	str	r3, [r4, #40]	; 0x28
    return ret;
}
 80a1102:	46bd      	mov	sp, r7
 80a1104:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080a1108 <_ZN16CASARIA_MCP2301711sendCommandEi>:
        Particle.publish("Input Status", report);
        lastReadInputs = millis();
    }
    return shifted;
}
int CASARIA_MCP23017::sendCommand(int reg){
 80a1108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int cmds[1] = {0};
 80a110a:	2300      	movs	r3, #0
 80a110c:	aa04      	add	r2, sp, #16
    return sendCommand(reg, cmds, 0, 1);
 80a110e:	2401      	movs	r4, #1
        lastReadInputs = millis();
    }
    return shifted;
}
int CASARIA_MCP23017::sendCommand(int reg){
    int cmds[1] = {0};
 80a1110:	f842 3d04 	str.w	r3, [r2, #-4]!
    return sendCommand(reg, cmds, 0, 1);
 80a1114:	9400      	str	r4, [sp, #0]
 80a1116:	f7ff ff9e 	bl	80a1056 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>
}
 80a111a:	b004      	add	sp, #16
 80a111c:	bd10      	pop	{r4, pc}

080a111e <_ZN16CASARIA_MCP2301710readStatusEv>:
    int rbit = (1<<(relay-1));
    if((outputMap[0] & rbit) > 0) return 256;
    return (bankOneStatus & (1<<(relay-1))) ? 1 : 0;
}
int lastReadBanks=0;
void CASARIA_MCP23017::readStatus(){
 80a111e:	b510      	push	{r4, lr}
    bankOneStatus = sendCommand(18);
 80a1120:	2112      	movs	r1, #18
    int rbit = (1<<(relay-1));
    if((outputMap[0] & rbit) > 0) return 256;
    return (bankOneStatus & (1<<(relay-1))) ? 1 : 0;
}
int lastReadBanks=0;
void CASARIA_MCP23017::readStatus(){
 80a1122:	4604      	mov	r4, r0
    bankOneStatus = sendCommand(18);
 80a1124:	f7ff fff0 	bl	80a1108 <_ZN16CASARIA_MCP2301711sendCommandEi>
    bankTwoStatus = sendCommand(19);
 80a1128:	2113      	movs	r1, #19
    if((outputMap[0] & rbit) > 0) return 256;
    return (bankOneStatus & (1<<(relay-1))) ? 1 : 0;
}
int lastReadBanks=0;
void CASARIA_MCP23017::readStatus(){
    bankOneStatus = sendCommand(18);
 80a112a:	6020      	str	r0, [r4, #0]
    bankTwoStatus = sendCommand(19);
 80a112c:	4620      	mov	r0, r4
 80a112e:	f7ff ffeb 	bl	80a1108 <_ZN16CASARIA_MCP2301711sendCommandEi>
 80a1132:	6060      	str	r0, [r4, #4]
 80a1134:	bd10      	pop	{r4, pc}

080a1136 <_ZN16CASARIA_MCP2301711sendCommandEii>:
}
int CASARIA_MCP23017::sendCommand(int reg){
    int cmds[1] = {0};
    return sendCommand(reg, cmds, 0, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmd){
 80a1136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int cmds[1] = {cmd};
 80a1138:	ac04      	add	r4, sp, #16
 80a113a:	f844 2d04 	str.w	r2, [r4, #-4]!
    return sendCommand(reg, cmds, 1, 1);
 80a113e:	2301      	movs	r3, #1
 80a1140:	9300      	str	r3, [sp, #0]
 80a1142:	4622      	mov	r2, r4
 80a1144:	f7ff ff87 	bl	80a1056 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>
}
 80a1148:	b004      	add	sp, #16
 80a114a:	bd10      	pop	{r4, pc}

080a114c <_ZN16CASARIA_MCP2301716setBankOneStatusEi>:
    setBankTwoStatus(bankTwoStatus | (~outputMap[1] & 255));
}



void CASARIA_MCP23017::setBankOneStatus(int status){
 80a114c:	b510      	push	{r4, lr}
 80a114e:	4604      	mov	r4, r0
    sendCommand(18, status);
 80a1150:	460a      	mov	r2, r1
 80a1152:	2112      	movs	r1, #18
 80a1154:	f7ff ffef 	bl	80a1136 <_ZN16CASARIA_MCP2301711sendCommandEii>
    readStatus();
 80a1158:	4620      	mov	r0, r4
}
 80a115a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}



void CASARIA_MCP23017::setBankOneStatus(int status){
    sendCommand(18, status);
    readStatus();
 80a115e:	f7ff bfde 	b.w	80a111e <_ZN16CASARIA_MCP2301710readStatusEv>

080a1162 <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>:
}
void CASARIA_MCP23017::setBankTwoStatus(int status){
 80a1162:	b510      	push	{r4, lr}
 80a1164:	4604      	mov	r4, r0
    sendCommand(19, status);
 80a1166:	460a      	mov	r2, r1
 80a1168:	2113      	movs	r1, #19
 80a116a:	f7ff ffe4 	bl	80a1136 <_ZN16CASARIA_MCP2301711sendCommandEii>
    readStatus();
 80a116e:	4620      	mov	r0, r4
}
 80a1170:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sendCommand(18, status);
    readStatus();
}
void CASARIA_MCP23017::setBankTwoStatus(int status){
    sendCommand(19, status);
    readStatus();
 80a1174:	f7ff bfd3 	b.w	80a111e <_ZN16CASARIA_MCP2301710readStatusEv>

080a1178 <_ZN16CASARIA_MCP230177relayOpEii>:
void CASARIA_MCP23017::toggleRelay(int relay){
    relayOp(relay, 3);
}

void CASARIA_MCP23017::relayOp(int relay, int op){
    if(relay > 8){
 80a1178:	2908      	cmp	r1, #8
}
void CASARIA_MCP23017::toggleRelay(int relay){
    relayOp(relay, 3);
}

void CASARIA_MCP23017::relayOp(int relay, int op){
 80a117a:	b538      	push	{r3, r4, r5, lr}
 80a117c:	4605      	mov	r5, r0
 80a117e:	4613      	mov	r3, r2
 80a1180:	f04f 0401 	mov.w	r4, #1
    if(relay > 8){
 80a1184:	dd0f      	ble.n	80a11a6 <_ZN16CASARIA_MCP230177relayOpEii+0x2e>
        byte rbit = (1<<(relay-9));
 80a1186:	3909      	subs	r1, #9
        if((outputMap[1] & rbit) > 0) return;
 80a1188:	7c02      	ldrb	r2, [r0, #16]
    relayOp(relay, 3);
}

void CASARIA_MCP23017::relayOp(int relay, int op){
    if(relay > 8){
        byte rbit = (1<<(relay-9));
 80a118a:	fa04 f101 	lsl.w	r1, r4, r1
        if((outputMap[1] & rbit) > 0) return;
 80a118e:	420a      	tst	r2, r1
 80a1190:	d119      	bne.n	80a11c6 <_ZN16CASARIA_MCP230177relayOpEii+0x4e>
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
 80a1192:	b2ca      	uxtb	r2, r1
 80a1194:	7901      	ldrb	r1, [r0, #4]
 80a1196:	f7ff ff4d 	bl	80a1034 <_ZN16CASARIA_MCP230175bitopEhhi>
 80a119a:	4601      	mov	r1, r0
 80a119c:	4628      	mov	r0, r5
        byte rbit = (1<<(relay-1));
        if((outputMap[0] & rbit) > 0) return;
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
    }
    
}
 80a119e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

void CASARIA_MCP23017::relayOp(int relay, int op){
    if(relay > 8){
        byte rbit = (1<<(relay-9));
        if((outputMap[1] & rbit) > 0) return;
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
 80a11a2:	f7ff bfde 	b.w	80a1162 <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>
    }else{
        byte rbit = (1<<(relay-1));
 80a11a6:	3901      	subs	r1, #1
        if((outputMap[0] & rbit) > 0) return;
 80a11a8:	7b02      	ldrb	r2, [r0, #12]
    if(relay > 8){
        byte rbit = (1<<(relay-9));
        if((outputMap[1] & rbit) > 0) return;
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
    }else{
        byte rbit = (1<<(relay-1));
 80a11aa:	fa04 f101 	lsl.w	r1, r4, r1
        if((outputMap[0] & rbit) > 0) return;
 80a11ae:	420a      	tst	r2, r1
 80a11b0:	d109      	bne.n	80a11c6 <_ZN16CASARIA_MCP230177relayOpEii+0x4e>
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
 80a11b2:	b2ca      	uxtb	r2, r1
 80a11b4:	7801      	ldrb	r1, [r0, #0]
 80a11b6:	f7ff ff3d 	bl	80a1034 <_ZN16CASARIA_MCP230175bitopEhhi>
 80a11ba:	4601      	mov	r1, r0
 80a11bc:	4628      	mov	r0, r5
    }
    
}
 80a11be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        if((outputMap[1] & rbit) > 0) return;
        setBankTwoStatus(bitop(bankTwoStatus, rbit, op));
    }else{
        byte rbit = (1<<(relay-1));
        if((outputMap[0] & rbit) > 0) return;
        setBankOneStatus(bitop(bankOneStatus, rbit, op));
 80a11c2:	f7ff bfc3 	b.w	80a114c <_ZN16CASARIA_MCP2301716setBankOneStatusEi>
 80a11c6:	bd38      	pop	{r3, r4, r5, pc}

080a11c8 <_ZN16CASARIA_MCP2301716turnOffAllRelaysEv>:
void CASARIA_MCP23017::turnOnAllRelays(){
    setBankOneStatus(bankOneStatus & outputMap[0]);
    setBankTwoStatus(bankTwoStatus & outputMap[1]);
}

void CASARIA_MCP23017::turnOffAllRelays(){
 80a11c8:	b510      	push	{r4, lr}

    setBankOneStatus(bankOneStatus | (~outputMap[0] & 255));
 80a11ca:	68c1      	ldr	r1, [r0, #12]
void CASARIA_MCP23017::turnOnAllRelays(){
    setBankOneStatus(bankOneStatus & outputMap[0]);
    setBankTwoStatus(bankTwoStatus & outputMap[1]);
}

void CASARIA_MCP23017::turnOffAllRelays(){
 80a11cc:	4604      	mov	r4, r0

    setBankOneStatus(bankOneStatus | (~outputMap[0] & 255));
 80a11ce:	43c9      	mvns	r1, r1
 80a11d0:	6803      	ldr	r3, [r0, #0]
 80a11d2:	b2c9      	uxtb	r1, r1
 80a11d4:	4319      	orrs	r1, r3
 80a11d6:	f7ff ffb9 	bl	80a114c <_ZN16CASARIA_MCP2301716setBankOneStatusEi>
    setBankTwoStatus(bankTwoStatus | (~outputMap[1] & 255));
 80a11da:	6921      	ldr	r1, [r4, #16]
 80a11dc:	6863      	ldr	r3, [r4, #4]
 80a11de:	43c9      	mvns	r1, r1
 80a11e0:	b2c9      	uxtb	r1, r1
 80a11e2:	4620      	mov	r0, r4
}
 80a11e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
}

void CASARIA_MCP23017::turnOffAllRelays(){

    setBankOneStatus(bankOneStatus | (~outputMap[0] & 255));
    setBankTwoStatus(bankTwoStatus | (~outputMap[1] & 255));
 80a11e8:	4319      	orrs	r1, r3
 80a11ea:	f7ff bfba 	b.w	80a1162 <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>

080a11ee <_ZN16CASARIA_MCP2301711sendCommandEiPii>:
}
int CASARIA_MCP23017::sendCommand(int reg, int cmd){
    int cmds[1] = {cmd};
    return sendCommand(reg, cmds, 1, 1);
}
int CASARIA_MCP23017::sendCommand(int reg, int cmds[], int length){
 80a11ee:	b513      	push	{r0, r1, r4, lr}
    return sendCommand(reg, cmds, length, 1);
 80a11f0:	2401      	movs	r4, #1
 80a11f2:	9400      	str	r4, [sp, #0]
 80a11f4:	f7ff ff2f 	bl	80a1056 <_ZN16CASARIA_MCP2301711sendCommandEiPiii>
}
 80a11f8:	b002      	add	sp, #8
 80a11fa:	bd10      	pop	{r4, pc}

080a11fc <_ZN16CASARIA_MCP230174initEv>:
    }else{
        outputMap[0] ^= (1<<(num-1));
    }
    iosetCustom = true;
}
void CASARIA_MCP23017::init(){
 80a11fc:	b510      	push	{r4, lr}
 80a11fe:	4604      	mov	r4, r0
    //Start I2C port
    Wire.begin();
 80a1200:	f002 f8f2 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a1204:	f001 ff52 	bl	80a30ac <_ZN7TwoWire5beginEv>
    //Open connection to specified address
    sendCommand(0x00, outputMap, 2);
 80a1208:	f104 020c 	add.w	r2, r4, #12
 80a120c:	2302      	movs	r3, #2
 80a120e:	2100      	movs	r1, #0
 80a1210:	4620      	mov	r0, r4
 80a1212:	f7ff ffec 	bl	80a11ee <_ZN16CASARIA_MCP2301711sendCommandEiPii>
    sendCommand(0x0C, inputMap, 2);                      
 80a1216:	f104 0214 	add.w	r2, r4, #20
 80a121a:	4620      	mov	r0, r4
 80a121c:	2302      	movs	r3, #2
 80a121e:	210c      	movs	r1, #12
 80a1220:	f7ff ffe5 	bl	80a11ee <_ZN16CASARIA_MCP2301711sendCommandEiPii>
    readStatus();
 80a1224:	4620      	mov	r0, r4
}
 80a1226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    //Start I2C port
    Wire.begin();
    //Open connection to specified address
    sendCommand(0x00, outputMap, 2);
    sendCommand(0x0C, inputMap, 2);                      
    readStatus();
 80a122a:	f7ff bf78 	b.w	80a111e <_ZN16CASARIA_MCP2301710readStatusEv>
	...

080a1230 <_ZN16CASARIA_MCP230179relayTalkE6String>:
    }
    retrys = 0;
    return ret;
}

int CASARIA_MCP23017::relayTalk(String command){
 80a1230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a1234:	4688      	mov	r8, r1
 80a1236:	b091      	sub	sp, #68	; 0x44
    int bank=0;
    int relay=0;
    int op=0;
    int p=command.indexOf(" ");
 80a1238:	49ab      	ldr	r1, [pc, #684]	; (80a14e8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2b8>)
    }
    retrys = 0;
    return ret;
}

int CASARIA_MCP23017::relayTalk(String command){
 80a123a:	4605      	mov	r5, r0
    int bank=0;
    int relay=0;
    int op=0;
    int p=command.indexOf(" ");
 80a123c:	a80c      	add	r0, sp, #48	; 0x30
 80a123e:	f000 ff38 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1242:	a90c      	add	r1, sp, #48	; 0x30
 80a1244:	4640      	mov	r0, r8
 80a1246:	f000 ffc1 	bl	80a21cc <_ZNK6String7indexOfERKS_>
 80a124a:	4682      	mov	sl, r0
 80a124c:	a80c      	add	r0, sp, #48	; 0x30
 80a124e:	f000 fee9 	bl	80a2024 <_ZN6StringD1Ev>
    bool all=false;
    bool relay_next=false;
    bool bank_next=false;
    String word;
 80a1252:	49a6      	ldr	r1, [pc, #664]	; (80a14ec <_ZN16CASARIA_MCP230179relayTalkE6String+0x2bc>)
 80a1254:	a804      	add	r0, sp, #16
 80a1256:	f000 ff2c 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
    if(p > -1){
 80a125a:	f1ba 0f00 	cmp.w	sl, #0
 80a125e:	f2c0 815b 	blt.w	80a1518 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2e8>
 80a1262:	2600      	movs	r6, #0
 80a1264:	4634      	mov	r4, r6
 80a1266:	46b1      	mov	r9, r6
 80a1268:	4637      	mov	r7, r6
 80a126a:	9600      	str	r6, [sp, #0]
 80a126c:	9601      	str	r6, [sp, #4]
        while(command.length() > 0){
 80a126e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80a1272:	2b00      	cmp	r3, #0
 80a1274:	f000 80fc 	beq.w	80a1470 <_ZN16CASARIA_MCP230179relayTalkE6String+0x240>
            if(p > -1){
 80a1278:	f1ba 0f00 	cmp.w	sl, #0
 80a127c:	db26      	blt.n	80a12cc <_ZN16CASARIA_MCP230179relayTalkE6String+0x9c>
                word = command.substring(0, p);
 80a127e:	4653      	mov	r3, sl
 80a1280:	2200      	movs	r2, #0
 80a1282:	4641      	mov	r1, r8
 80a1284:	a80c      	add	r0, sp, #48	; 0x30
 80a1286:	f000 ffa5 	bl	80a21d4 <_ZNK6String9substringEjj>
 80a128a:	a90c      	add	r1, sp, #48	; 0x30
 80a128c:	a804      	add	r0, sp, #16
 80a128e:	f000 ff5a 	bl	80a2146 <_ZN6StringaSEOS_>
 80a1292:	a80c      	add	r0, sp, #48	; 0x30
 80a1294:	f000 fec6 	bl	80a2024 <_ZN6StringD1Ev>
                command = command.substring(p+1);
 80a1298:	f10a 0201 	add.w	r2, sl, #1
 80a129c:	4641      	mov	r1, r8
 80a129e:	a80c      	add	r0, sp, #48	; 0x30
 80a12a0:	f000 ffc0 	bl	80a2224 <_ZNK6String9substringEj>
 80a12a4:	a90c      	add	r1, sp, #48	; 0x30
 80a12a6:	4640      	mov	r0, r8
 80a12a8:	f000 ff4d 	bl	80a2146 <_ZN6StringaSEOS_>
 80a12ac:	a80c      	add	r0, sp, #48	; 0x30
 80a12ae:	f000 feb9 	bl	80a2024 <_ZN6StringD1Ev>
                p=command.indexOf(" ");
 80a12b2:	498d      	ldr	r1, [pc, #564]	; (80a14e8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2b8>)
 80a12b4:	a80c      	add	r0, sp, #48	; 0x30
 80a12b6:	f000 fefc 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a12ba:	a90c      	add	r1, sp, #48	; 0x30
 80a12bc:	4640      	mov	r0, r8
 80a12be:	f000 ff85 	bl	80a21cc <_ZNK6String7indexOfERKS_>
 80a12c2:	4682      	mov	sl, r0
 80a12c4:	a80c      	add	r0, sp, #48	; 0x30
 80a12c6:	f000 fead 	bl	80a2024 <_ZN6StringD1Ev>
 80a12ca:	e007      	b.n	80a12dc <_ZN16CASARIA_MCP230179relayTalkE6String+0xac>
            }else{
                word = command;
 80a12cc:	4641      	mov	r1, r8
 80a12ce:	a804      	add	r0, sp, #16
 80a12d0:	f000 ff1f 	bl	80a2112 <_ZN6StringaSERKS_>
                command = "";
 80a12d4:	4985      	ldr	r1, [pc, #532]	; (80a14ec <_ZN16CASARIA_MCP230179relayTalkE6String+0x2bc>)
 80a12d6:	4640      	mov	r0, r8
 80a12d8:	f000 ff3d 	bl	80a2156 <_ZN6StringaSEPKc>
            }
            if(word.equalsIgnoreCase("on") || word.equalsIgnoreCase("activate")){
 80a12dc:	4984      	ldr	r1, [pc, #528]	; (80a14f0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2c0>)
 80a12de:	a808      	add	r0, sp, #32
 80a12e0:	f000 fee7 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a12e4:	a908      	add	r1, sp, #32
 80a12e6:	a804      	add	r0, sp, #16
 80a12e8:	f000 ff46 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a12ec:	b980      	cbnz	r0, 80a1310 <_ZN16CASARIA_MCP230179relayTalkE6String+0xe0>
 80a12ee:	4981      	ldr	r1, [pc, #516]	; (80a14f4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2c4>)
 80a12f0:	a80c      	add	r0, sp, #48	; 0x30
 80a12f2:	f000 fede 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a12f6:	a90c      	add	r1, sp, #48	; 0x30
 80a12f8:	a804      	add	r0, sp, #16
 80a12fa:	f000 ff3d 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a12fe:	f110 0b00 	adds.w	fp, r0, #0
 80a1302:	a80c      	add	r0, sp, #48	; 0x30
 80a1304:	bf18      	it	ne
 80a1306:	f04f 0b01 	movne.w	fp, #1
 80a130a:	f000 fe8b 	bl	80a2024 <_ZN6StringD1Ev>
 80a130e:	e001      	b.n	80a1314 <_ZN16CASARIA_MCP230179relayTalkE6String+0xe4>
 80a1310:	f04f 0b01 	mov.w	fp, #1
 80a1314:	a808      	add	r0, sp, #32
 80a1316:	f000 fe85 	bl	80a2024 <_ZN6StringD1Ev>
 80a131a:	f1bb 0f00 	cmp.w	fp, #0
 80a131e:	d005      	beq.n	80a132c <_ZN16CASARIA_MCP230179relayTalkE6String+0xfc>
                if(op == 0 || bank > 0) op=2;
 80a1320:	b11c      	cbz	r4, 80a132a <_ZN16CASARIA_MCP230179relayTalkE6String+0xfa>
 80a1322:	2f00      	cmp	r7, #0
 80a1324:	bf18      	it	ne
 80a1326:	2402      	movne	r4, #2
 80a1328:	e000      	b.n	80a132c <_ZN16CASARIA_MCP230179relayTalkE6String+0xfc>
 80a132a:	2402      	movs	r4, #2
            }
            if(word.equalsIgnoreCase("off") || word.equalsIgnoreCase("deactivate")){
 80a132c:	4972      	ldr	r1, [pc, #456]	; (80a14f8 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2c8>)
 80a132e:	a808      	add	r0, sp, #32
 80a1330:	f000 febf 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1334:	a908      	add	r1, sp, #32
 80a1336:	a804      	add	r0, sp, #16
 80a1338:	f000 ff1e 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a133c:	b980      	cbnz	r0, 80a1360 <_ZN16CASARIA_MCP230179relayTalkE6String+0x130>
 80a133e:	496f      	ldr	r1, [pc, #444]	; (80a14fc <_ZN16CASARIA_MCP230179relayTalkE6String+0x2cc>)
 80a1340:	a80c      	add	r0, sp, #48	; 0x30
 80a1342:	f000 feb6 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1346:	a90c      	add	r1, sp, #48	; 0x30
 80a1348:	a804      	add	r0, sp, #16
 80a134a:	f000 ff15 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a134e:	f110 0b00 	adds.w	fp, r0, #0
 80a1352:	a80c      	add	r0, sp, #48	; 0x30
 80a1354:	bf18      	it	ne
 80a1356:	f04f 0b01 	movne.w	fp, #1
 80a135a:	f000 fe63 	bl	80a2024 <_ZN6StringD1Ev>
 80a135e:	e001      	b.n	80a1364 <_ZN16CASARIA_MCP230179relayTalkE6String+0x134>
 80a1360:	f04f 0b01 	mov.w	fp, #1
 80a1364:	a808      	add	r0, sp, #32
 80a1366:	f000 fe5d 	bl	80a2024 <_ZN6StringD1Ev>
                op=1;
 80a136a:	f1bb 0f00 	cmp.w	fp, #0
            }
            if(word.equalsIgnoreCase("toggle") || word.equalsIgnoreCase("flip")){
 80a136e:	4964      	ldr	r1, [pc, #400]	; (80a1500 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2d0>)
 80a1370:	a808      	add	r0, sp, #32
            }
            if(word.equalsIgnoreCase("on") || word.equalsIgnoreCase("activate")){
                if(op == 0 || bank > 0) op=2;
            }
            if(word.equalsIgnoreCase("off") || word.equalsIgnoreCase("deactivate")){
                op=1;
 80a1372:	bf18      	it	ne
 80a1374:	2401      	movne	r4, #1
            }
            if(word.equalsIgnoreCase("toggle") || word.equalsIgnoreCase("flip")){
 80a1376:	f000 fe9c 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a137a:	a908      	add	r1, sp, #32
 80a137c:	a804      	add	r0, sp, #16
 80a137e:	f000 fefb 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a1382:	b980      	cbnz	r0, 80a13a6 <_ZN16CASARIA_MCP230179relayTalkE6String+0x176>
 80a1384:	495f      	ldr	r1, [pc, #380]	; (80a1504 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2d4>)
 80a1386:	a80c      	add	r0, sp, #48	; 0x30
 80a1388:	f000 fe93 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a138c:	a90c      	add	r1, sp, #48	; 0x30
 80a138e:	a804      	add	r0, sp, #16
 80a1390:	f000 fef2 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a1394:	f110 0b00 	adds.w	fp, r0, #0
 80a1398:	a80c      	add	r0, sp, #48	; 0x30
 80a139a:	bf18      	it	ne
 80a139c:	f04f 0b01 	movne.w	fp, #1
 80a13a0:	f000 fe40 	bl	80a2024 <_ZN6StringD1Ev>
 80a13a4:	e001      	b.n	80a13aa <_ZN16CASARIA_MCP230179relayTalkE6String+0x17a>
 80a13a6:	f04f 0b01 	mov.w	fp, #1
 80a13aa:	a808      	add	r0, sp, #32
 80a13ac:	f000 fe3a 	bl	80a2024 <_ZN6StringD1Ev>
                op=3;
            }
            if(relay_next){
 80a13b0:	9b00      	ldr	r3, [sp, #0]
            }
            if(word.equalsIgnoreCase("off") || word.equalsIgnoreCase("deactivate")){
                op=1;
            }
            if(word.equalsIgnoreCase("toggle") || word.equalsIgnoreCase("flip")){
                op=3;
 80a13b2:	f1bb 0f00 	cmp.w	fp, #0
 80a13b6:	bf18      	it	ne
 80a13b8:	2403      	movne	r4, #3
            }
            if(relay_next){
 80a13ba:	b14b      	cbz	r3, 80a13d0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x1a0>
                int test = word.toInt();
 80a13bc:	a804      	add	r0, sp, #16
 80a13be:	f000 ff38 	bl	80a2232 <_ZNK6String5toIntEv>
                if(test > 0){
 80a13c2:	2800      	cmp	r0, #0
 80a13c4:	bfc8      	it	gt
 80a13c6:	4681      	movgt	r9, r0
 80a13c8:	9b00      	ldr	r3, [sp, #0]
 80a13ca:	bfc8      	it	gt
 80a13cc:	2300      	movgt	r3, #0
 80a13ce:	9300      	str	r3, [sp, #0]
                    relay = test;
                    relay_next = false;
                }
            }
            if(bank_next){
 80a13d0:	b136      	cbz	r6, 80a13e0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x1b0>
                int test = word.toInt();
 80a13d2:	a804      	add	r0, sp, #16
 80a13d4:	f000 ff2d 	bl	80a2232 <_ZNK6String5toIntEv>
                if(test > 0){
 80a13d8:	2800      	cmp	r0, #0
 80a13da:	bfc4      	itt	gt
 80a13dc:	4607      	movgt	r7, r0
 80a13de:	2600      	movgt	r6, #0
                    bank = test;
                    bank_next = false;
                }
            }
            if(word.equalsIgnoreCase("relay") || word.equalsIgnoreCase("output")){
 80a13e0:	4949      	ldr	r1, [pc, #292]	; (80a1508 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2d8>)
 80a13e2:	a808      	add	r0, sp, #32
 80a13e4:	f000 fe65 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a13e8:	a908      	add	r1, sp, #32
 80a13ea:	a804      	add	r0, sp, #16
 80a13ec:	f000 fec4 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a13f0:	b980      	cbnz	r0, 80a1414 <_ZN16CASARIA_MCP230179relayTalkE6String+0x1e4>
 80a13f2:	4946      	ldr	r1, [pc, #280]	; (80a150c <_ZN16CASARIA_MCP230179relayTalkE6String+0x2dc>)
 80a13f4:	a80c      	add	r0, sp, #48	; 0x30
 80a13f6:	f000 fe5c 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a13fa:	a90c      	add	r1, sp, #48	; 0x30
 80a13fc:	a804      	add	r0, sp, #16
 80a13fe:	f000 febb 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a1402:	f110 0b00 	adds.w	fp, r0, #0
 80a1406:	a80c      	add	r0, sp, #48	; 0x30
 80a1408:	bf18      	it	ne
 80a140a:	f04f 0b01 	movne.w	fp, #1
 80a140e:	f000 fe09 	bl	80a2024 <_ZN6StringD1Ev>
 80a1412:	e001      	b.n	80a1418 <_ZN16CASARIA_MCP230179relayTalkE6String+0x1e8>
 80a1414:	f04f 0b01 	mov.w	fp, #1
 80a1418:	a808      	add	r0, sp, #32
 80a141a:	f000 fe03 	bl	80a2024 <_ZN6StringD1Ev>
                relay_next = true;
 80a141e:	9b00      	ldr	r3, [sp, #0]
 80a1420:	f1bb 0f00 	cmp.w	fp, #0
 80a1424:	bf18      	it	ne
 80a1426:	2301      	movne	r3, #1
            }
            if(word.equalsIgnoreCase("bank")){
 80a1428:	4939      	ldr	r1, [pc, #228]	; (80a1510 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2e0>)
 80a142a:	a80c      	add	r0, sp, #48	; 0x30
                    bank = test;
                    bank_next = false;
                }
            }
            if(word.equalsIgnoreCase("relay") || word.equalsIgnoreCase("output")){
                relay_next = true;
 80a142c:	9300      	str	r3, [sp, #0]
            }
            if(word.equalsIgnoreCase("bank")){
 80a142e:	f000 fe40 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1432:	a90c      	add	r1, sp, #48	; 0x30
 80a1434:	a804      	add	r0, sp, #16
 80a1436:	f000 fe9f 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a143a:	4683      	mov	fp, r0
 80a143c:	a80c      	add	r0, sp, #48	; 0x30
 80a143e:	f000 fdf1 	bl	80a2024 <_ZN6StringD1Ev>
                bank_next = true;
 80a1442:	f1bb 0f00 	cmp.w	fp, #0
            }
            if(word.equalsIgnoreCase("all")){
 80a1446:	4933      	ldr	r1, [pc, #204]	; (80a1514 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2e4>)
 80a1448:	a80c      	add	r0, sp, #48	; 0x30
            }
            if(word.equalsIgnoreCase("relay") || word.equalsIgnoreCase("output")){
                relay_next = true;
            }
            if(word.equalsIgnoreCase("bank")){
                bank_next = true;
 80a144a:	bf18      	it	ne
 80a144c:	2601      	movne	r6, #1
            }
            if(word.equalsIgnoreCase("all")){
 80a144e:	f000 fe30 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1452:	a90c      	add	r1, sp, #48	; 0x30
 80a1454:	a804      	add	r0, sp, #16
 80a1456:	f000 fe8f 	bl	80a2178 <_ZNK6String16equalsIgnoreCaseERKS_>
 80a145a:	4683      	mov	fp, r0
 80a145c:	a80c      	add	r0, sp, #48	; 0x30
 80a145e:	f000 fde1 	bl	80a2024 <_ZN6StringD1Ev>
                all = true;
 80a1462:	9b01      	ldr	r3, [sp, #4]
 80a1464:	f1bb 0f00 	cmp.w	fp, #0
 80a1468:	bf18      	it	ne
 80a146a:	2301      	movne	r3, #1
 80a146c:	9301      	str	r3, [sp, #4]
 80a146e:	e6fe      	b.n	80a126e <_ZN16CASARIA_MCP230179relayTalkE6String+0x3e>
            }
            
        }
    }
    if(all){
 80a1470:	9b01      	ldr	r3, [sp, #4]
 80a1472:	2b00      	cmp	r3, #0
 80a1474:	d033      	beq.n	80a14de <_ZN16CASARIA_MCP230179relayTalkE6String+0x2ae>
        if(bank < 2){
 80a1476:	2f01      	cmp	r7, #1
 80a1478:	dd07      	ble.n	80a148a <_ZN16CASARIA_MCP230179relayTalkE6String+0x25a>
            else if(op == 3) obyte = ~bankOneStatus;
            setBankOneStatus(obyte);
        }
        if(bank != 1){
            int obyte;
            if(op == 1) obyte = bankTwoStatus | (~outputMap[0] & 255);
 80a147a:	2c01      	cmp	r4, #1
 80a147c:	d11f      	bne.n	80a14be <_ZN16CASARIA_MCP230179relayTalkE6String+0x28e>
 80a147e:	68eb      	ldr	r3, [r5, #12]
 80a1480:	686a      	ldr	r2, [r5, #4]
 80a1482:	43db      	mvns	r3, r3
 80a1484:	b2db      	uxtb	r3, r3
 80a1486:	4313      	orrs	r3, r2
 80a1488:	e023      	b.n	80a14d2 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2a2>
        }
    }
    if(all){
        if(bank < 2){
            int obyte;
            if(op == 1) obyte = bankOneStatus | (~outputMap[0] & 255);
 80a148a:	2c01      	cmp	r4, #1
 80a148c:	d105      	bne.n	80a149a <_ZN16CASARIA_MCP230179relayTalkE6String+0x26a>
 80a148e:	68eb      	ldr	r3, [r5, #12]
 80a1490:	682a      	ldr	r2, [r5, #0]
 80a1492:	43db      	mvns	r3, r3
 80a1494:	b2db      	uxtb	r3, r3
 80a1496:	4313      	orrs	r3, r2
 80a1498:	e009      	b.n	80a14ae <_ZN16CASARIA_MCP230179relayTalkE6String+0x27e>
            else if(op == 2) obyte = bankOneStatus & outputMap[0];
 80a149a:	2c02      	cmp	r4, #2
 80a149c:	d103      	bne.n	80a14a6 <_ZN16CASARIA_MCP230179relayTalkE6String+0x276>
 80a149e:	682a      	ldr	r2, [r5, #0]
 80a14a0:	68eb      	ldr	r3, [r5, #12]
 80a14a2:	4013      	ands	r3, r2
 80a14a4:	e003      	b.n	80a14ae <_ZN16CASARIA_MCP230179relayTalkE6String+0x27e>
            else if(op == 3) obyte = ~bankOneStatus;
 80a14a6:	2c03      	cmp	r4, #3
 80a14a8:	d102      	bne.n	80a14b0 <_ZN16CASARIA_MCP230179relayTalkE6String+0x280>
 80a14aa:	682b      	ldr	r3, [r5, #0]
 80a14ac:	43db      	mvns	r3, r3
 80a14ae:	9302      	str	r3, [sp, #8]
            setBankOneStatus(obyte);
 80a14b0:	9902      	ldr	r1, [sp, #8]
 80a14b2:	4628      	mov	r0, r5
 80a14b4:	f7ff fe4a 	bl	80a114c <_ZN16CASARIA_MCP2301716setBankOneStatusEi>
        }
        if(bank != 1){
 80a14b8:	2f01      	cmp	r7, #1
 80a14ba:	d034      	beq.n	80a1526 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2f6>
 80a14bc:	e7dd      	b.n	80a147a <_ZN16CASARIA_MCP230179relayTalkE6String+0x24a>
            int obyte;
            if(op == 1) obyte = bankTwoStatus | (~outputMap[0] & 255);
            else if(op == 2) obyte = bankTwoStatus & outputMap[0];
 80a14be:	2c02      	cmp	r4, #2
 80a14c0:	d103      	bne.n	80a14ca <_ZN16CASARIA_MCP230179relayTalkE6String+0x29a>
 80a14c2:	686a      	ldr	r2, [r5, #4]
 80a14c4:	68eb      	ldr	r3, [r5, #12]
 80a14c6:	4013      	ands	r3, r2
 80a14c8:	e003      	b.n	80a14d2 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2a2>
            else if(op == 3) obyte = ~bankTwoStatus;
 80a14ca:	2c03      	cmp	r4, #3
 80a14cc:	d102      	bne.n	80a14d4 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2a4>
 80a14ce:	686b      	ldr	r3, [r5, #4]
 80a14d0:	43db      	mvns	r3, r3
 80a14d2:	9303      	str	r3, [sp, #12]
            setBankTwoStatus(obyte);
 80a14d4:	9903      	ldr	r1, [sp, #12]
 80a14d6:	4628      	mov	r0, r5
 80a14d8:	f7ff fe43 	bl	80a1162 <_ZN16CASARIA_MCP2301716setBankTwoStatusEi>
 80a14dc:	e023      	b.n	80a1526 <_ZN16CASARIA_MCP230179relayTalkE6String+0x2f6>
        }
    }else{
        if(bank > 0) relay+=((bank-1)*8);
 80a14de:	b1ef      	cbz	r7, 80a151c <_ZN16CASARIA_MCP230179relayTalkE6String+0x2ec>
 80a14e0:	3f01      	subs	r7, #1
 80a14e2:	eb09 09c7 	add.w	r9, r9, r7, lsl #3
 80a14e6:	e019      	b.n	80a151c <_ZN16CASARIA_MCP230179relayTalkE6String+0x2ec>
 80a14e8:	080a5156 	.word	0x080a5156
 80a14ec:	080a5178 	.word	0x080a5178
 80a14f0:	080a4f77 	.word	0x080a4f77
 80a14f4:	080a4f80 	.word	0x080a4f80
 80a14f8:	080a4f7a 	.word	0x080a4f7a
 80a14fc:	080a4f7e 	.word	0x080a4f7e
 80a1500:	080a4f89 	.word	0x080a4f89
 80a1504:	080a4f90 	.word	0x080a4f90
 80a1508:	080a4f95 	.word	0x080a4f95
 80a150c:	080a4f9b 	.word	0x080a4f9b
 80a1510:	080a4fa2 	.word	0x080a4fa2
 80a1514:	080a4fa7 	.word	0x080a4fa7
}

int CASARIA_MCP23017::relayTalk(String command){
    int bank=0;
    int relay=0;
    int op=0;
 80a1518:	2400      	movs	r4, #0
    return ret;
}

int CASARIA_MCP23017::relayTalk(String command){
    int bank=0;
    int relay=0;
 80a151a:	46a1      	mov	r9, r4
            else if(op == 3) obyte = ~bankTwoStatus;
            setBankTwoStatus(obyte);
        }
    }else{
        if(bank > 0) relay+=((bank-1)*8);
        relayOp(relay, op);
 80a151c:	4622      	mov	r2, r4
 80a151e:	4649      	mov	r1, r9
 80a1520:	4628      	mov	r0, r5
 80a1522:	f7ff fe29 	bl	80a1178 <_ZN16CASARIA_MCP230177relayOpEii>
    int op=0;
    int p=command.indexOf(" ");
    bool all=false;
    bool relay_next=false;
    bool bank_next=false;
    String word;
 80a1526:	a804      	add	r0, sp, #16
 80a1528:	f000 fd7c 	bl	80a2024 <_ZN6StringD1Ev>
    }else{
        if(bank > 0) relay+=((bank-1)*8);
        relayOp(relay, op);
    }
    return 1;
}
 80a152c:	2001      	movs	r0, #1
 80a152e:	b011      	add	sp, #68	; 0x44
 80a1530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a1534 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev>:
 80a1534:	4b02      	ldr	r3, [pc, #8]	; (80a1540 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev+0xc>)
 80a1536:	2200      	movs	r2, #0
 80a1538:	701a      	strb	r2, [r3, #0]
 80a153a:	f000 bb01 	b.w	80a1b40 <HAL_Pin_Map>
 80a153e:	bf00      	nop
 80a1540:	200001b8 	.word	0x200001b8

080a1544 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a1544:	b570      	push	{r4, r5, r6, lr}
 80a1546:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
 80a1548:	2300      	movs	r3, #0
 80a154a:	6063      	str	r3, [r4, #4]
 80a154c:	60a3      	str	r3, [r4, #8]
 80a154e:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
 80a1550:	6123      	str	r3, [r4, #16]
 80a1552:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
 80a1554:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
 80a1556:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
 80a1558:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
 80a155a:	2014      	movs	r0, #20
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a155c:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
 80a155e:	f7fe fd9e 	bl	80a009e <_Znwj>
 80a1562:	4605      	mov	r5, r0
 80a1564:	b110      	cbz	r0, 80a156c <_ZN7DS18B20C1Etb+0x28>
 80a1566:	4631      	mov	r1, r6
 80a1568:	f7ff fba5 	bl	80a0cb6 <_ZN7OneWireC1Et>
 80a156c:	6025      	str	r5, [r4, #0]
}
 80a156e:	4620      	mov	r0, r4
 80a1570:	bd70      	pop	{r4, r5, r6, pc}

080a1572 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a1572:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a1574:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a1578:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a157a:	6800      	ldr	r0, [r0, #0]
 80a157c:	4629      	mov	r1, r5
 80a157e:	f7ff fc90 	bl	80a0ea2 <_ZN7OneWire6searchEPh>
 80a1582:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a1584:	bf17      	itett	ne
 80a1586:	682b      	ldrne	r3, [r5, #0]
  else           memset(addr, 0, 8);
 80a1588:	6023      	streq	r3, [r4, #0]
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
  if (isSuccess) memcpy(addr, _addr, 8);
 80a158a:	6023      	strne	r3, [r4, #0]
 80a158c:	686b      	ldrne	r3, [r5, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a158e:	bf18      	it	ne
 80a1590:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
 80a1592:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a1594:	bf08      	it	eq
 80a1596:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
 80a1598:	bd38      	pop	{r3, r4, r5, pc}

080a159a <_ZN7DS18B20D1Ev>:
  
DS18B20::~DS18B20()
 80a159a:	b510      	push	{r4, lr}
 80a159c:	4604      	mov	r4, r0
{
  delete(ds);
 80a159e:	2114      	movs	r1, #20
 80a15a0:	6800      	ldr	r0, [r0, #0]
 80a15a2:	f001 ff4f 	bl	80a3444 <_ZdlPvj>
}
 80a15a6:	4620      	mov	r0, r4
 80a15a8:	bd10      	pop	{r4, pc}

080a15aa <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a15aa:	6800      	ldr	r0, [r0, #0]
 80a15ac:	f7ff bc6d 	b.w	80a0e8a <_ZN7OneWire12reset_searchEv>

080a15b0 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a15b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a15b2:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a15b4:	4604      	mov	r4, r0
 80a15b6:	460d      	mov	r5, r1
 80a15b8:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a15ba:	b91b      	cbnz	r3, 80a15c4 <_ZN7DS18B2014getTemperatureEPhb+0x14>
 80a15bc:	780b      	ldrb	r3, [r1, #0]
 80a15be:	2b00      	cmp	r3, #0
 80a15c0:	f000 80a4 	beq.w	80a170c <_ZN7DS18B2014getTemperatureEPhb+0x15c>

  ds->reset();
 80a15c4:	6820      	ldr	r0, [r4, #0]
 80a15c6:	f7ff fb83 	bl	80a0cd0 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a15ca:	7ea3      	ldrb	r3, [r4, #26]
 80a15cc:	b123      	cbz	r3, 80a15d8 <_ZN7DS18B2014getTemperatureEPhb+0x28>
 80a15ce:	b91e      	cbnz	r6, 80a15d8 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
 80a15d0:	6820      	ldr	r0, [r4, #0]
 80a15d2:	f7ff fc56 	bl	80a0e82 <_ZN7OneWire4skipEv>
 80a15d6:	e003      	b.n	80a15e0 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
 80a15d8:	4629      	mov	r1, r5
 80a15da:	6820      	ldr	r0, [r4, #0]
 80a15dc:	f7ff fc3f 	bl	80a0e5e <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a15e0:	2200      	movs	r2, #0
 80a15e2:	2144      	movs	r1, #68	; 0x44
 80a15e4:	6820      	ldr	r0, [r4, #0]
 80a15e6:	f7ff fc02 	bl	80a0dee <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
 80a15ea:	f240 20ee 	movw	r0, #750	; 0x2ee
 80a15ee:	f000 ff9f 	bl	80a2530 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
 80a15f2:	6820      	ldr	r0, [r4, #0]
 80a15f4:	f7ff fb6c 	bl	80a0cd0 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a15f8:	7ea3      	ldrb	r3, [r4, #26]
 80a15fa:	b123      	cbz	r3, 80a1606 <_ZN7DS18B2014getTemperatureEPhb+0x56>
 80a15fc:	b91e      	cbnz	r6, 80a1606 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
 80a15fe:	6820      	ldr	r0, [r4, #0]
 80a1600:	f7ff fc3f 	bl	80a0e82 <_ZN7OneWire4skipEv>
 80a1604:	e003      	b.n	80a160e <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
 80a1606:	4629      	mov	r1, r5
 80a1608:	6820      	ldr	r0, [r4, #0]
 80a160a:	f7ff fc28 	bl	80a0e5e <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
 80a160e:	2200      	movs	r2, #0
 80a1610:	21be      	movs	r1, #190	; 0xbe
 80a1612:	6820      	ldr	r0, [r4, #0]
 80a1614:	f7ff fbeb 	bl	80a0dee <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a1618:	782b      	ldrb	r3, [r5, #0]
 80a161a:	2b26      	cmp	r3, #38	; 0x26
 80a161c:	d104      	bne.n	80a1628 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a161e:	2200      	movs	r2, #0
 80a1620:	4611      	mov	r1, r2
 80a1622:	6820      	ldr	r0, [r4, #0]
 80a1624:	f7ff fbe3 	bl	80a0dee <_ZN7OneWire5writeEhh>
 80a1628:	1ce6      	adds	r6, r4, #3
 80a162a:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
 80a162e:	6820      	ldr	r0, [r4, #0]
 80a1630:	f7ff fc05 	bl	80a0e3e <_ZN7OneWire4readEv>
 80a1634:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
 80a1638:	42be      	cmp	r6, r7
 80a163a:	d1f8      	bne.n	80a162e <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a163c:	2108      	movs	r1, #8
 80a163e:	1d20      	adds	r0, r4, #4
 80a1640:	f7ff fcaa 	bl	80a0f98 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a1644:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a1646:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
 80a1648:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
 80a164a:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a164c:	d15e      	bne.n	80a170c <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a164e:	782b      	ldrb	r3, [r5, #0]
 80a1650:	2b22      	cmp	r3, #34	; 0x22
 80a1652:	d01b      	beq.n	80a168c <_ZN7DS18B2014getTemperatureEPhb+0xdc>
 80a1654:	d816      	bhi.n	80a1684 <_ZN7DS18B2014getTemperatureEPhb+0xd4>
 80a1656:	2b10      	cmp	r3, #16
 80a1658:	d158      	bne.n	80a170c <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a165a:	7ae3      	ldrb	r3, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a165c:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a165e:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a1660:	bf08      	it	eq
 80a1662:	7aa3      	ldrbeq	r3, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a1664:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a1668:	bf02      	ittt	eq
 80a166a:	f020 000f 	biceq.w	r0, r0, #15
 80a166e:	f1c3 030c 	rsbeq	r3, r3, #12
 80a1672:	18c0      	addeq	r0, r0, r3
 80a1674:	b200      	sxth	r0, r0
      celsius = (float)raw / 16.0;
 80a1676:	f003 f901 	bl	80a487c <__aeabi_i2f>
 80a167a:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a167e:	f003 f951 	bl	80a4924 <__aeabi_fmul>
      break;
 80a1682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a1684:	2b26      	cmp	r3, #38	; 0x26
 80a1686:	d01f      	beq.n	80a16c8 <_ZN7DS18B2014getTemperatureEPhb+0x118>
 80a1688:	2b28      	cmp	r3, #40	; 0x28
 80a168a:	d13f      	bne.n	80a170c <_ZN7DS18B2014getTemperatureEPhb+0x15c>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
 80a168c:	7a22      	ldrb	r2, [r4, #8]
 80a168e:	7923      	ldrb	r3, [r4, #4]
 80a1690:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a1694:	2a20      	cmp	r2, #32
 80a1696:	d005      	beq.n	80a16a4 <_ZN7DS18B2014getTemperatureEPhb+0xf4>
 80a1698:	2a40      	cmp	r2, #64	; 0x40
 80a169a:	d006      	beq.n	80a16aa <_ZN7DS18B2014getTemperatureEPhb+0xfa>
 80a169c:	b942      	cbnz	r2, 80a16b0 <_ZN7DS18B2014getTemperatureEPhb+0x100>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a169e:	f023 0307 	bic.w	r3, r3, #7
 80a16a2:	e004      	b.n	80a16ae <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a16a4:	f023 0303 	bic.w	r3, r3, #3
 80a16a8:	e001      	b.n	80a16ae <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a16aa:	f023 0301 	bic.w	r3, r3, #1
 80a16ae:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a16b0:	7923      	ldrb	r3, [r4, #4]
 80a16b2:	7960      	ldrb	r0, [r4, #5]
 80a16b4:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a16b8:	b200      	sxth	r0, r0
 80a16ba:	f002 fc77 	bl	80a3fac <__aeabi_i2d>
 80a16be:	2200      	movs	r2, #0
 80a16c0:	4b13      	ldr	r3, [pc, #76]	; (80a1710 <_ZN7DS18B2014getTemperatureEPhb+0x160>)
 80a16c2:	f002 fcd9 	bl	80a4078 <__aeabi_dmul>
 80a16c6:	e01e      	b.n	80a1706 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a16c8:	79a5      	ldrb	r5, [r4, #6]
 80a16ca:	4628      	mov	r0, r5
 80a16cc:	f002 fc6e 	bl	80a3fac <__aeabi_i2d>
 80a16d0:	4606      	mov	r6, r0
 80a16d2:	7960      	ldrb	r0, [r4, #5]
 80a16d4:	460f      	mov	r7, r1
 80a16d6:	08c0      	lsrs	r0, r0, #3
 80a16d8:	f003 f8d0 	bl	80a487c <__aeabi_i2f>
 80a16dc:	f002 fc78 	bl	80a3fd0 <__aeabi_f2d>
 80a16e0:	2200      	movs	r2, #0
 80a16e2:	4b0c      	ldr	r3, [pc, #48]	; (80a1714 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
 80a16e4:	f002 fcc8 	bl	80a4078 <__aeabi_dmul>
 80a16e8:	460b      	mov	r3, r1
 80a16ea:	0629      	lsls	r1, r5, #24
 80a16ec:	4602      	mov	r2, r0
 80a16ee:	bf48      	it	mi
 80a16f0:	4909      	ldrmi	r1, [pc, #36]	; (80a1718 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a16f2:	f04f 0000 	mov.w	r0, #0
 80a16f6:	bf58      	it	pl
 80a16f8:	4908      	ldrpl	r1, [pc, #32]	; (80a171c <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a16fa:	f002 fcbd 	bl	80a4078 <__aeabi_dmul>
 80a16fe:	4632      	mov	r2, r6
 80a1700:	463b      	mov	r3, r7
 80a1702:	f002 fb07 	bl	80a3d14 <__adddf3>
 80a1706:	f002 ffaf 	bl	80a4668 <__aeabi_d2f>
      break;
 80a170a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
 80a170c:	4804      	ldr	r0, [pc, #16]	; (80a1720 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
      break;                            
  }
  
  return celsius;
}
 80a170e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1710:	3fb00000 	.word	0x3fb00000
 80a1714:	3fa00000 	.word	0x3fa00000
 80a1718:	bff00000 	.word	0xbff00000
 80a171c:	3ff00000 	.word	0x3ff00000
 80a1720:	7fc00000 	.word	0x7fc00000

080a1724 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a1724:	7e02      	ldrb	r2, [r0, #24]
 80a1726:	7e40      	ldrb	r0, [r0, #25]
}
 80a1728:	1a13      	subs	r3, r2, r0
 80a172a:	4258      	negs	r0, r3
 80a172c:	4158      	adcs	r0, r3
 80a172e:	4770      	bx	lr

080a1730 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
 80a1730:	f000 ba06 	b.w	80a1b40 <HAL_Pin_Map>

080a1734 <_ZN15CASARIA_MCP3428C1Eh>:
/**************************************************************************/
/*
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
 80a1734:	b538      	push	{r3, r4, r5, lr}
 80a1736:	460c      	mov	r4, r1
 80a1738:	4605      	mov	r5, r0
{
    Wire.begin();
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a173a:	f044 0468 	orr.w	r4, r4, #104	; 0x68
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
{
    Wire.begin();
 80a173e:	f001 fe53 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a1742:	f001 fcb3 	bl	80a30ac <_ZN7TwoWire5beginEv>
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a1746:	73ac      	strb	r4, [r5, #14]
}
 80a1748:	4628      	mov	r0, r5
 80a174a:	bd38      	pop	{r3, r4, r5, pc}

080a174c <_ZN15CASARIA_MCP3428D1Ev>:
CASARIA_MCP3428::~CASARIA_MCP3428()
{
}
 80a174c:	4770      	bx	lr
	...

080a1750 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>:
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1750:	b538      	push	{r3, r4, r5, lr}
 80a1752:	4604      	mov	r4, r0
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1754:	f002 05fd 	and.w	r5, r2, #253	; 0xfd
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1758:	f89d 0010 	ldrb.w	r0, [sp, #16]
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a175c:	2d0c      	cmp	r5, #12
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
    GAIN = PGA;
 80a175e:	7260      	strb	r0, [r4, #9]

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1760:	d002      	beq.n	80a1768 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x18>
 80a1762:	2a10      	cmp	r2, #16
    {
        SPS = 12;
 80a1764:	bf18      	it	ne
 80a1766:	220c      	movne	r2, #12
    }
    else
    {
        SPS = resolution;
 80a1768:	7122      	strb	r2, [r4, #4]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a176a:	7922      	ldrb	r2, [r4, #4]
 80a176c:	3901      	subs	r1, #1
    else
    {
        SPS = resolution;
    }

    MODE = mode;
 80a176e:	7163      	strb	r3, [r4, #5]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a1770:	3a0c      	subs	r2, #12
 80a1772:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80a1776:	2102      	movs	r1, #2
 80a1778:	fb92 f2f1 	sdiv	r2, r2, r1
 80a177c:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80a1780:	408b      	lsls	r3, r1
 80a1782:	7223      	strb	r3, [r4, #8]
    // Setting the PGA Gain
    config|=int(log(PGA)/log(2));
 80a1784:	f002 fc02 	bl	80a3f8c <__aeabi_ui2d>
 80a1788:	f002 f842 	bl	80a3810 <log>
 80a178c:	a30e      	add	r3, pc, #56	; (adr r3, 80a17c8 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x78>)
 80a178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1792:	f002 fd9b 	bl	80a42cc <__aeabi_ddiv>
 80a1796:	f002 ff1f 	bl	80a45d8 <__aeabi_d2iz>
 80a179a:	7a23      	ldrb	r3, [r4, #8]
 80a179c:	4318      	orrs	r0, r3
 80a179e:	7220      	strb	r0, [r4, #8]
    
    // Start a conversion using configuration settings
    Wire.beginTransmission(devAddr);
 80a17a0:	f001 fe22 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a17a4:	7ba1      	ldrb	r1, [r4, #14]
 80a17a6:	f001 fc98 	bl	80a30da <_ZN7TwoWire17beginTransmissionEh>
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
 80a17aa:	f001 fe1d 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a17ae:	7a21      	ldrb	r1, [r4, #8]
 80a17b0:	6803      	ldr	r3, [r0, #0]
 80a17b2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a17b6:	689b      	ldr	r3, [r3, #8]
 80a17b8:	7221      	strb	r1, [r4, #8]
 80a17ba:	4798      	blx	r3
    Wire.endTransmission();
 80a17bc:	f001 fe14 	bl	80a33e8 <_Z19__fetch_global_Wirev>
}
 80a17c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.beginTransmission(devAddr);
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
    Wire.endTransmission();
 80a17c4:	f001 bc94 	b.w	80a30f0 <_ZN7TwoWire15endTransmissionEv>
 80a17c8:	fefa39ef 	.word	0xfefa39ef
 80a17cc:	3fe62e42 	.word	0x3fe62e42

080a17d0 <_ZN15CASARIA_MCP342815CheckConversionEv>:
/*
        Check the adc conversion
*/
/**************************************************************************/
bool CASARIA_MCP3428::CheckConversion()
{
 80a17d0:	b570      	push	{r4, r5, r6, lr}
 80a17d2:	4604      	mov	r4, r0
    uint8_t i = 0;
    no_of_bytes = 3;
 80a17d4:	2303      	movs	r3, #3
 80a17d6:	7283      	strb	r3, [r0, #10]
    Wire.requestFrom(devAddr, no_of_bytes);
 80a17d8:	f001 fe06 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a17dc:	7aa2      	ldrb	r2, [r4, #10]
 80a17de:	7ba1      	ldrb	r1, [r4, #14]
 80a17e0:	f001 fc73 	bl	80a30ca <_ZN7TwoWire11requestFromEhh>
 80a17e4:	2500      	movs	r5, #0

    while(Wire.available())
 80a17e6:	f001 fdff 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a17ea:	6803      	ldr	r3, [r0, #0]
 80a17ec:	1c6e      	adds	r6, r5, #1
 80a17ee:	691b      	ldr	r3, [r3, #16]
 80a17f0:	4798      	blx	r3
 80a17f2:	b170      	cbz	r0, 80a1812 <_ZN15CASARIA_MCP342815CheckConversionEv+0x42>
    {   data[i++] = Wire.read();
 80a17f4:	f001 fdf8 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a17f8:	6803      	ldr	r3, [r0, #0]
 80a17fa:	b2ed      	uxtb	r5, r5
 80a17fc:	695b      	ldr	r3, [r3, #20]
 80a17fe:	4798      	blx	r3
 80a1800:	4425      	add	r5, r4
 80a1802:	72e8      	strb	r0, [r5, #11]

        testvar = data[no_of_bytes-1] >> 7;
 80a1804:	7aa3      	ldrb	r3, [r4, #10]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a1806:	4635      	mov	r5, r6
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
 80a1808:	4423      	add	r3, r4
 80a180a:	7a9b      	ldrb	r3, [r3, #10]
 80a180c:	11db      	asrs	r3, r3, #7
 80a180e:	71e3      	strb	r3, [r4, #7]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a1810:	e7e9      	b.n	80a17e6 <_ZN15CASARIA_MCP342815CheckConversionEv+0x16>
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
    }
    return testvar;
 80a1812:	79e0      	ldrb	r0, [r4, #7]
}
 80a1814:	3000      	adds	r0, #0
 80a1816:	bf18      	it	ne
 80a1818:	2001      	movne	r0, #1
 80a181a:	bd70      	pop	{r4, r5, r6, pc}

080a181c <_ZN15CASARIA_MCP34287readADCEv>:
        Where:
        N = Resolution, which is programmed in the Configuration Register: 12, 14, or 16
*/
/**************************************************************************/
long CASARIA_MCP3428::readADC()
{
 80a181c:	b510      	push	{r4, lr}
 80a181e:	4604      	mov	r4, r0

    raw_adc = 0;
 80a1820:	2300      	movs	r3, #0
 80a1822:	6003      	str	r3, [r0, #0]

    while(CheckConversion() == 1);
 80a1824:	4620      	mov	r0, r4
 80a1826:	f7ff ffd3 	bl	80a17d0 <_ZN15CASARIA_MCP342815CheckConversionEv>
 80a182a:	2800      	cmp	r0, #0
 80a182c:	d1fa      	bne.n	80a1824 <_ZN15CASARIA_MCP34287readADCEv+0x8>

    switch (SPS)
 80a182e:	7923      	ldrb	r3, [r4, #4]
 80a1830:	2b0e      	cmp	r3, #14
 80a1832:	d00f      	beq.n	80a1854 <_ZN15CASARIA_MCP34287readADCEv+0x38>
 80a1834:	2b10      	cmp	r3, #16
 80a1836:	d019      	beq.n	80a186c <_ZN15CASARIA_MCP34287readADCEv+0x50>
 80a1838:	2b0c      	cmp	r3, #12
 80a183a:	d121      	bne.n	80a1880 <_ZN15CASARIA_MCP34287readADCEv+0x64>
  
        case 12:
                raw_adc = data[0];
                raw_adc &= 0b00001111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a183c:	7ae3      	ldrb	r3, [r4, #11]
 80a183e:	f003 020f 	and.w	r2, r3, #15
 80a1842:	7b23      	ldrb	r3, [r4, #12]
 80a1844:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 2047)
 80a1848:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
                {
                    raw_adc = raw_adc - 4096;
 80a184c:	bfa8      	it	ge
 80a184e:	f5a3 5380 	subge.w	r3, r3, #4096	; 0x1000
 80a1852:	e014      	b.n	80a187e <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 14:
                raw_adc = data[0];
                raw_adc &= 0b00111111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1854:	7ae3      	ldrb	r3, [r4, #11]
 80a1856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80a185a:	7b23      	ldrb	r3, [r4, #12]
 80a185c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 8191)
 80a1860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
                {
                    raw_adc = raw_adc - 16384;
 80a1864:	bfa8      	it	ge
 80a1866:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 80a186a:	e008      	b.n	80a187e <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 16:

                raw_adc = data[0];
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a186c:	7ae2      	ldrb	r2, [r4, #11]
 80a186e:	7b23      	ldrb	r3, [r4, #12]
 80a1870:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 32767)
 80a1874:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
                {
                    raw_adc = raw_adc - 65536;
 80a1878:	bfa8      	it	ge
 80a187a:	f5a3 3380 	subge.w	r3, r3, #65536	; 0x10000
 80a187e:	6023      	str	r3, [r4, #0]
                // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;
      
                break;
    }
    return raw_adc;
}
 80a1880:	6820      	ldr	r0, [r4, #0]
 80a1882:	bd10      	pop	{r4, pc}

080a1884 <_GLOBAL__sub_I__ZN15CASARIA_MCP3428C2Eh>:
 80a1884:	f000 b95c 	b.w	80a1b40 <HAL_Pin_Map>

080a1888 <_ZN7TwoWire5writeEi>:
 80a1888:	6803      	ldr	r3, [r0, #0]
 80a188a:	b2c9      	uxtb	r1, r1
 80a188c:	689b      	ldr	r3, [r3, #8]
 80a188e:	4718      	bx	r3

080a1890 <_ZN16Adafruit_PCA9685C1Ehb>:
 * the address that is set by the physical jumpers on the driver. If the
 * address is not being set by hardware, give no parameters and it will
 * use the default as specified in the header file (0x40)
 */
Adafruit_PCA9685::Adafruit_PCA9685(uint8_t addr, bool debug) {
  _i2caddr = addr;
 80a1890:	7001      	strb	r1, [r0, #0]
  _debug = debug;
 80a1892:	7042      	strb	r2, [r0, #1]
}
 80a1894:	4770      	bx	lr
	...

080a1898 <_ZN16Adafruit_PCA96856setPWMEhtt>:
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a1898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a189a:	461d      	mov	r5, r3
  if (_debug) {
 80a189c:	7843      	ldrb	r3, [r0, #1]
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a189e:	4607      	mov	r7, r0
 80a18a0:	460c      	mov	r4, r1
 80a18a2:	4616      	mov	r6, r2
  if (_debug) {
 80a18a4:	b303      	cbz	r3, 80a18e8 <_ZN16Adafruit_PCA96856setPWMEhtt+0x50>
   Serial.print("Setting PWM for LED "); Serial.print(ledNum); Serial.print(" to ");
 80a18a6:	f001 fac7 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a18aa:	4922      	ldr	r1, [pc, #136]	; (80a1934 <_ZN16Adafruit_PCA96856setPWMEhtt+0x9c>)
 80a18ac:	f000 fcec 	bl	80a2288 <_ZN5Print5printEPKc>
 80a18b0:	f001 fac2 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a18b4:	220a      	movs	r2, #10
 80a18b6:	4621      	mov	r1, r4
 80a18b8:	f000 fd23 	bl	80a2302 <_ZN5Print5printEhi>
 80a18bc:	f001 fabc 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a18c0:	491d      	ldr	r1, [pc, #116]	; (80a1938 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa0>)
 80a18c2:	f000 fce1 	bl	80a2288 <_ZN5Print5printEPKc>
   Serial.print(on); Serial.print(" -> "); Serial.println(off);
 80a18c6:	f001 fab7 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a18ca:	220a      	movs	r2, #10
 80a18cc:	4631      	mov	r1, r6
 80a18ce:	f000 fd46 	bl	80a235e <_ZN5Print5printEii>
 80a18d2:	f001 fab1 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a18d6:	4919      	ldr	r1, [pc, #100]	; (80a193c <_ZN16Adafruit_PCA96856setPWMEhtt+0xa4>)
 80a18d8:	f000 fcd6 	bl	80a2288 <_ZN5Print5printEPKc>
 80a18dc:	f001 faac 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a18e0:	220a      	movs	r2, #10
 80a18e2:	4629      	mov	r1, r5
 80a18e4:	f000 fd3d 	bl	80a2362 <_ZN5Print7printlnEii>
  }

  Wire.beginTransmission(_i2caddr);
 80a18e8:	f001 fd7e 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a18ec:	7839      	ldrb	r1, [r7, #0]
 80a18ee:	f001 fbf4 	bl	80a30da <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
 80a18f2:	f001 fd79 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a18f6:	00a1      	lsls	r1, r4, #2
 80a18f8:	3106      	adds	r1, #6
 80a18fa:	f7ff ffc5 	bl	80a1888 <_ZN7TwoWire5writeEi>
  Wire.write(on);                    // Write the first byte for On
 80a18fe:	f001 fd73 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a1902:	4631      	mov	r1, r6
 80a1904:	f7ff ffc0 	bl	80a1888 <_ZN7TwoWire5writeEi>
  Wire.write(on >> 8);               // Write the second byte
 80a1908:	f001 fd6e 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a190c:	0a31      	lsrs	r1, r6, #8
 80a190e:	f7ff ffbb 	bl	80a1888 <_ZN7TwoWire5writeEi>
  Wire.write(off);                   // First byte for Off
 80a1912:	f001 fd69 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a1916:	4629      	mov	r1, r5
 80a1918:	f7ff ffb6 	bl	80a1888 <_ZN7TwoWire5writeEi>
  Wire.write(off >> 8);              // Second byte for Off
 80a191c:	f001 fd64 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a1920:	0a29      	lsrs	r1, r5, #8
 80a1922:	f7ff ffb1 	bl	80a1888 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a1926:	f001 fd5f 	bl	80a33e8 <_Z19__fetch_global_Wirev>
}
 80a192a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
  Wire.write(on);                    // Write the first byte for On
  Wire.write(on >> 8);               // Write the second byte
  Wire.write(off);                   // First byte for Off
  Wire.write(off >> 8);              // Second byte for Off
  Wire.endTransmission();
 80a192e:	f001 bbdf 	b.w	80a30f0 <_ZN7TwoWire15endTransmissionEv>
 80a1932:	bf00      	nop
 80a1934:	080a5051 	.word	0x080a5051
 80a1938:	080a5066 	.word	0x080a5066
 80a193c:	080a506b 	.word	0x080a506b

080a1940 <_ZN16Adafruit_PCA96856setValEhtb>:
 * @param val     The duty cycle value. Should be from 0 to 4095 inclusive, 
 *                will be clamped if not within range
 * @param invert  Whether or not to invert the pulse for sinking to ground
 */
void Adafruit_PCA9685::setVal(uint8_t ledNum, uint16_t val, bool invert)
{
 80a1940:	b5f0      	push	{r4, r5, r6, r7, lr}
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
 80a1942:	f640 76ff 	movw	r6, #4095	; 0xfff
 80a1946:	42b2      	cmp	r2, r6
 80a1948:	bfa8      	it	ge
 80a194a:	4632      	movge	r2, r6
 80a194c:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 80a1950:	4607      	mov	r7, r0
 80a1952:	468e      	mov	lr, r1
  // Clamp value between 0 and 4095 inclusive.
  val = min(val, 4095);
  val = max(0, val);
 80a1954:	b2a5      	uxth	r5, r4
  if (invert) {
 80a1956:	461a      	mov	r2, r3
 80a1958:	b193      	cbz	r3, 80a1980 <_ZN16Adafruit_PCA96856setValEhtb+0x40>
    if (val == 0) {
 80a195a:	b91c      	cbnz	r4, 80a1964 <_ZN16Adafruit_PCA96856setValEhtb+0x24>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
 80a195c:	2300      	movs	r3, #0
 80a195e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a1962:	e004      	b.n	80a196e <_ZN16Adafruit_PCA96856setValEhtb+0x2e>
    }
    else if (val == 4095) {
 80a1964:	42b4      	cmp	r4, r6
 80a1966:	d105      	bne.n	80a1974 <_ZN16Adafruit_PCA96856setValEhtb+0x34>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
 80a1968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a196c:	2200      	movs	r2, #0
 80a196e:	4671      	mov	r1, lr
 80a1970:	4638      	mov	r0, r7
 80a1972:	e00a      	b.n	80a198a <_ZN16Adafruit_PCA96856setValEhtb+0x4a>
    }
    else {
      setPWM(ledNum, 0, 4095-val);
 80a1974:	f5c5 637f 	rsb	r3, r5, #4080	; 0xff0
 80a1978:	330f      	adds	r3, #15
 80a197a:	b29b      	uxth	r3, r3
 80a197c:	2200      	movs	r2, #0
 80a197e:	e004      	b.n	80a198a <_ZN16Adafruit_PCA96856setValEhtb+0x4a>
    }
  }
  else {
    if (val == 4095) {
 80a1980:	42b4      	cmp	r4, r6
 80a1982:	d0eb      	beq.n	80a195c <_ZN16Adafruit_PCA96856setValEhtb+0x1c>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
    }
    else if (val == 0) {
 80a1984:	2c00      	cmp	r4, #0
 80a1986:	d0ef      	beq.n	80a1968 <_ZN16Adafruit_PCA96856setValEhtb+0x28>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a1988:	462b      	mov	r3, r5
    }
  }
}
 80a198a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    else if (val == 0) {
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a198e:	f7ff bf83 	b.w	80a1898 <_ZN16Adafruit_PCA96856setPWMEhtt>

080a1992 <_ZN16Adafruit_PCA96855read8Eh>:
/**
 * Read a byte from a given address on the driver
 * @param  addr  The address
 * @return       The value at the given address
 */
uint8_t Adafruit_PCA9685::read8(uint8_t addr) {
 80a1992:	b538      	push	{r3, r4, r5, lr}
 80a1994:	4604      	mov	r4, r0
 80a1996:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a1998:	f001 fd26 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a199c:	7821      	ldrb	r1, [r4, #0]
 80a199e:	f001 fb9c 	bl	80a30da <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a19a2:	f001 fd21 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a19a6:	6803      	ldr	r3, [r0, #0]
 80a19a8:	4629      	mov	r1, r5
 80a19aa:	689b      	ldr	r3, [r3, #8]
 80a19ac:	4798      	blx	r3
  Wire.endTransmission();
 80a19ae:	f001 fd1b 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a19b2:	f001 fb9d 	bl	80a30f0 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
 80a19b6:	f001 fd17 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a19ba:	2201      	movs	r2, #1
 80a19bc:	7821      	ldrb	r1, [r4, #0]
 80a19be:	f001 fb84 	bl	80a30ca <_ZN7TwoWire11requestFromEhh>
  return Wire.read();
 80a19c2:	f001 fd11 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a19c6:	6803      	ldr	r3, [r0, #0]
 80a19c8:	695b      	ldr	r3, [r3, #20]
 80a19ca:	4798      	blx	r3
}
 80a19cc:	b2c0      	uxtb	r0, r0
 80a19ce:	bd38      	pop	{r3, r4, r5, pc}

080a19d0 <_ZN16Adafruit_PCA96856write8Ehh>:
/**
 * Write a byte to a given address on the driver
 * @param addr  The address
 * @param val   The byte to be written
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
 80a19d0:	b570      	push	{r4, r5, r6, lr}
 80a19d2:	4606      	mov	r6, r0
 80a19d4:	4614      	mov	r4, r2
 80a19d6:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a19d8:	f001 fd06 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a19dc:	7831      	ldrb	r1, [r6, #0]
 80a19de:	f001 fb7c 	bl	80a30da <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a19e2:	f001 fd01 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a19e6:	6803      	ldr	r3, [r0, #0]
 80a19e8:	4629      	mov	r1, r5
 80a19ea:	689b      	ldr	r3, [r3, #8]
 80a19ec:	4798      	blx	r3
  Wire.write(val);
 80a19ee:	f001 fcfb 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a19f2:	6803      	ldr	r3, [r0, #0]
 80a19f4:	4621      	mov	r1, r4
 80a19f6:	689b      	ldr	r3, [r3, #8]
 80a19f8:	4798      	blx	r3
  Wire.endTransmission();
 80a19fa:	f001 fcf5 	bl	80a33e8 <_Z19__fetch_global_Wirev>
}
 80a19fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(addr);
  Wire.write(val);
  Wire.endTransmission();
 80a1a02:	f001 bb75 	b.w	80a30f0 <_ZN7TwoWire15endTransmissionEv>

080a1a06 <_ZN16Adafruit_PCA96855resetEv>:

/**
 * Setup the driver's modes
 */
void Adafruit_PCA9685::reset(void) {
 write8(MODE1, 0x0);  // See page 13 of datasheet
 80a1a06:	2200      	movs	r2, #0
 80a1a08:	4611      	mov	r1, r2
 80a1a0a:	f7ff bfe1 	b.w	80a19d0 <_ZN16Adafruit_PCA96856write8Ehh>

080a1a0e <_ZN16Adafruit_PCA96855beginEv>:
}

/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 80a1a0e:	b510      	push	{r4, lr}
 80a1a10:	4604      	mov	r4, r0
 Wire.begin();
 80a1a12:	f001 fce9 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a1a16:	f001 fb49 	bl	80a30ac <_ZN7TwoWire5beginEv>
 reset();
 80a1a1a:	4620      	mov	r0, r4
}
 80a1a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 Wire.begin();
 reset();
 80a1a20:	f7ff bff1 	b.w	80a1a06 <_ZN16Adafruit_PCA96855resetEv>
 80a1a24:	0000      	movs	r0, r0
	...

080a1a28 <_ZN16Adafruit_PCA968510setPWMFreqEf>:

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1a28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if ( _debug ) {
 80a1a2a:	7843      	ldrb	r3, [r0, #1]

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1a2c:	4604      	mov	r4, r0
 80a1a2e:	460d      	mov	r5, r1
  if ( _debug ) {
 80a1a30:	b18b      	cbz	r3, 80a1a56 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x2e>
    Serial.print("Attempting to set freq "); Serial.println(freq);
 80a1a32:	f001 fa01 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a1a36:	493c      	ldr	r1, [pc, #240]	; (80a1b28 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x100>)
 80a1a38:	f000 fc26 	bl	80a2288 <_ZN5Print5printEPKc>
 80a1a3c:	f001 f9fc 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a1a40:	4606      	mov	r6, r0
 80a1a42:	4628      	mov	r0, r5
 80a1a44:	f002 fac4 	bl	80a3fd0 <__aeabi_f2d>
 80a1a48:	2302      	movs	r3, #2
 80a1a4a:	9300      	str	r3, [sp, #0]
 80a1a4c:	4602      	mov	r2, r0
 80a1a4e:	460b      	mov	r3, r1
 80a1a50:	4630      	mov	r0, r6
 80a1a52:	f000 fd3f 	bl	80a24d4 <_ZN5Print7printlnEdi>
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
 80a1a56:	4628      	mov	r0, r5
 80a1a58:	f002 faba 	bl	80a3fd0 <__aeabi_f2d>
 80a1a5c:	a330      	add	r3, pc, #192	; (adr r3, 80a1b20 <_ZN16Adafruit_PCA968510setPWMFreqEf+0xf8>)
 80a1a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1a62:	f002 fb09 	bl	80a4078 <__aeabi_dmul>
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
 80a1a66:	f002 fdff 	bl	80a4668 <__aeabi_d2f>
 80a1a6a:	4601      	mov	r1, r0
 80a1a6c:	482f      	ldr	r0, [pc, #188]	; (80a1b2c <_ZN16Adafruit_PCA968510setPWMFreqEf+0x104>)
 80a1a6e:	f003 f80d 	bl	80a4a8c <__aeabi_fdiv>
  prescaleval -= 1;
 80a1a72:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1a76:	f002 fe4b 	bl	80a4710 <__aeabi_fsub>
  if ( _debug ) {
 80a1a7a:	7863      	ldrb	r3, [r4, #1]
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
 80a1a7c:	4605      	mov	r5, r0
  if ( _debug ) {
 80a1a7e:	b18b      	cbz	r3, 80a1aa4 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x7c>
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
 80a1a80:	f001 f9da 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a1a84:	492a      	ldr	r1, [pc, #168]	; (80a1b30 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x108>)
 80a1a86:	f000 fbff 	bl	80a2288 <_ZN5Print5printEPKc>
 80a1a8a:	f001 f9d5 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a1a8e:	4606      	mov	r6, r0
 80a1a90:	4628      	mov	r0, r5
 80a1a92:	f002 fa9d 	bl	80a3fd0 <__aeabi_f2d>
 80a1a96:	2302      	movs	r3, #2
 80a1a98:	9300      	str	r3, [sp, #0]
 80a1a9a:	4602      	mov	r2, r0
 80a1a9c:	460b      	mov	r3, r1
 80a1a9e:	4630      	mov	r0, r6
 80a1aa0:	f000 fd18 	bl	80a24d4 <_ZN5Print7printlnEdi>
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a1aa4:	4628      	mov	r0, r5
 80a1aa6:	f002 fa93 	bl	80a3fd0 <__aeabi_f2d>
 80a1aaa:	4b22      	ldr	r3, [pc, #136]	; (80a1b34 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x10c>)
 80a1aac:	2200      	movs	r2, #0
 80a1aae:	f002 f931 	bl	80a3d14 <__adddf3>
 80a1ab2:	f001 fe25 	bl	80a3700 <floor>
 80a1ab6:	f002 fdb7 	bl	80a4628 <__aeabi_d2uiz>
  if ( _debug ) {
 80a1aba:	7863      	ldrb	r3, [r4, #1]
  prescaleval /= freq;
  prescaleval -= 1;
  if ( _debug ) {
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a1abc:	b2c6      	uxtb	r6, r0
  if ( _debug ) {
 80a1abe:	b153      	cbz	r3, 80a1ad6 <_ZN16Adafruit_PCA968510setPWMFreqEf+0xae>
    Serial.print("Final pre-scale: "); Serial.println(prescale);
 80a1ac0:	f001 f9ba 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a1ac4:	491c      	ldr	r1, [pc, #112]	; (80a1b38 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x110>)
 80a1ac6:	f000 fbdf 	bl	80a2288 <_ZN5Print5printEPKc>
 80a1aca:	f001 f9b5 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a1ace:	220a      	movs	r2, #10
 80a1ad0:	4631      	mov	r1, r6
 80a1ad2:	f000 fc18 	bl	80a2306 <_ZN5Print7printlnEhi>
  }
  
  uint8_t oldmode = read8(MODE1);
 80a1ad6:	2100      	movs	r1, #0
 80a1ad8:	4620      	mov	r0, r4
 80a1ada:	f7ff ff5a 	bl	80a1992 <_ZN16Adafruit_PCA96855read8Eh>
 80a1ade:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
 80a1ae0:	f000 026f 	and.w	r2, r0, #111	; 0x6f
 80a1ae4:	f042 0210 	orr.w	r2, r2, #16
 80a1ae8:	4620      	mov	r0, r4
 80a1aea:	2100      	movs	r1, #0
 80a1aec:	f7ff ff70 	bl	80a19d0 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(PRESCALE, prescale); // set the prescaler
 80a1af0:	4632      	mov	r2, r6
 80a1af2:	4620      	mov	r0, r4
 80a1af4:	21fe      	movs	r1, #254	; 0xfe
 80a1af6:	f7ff ff6b 	bl	80a19d0 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(MODE1, oldmode);
 80a1afa:	462a      	mov	r2, r5
 80a1afc:	2100      	movs	r1, #0
 80a1afe:	4620      	mov	r0, r4
 80a1b00:	f7ff ff66 	bl	80a19d0 <_ZN16Adafruit_PCA96856write8Ehh>
  delay(5);
 80a1b04:	2005      	movs	r0, #5
 80a1b06:	f000 fd13 	bl	80a2530 <delay>
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a1b0a:	4620      	mov	r0, r4
 80a1b0c:	f065 025e 	orn	r2, r5, #94	; 0x5e
 80a1b10:	b2d2      	uxtb	r2, r2
 80a1b12:	2100      	movs	r1, #0
}
 80a1b14:	b002      	add	sp, #8
 80a1b16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
  write8(PRESCALE, prescale); // set the prescaler
  write8(MODE1, oldmode);
  delay(5);
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a1b1a:	f7ff bf59 	b.w	80a19d0 <_ZN16Adafruit_PCA96856write8Ehh>
 80a1b1e:	bf00      	nop
 80a1b20:	cccccccd 	.word	0xcccccccd
 80a1b24:	3feccccc 	.word	0x3feccccc
 80a1b28:	080a5070 	.word	0x080a5070
 80a1b2c:	45bebc20 	.word	0x45bebc20
 80a1b30:	080a5088 	.word	0x080a5088
 80a1b34:	3fe00000 	.word	0x3fe00000
 80a1b38:	080a509e 	.word	0x080a509e

080a1b3c <_GLOBAL__sub_I__ZN16Adafruit_PCA9685C2Ehb>:
 80a1b3c:	f000 b800 	b.w	80a1b40 <HAL_Pin_Map>

080a1b40 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1b40:	b508      	push	{r3, lr}
 80a1b42:	4b02      	ldr	r3, [pc, #8]	; (80a1b4c <HAL_Pin_Map+0xc>)
 80a1b44:	681b      	ldr	r3, [r3, #0]
 80a1b46:	681b      	ldr	r3, [r3, #0]
 80a1b48:	9301      	str	r3, [sp, #4]
 80a1b4a:	bd08      	pop	{r3, pc}
 80a1b4c:	080601b0 	.word	0x080601b0

080a1b50 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a1b50:	b508      	push	{r3, lr}
 80a1b52:	4b02      	ldr	r3, [pc, #8]	; (80a1b5c <HAL_Pin_Mode+0xc>)
 80a1b54:	681b      	ldr	r3, [r3, #0]
 80a1b56:	689b      	ldr	r3, [r3, #8]
 80a1b58:	9301      	str	r3, [sp, #4]
 80a1b5a:	bd08      	pop	{r3, pc}
 80a1b5c:	080601b0 	.word	0x080601b0

080a1b60 <HAL_GPIO_Read>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a1b60:	b508      	push	{r3, lr}
 80a1b62:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <HAL_GPIO_Read+0xc>)
 80a1b64:	681b      	ldr	r3, [r3, #0]
 80a1b66:	695b      	ldr	r3, [r3, #20]
 80a1b68:	9301      	str	r3, [sp, #4]
 80a1b6a:	bd08      	pop	{r3, pc}
 80a1b6c:	080601b0 	.word	0x080601b0

080a1b70 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a1b70:	b508      	push	{r3, lr}
 80a1b72:	4b02      	ldr	r3, [pc, #8]	; (80a1b7c <HAL_Interrupts_Enable_All+0xc>)
 80a1b74:	681b      	ldr	r3, [r3, #0]
 80a1b76:	6a1b      	ldr	r3, [r3, #32]
 80a1b78:	9301      	str	r3, [sp, #4]
 80a1b7a:	bd08      	pop	{r3, pc}
 80a1b7c:	080601b0 	.word	0x080601b0

080a1b80 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a1b80:	b508      	push	{r3, lr}
 80a1b82:	4b02      	ldr	r3, [pc, #8]	; (80a1b8c <HAL_Interrupts_Disable_All+0xc>)
 80a1b84:	681b      	ldr	r3, [r3, #0]
 80a1b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1b88:	9301      	str	r3, [sp, #4]
 80a1b8a:	bd08      	pop	{r3, pc}
 80a1b8c:	080601b0 	.word	0x080601b0

080a1b90 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a1b90:	b508      	push	{r3, lr}
 80a1b92:	4b02      	ldr	r3, [pc, #8]	; (80a1b9c <HAL_SPI_Init+0xc>)
 80a1b94:	681b      	ldr	r3, [r3, #0]
 80a1b96:	69db      	ldr	r3, [r3, #28]
 80a1b98:	9301      	str	r3, [sp, #4]
 80a1b9a:	bd08      	pop	{r3, pc}
 80a1b9c:	080601b4 	.word	0x080601b4

080a1ba0 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a1ba0:	b508      	push	{r3, lr}
 80a1ba2:	4b02      	ldr	r3, [pc, #8]	; (80a1bac <HAL_SPI_Is_Enabled+0xc>)
 80a1ba4:	681b      	ldr	r3, [r3, #0]
 80a1ba6:	6a1b      	ldr	r3, [r3, #32]
 80a1ba8:	9301      	str	r3, [sp, #4]
 80a1baa:	bd08      	pop	{r3, pc}
 80a1bac:	080601b4 	.word	0x080601b4

080a1bb0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1bb0:	b508      	push	{r3, lr}
 80a1bb2:	4b02      	ldr	r3, [pc, #8]	; (80a1bbc <HAL_RNG_GetRandomNumber+0xc>)
 80a1bb4:	681b      	ldr	r3, [r3, #0]
 80a1bb6:	685b      	ldr	r3, [r3, #4]
 80a1bb8:	9301      	str	r3, [sp, #4]
 80a1bba:	bd08      	pop	{r3, pc}
 80a1bbc:	0806019c 	.word	0x0806019c

080a1bc0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80a1bc0:	b508      	push	{r3, lr}
 80a1bc2:	4b02      	ldr	r3, [pc, #8]	; (80a1bcc <HAL_Delay_Milliseconds+0xc>)
 80a1bc4:	681b      	ldr	r3, [r3, #0]
 80a1bc6:	689b      	ldr	r3, [r3, #8]
 80a1bc8:	9301      	str	r3, [sp, #4]
 80a1bca:	bd08      	pop	{r3, pc}
 80a1bcc:	0806019c 	.word	0x0806019c

080a1bd0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1bd0:	b508      	push	{r3, lr}
 80a1bd2:	4b02      	ldr	r3, [pc, #8]	; (80a1bdc <HAL_Delay_Microseconds+0xc>)
 80a1bd4:	681b      	ldr	r3, [r3, #0]
 80a1bd6:	68db      	ldr	r3, [r3, #12]
 80a1bd8:	9301      	str	r3, [sp, #4]
 80a1bda:	bd08      	pop	{r3, pc}
 80a1bdc:	0806019c 	.word	0x0806019c

080a1be0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1be0:	b508      	push	{r3, lr}
 80a1be2:	4b02      	ldr	r3, [pc, #8]	; (80a1bec <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a1be4:	681b      	ldr	r3, [r3, #0]
 80a1be6:	695b      	ldr	r3, [r3, #20]
 80a1be8:	9301      	str	r3, [sp, #4]
 80a1bea:	bd08      	pop	{r3, pc}
 80a1bec:	0806019c 	.word	0x0806019c

080a1bf0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a1bf0:	b508      	push	{r3, lr}
 80a1bf2:	4b02      	ldr	r3, [pc, #8]	; (80a1bfc <HAL_Core_System_Reset_Ex+0xc>)
 80a1bf4:	681b      	ldr	r3, [r3, #0]
 80a1bf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1bf8:	9301      	str	r3, [sp, #4]
 80a1bfa:	bd08      	pop	{r3, pc}
 80a1bfc:	080601b8 	.word	0x080601b8

080a1c00 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a1c00:	b508      	push	{r3, lr}
 80a1c02:	4b02      	ldr	r3, [pc, #8]	; (80a1c0c <os_thread_create+0xc>)
 80a1c04:	681b      	ldr	r3, [r3, #0]
 80a1c06:	685b      	ldr	r3, [r3, #4]
 80a1c08:	9301      	str	r3, [sp, #4]
 80a1c0a:	bd08      	pop	{r3, pc}
 80a1c0c:	080601d0 	.word	0x080601d0

080a1c10 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80a1c10:	b508      	push	{r3, lr}
 80a1c12:	4b02      	ldr	r3, [pc, #8]	; (80a1c1c <os_thread_is_current+0xc>)
 80a1c14:	681b      	ldr	r3, [r3, #0]
 80a1c16:	689b      	ldr	r3, [r3, #8]
 80a1c18:	9301      	str	r3, [sp, #4]
 80a1c1a:	bd08      	pop	{r3, pc}
 80a1c1c:	080601d0 	.word	0x080601d0

080a1c20 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80a1c20:	b508      	push	{r3, lr}
 80a1c22:	4b02      	ldr	r3, [pc, #8]	; (80a1c2c <os_thread_join+0xc>)
 80a1c24:	681b      	ldr	r3, [r3, #0]
 80a1c26:	691b      	ldr	r3, [r3, #16]
 80a1c28:	9301      	str	r3, [sp, #4]
 80a1c2a:	bd08      	pop	{r3, pc}
 80a1c2c:	080601d0 	.word	0x080601d0

080a1c30 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80a1c30:	b508      	push	{r3, lr}
 80a1c32:	4b02      	ldr	r3, [pc, #8]	; (80a1c3c <os_thread_cleanup+0xc>)
 80a1c34:	681b      	ldr	r3, [r3, #0]
 80a1c36:	695b      	ldr	r3, [r3, #20]
 80a1c38:	9301      	str	r3, [sp, #4]
 80a1c3a:	bd08      	pop	{r3, pc}
 80a1c3c:	080601d0 	.word	0x080601d0

080a1c40 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1c40:	b508      	push	{r3, lr}
 80a1c42:	4b02      	ldr	r3, [pc, #8]	; (80a1c4c <os_mutex_create+0xc>)
 80a1c44:	681b      	ldr	r3, [r3, #0]
 80a1c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1c48:	9301      	str	r3, [sp, #4]
 80a1c4a:	bd08      	pop	{r3, pc}
 80a1c4c:	080601d0 	.word	0x080601d0

080a1c50 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80a1c50:	b508      	push	{r3, lr}
 80a1c52:	4b02      	ldr	r3, [pc, #8]	; (80a1c5c <os_thread_exit+0xc>)
 80a1c54:	681b      	ldr	r3, [r3, #0]
 80a1c56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1c58:	9301      	str	r3, [sp, #4]
 80a1c5a:	bd08      	pop	{r3, pc}
 80a1c5c:	080601d0 	.word	0x080601d0

080a1c60 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a1c60:	b508      	push	{r3, lr}
 80a1c62:	4b02      	ldr	r3, [pc, #8]	; (80a1c6c <HAL_USART_Init+0xc>)
 80a1c64:	681b      	ldr	r3, [r3, #0]
 80a1c66:	699b      	ldr	r3, [r3, #24]
 80a1c68:	9301      	str	r3, [sp, #4]
 80a1c6a:	bd08      	pop	{r3, pc}
 80a1c6c:	080601c4 	.word	0x080601c4

080a1c70 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a1c70:	b508      	push	{r3, lr}
 80a1c72:	4b02      	ldr	r3, [pc, #8]	; (80a1c7c <HAL_USART_Write_Data+0xc>)
 80a1c74:	681b      	ldr	r3, [r3, #0]
 80a1c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a1c78:	9301      	str	r3, [sp, #4]
 80a1c7a:	bd08      	pop	{r3, pc}
 80a1c7c:	080601c4 	.word	0x080601c4

080a1c80 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a1c80:	b508      	push	{r3, lr}
 80a1c82:	4b02      	ldr	r3, [pc, #8]	; (80a1c8c <HAL_USART_Available_Data+0xc>)
 80a1c84:	681b      	ldr	r3, [r3, #0]
 80a1c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a1c88:	9301      	str	r3, [sp, #4]
 80a1c8a:	bd08      	pop	{r3, pc}
 80a1c8c:	080601c4 	.word	0x080601c4

080a1c90 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a1c90:	b508      	push	{r3, lr}
 80a1c92:	4b02      	ldr	r3, [pc, #8]	; (80a1c9c <HAL_USART_Read_Data+0xc>)
 80a1c94:	681b      	ldr	r3, [r3, #0]
 80a1c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1c98:	9301      	str	r3, [sp, #4]
 80a1c9a:	bd08      	pop	{r3, pc}
 80a1c9c:	080601c4 	.word	0x080601c4

080a1ca0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a1ca0:	b508      	push	{r3, lr}
 80a1ca2:	4b02      	ldr	r3, [pc, #8]	; (80a1cac <HAL_USART_Peek_Data+0xc>)
 80a1ca4:	681b      	ldr	r3, [r3, #0]
 80a1ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ca8:	9301      	str	r3, [sp, #4]
 80a1caa:	bd08      	pop	{r3, pc}
 80a1cac:	080601c4 	.word	0x080601c4

080a1cb0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1cb0:	b508      	push	{r3, lr}
 80a1cb2:	4b02      	ldr	r3, [pc, #8]	; (80a1cbc <HAL_USART_Flush_Data+0xc>)
 80a1cb4:	681b      	ldr	r3, [r3, #0]
 80a1cb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1cb8:	9301      	str	r3, [sp, #4]
 80a1cba:	bd08      	pop	{r3, pc}
 80a1cbc:	080601c4 	.word	0x080601c4

080a1cc0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1cc0:	b508      	push	{r3, lr}
 80a1cc2:	4b02      	ldr	r3, [pc, #8]	; (80a1ccc <HAL_USART_Is_Enabled+0xc>)
 80a1cc4:	681b      	ldr	r3, [r3, #0]
 80a1cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1cc8:	9301      	str	r3, [sp, #4]
 80a1cca:	bd08      	pop	{r3, pc}
 80a1ccc:	080601c4 	.word	0x080601c4

080a1cd0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1cd0:	b508      	push	{r3, lr}
 80a1cd2:	4b02      	ldr	r3, [pc, #8]	; (80a1cdc <HAL_USART_Available_Data_For_Write+0xc>)
 80a1cd4:	681b      	ldr	r3, [r3, #0]
 80a1cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1cd8:	9301      	str	r3, [sp, #4]
 80a1cda:	bd08      	pop	{r3, pc}
 80a1cdc:	080601c4 	.word	0x080601c4

080a1ce0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1ce0:	b508      	push	{r3, lr}
 80a1ce2:	4b02      	ldr	r3, [pc, #8]	; (80a1cec <HAL_I2C_Begin+0xc>)
 80a1ce4:	681b      	ldr	r3, [r3, #0]
 80a1ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1ce8:	9301      	str	r3, [sp, #4]
 80a1cea:	bd08      	pop	{r3, pc}
 80a1cec:	080601ac 	.word	0x080601ac

080a1cf0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1cf0:	b508      	push	{r3, lr}
 80a1cf2:	4b02      	ldr	r3, [pc, #8]	; (80a1cfc <HAL_I2C_Request_Data+0xc>)
 80a1cf4:	681b      	ldr	r3, [r3, #0]
 80a1cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1cf8:	9301      	str	r3, [sp, #4]
 80a1cfa:	bd08      	pop	{r3, pc}
 80a1cfc:	080601ac 	.word	0x080601ac

080a1d00 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1d00:	b508      	push	{r3, lr}
 80a1d02:	4b02      	ldr	r3, [pc, #8]	; (80a1d0c <HAL_I2C_Begin_Transmission+0xc>)
 80a1d04:	681b      	ldr	r3, [r3, #0]
 80a1d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1d08:	9301      	str	r3, [sp, #4]
 80a1d0a:	bd08      	pop	{r3, pc}
 80a1d0c:	080601ac 	.word	0x080601ac

080a1d10 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1d10:	b508      	push	{r3, lr}
 80a1d12:	4b02      	ldr	r3, [pc, #8]	; (80a1d1c <HAL_I2C_End_Transmission+0xc>)
 80a1d14:	681b      	ldr	r3, [r3, #0]
 80a1d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1d18:	9301      	str	r3, [sp, #4]
 80a1d1a:	bd08      	pop	{r3, pc}
 80a1d1c:	080601ac 	.word	0x080601ac

080a1d20 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1d20:	b508      	push	{r3, lr}
 80a1d22:	4b02      	ldr	r3, [pc, #8]	; (80a1d2c <HAL_I2C_Write_Data+0xc>)
 80a1d24:	681b      	ldr	r3, [r3, #0]
 80a1d26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1d28:	9301      	str	r3, [sp, #4]
 80a1d2a:	bd08      	pop	{r3, pc}
 80a1d2c:	080601ac 	.word	0x080601ac

080a1d30 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d30:	b508      	push	{r3, lr}
 80a1d32:	4b02      	ldr	r3, [pc, #8]	; (80a1d3c <HAL_I2C_Available_Data+0xc>)
 80a1d34:	681b      	ldr	r3, [r3, #0]
 80a1d36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1d38:	9301      	str	r3, [sp, #4]
 80a1d3a:	bd08      	pop	{r3, pc}
 80a1d3c:	080601ac 	.word	0x080601ac

080a1d40 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d40:	b508      	push	{r3, lr}
 80a1d42:	4b02      	ldr	r3, [pc, #8]	; (80a1d4c <HAL_I2C_Read_Data+0xc>)
 80a1d44:	681b      	ldr	r3, [r3, #0]
 80a1d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1d48:	9301      	str	r3, [sp, #4]
 80a1d4a:	bd08      	pop	{r3, pc}
 80a1d4c:	080601ac 	.word	0x080601ac

080a1d50 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a1d50:	b508      	push	{r3, lr}
 80a1d52:	4b02      	ldr	r3, [pc, #8]	; (80a1d5c <HAL_I2C_Peek_Data+0xc>)
 80a1d54:	681b      	ldr	r3, [r3, #0]
 80a1d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a1d58:	9301      	str	r3, [sp, #4]
 80a1d5a:	bd08      	pop	{r3, pc}
 80a1d5c:	080601ac 	.word	0x080601ac

080a1d60 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a1d60:	b508      	push	{r3, lr}
 80a1d62:	4b02      	ldr	r3, [pc, #8]	; (80a1d6c <HAL_I2C_Flush_Data+0xc>)
 80a1d64:	681b      	ldr	r3, [r3, #0]
 80a1d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a1d68:	9301      	str	r3, [sp, #4]
 80a1d6a:	bd08      	pop	{r3, pc}
 80a1d6c:	080601ac 	.word	0x080601ac

080a1d70 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a1d70:	b508      	push	{r3, lr}
 80a1d72:	4b02      	ldr	r3, [pc, #8]	; (80a1d7c <HAL_I2C_Is_Enabled+0xc>)
 80a1d74:	681b      	ldr	r3, [r3, #0]
 80a1d76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a1d78:	9301      	str	r3, [sp, #4]
 80a1d7a:	bd08      	pop	{r3, pc}
 80a1d7c:	080601ac 	.word	0x080601ac

080a1d80 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a1d80:	b508      	push	{r3, lr}
 80a1d82:	4b03      	ldr	r3, [pc, #12]	; (80a1d90 <HAL_I2C_Init+0x10>)
 80a1d84:	681b      	ldr	r3, [r3, #0]
 80a1d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a1d8a:	9301      	str	r3, [sp, #4]
 80a1d8c:	bd08      	pop	{r3, pc}
 80a1d8e:	0000      	.short	0x0000
 80a1d90:	080601ac 	.word	0x080601ac

080a1d94 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a1d94:	b508      	push	{r3, lr}
 80a1d96:	4b02      	ldr	r3, [pc, #8]	; (80a1da0 <HAL_USB_USART_Init+0xc>)
 80a1d98:	681b      	ldr	r3, [r3, #0]
 80a1d9a:	681b      	ldr	r3, [r3, #0]
 80a1d9c:	9301      	str	r3, [sp, #4]
 80a1d9e:	bd08      	pop	{r3, pc}
 80a1da0:	080601d8 	.word	0x080601d8

080a1da4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a1da4:	b508      	push	{r3, lr}
 80a1da6:	4b02      	ldr	r3, [pc, #8]	; (80a1db0 <HAL_USB_USART_Available_Data+0xc>)
 80a1da8:	681b      	ldr	r3, [r3, #0]
 80a1daa:	691b      	ldr	r3, [r3, #16]
 80a1dac:	9301      	str	r3, [sp, #4]
 80a1dae:	bd08      	pop	{r3, pc}
 80a1db0:	080601d8 	.word	0x080601d8

080a1db4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a1db4:	b508      	push	{r3, lr}
 80a1db6:	4b02      	ldr	r3, [pc, #8]	; (80a1dc0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1db8:	681b      	ldr	r3, [r3, #0]
 80a1dba:	695b      	ldr	r3, [r3, #20]
 80a1dbc:	9301      	str	r3, [sp, #4]
 80a1dbe:	bd08      	pop	{r3, pc}
 80a1dc0:	080601d8 	.word	0x080601d8

080a1dc4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1dc4:	b508      	push	{r3, lr}
 80a1dc6:	4b02      	ldr	r3, [pc, #8]	; (80a1dd0 <HAL_USB_USART_Receive_Data+0xc>)
 80a1dc8:	681b      	ldr	r3, [r3, #0]
 80a1dca:	699b      	ldr	r3, [r3, #24]
 80a1dcc:	9301      	str	r3, [sp, #4]
 80a1dce:	bd08      	pop	{r3, pc}
 80a1dd0:	080601d8 	.word	0x080601d8

080a1dd4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a1dd4:	b508      	push	{r3, lr}
 80a1dd6:	4b02      	ldr	r3, [pc, #8]	; (80a1de0 <HAL_USB_USART_Send_Data+0xc>)
 80a1dd8:	681b      	ldr	r3, [r3, #0]
 80a1dda:	69db      	ldr	r3, [r3, #28]
 80a1ddc:	9301      	str	r3, [sp, #4]
 80a1dde:	bd08      	pop	{r3, pc}
 80a1de0:	080601d8 	.word	0x080601d8

080a1de4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a1de4:	b508      	push	{r3, lr}
 80a1de6:	4b02      	ldr	r3, [pc, #8]	; (80a1df0 <HAL_USB_USART_Flush_Data+0xc>)
 80a1de8:	681b      	ldr	r3, [r3, #0]
 80a1dea:	6a1b      	ldr	r3, [r3, #32]
 80a1dec:	9301      	str	r3, [sp, #4]
 80a1dee:	bd08      	pop	{r3, pc}
 80a1df0:	080601d8 	.word	0x080601d8

080a1df4 <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a1df4:	b508      	push	{r3, lr}
 80a1df6:	4b02      	ldr	r3, [pc, #8]	; (80a1e00 <inet_gethostbyname+0xc>)
 80a1df8:	681b      	ldr	r3, [r3, #0]
 80a1dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1dfc:	9301      	str	r3, [sp, #4]
 80a1dfe:	bd08      	pop	{r3, pc}
 80a1e00:	080601c0 	.word	0x080601c0

080a1e04 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a1e04:	b508      	push	{r3, lr}
 80a1e06:	4b02      	ldr	r3, [pc, #8]	; (80a1e10 <set_system_mode+0xc>)
 80a1e08:	681b      	ldr	r3, [r3, #0]
 80a1e0a:	685b      	ldr	r3, [r3, #4]
 80a1e0c:	9301      	str	r3, [sp, #4]
 80a1e0e:	bd08      	pop	{r3, pc}
 80a1e10:	080601a4 	.word	0x080601a4

080a1e14 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a1e14:	b508      	push	{r3, lr}
 80a1e16:	4b02      	ldr	r3, [pc, #8]	; (80a1e20 <system_delay_ms+0xc>)
 80a1e18:	681b      	ldr	r3, [r3, #0]
 80a1e1a:	695b      	ldr	r3, [r3, #20]
 80a1e1c:	9301      	str	r3, [sp, #4]
 80a1e1e:	bd08      	pop	{r3, pc}
 80a1e20:	080601a4 	.word	0x080601a4

080a1e24 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a1e24:	b508      	push	{r3, lr}
 80a1e26:	4b02      	ldr	r3, [pc, #8]	; (80a1e30 <application_thread_current+0xc>)
 80a1e28:	681b      	ldr	r3, [r3, #0]
 80a1e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1e2c:	9301      	str	r3, [sp, #4]
 80a1e2e:	bd08      	pop	{r3, pc}
 80a1e30:	080601a4 	.word	0x080601a4

080a1e34 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a1e34:	b508      	push	{r3, lr}
 80a1e36:	4b02      	ldr	r3, [pc, #8]	; (80a1e40 <application_thread_invoke+0xc>)
 80a1e38:	681b      	ldr	r3, [r3, #0]
 80a1e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1e3c:	9301      	str	r3, [sp, #4]
 80a1e3e:	bd08      	pop	{r3, pc}
 80a1e40:	080601a4 	.word	0x080601a4

080a1e44 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a1e44:	b508      	push	{r3, lr}
 80a1e46:	4b03      	ldr	r3, [pc, #12]	; (80a1e54 <system_ctrl_set_app_request_handler+0x10>)
 80a1e48:	681b      	ldr	r3, [r3, #0]
 80a1e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a1e4e:	9301      	str	r3, [sp, #4]
 80a1e50:	bd08      	pop	{r3, pc}
 80a1e52:	0000      	.short	0x0000
 80a1e54:	080601a4 	.word	0x080601a4

080a1e58 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a1e58:	b508      	push	{r3, lr}
 80a1e5a:	4b03      	ldr	r3, [pc, #12]	; (80a1e68 <system_ctrl_set_result+0x10>)
 80a1e5c:	681b      	ldr	r3, [r3, #0]
 80a1e5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a1e62:	9301      	str	r3, [sp, #4]
 80a1e64:	bd08      	pop	{r3, pc}
 80a1e66:	0000      	.short	0x0000
 80a1e68:	080601a4 	.word	0x080601a4

080a1e6c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1e6c:	b508      	push	{r3, lr}
 80a1e6e:	4b02      	ldr	r3, [pc, #8]	; (80a1e78 <network_connect+0xc>)
 80a1e70:	681b      	ldr	r3, [r3, #0]
 80a1e72:	685b      	ldr	r3, [r3, #4]
 80a1e74:	9301      	str	r3, [sp, #4]
 80a1e76:	bd08      	pop	{r3, pc}
 80a1e78:	080601c8 	.word	0x080601c8

080a1e7c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a1e7c:	b508      	push	{r3, lr}
 80a1e7e:	4b02      	ldr	r3, [pc, #8]	; (80a1e88 <network_connecting+0xc>)
 80a1e80:	681b      	ldr	r3, [r3, #0]
 80a1e82:	689b      	ldr	r3, [r3, #8]
 80a1e84:	9301      	str	r3, [sp, #4]
 80a1e86:	bd08      	pop	{r3, pc}
 80a1e88:	080601c8 	.word	0x080601c8

080a1e8c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a1e8c:	b508      	push	{r3, lr}
 80a1e8e:	4b02      	ldr	r3, [pc, #8]	; (80a1e98 <network_disconnect+0xc>)
 80a1e90:	681b      	ldr	r3, [r3, #0]
 80a1e92:	68db      	ldr	r3, [r3, #12]
 80a1e94:	9301      	str	r3, [sp, #4]
 80a1e96:	bd08      	pop	{r3, pc}
 80a1e98:	080601c8 	.word	0x080601c8

080a1e9c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a1e9c:	b508      	push	{r3, lr}
 80a1e9e:	4b02      	ldr	r3, [pc, #8]	; (80a1ea8 <network_ready+0xc>)
 80a1ea0:	681b      	ldr	r3, [r3, #0]
 80a1ea2:	691b      	ldr	r3, [r3, #16]
 80a1ea4:	9301      	str	r3, [sp, #4]
 80a1ea6:	bd08      	pop	{r3, pc}
 80a1ea8:	080601c8 	.word	0x080601c8

080a1eac <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1eac:	b508      	push	{r3, lr}
 80a1eae:	4b02      	ldr	r3, [pc, #8]	; (80a1eb8 <network_on+0xc>)
 80a1eb0:	681b      	ldr	r3, [r3, #0]
 80a1eb2:	695b      	ldr	r3, [r3, #20]
 80a1eb4:	9301      	str	r3, [sp, #4]
 80a1eb6:	bd08      	pop	{r3, pc}
 80a1eb8:	080601c8 	.word	0x080601c8

080a1ebc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1ebc:	b508      	push	{r3, lr}
 80a1ebe:	4b02      	ldr	r3, [pc, #8]	; (80a1ec8 <network_off+0xc>)
 80a1ec0:	681b      	ldr	r3, [r3, #0]
 80a1ec2:	699b      	ldr	r3, [r3, #24]
 80a1ec4:	9301      	str	r3, [sp, #4]
 80a1ec6:	bd08      	pop	{r3, pc}
 80a1ec8:	080601c8 	.word	0x080601c8

080a1ecc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1ecc:	b508      	push	{r3, lr}
 80a1ece:	4b02      	ldr	r3, [pc, #8]	; (80a1ed8 <network_listen+0xc>)
 80a1ed0:	681b      	ldr	r3, [r3, #0]
 80a1ed2:	69db      	ldr	r3, [r3, #28]
 80a1ed4:	9301      	str	r3, [sp, #4]
 80a1ed6:	bd08      	pop	{r3, pc}
 80a1ed8:	080601c8 	.word	0x080601c8

080a1edc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1edc:	b508      	push	{r3, lr}
 80a1ede:	4b02      	ldr	r3, [pc, #8]	; (80a1ee8 <network_listening+0xc>)
 80a1ee0:	681b      	ldr	r3, [r3, #0]
 80a1ee2:	6a1b      	ldr	r3, [r3, #32]
 80a1ee4:	9301      	str	r3, [sp, #4]
 80a1ee6:	bd08      	pop	{r3, pc}
 80a1ee8:	080601c8 	.word	0x080601c8

080a1eec <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1eec:	b508      	push	{r3, lr}
 80a1eee:	4b02      	ldr	r3, [pc, #8]	; (80a1ef8 <network_set_listen_timeout+0xc>)
 80a1ef0:	681b      	ldr	r3, [r3, #0]
 80a1ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1ef4:	9301      	str	r3, [sp, #4]
 80a1ef6:	bd08      	pop	{r3, pc}
 80a1ef8:	080601c8 	.word	0x080601c8

080a1efc <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1efc:	b508      	push	{r3, lr}
 80a1efe:	4b02      	ldr	r3, [pc, #8]	; (80a1f08 <network_get_listen_timeout+0xc>)
 80a1f00:	681b      	ldr	r3, [r3, #0]
 80a1f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1f04:	9301      	str	r3, [sp, #4]
 80a1f06:	bd08      	pop	{r3, pc}
 80a1f08:	080601c8 	.word	0x080601c8

080a1f0c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1f0c:	b508      	push	{r3, lr}
 80a1f0e:	4b02      	ldr	r3, [pc, #8]	; (80a1f18 <spark_function+0xc>)
 80a1f10:	681b      	ldr	r3, [r3, #0]
 80a1f12:	685b      	ldr	r3, [r3, #4]
 80a1f14:	9301      	str	r3, [sp, #4]
 80a1f16:	bd08      	pop	{r3, pc}
 80a1f18:	080601cc 	.word	0x080601cc

080a1f1c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1f1c:	b508      	push	{r3, lr}
 80a1f1e:	4b02      	ldr	r3, [pc, #8]	; (80a1f28 <spark_cloud_flag_connected+0xc>)
 80a1f20:	681b      	ldr	r3, [r3, #0]
 80a1f22:	695b      	ldr	r3, [r3, #20]
 80a1f24:	9301      	str	r3, [sp, #4]
 80a1f26:	bd08      	pop	{r3, pc}
 80a1f28:	080601cc 	.word	0x080601cc

080a1f2c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1f2c:	b508      	push	{r3, lr}
 80a1f2e:	4b02      	ldr	r3, [pc, #8]	; (80a1f38 <spark_send_event+0xc>)
 80a1f30:	681b      	ldr	r3, [r3, #0]
 80a1f32:	6a1b      	ldr	r3, [r3, #32]
 80a1f34:	9301      	str	r3, [sp, #4]
 80a1f36:	bd08      	pop	{r3, pc}
 80a1f38:	080601cc 	.word	0x080601cc

080a1f3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1f3c:	b508      	push	{r3, lr}
 80a1f3e:	4b02      	ldr	r3, [pc, #8]	; (80a1f48 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1f40:	681b      	ldr	r3, [r3, #0]
 80a1f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1f44:	9301      	str	r3, [sp, #4]
 80a1f46:	bd08      	pop	{r3, pc}
 80a1f48:	080601cc 	.word	0x080601cc

080a1f4c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a1f4c:	b508      	push	{r3, lr}
 80a1f4e:	4b02      	ldr	r3, [pc, #8]	; (80a1f58 <malloc+0xc>)
 80a1f50:	681b      	ldr	r3, [r3, #0]
 80a1f52:	681b      	ldr	r3, [r3, #0]
 80a1f54:	9301      	str	r3, [sp, #4]
 80a1f56:	bd08      	pop	{r3, pc}
 80a1f58:	080601a0 	.word	0x080601a0

080a1f5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a1f5c:	b508      	push	{r3, lr}
 80a1f5e:	4b02      	ldr	r3, [pc, #8]	; (80a1f68 <free+0xc>)
 80a1f60:	681b      	ldr	r3, [r3, #0]
 80a1f62:	685b      	ldr	r3, [r3, #4]
 80a1f64:	9301      	str	r3, [sp, #4]
 80a1f66:	bd08      	pop	{r3, pc}
 80a1f68:	080601a0 	.word	0x080601a0

080a1f6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a1f6c:	b508      	push	{r3, lr}
 80a1f6e:	4b02      	ldr	r3, [pc, #8]	; (80a1f78 <realloc+0xc>)
 80a1f70:	681b      	ldr	r3, [r3, #0]
 80a1f72:	689b      	ldr	r3, [r3, #8]
 80a1f74:	9301      	str	r3, [sp, #4]
 80a1f76:	bd08      	pop	{r3, pc}
 80a1f78:	080601a0 	.word	0x080601a0

080a1f7c <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a1f7c:	b508      	push	{r3, lr}
 80a1f7e:	4b02      	ldr	r3, [pc, #8]	; (80a1f88 <snprintf+0xc>)
 80a1f80:	681b      	ldr	r3, [r3, #0]
 80a1f82:	69db      	ldr	r3, [r3, #28]
 80a1f84:	9301      	str	r3, [sp, #4]
 80a1f86:	bd08      	pop	{r3, pc}
 80a1f88:	080601a0 	.word	0x080601a0

080a1f8c <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a1f8c:	b508      	push	{r3, lr}
 80a1f8e:	4b02      	ldr	r3, [pc, #8]	; (80a1f98 <abort+0xc>)
 80a1f90:	681b      	ldr	r3, [r3, #0]
 80a1f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a1f94:	9301      	str	r3, [sp, #4]
 80a1f96:	bd08      	pop	{r3, pc}
 80a1f98:	080601a0 	.word	0x080601a0

080a1f9c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a1f9c:	b508      	push	{r3, lr}
 80a1f9e:	4b02      	ldr	r3, [pc, #8]	; (80a1fa8 <_malloc_r+0xc>)
 80a1fa0:	681b      	ldr	r3, [r3, #0]
 80a1fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1fa4:	9301      	str	r3, [sp, #4]
 80a1fa6:	bd08      	pop	{r3, pc}
 80a1fa8:	080601a0 	.word	0x080601a0

080a1fac <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1fac:	b508      	push	{r3, lr}
 80a1fae:	4b02      	ldr	r3, [pc, #8]	; (80a1fb8 <__errno+0xc>)
 80a1fb0:	681b      	ldr	r3, [r3, #0]
 80a1fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a1fb4:	9301      	str	r3, [sp, #4]
 80a1fb6:	bd08      	pop	{r3, pc}
 80a1fb8:	080601a0 	.word	0x080601a0

080a1fbc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1fbc:	4770      	bx	lr

080a1fbe <_ZN8SPIClassD0Ev>:
 80a1fbe:	b510      	push	{r4, lr}
 80a1fc0:	4604      	mov	r4, r0
 80a1fc2:	2110      	movs	r1, #16
 80a1fc4:	f001 fa3e 	bl	80a3444 <_ZdlPvj>
 80a1fc8:	4620      	mov	r0, r4
 80a1fca:	bd10      	pop	{r4, pc}

080a1fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1fcc:	b570      	push	{r4, r5, r6, lr}
 80a1fce:	4604      	mov	r4, r0
 80a1fd0:	460e      	mov	r6, r1
 80a1fd2:	4b07      	ldr	r3, [pc, #28]	; (80a1ff0 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1fd4:	2500      	movs	r5, #0
 80a1fd6:	6003      	str	r3, [r0, #0]
 80a1fd8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1fdc:	f7ff fe30 	bl	80a1c40 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1fe0:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1fe2:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1fe4:	f7ff fdd4 	bl	80a1b90 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1fe8:	60a5      	str	r5, [r4, #8]
}
 80a1fea:	4620      	mov	r0, r4
 80a1fec:	bd70      	pop	{r4, r5, r6, pc}
 80a1fee:	bf00      	nop
 80a1ff0:	080a50b8 	.word	0x080a50b8

080a1ff4 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1ff4:	7900      	ldrb	r0, [r0, #4]
 80a1ff6:	f7ff bdd3 	b.w	80a1ba0 <HAL_SPI_Is_Enabled>

080a1ffa <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a1ffa:	4601      	mov	r1, r0
 80a1ffc:	2200      	movs	r2, #0
 80a1ffe:	208c      	movs	r0, #140	; 0x8c
 80a2000:	f7ff bdf6 	b.w	80a1bf0 <HAL_Core_System_Reset_Ex>

080a2004 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a2004:	2000      	movs	r0, #0
 80a2006:	f7ff bff8 	b.w	80a1ffa <_ZN11SystemClass5resetEm>
	...

080a200c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a200c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2010:	4b03      	ldr	r3, [pc, #12]	; (80a2020 <_GLOBAL__sub_I_System+0x14>)
 80a2012:	2000      	movs	r0, #0
 80a2014:	7018      	strb	r0, [r3, #0]
 80a2016:	8058      	strh	r0, [r3, #2]
 80a2018:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a201a:	f7ff bef3 	b.w	80a1e04 <set_system_mode>
 80a201e:	bf00      	nop
 80a2020:	200001ba 	.word	0x200001ba

080a2024 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a2024:	b510      	push	{r4, lr}
 80a2026:	4604      	mov	r4, r0
{
	free(buffer);
 80a2028:	6800      	ldr	r0, [r0, #0]
 80a202a:	f7ff ff97 	bl	80a1f5c <free>
}
 80a202e:	4620      	mov	r0, r4
 80a2030:	bd10      	pop	{r4, pc}

080a2032 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a2032:	b510      	push	{r4, lr}
 80a2034:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a2036:	6800      	ldr	r0, [r0, #0]
 80a2038:	b108      	cbz	r0, 80a203e <_ZN6String10invalidateEv+0xc>
 80a203a:	f7ff ff8f 	bl	80a1f5c <free>
	buffer = NULL;
 80a203e:	2300      	movs	r3, #0
 80a2040:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a2042:	60a3      	str	r3, [r4, #8]
 80a2044:	6063      	str	r3, [r4, #4]
 80a2046:	bd10      	pop	{r4, pc}

080a2048 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a2048:	b538      	push	{r3, r4, r5, lr}
 80a204a:	4604      	mov	r4, r0
 80a204c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a204e:	6800      	ldr	r0, [r0, #0]
 80a2050:	3101      	adds	r1, #1
 80a2052:	f7ff ff8b 	bl	80a1f6c <realloc>
	if (newbuffer) {
 80a2056:	b110      	cbz	r0, 80a205e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a2058:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a205c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a205e:	bd38      	pop	{r3, r4, r5, pc}

080a2060 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2060:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a2062:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a2064:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a2066:	b113      	cbz	r3, 80a206e <_ZN6String7reserveEj+0xe>
 80a2068:	6843      	ldr	r3, [r0, #4]
 80a206a:	428b      	cmp	r3, r1
 80a206c:	d207      	bcs.n	80a207e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a206e:	4620      	mov	r0, r4
 80a2070:	f7ff ffea 	bl	80a2048 <_ZN6String12changeBufferEj>
 80a2074:	b120      	cbz	r0, 80a2080 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a2076:	68a3      	ldr	r3, [r4, #8]
 80a2078:	b90b      	cbnz	r3, 80a207e <_ZN6String7reserveEj+0x1e>
 80a207a:	6822      	ldr	r2, [r4, #0]
 80a207c:	7013      	strb	r3, [r2, #0]
 80a207e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a2080:	bd10      	pop	{r4, pc}

080a2082 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2082:	b570      	push	{r4, r5, r6, lr}
 80a2084:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a2086:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a2088:	4604      	mov	r4, r0
 80a208a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a208c:	f7ff ffe8 	bl	80a2060 <_ZN6String7reserveEj>
 80a2090:	b918      	cbnz	r0, 80a209a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a2092:	4620      	mov	r0, r4
 80a2094:	f7ff ffcd 	bl	80a2032 <_ZN6String10invalidateEv>
		return *this;
 80a2098:	e009      	b.n	80a20ae <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a209a:	462a      	mov	r2, r5
 80a209c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a209e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a20a0:	6820      	ldr	r0, [r4, #0]
 80a20a2:	f002 fe2d 	bl	80a4d00 <memcpy>
	buffer[len] = 0;
 80a20a6:	6822      	ldr	r2, [r4, #0]
 80a20a8:	68a3      	ldr	r3, [r4, #8]
 80a20aa:	2100      	movs	r1, #0
 80a20ac:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a20ae:	4620      	mov	r0, r4
 80a20b0:	bd70      	pop	{r4, r5, r6, pc}

080a20b2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a20b2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a20b4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a20b6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a20b8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a20ba:	6043      	str	r3, [r0, #4]
	len = 0;
 80a20bc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a20be:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a20c0:	460d      	mov	r5, r1
 80a20c2:	b139      	cbz	r1, 80a20d4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a20c4:	4608      	mov	r0, r1
 80a20c6:	f002 fe7a 	bl	80a4dbe <strlen>
 80a20ca:	4629      	mov	r1, r5
 80a20cc:	4602      	mov	r2, r0
 80a20ce:	4620      	mov	r0, r4
 80a20d0:	f7ff ffd7 	bl	80a2082 <_ZN6String4copyEPKcj>
}
 80a20d4:	4620      	mov	r0, r4
 80a20d6:	bd38      	pop	{r3, r4, r5, pc}

080a20d8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a20d8:	b538      	push	{r3, r4, r5, lr}
 80a20da:	4605      	mov	r5, r0
	if (buffer) {
 80a20dc:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 80a20de:	460c      	mov	r4, r1
	if (buffer) {
 80a20e0:	b160      	cbz	r0, 80a20fc <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 80a20e2:	686a      	ldr	r2, [r5, #4]
 80a20e4:	688b      	ldr	r3, [r1, #8]
 80a20e6:	429a      	cmp	r2, r3
 80a20e8:	d306      	bcc.n	80a20f8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 80a20ea:	6809      	ldr	r1, [r1, #0]
 80a20ec:	f002 fe44 	bl	80a4d78 <strcpy>
			len = rhs.len;
 80a20f0:	68a3      	ldr	r3, [r4, #8]
 80a20f2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 80a20f4:	2300      	movs	r3, #0
 80a20f6:	e00a      	b.n	80a210e <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 80a20f8:	f7ff ff30 	bl	80a1f5c <free>
		}
	}
	buffer = rhs.buffer;
 80a20fc:	6823      	ldr	r3, [r4, #0]
 80a20fe:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 80a2100:	6863      	ldr	r3, [r4, #4]
 80a2102:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 80a2104:	68a3      	ldr	r3, [r4, #8]
 80a2106:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 80a2108:	2300      	movs	r3, #0
 80a210a:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 80a210c:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 80a210e:	60a3      	str	r3, [r4, #8]
 80a2110:	bd38      	pop	{r3, r4, r5, pc}

080a2112 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a2112:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a2114:	b510      	push	{r4, lr}
 80a2116:	460b      	mov	r3, r1
 80a2118:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a211a:	d007      	beq.n	80a212c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a211c:	6809      	ldr	r1, [r1, #0]
 80a211e:	b119      	cbz	r1, 80a2128 <_ZN6StringaSERKS_+0x16>
 80a2120:	689a      	ldr	r2, [r3, #8]
 80a2122:	f7ff ffae 	bl	80a2082 <_ZN6String4copyEPKcj>
 80a2126:	e001      	b.n	80a212c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a2128:	f7ff ff83 	bl	80a2032 <_ZN6String10invalidateEv>

	return *this;
}
 80a212c:	4620      	mov	r0, r4
 80a212e:	bd10      	pop	{r4, pc}

080a2130 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a2130:	b510      	push	{r4, lr}
 80a2132:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a2134:	2300      	movs	r3, #0
 80a2136:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a2138:	6043      	str	r3, [r0, #4]
	len = 0;
 80a213a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a213c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a213e:	f7ff ffe8 	bl	80a2112 <_ZN6StringaSERKS_>
}
 80a2142:	4620      	mov	r0, r4
 80a2144:	bd10      	pop	{r4, pc}

080a2146 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 80a2146:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 80a2148:	b510      	push	{r4, lr}
 80a214a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 80a214c:	d001      	beq.n	80a2152 <_ZN6StringaSEOS_+0xc>
 80a214e:	f7ff ffc3 	bl	80a20d8 <_ZN6String4moveERS_>
	return *this;
}
 80a2152:	4620      	mov	r0, r4
 80a2154:	bd10      	pop	{r4, pc}

080a2156 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a2156:	b538      	push	{r3, r4, r5, lr}
 80a2158:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a215a:	460c      	mov	r4, r1
 80a215c:	b141      	cbz	r1, 80a2170 <_ZN6StringaSEPKc+0x1a>
 80a215e:	4608      	mov	r0, r1
 80a2160:	f002 fe2d 	bl	80a4dbe <strlen>
 80a2164:	4621      	mov	r1, r4
 80a2166:	4602      	mov	r2, r0
 80a2168:	4628      	mov	r0, r5
 80a216a:	f7ff ff8a 	bl	80a2082 <_ZN6String4copyEPKcj>
 80a216e:	e001      	b.n	80a2174 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a2170:	f7ff ff5f 	bl	80a2032 <_ZN6String10invalidateEv>

	return *this;
}
 80a2174:	4628      	mov	r0, r5
 80a2176:	bd38      	pop	{r3, r4, r5, pc}

080a2178 <_ZNK6String16equalsIgnoreCaseERKS_>:
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
 80a2178:	4288      	cmp	r0, r1
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
 80a217a:	b570      	push	{r4, r5, r6, lr}
	if (this == &s2) return 1;
 80a217c:	d015      	beq.n	80a21aa <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
	if (len != s2.len) return 0;
 80a217e:	6883      	ldr	r3, [r0, #8]
 80a2180:	688a      	ldr	r2, [r1, #8]
 80a2182:	4293      	cmp	r3, r2
 80a2184:	d10f      	bne.n	80a21a6 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
	if (len == 0) return 1;
 80a2186:	b183      	cbz	r3, 80a21aa <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
 80a2188:	6804      	ldr	r4, [r0, #0]
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
 80a218a:	680d      	ldr	r5, [r1, #0]
 80a218c:	3c01      	subs	r4, #1
	while (*p1) {
 80a218e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80a2192:	b150      	cbz	r0, 80a21aa <_ZNK6String16equalsIgnoreCaseERKS_+0x32>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
 80a2194:	f002 fec6 	bl	80a4f24 <tolower>
 80a2198:	4606      	mov	r6, r0
 80a219a:	f815 0b01 	ldrb.w	r0, [r5], #1
 80a219e:	f002 fec1 	bl	80a4f24 <tolower>
 80a21a2:	4286      	cmp	r6, r0
 80a21a4:	d0f3      	beq.n	80a218e <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
 80a21a6:	2000      	movs	r0, #0
 80a21a8:	bd70      	pop	{r4, r5, r6, pc}
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
 80a21aa:	2001      	movs	r0, #1
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	}
	return 1;
}
 80a21ac:	bd70      	pop	{r4, r5, r6, pc}

080a21ae <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 80a21ae:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 80a21b0:	6883      	ldr	r3, [r0, #8]
 80a21b2:	4293      	cmp	r3, r2
 80a21b4:	d907      	bls.n	80a21c6 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 80a21b6:	6804      	ldr	r4, [r0, #0]
 80a21b8:	6809      	ldr	r1, [r1, #0]
 80a21ba:	18a0      	adds	r0, r4, r2
 80a21bc:	f002 fe07 	bl	80a4dce <strstr>
	if (found == NULL) return -1;
 80a21c0:	b108      	cbz	r0, 80a21c6 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 80a21c2:	1b00      	subs	r0, r0, r4
 80a21c4:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 80a21c6:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
 80a21ca:	bd10      	pop	{r4, pc}

080a21cc <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
 80a21cc:	2200      	movs	r2, #0
 80a21ce:	f7ff bfee 	b.w	80a21ae <_ZNK6String7indexOfERKS_j>
	...

080a21d4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a21d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a21d8:	461c      	mov	r4, r3
	if (left > right) {
 80a21da:	429a      	cmp	r2, r3
 80a21dc:	bf88      	it	hi
 80a21de:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a21e0:	460e      	mov	r6, r1
 80a21e2:	4615      	mov	r5, r2
	if (left > right) {
 80a21e4:	bf88      	it	hi
 80a21e6:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a21e8:	490d      	ldr	r1, [pc, #52]	; (80a2220 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80a21ea:	bf88      	it	hi
 80a21ec:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80a21ee:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80a21f0:	f7ff ff5f 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80a21f4:	68b1      	ldr	r1, [r6, #8]
 80a21f6:	428d      	cmp	r5, r1
 80a21f8:	d80f      	bhi.n	80a221a <_ZNK6String9substringEjj+0x46>
 80a21fa:	428c      	cmp	r4, r1
 80a21fc:	bf28      	it	cs
 80a21fe:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a2200:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80a2202:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80a2204:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80a2208:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80a220a:	6831      	ldr	r1, [r6, #0]
 80a220c:	4638      	mov	r0, r7
 80a220e:	4429      	add	r1, r5
 80a2210:	f7ff ffa1 	bl	80a2156 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80a2214:	6833      	ldr	r3, [r6, #0]
 80a2216:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80a221a:	4638      	mov	r0, r7
 80a221c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2220:	080a5178 	.word	0x080a5178

080a2224 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
 80a2224:	b510      	push	{r4, lr}
 80a2226:	4604      	mov	r4, r0
	return substring(left, len);
 80a2228:	688b      	ldr	r3, [r1, #8]
 80a222a:	f7ff ffd3 	bl	80a21d4 <_ZNK6String9substringEjj>
}
 80a222e:	4620      	mov	r0, r4
 80a2230:	bd10      	pop	{r4, pc}

080a2232 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a2232:	6800      	ldr	r0, [r0, #0]
 80a2234:	b108      	cbz	r0, 80a223a <_ZNK6String5toIntEv+0x8>
 80a2236:	f002 bd51 	b.w	80a4cdc <atol>
	return 0;
}
 80a223a:	4770      	bx	lr

080a223c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a223e:	4606      	mov	r6, r0
 80a2240:	460d      	mov	r5, r1
 80a2242:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a2244:	2400      	movs	r4, #0
  while (size--) {
 80a2246:	42bd      	cmp	r5, r7
 80a2248:	d00c      	beq.n	80a2264 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a224a:	6833      	ldr	r3, [r6, #0]
 80a224c:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a2250:	689b      	ldr	r3, [r3, #8]
 80a2252:	4630      	mov	r0, r6
 80a2254:	4798      	blx	r3
     if (chunk>=0)
 80a2256:	2800      	cmp	r0, #0
 80a2258:	db01      	blt.n	80a225e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a225a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a225c:	e7f3      	b.n	80a2246 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a225e:	2c00      	cmp	r4, #0
 80a2260:	bf08      	it	eq
 80a2262:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a2264:	4620      	mov	r0, r4
 80a2266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2268 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a2268:	b570      	push	{r4, r5, r6, lr}
 80a226a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a226c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a226e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a2270:	b149      	cbz	r1, 80a2286 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a2272:	f002 fda4 	bl	80a4dbe <strlen>
 80a2276:	682b      	ldr	r3, [r5, #0]
 80a2278:	4602      	mov	r2, r0
 80a227a:	4621      	mov	r1, r4
 80a227c:	4628      	mov	r0, r5
    }
 80a227e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a2282:	68db      	ldr	r3, [r3, #12]
 80a2284:	4718      	bx	r3
    }
 80a2286:	bd70      	pop	{r4, r5, r6, pc}

080a2288 <_ZN5Print5printEPKc>:
 80a2288:	b508      	push	{r3, lr}
 80a228a:	f7ff ffed 	bl	80a2268 <_ZN5Print5writeEPKc>
 80a228e:	bd08      	pop	{r3, pc}

080a2290 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a2290:	6803      	ldr	r3, [r0, #0]
 80a2292:	689b      	ldr	r3, [r3, #8]
 80a2294:	4718      	bx	r3

080a2296 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a2296:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a2298:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a229a:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a229c:	f7ff fff8 	bl	80a2290 <_ZN5Print5printEc>
  n += print('\n');
 80a22a0:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a22a2:	4604      	mov	r4, r0
  n += print('\n');
 80a22a4:	4628      	mov	r0, r5
 80a22a6:	f7ff fff3 	bl	80a2290 <_ZN5Print5printEc>
  return n;
}
 80a22aa:	4420      	add	r0, r4
 80a22ac:	bd38      	pop	{r3, r4, r5, pc}

080a22ae <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a22ae:	2a01      	cmp	r2, #1
 80a22b0:	bf98      	it	ls
 80a22b2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a22b4:	b530      	push	{r4, r5, lr}
 80a22b6:	460b      	mov	r3, r1
 80a22b8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a22ba:	2100      	movs	r1, #0
 80a22bc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a22c0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a22c4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a22c8:	fb05 3312 	mls	r3, r5, r2, r3
 80a22cc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a22ce:	2b09      	cmp	r3, #9
 80a22d0:	bf94      	ite	ls
 80a22d2:	3330      	addls	r3, #48	; 0x30
 80a22d4:	3337      	addhi	r3, #55	; 0x37
 80a22d6:	b2db      	uxtb	r3, r3
 80a22d8:	4621      	mov	r1, r4
 80a22da:	f804 3901 	strb.w	r3, [r4], #-1
 80a22de:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a22e0:	2d00      	cmp	r5, #0
 80a22e2:	d1ef      	bne.n	80a22c4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a22e4:	f7ff ffc0 	bl	80a2268 <_ZN5Print5writeEPKc>
}
 80a22e8:	b00b      	add	sp, #44	; 0x2c
 80a22ea:	bd30      	pop	{r4, r5, pc}

080a22ec <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a22ec:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a22ee:	b922      	cbnz	r2, 80a22fa <_ZN5Print5printEmi+0xe>
 80a22f0:	6803      	ldr	r3, [r0, #0]
 80a22f2:	b2c9      	uxtb	r1, r1
 80a22f4:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a22f6:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a22f8:	4718      	bx	r3
  else return printNumber(n, base);
 80a22fa:	b2d2      	uxtb	r2, r2
}
 80a22fc:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a22fe:	f7ff bfd6 	b.w	80a22ae <_ZN5Print11printNumberEmh>

080a2302 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a2302:	f7ff bff3 	b.w	80a22ec <_ZN5Print5printEmi>

080a2306 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a2306:	b538      	push	{r3, r4, r5, lr}
 80a2308:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a230a:	f7ff ffef 	bl	80a22ec <_ZN5Print5printEmi>
 80a230e:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a2310:	4628      	mov	r0, r5
 80a2312:	f7ff ffc0 	bl	80a2296 <_ZN5Print7printlnEv>
  return n;
}
 80a2316:	4420      	add	r0, r4
 80a2318:	bd38      	pop	{r3, r4, r5, pc}

080a231a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a231a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a231e:	4607      	mov	r7, r0
 80a2320:	460e      	mov	r6, r1
  if (base == 0) {
 80a2322:	4615      	mov	r5, r2
 80a2324:	b92a      	cbnz	r2, 80a2332 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a2326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a232a:	6803      	ldr	r3, [r0, #0]
 80a232c:	b2c9      	uxtb	r1, r1
 80a232e:	689b      	ldr	r3, [r3, #8]
 80a2330:	4718      	bx	r3
  } else if (base == 10) {
 80a2332:	2a0a      	cmp	r2, #10
 80a2334:	d102      	bne.n	80a233c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a2336:	2900      	cmp	r1, #0
 80a2338:	da01      	bge.n	80a233e <_ZN5Print5printEli+0x24>
 80a233a:	e004      	b.n	80a2346 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a233c:	b2d2      	uxtb	r2, r2
  }
}
 80a233e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a2342:	f7ff bfb4 	b.w	80a22ae <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a2346:	212d      	movs	r1, #45	; 0x2d
 80a2348:	f7ff ffa2 	bl	80a2290 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a234c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a234e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a2350:	4271      	negs	r1, r6
 80a2352:	4638      	mov	r0, r7
 80a2354:	f7ff ffab 	bl	80a22ae <_ZN5Print11printNumberEmh>
 80a2358:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a235a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a235e <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a235e:	f7ff bfdc 	b.w	80a231a <_ZN5Print5printEli>

080a2362 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a2362:	b538      	push	{r3, r4, r5, lr}
 80a2364:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2366:	f7ff ffd8 	bl	80a231a <_ZN5Print5printEli>
 80a236a:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a236c:	4628      	mov	r0, r5
 80a236e:	f7ff ff92 	bl	80a2296 <_ZN5Print7printlnEv>
  return n;
}
 80a2372:	4420      	add	r0, r4
 80a2374:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2378 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a237c:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a237e:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a2380:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a2382:	4617      	mov	r7, r2
 80a2384:	461e      	mov	r6, r3
 80a2386:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a238a:	f002 f90f 	bl	80a45ac <__aeabi_dcmpun>
 80a238e:	b108      	cbz	r0, 80a2394 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a2390:	4947      	ldr	r1, [pc, #284]	; (80a24b0 <_ZN5Print10printFloatEdh+0x138>)
 80a2392:	e012      	b.n	80a23ba <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a2394:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a2398:	f04f 32ff 	mov.w	r2, #4294967295
 80a239c:	4b45      	ldr	r3, [pc, #276]	; (80a24b4 <_ZN5Print10printFloatEdh+0x13c>)
 80a239e:	4638      	mov	r0, r7
 80a23a0:	4621      	mov	r1, r4
 80a23a2:	f002 f903 	bl	80a45ac <__aeabi_dcmpun>
 80a23a6:	b968      	cbnz	r0, 80a23c4 <_ZN5Print10printFloatEdh+0x4c>
 80a23a8:	f04f 32ff 	mov.w	r2, #4294967295
 80a23ac:	4b41      	ldr	r3, [pc, #260]	; (80a24b4 <_ZN5Print10printFloatEdh+0x13c>)
 80a23ae:	4638      	mov	r0, r7
 80a23b0:	4621      	mov	r1, r4
 80a23b2:	f002 f8dd 	bl	80a4570 <__aeabi_dcmple>
 80a23b6:	b928      	cbnz	r0, 80a23c4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23b8:	493f      	ldr	r1, [pc, #252]	; (80a24b8 <_ZN5Print10printFloatEdh+0x140>)
 80a23ba:	4640      	mov	r0, r8
 80a23bc:	f7ff ff54 	bl	80a2268 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a23c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a23c4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a23c8:	4b3c      	ldr	r3, [pc, #240]	; (80a24bc <_ZN5Print10printFloatEdh+0x144>)
 80a23ca:	4638      	mov	r0, r7
 80a23cc:	4631      	mov	r1, r6
 80a23ce:	f002 f8e3 	bl	80a4598 <__aeabi_dcmpgt>
 80a23d2:	b108      	cbz	r0, 80a23d8 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a23d4:	493a      	ldr	r1, [pc, #232]	; (80a24c0 <_ZN5Print10printFloatEdh+0x148>)
 80a23d6:	e7f0      	b.n	80a23ba <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a23d8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a23dc:	4b39      	ldr	r3, [pc, #228]	; (80a24c4 <_ZN5Print10printFloatEdh+0x14c>)
 80a23de:	4638      	mov	r0, r7
 80a23e0:	4631      	mov	r1, r6
 80a23e2:	f002 f8bb 	bl	80a455c <__aeabi_dcmplt>
 80a23e6:	2800      	cmp	r0, #0
 80a23e8:	d1f4      	bne.n	80a23d4 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a23ea:	2200      	movs	r2, #0
 80a23ec:	2300      	movs	r3, #0
 80a23ee:	4638      	mov	r0, r7
 80a23f0:	4631      	mov	r1, r6
 80a23f2:	f002 f8b3 	bl	80a455c <__aeabi_dcmplt>
 80a23f6:	b138      	cbz	r0, 80a2408 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a23f8:	212d      	movs	r1, #45	; 0x2d
 80a23fa:	4640      	mov	r0, r8
 80a23fc:	f7ff ff48 	bl	80a2290 <_ZN5Print5printEc>
     number = -number;
 80a2400:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a2404:	4604      	mov	r4, r0
 80a2406:	e000      	b.n	80a240a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a2408:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a240a:	492f      	ldr	r1, [pc, #188]	; (80a24c8 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a240c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a2410:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a2412:	fa5f f389 	uxtb.w	r3, r9
 80a2416:	429d      	cmp	r5, r3
 80a2418:	d906      	bls.n	80a2428 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a241a:	2200      	movs	r2, #0
 80a241c:	4b2b      	ldr	r3, [pc, #172]	; (80a24cc <_ZN5Print10printFloatEdh+0x154>)
 80a241e:	f001 ff55 	bl	80a42cc <__aeabi_ddiv>
 80a2422:	f109 0901 	add.w	r9, r9, #1
 80a2426:	e7f4      	b.n	80a2412 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a2428:	463a      	mov	r2, r7
 80a242a:	4633      	mov	r3, r6
 80a242c:	f001 fc72 	bl	80a3d14 <__adddf3>
 80a2430:	460f      	mov	r7, r1
 80a2432:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a2434:	f002 f8f8 	bl	80a4628 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a2438:	220a      	movs	r2, #10
 80a243a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a243c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a243e:	4640      	mov	r0, r8
 80a2440:	f7ff ff35 	bl	80a22ae <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a2444:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a2446:	b37d      	cbz	r5, 80a24a8 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a2448:	4648      	mov	r0, r9
 80a244a:	f001 fd9f 	bl	80a3f8c <__aeabi_ui2d>
 80a244e:	4602      	mov	r2, r0
 80a2450:	460b      	mov	r3, r1
 80a2452:	4630      	mov	r0, r6
 80a2454:	4639      	mov	r1, r7
 80a2456:	f001 fc5b 	bl	80a3d10 <__aeabi_dsub>
 80a245a:	4606      	mov	r6, r0
 80a245c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a245e:	4640      	mov	r0, r8
 80a2460:	491b      	ldr	r1, [pc, #108]	; (80a24d0 <_ZN5Print10printFloatEdh+0x158>)
 80a2462:	f7ff ff01 	bl	80a2268 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a2466:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a2468:	4b18      	ldr	r3, [pc, #96]	; (80a24cc <_ZN5Print10printFloatEdh+0x154>)
 80a246a:	2200      	movs	r2, #0
 80a246c:	4630      	mov	r0, r6
 80a246e:	4639      	mov	r1, r7
 80a2470:	f001 fe02 	bl	80a4078 <__aeabi_dmul>
 80a2474:	460f      	mov	r7, r1
 80a2476:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a2478:	f002 f8ae 	bl	80a45d8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a247c:	220a      	movs	r2, #10
 80a247e:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a2480:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a2482:	4640      	mov	r0, r8
 80a2484:	f7ff ff49 	bl	80a231a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a2488:	4404      	add	r4, r0
    remainder -= toPrint;
 80a248a:	4648      	mov	r0, r9
 80a248c:	f001 fd8e 	bl	80a3fac <__aeabi_i2d>
 80a2490:	4602      	mov	r2, r0
 80a2492:	460b      	mov	r3, r1
 80a2494:	4630      	mov	r0, r6
 80a2496:	4639      	mov	r1, r7
 80a2498:	f001 fc3a 	bl	80a3d10 <__aeabi_dsub>
 80a249c:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a249e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a24a2:	4606      	mov	r6, r0
 80a24a4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a24a6:	d1df      	bne.n	80a2468 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a24a8:	4620      	mov	r0, r4
 80a24aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a24ae:	bf00      	nop
 80a24b0:	080a50c0 	.word	0x080a50c0
 80a24b4:	7fefffff 	.word	0x7fefffff
 80a24b8:	080a50ca 	.word	0x080a50ca
 80a24bc:	41efffff 	.word	0x41efffff
 80a24c0:	080a50c4 	.word	0x080a50c4
 80a24c4:	c1efffff 	.word	0xc1efffff
 80a24c8:	3fe00000 	.word	0x3fe00000
 80a24cc:	40240000 	.word	0x40240000
 80a24d0:	080a50c8 	.word	0x080a50c8

080a24d4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a24d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a24d6:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a24da:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a24dc:	9100      	str	r1, [sp, #0]
 80a24de:	f7ff ff4b 	bl	80a2378 <_ZN5Print10printFloatEdh>
 80a24e2:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a24e4:	4628      	mov	r0, r5
 80a24e6:	f7ff fed6 	bl	80a2296 <_ZN5Print7printlnEv>
  return n;
}
 80a24ea:	4420      	add	r0, r4
 80a24ec:	b003      	add	sp, #12
 80a24ee:	bd30      	pop	{r4, r5, pc}

080a24f0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a24f0:	2300      	movs	r3, #0
 80a24f2:	461a      	mov	r2, r3
 80a24f4:	4619      	mov	r1, r3
 80a24f6:	6840      	ldr	r0, [r0, #4]
 80a24f8:	f7ff bcd8 	b.w	80a1eac <network_on>

080a24fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a24fc:	680b      	ldr	r3, [r1, #0]
 80a24fe:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a2500:	b113      	cbz	r3, 80a2508 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a2502:	685a      	ldr	r2, [r3, #4]
 80a2504:	3201      	adds	r2, #1
 80a2506:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a2508:	4770      	bx	lr
	...

080a250c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a250c:	4a01      	ldr	r2, [pc, #4]	; (80a2514 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a250e:	4b02      	ldr	r3, [pc, #8]	; (80a2518 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a2510:	601a      	str	r2, [r3, #0]
 80a2512:	4770      	bx	lr
 80a2514:	080a5144 	.word	0x080a5144
 80a2518:	200001c0 	.word	0x200001c0

080a251c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a251c:	4b02      	ldr	r3, [pc, #8]	; (80a2528 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a251e:	681a      	ldr	r2, [r3, #0]
 80a2520:	4b02      	ldr	r3, [pc, #8]	; (80a252c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a2522:	601a      	str	r2, [r3, #0]
 80a2524:	4770      	bx	lr
 80a2526:	bf00      	nop
 80a2528:	20000034 	.word	0x20000034
 80a252c:	200001c4 	.word	0x200001c4

080a2530 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a2530:	2100      	movs	r1, #0
 80a2532:	f7ff bc6f 	b.w	80a1e14 <system_delay_ms>

080a2536 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a2536:	b510      	push	{r4, lr}
 80a2538:	4604      	mov	r4, r0
 80a253a:	f7fd fe4a 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
 80a253e:	4620      	mov	r0, r4
 80a2540:	bd10      	pop	{r4, pc}

080a2542 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a2542:	b513      	push	{r0, r1, r4, lr}
 80a2544:	460b      	mov	r3, r1
 80a2546:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2548:	c803      	ldmia	r0, {r0, r1}
 80a254a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a254e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a2552:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a2556:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a255a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a255e:	b002      	add	sp, #8
 80a2560:	bd10      	pop	{r4, pc}
	...

080a2564 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2564:	4803      	ldr	r0, [pc, #12]	; (80a2574 <_GLOBAL__sub_I_RGB+0x10>)
 80a2566:	2300      	movs	r3, #0
 80a2568:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a256a:	4a03      	ldr	r2, [pc, #12]	; (80a2578 <_GLOBAL__sub_I_RGB+0x14>)
 80a256c:	4903      	ldr	r1, [pc, #12]	; (80a257c <_GLOBAL__sub_I_RGB+0x18>)
 80a256e:	f000 bf5b 	b.w	80a3428 <__aeabi_atexit>
 80a2572:	bf00      	nop
 80a2574:	200001c8 	.word	0x200001c8
 80a2578:	200000a4 	.word	0x200000a4
 80a257c:	080a2537 	.word	0x080a2537

080a2580 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a2580:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a2582:	4b14      	ldr	r3, [pc, #80]	; (80a25d4 <serialEventRun+0x54>)
 80a2584:	b133      	cbz	r3, 80a2594 <serialEventRun+0x14>
 80a2586:	f000 fc57 	bl	80a2e38 <_Z16_fetch_usbserialv>
 80a258a:	6803      	ldr	r3, [r0, #0]
 80a258c:	691b      	ldr	r3, [r3, #16]
 80a258e:	4798      	blx	r3
 80a2590:	2800      	cmp	r0, #0
 80a2592:	dc16      	bgt.n	80a25c2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a2594:	4b10      	ldr	r3, [pc, #64]	; (80a25d8 <serialEventRun+0x58>)
 80a2596:	b133      	cbz	r3, 80a25a6 <serialEventRun+0x26>
 80a2598:	f000 fd10 	bl	80a2fbc <_Z22__fetch_global_Serial1v>
 80a259c:	6803      	ldr	r3, [r0, #0]
 80a259e:	691b      	ldr	r3, [r3, #16]
 80a25a0:	4798      	blx	r3
 80a25a2:	2800      	cmp	r0, #0
 80a25a4:	dc10      	bgt.n	80a25c8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a25a6:	4b0d      	ldr	r3, [pc, #52]	; (80a25dc <serialEventRun+0x5c>)
 80a25a8:	b10b      	cbz	r3, 80a25ae <serialEventRun+0x2e>
 80a25aa:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a25ae:	4b0c      	ldr	r3, [pc, #48]	; (80a25e0 <serialEventRun+0x60>)
 80a25b0:	b17b      	cbz	r3, 80a25d2 <serialEventRun+0x52>
 80a25b2:	f000 fc7d 	bl	80a2eb0 <_Z17_fetch_usbserial1v>
 80a25b6:	6803      	ldr	r3, [r0, #0]
 80a25b8:	691b      	ldr	r3, [r3, #16]
 80a25ba:	4798      	blx	r3
 80a25bc:	2800      	cmp	r0, #0
 80a25be:	dc06      	bgt.n	80a25ce <serialEventRun+0x4e>
 80a25c0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a25c2:	f3af 8000 	nop.w
 80a25c6:	e7e5      	b.n	80a2594 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a25c8:	f3af 8000 	nop.w
 80a25cc:	e7eb      	b.n	80a25a6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a25ce:	f3af 8000 	nop.w
 80a25d2:	bd08      	pop	{r3, pc}
	...

080a25e4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a25e4:	b508      	push	{r3, lr}
	serialEventRun();
 80a25e6:	f7ff ffcb 	bl	80a2580 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a25ea:	f7ff faf9 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a25ee:	4b01      	ldr	r3, [pc, #4]	; (80a25f4 <_post_loop+0x10>)
 80a25f0:	6018      	str	r0, [r3, #0]
 80a25f2:	bd08      	pop	{r3, pc}
 80a25f4:	2000066c 	.word	0x2000066c

080a25f8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a25f8:	4802      	ldr	r0, [pc, #8]	; (80a2604 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a25fa:	4a03      	ldr	r2, [pc, #12]	; (80a2608 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a25fc:	4903      	ldr	r1, [pc, #12]	; (80a260c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a25fe:	1a12      	subs	r2, r2, r0
 80a2600:	f002 bb7e 	b.w	80a4d00 <memcpy>
 80a2604:	40024000 	.word	0x40024000
 80a2608:	40024064 	.word	0x40024064
 80a260c:	080a54c0 	.word	0x080a54c0

080a2610 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a2610:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2612:	2300      	movs	r3, #0
 80a2614:	9300      	str	r3, [sp, #0]
 80a2616:	461a      	mov	r2, r3
 80a2618:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a261c:	f7ff fc1c 	bl	80a1e58 <system_ctrl_set_result>
}
 80a2620:	b003      	add	sp, #12
 80a2622:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a2628 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a2628:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a262a:	8843      	ldrh	r3, [r0, #2]
 80a262c:	2b0a      	cmp	r3, #10
 80a262e:	d008      	beq.n	80a2642 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a2630:	2b50      	cmp	r3, #80	; 0x50
 80a2632:	d109      	bne.n	80a2648 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a2634:	4b09      	ldr	r3, [pc, #36]	; (80a265c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a2636:	681b      	ldr	r3, [r3, #0]
 80a2638:	b13b      	cbz	r3, 80a264a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a263a:	b003      	add	sp, #12
 80a263c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a2640:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a2642:	f7ff ffe5 	bl	80a2610 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a2646:	e006      	b.n	80a2656 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a2648:	2300      	movs	r3, #0
 80a264a:	9300      	str	r3, [sp, #0]
 80a264c:	461a      	mov	r2, r3
 80a264e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a2652:	f7ff fc01 	bl	80a1e58 <system_ctrl_set_result>
        break;
    }
}
 80a2656:	b003      	add	sp, #12
 80a2658:	f85d fb04 	ldr.w	pc, [sp], #4
 80a265c:	200001d8 	.word	0x200001d8

080a2660 <module_user_init_hook>:

void module_user_init_hook()
{
 80a2660:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a2662:	4c10      	ldr	r4, [pc, #64]	; (80a26a4 <module_user_init_hook+0x44>)
 80a2664:	4d10      	ldr	r5, [pc, #64]	; (80a26a8 <module_user_init_hook+0x48>)
 80a2666:	6823      	ldr	r3, [r4, #0]
 80a2668:	42ab      	cmp	r3, r5
 80a266a:	4b10      	ldr	r3, [pc, #64]	; (80a26ac <module_user_init_hook+0x4c>)
 80a266c:	bf0c      	ite	eq
 80a266e:	2201      	moveq	r2, #1
 80a2670:	2200      	movne	r2, #0
 80a2672:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a2674:	d002      	beq.n	80a267c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a2676:	f7ff ffbf 	bl	80a25f8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a267a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a267c:	f7ff fa98 	bl	80a1bb0 <HAL_RNG_GetRandomNumber>
 80a2680:	4604      	mov	r4, r0
    srand(seed);
 80a2682:	f002 fb51 	bl	80a4d28 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a2686:	4b0a      	ldr	r3, [pc, #40]	; (80a26b0 <module_user_init_hook+0x50>)
 80a2688:	b113      	cbz	r3, 80a2690 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a268a:	4620      	mov	r0, r4
 80a268c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a2690:	2100      	movs	r1, #0
 80a2692:	4807      	ldr	r0, [pc, #28]	; (80a26b0 <module_user_init_hook+0x50>)
 80a2694:	f7ff fc52 	bl	80a1f3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a2698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a269c:	2100      	movs	r1, #0
 80a269e:	4805      	ldr	r0, [pc, #20]	; (80a26b4 <module_user_init_hook+0x54>)
 80a26a0:	f7ff bbd0 	b.w	80a1e44 <system_ctrl_set_app_request_handler>
 80a26a4:	40024060 	.word	0x40024060
 80a26a8:	9a271c1e 	.word	0x9a271c1e
 80a26ac:	200001dc 	.word	0x200001dc
 80a26b0:	00000000 	.word	0x00000000
 80a26b4:	080a2629 	.word	0x080a2629

080a26b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a26b8:	4770      	bx	lr

080a26ba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a26ba:	2000      	movs	r0, #0
 80a26bc:	4770      	bx	lr

080a26be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a26be:	b510      	push	{r4, lr}
 80a26c0:	4604      	mov	r4, r0
 80a26c2:	2110      	movs	r1, #16
 80a26c4:	f000 febe 	bl	80a3444 <_ZdlPvj>
 80a26c8:	4620      	mov	r0, r4
 80a26ca:	bd10      	pop	{r4, pc}

080a26cc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a26cc:	b508      	push	{r3, lr}
      { delete this; }
 80a26ce:	b108      	cbz	r0, 80a26d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a26d0:	f7ff fff5 	bl	80a26be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a26d4:	bd08      	pop	{r3, pc}

080a26d6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a26d6:	2200      	movs	r2, #0
 80a26d8:	6002      	str	r2, [r0, #0]
 80a26da:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a26de:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a26e0:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a26e2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a26e6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26e8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a26ea:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a26ec:	680c      	ldr	r4, [r1, #0]
 80a26ee:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a26f0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a26f2:	bd10      	pop	{r4, pc}

080a26f4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a26f4:	b510      	push	{r4, lr}
 80a26f6:	4604      	mov	r4, r0
    free((void*)msg_);
 80a26f8:	6800      	ldr	r0, [r0, #0]
 80a26fa:	f7ff fc2f 	bl	80a1f5c <free>
}
 80a26fe:	4620      	mov	r0, r4
 80a2700:	bd10      	pop	{r4, pc}

080a2702 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a2702:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a2704:	68c4      	ldr	r4, [r0, #12]
 80a2706:	b1f4      	cbz	r4, 80a2746 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a2708:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a270a:	2b02      	cmp	r3, #2
 80a270c:	d103      	bne.n	80a2716 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a270e:	f104 000c 	add.w	r0, r4, #12
 80a2712:	f7ff ffef 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a2716:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a2718:	b135      	cbz	r5, 80a2728 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a271a:	4628      	mov	r0, r5
 80a271c:	f7fd fd59 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
 80a2720:	2110      	movs	r1, #16
 80a2722:	4628      	mov	r0, r5
 80a2724:	f000 fe8e 	bl	80a3444 <_ZdlPvj>
 80a2728:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a272a:	b135      	cbz	r5, 80a273a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a272c:	4628      	mov	r0, r5
 80a272e:	f7fd fd50 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
 80a2732:	2110      	movs	r1, #16
 80a2734:	4628      	mov	r0, r5
 80a2736:	f000 fe85 	bl	80a3444 <_ZdlPvj>
 80a273a:	4620      	mov	r0, r4
 80a273c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a2740:	2114      	movs	r1, #20
 80a2742:	f000 be7f 	b.w	80a3444 <_ZdlPvj>
 80a2746:	bd38      	pop	{r3, r4, r5, pc}

080a2748 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a2748:	b510      	push	{r4, lr}
 80a274a:	b088      	sub	sp, #32
 80a274c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a274e:	4668      	mov	r0, sp
 80a2750:	f7ff fcaf 	bl	80a20b2 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a2754:	4669      	mov	r1, sp
 80a2756:	a804      	add	r0, sp, #16
 80a2758:	f7ff fcea 	bl	80a2130 <_ZN6StringC1ERKS_>
 80a275c:	a804      	add	r0, sp, #16
 80a275e:	47a0      	blx	r4
 80a2760:	4604      	mov	r4, r0
 80a2762:	a804      	add	r0, sp, #16
 80a2764:	f7ff fc5e 	bl	80a2024 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a2768:	4668      	mov	r0, sp
 80a276a:	f7ff fc5b 	bl	80a2024 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a276e:	4620      	mov	r0, r4
 80a2770:	b008      	add	sp, #32
 80a2772:	bd10      	pop	{r4, pc}

080a2774 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a2774:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2776:	4607      	mov	r7, r0
 80a2778:	460e      	mov	r6, r1
 80a277a:	4615      	mov	r5, r2
 80a277c:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a277e:	2410      	movs	r4, #16
 80a2780:	4622      	mov	r2, r4
 80a2782:	2100      	movs	r1, #0
 80a2784:	4668      	mov	r0, sp
 80a2786:	f002 fac6 	bl	80a4d16 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a278a:	2200      	movs	r2, #0
 80a278c:	4669      	mov	r1, sp
 80a278e:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a2790:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a2794:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a2796:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a2798:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a279a:	f7ff fbb7 	bl	80a1f0c <spark_function>
}
 80a279e:	b005      	add	sp, #20
 80a27a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a27a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a27a2:	b513      	push	{r0, r1, r4, lr}
 80a27a4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a27a6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a27aa:	2300      	movs	r3, #0
 80a27ac:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a27ae:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a27b0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a27b2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a27b4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a27b6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a27b8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a27ba:	f7fd ff69 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a27be:	4620      	mov	r0, r4
 80a27c0:	b002      	add	sp, #8
 80a27c2:	bd10      	pop	{r4, pc}

080a27c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a27c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a27c6:	460c      	mov	r4, r1
 80a27c8:	4606      	mov	r6, r0
 80a27ca:	460f      	mov	r7, r1
 80a27cc:	f854 3b04 	ldr.w	r3, [r4], #4
 80a27d0:	ad02      	add	r5, sp, #8
 80a27d2:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a27d6:	4621      	mov	r1, r4
 80a27d8:	a801      	add	r0, sp, #4
 80a27da:	f7ff fe8f 	bl	80a24fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a27de:	4629      	mov	r1, r5
 80a27e0:	4630      	mov	r0, r6
 80a27e2:	f7ff ffde 	bl	80a27a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a27e6:	a801      	add	r0, sp, #4
 80a27e8:	f7fd ff52 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a27ec:	4620      	mov	r0, r4
 80a27ee:	f7fd ff4f 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a27f2:	4638      	mov	r0, r7
 80a27f4:	2108      	movs	r1, #8
 80a27f6:	f000 fe25 	bl	80a3444 <_ZdlPvj>
        return p;
    }
 80a27fa:	4630      	mov	r0, r6
 80a27fc:	b003      	add	sp, #12
 80a27fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2800:	b538      	push	{r3, r4, r5, lr}
 80a2802:	2300      	movs	r3, #0
 80a2804:	4604      	mov	r4, r0
 80a2806:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2808:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a280a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a280c:	f7fd fc47 	bl	80a009e <_Znwj>
 80a2810:	b128      	cbz	r0, 80a281e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2812:	2301      	movs	r3, #1
 80a2814:	6043      	str	r3, [r0, #4]
 80a2816:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2818:	4b02      	ldr	r3, [pc, #8]	; (80a2824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a281a:	60c5      	str	r5, [r0, #12]
 80a281c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a281e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a2820:	4620      	mov	r0, r4
 80a2822:	bd38      	pop	{r3, r4, r5, pc}
 80a2824:	080a51e0 	.word	0x080a51e0

080a2828 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2828:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a282a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a282c:	b90a      	cbnz	r2, 80a2832 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a282e:	f000 fe1a 	bl	80a3466 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2832:	68c3      	ldr	r3, [r0, #12]
    }
 80a2834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2838:	4718      	bx	r3

080a283a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a283a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a283c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a283e:	f100 0110 	add.w	r1, r0, #16
 80a2842:	f7ff fff1 	bl	80a2828 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2846:	bd08      	pop	{r3, pc}

080a2848 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2848:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a284a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a284c:	b90a      	cbnz	r2, 80a2852 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a284e:	f000 fe0a 	bl	80a3466 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2852:	68c3      	ldr	r3, [r0, #12]
    }
 80a2854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2858:	4718      	bx	r3

080a285a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a285a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a285c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a285e:	f100 0110 	add.w	r1, r0, #16
 80a2862:	f7ff fff1 	bl	80a2848 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2866:	bd08      	pop	{r3, pc}

080a2868 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2868:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a286a:	2300      	movs	r3, #0
 80a286c:	6083      	str	r3, [r0, #8]
 80a286e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2870:	4604      	mov	r4, r0
 80a2872:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2874:	b12b      	cbz	r3, 80a2882 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2876:	2202      	movs	r2, #2
 80a2878:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a287a:	68eb      	ldr	r3, [r5, #12]
 80a287c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a287e:	68ab      	ldr	r3, [r5, #8]
 80a2880:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2882:	4620      	mov	r0, r4
 80a2884:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a2888:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a288a:	b089      	sub	sp, #36	; 0x24
 80a288c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a288e:	4668      	mov	r0, sp
 80a2890:	f7ff ff21 	bl	80a26d6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2894:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2898:	2300      	movs	r3, #0
 80a289a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a289e:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a28a2:	2b00      	cmp	r3, #0
 80a28a4:	d103      	bne.n	80a28ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a28a6:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a28aa:	2900      	cmp	r1, #0
 80a28ac:	d1f7      	bne.n	80a289e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a28ae:	d002      	beq.n	80a28b6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a28b0:	f88d 3008 	strb.w	r3, [sp, #8]
 80a28b4:	e063      	b.n	80a297e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a28b6:	f114 050c 	adds.w	r5, r4, #12
 80a28ba:	d003      	beq.n	80a28c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a28bc:	4669      	mov	r1, sp
 80a28be:	4628      	mov	r0, r5
 80a28c0:	f7ff ff09 	bl	80a26d6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a28c4:	f3bf 8f5f 	dmb	sy
 80a28c8:	2301      	movs	r3, #1
 80a28ca:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a28cc:	f3bf 8f5f 	dmb	sy
 80a28d0:	f104 0308 	add.w	r3, r4, #8
 80a28d4:	2000      	movs	r0, #0
 80a28d6:	e853 6f00 	ldrex	r6, [r3]
 80a28da:	e843 0200 	strex	r2, r0, [r3]
 80a28de:	2a00      	cmp	r2, #0
 80a28e0:	d1f9      	bne.n	80a28d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a28e2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a28e6:	2e00      	cmp	r6, #0
 80a28e8:	d049      	beq.n	80a297e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a28ea:	f7ff fa9b 	bl	80a1e24 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a28ee:	b120      	cbz	r0, 80a28fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a28f0:	4629      	mov	r1, r5
 80a28f2:	4630      	mov	r0, r6
 80a28f4:	f7ff ff98 	bl	80a2828 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a28f8:	e03a      	b.n	80a2970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a28fa:	4631      	mov	r1, r6
 80a28fc:	a802      	add	r0, sp, #8
 80a28fe:	f7ff ffb3 	bl	80a2868 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2902:	68e0      	ldr	r0, [r4, #12]
 80a2904:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2908:	b108      	cbz	r0, 80a290e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a290a:	f002 fa3d 	bl	80a4d88 <strdup>
 80a290e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2910:	2010      	movs	r0, #16
 80a2912:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2916:	f7fd fbc2 	bl	80a009e <_Znwj>
 80a291a:	4605      	mov	r5, r0
 80a291c:	b1e8      	cbz	r0, 80a295a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a291e:	2700      	movs	r7, #0
 80a2920:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2922:	2018      	movs	r0, #24
 80a2924:	f7fd fbbb 	bl	80a009e <_Znwj>
 80a2928:	4604      	mov	r4, r0
 80a292a:	b188      	cbz	r0, 80a2950 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a292c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a292e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2930:	a802      	add	r0, sp, #8
 80a2932:	f7ff fe06 	bl	80a2542 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2936:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2938:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a293a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a293c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a293e:	9204      	str	r2, [sp, #16]
 80a2940:	68e2      	ldr	r2, [r4, #12]
 80a2942:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2944:	60e3      	str	r3, [r4, #12]
 80a2946:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a294a:	9205      	str	r2, [sp, #20]
 80a294c:	f7ff fec3 	bl	80a26d6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2950:	4b0d      	ldr	r3, [pc, #52]	; (80a2988 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2952:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2954:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2956:	4b0d      	ldr	r3, [pc, #52]	; (80a298c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a2958:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a295a:	a806      	add	r0, sp, #24
 80a295c:	f7ff feca 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2960:	a802      	add	r0, sp, #8
 80a2962:	f7fd fc36 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2966:	2200      	movs	r2, #0
 80a2968:	4629      	mov	r1, r5
 80a296a:	4809      	ldr	r0, [pc, #36]	; (80a2990 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a296c:	f7ff fa62 	bl	80a1e34 <application_thread_invoke>
 80a2970:	4630      	mov	r0, r6
 80a2972:	f7fd fc2e 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2976:	2110      	movs	r1, #16
 80a2978:	4630      	mov	r0, r6
 80a297a:	f000 fd63 	bl	80a3444 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a297e:	4668      	mov	r0, sp
 80a2980:	f7ff feb8 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
    }
 80a2984:	b009      	add	sp, #36	; 0x24
 80a2986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2988:	080a283b 	.word	0x080a283b
 80a298c:	080a2ab1 	.word	0x080a2ab1
 80a2990:	080a3009 	.word	0x080a3009

080a2994 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a2994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2998:	b08b      	sub	sp, #44	; 0x2c
 80a299a:	4606      	mov	r6, r0
 80a299c:	460f      	mov	r7, r1
 80a299e:	4690      	mov	r8, r2
 80a29a0:	4699      	mov	r9, r3
 80a29a2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a29a6:	f7ff fab9 	bl	80a1f1c <spark_cloud_flag_connected>
 80a29aa:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a29ac:	4683      	mov	fp, r0
 80a29ae:	bb30      	cbnz	r0, 80a29fe <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a29b0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a29b4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a29b6:	a905      	add	r1, sp, #20
 80a29b8:	4628      	mov	r0, r5
 80a29ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a29be:	f7ff fe8a 	bl	80a26d6 <_ZN8particle5ErrorC1EOS0_>
 80a29c2:	2014      	movs	r0, #20
 80a29c4:	f7fd fb6b 	bl	80a009e <_Znwj>
 80a29c8:	4604      	mov	r4, r0
 80a29ca:	b158      	cbz	r0, 80a29e4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a29cc:	2302      	movs	r3, #2
 80a29ce:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a29d0:	2301      	movs	r3, #1
 80a29d2:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a29d4:	f8c0 b004 	str.w	fp, [r0, #4]
 80a29d8:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a29dc:	4629      	mov	r1, r5
 80a29de:	300c      	adds	r0, #12
 80a29e0:	f7ff fe79 	bl	80a26d6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a29e4:	4630      	mov	r0, r6
 80a29e6:	4621      	mov	r1, r4
 80a29e8:	f840 4b04 	str.w	r4, [r0], #4
 80a29ec:	f7ff ff08 	bl	80a2800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a29f0:	4628      	mov	r0, r5
 80a29f2:	f7ff fe7f 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a29f6:	a805      	add	r0, sp, #20
 80a29f8:	f7ff fe7c 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
 80a29fc:	e052      	b.n	80a2aa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a29fe:	2400      	movs	r4, #0
 80a2a00:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2a02:	2014      	movs	r0, #20
 80a2a04:	606c      	str	r4, [r5, #4]
 80a2a06:	60ac      	str	r4, [r5, #8]
 80a2a08:	9307      	str	r3, [sp, #28]
 80a2a0a:	f7fd fb48 	bl	80a009e <_Znwj>
 80a2a0e:	4601      	mov	r1, r0
 80a2a10:	b118      	cbz	r0, 80a2a1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a2a12:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2a14:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2a16:	6044      	str	r4, [r0, #4]
 80a2a18:	6084      	str	r4, [r0, #8]
 80a2a1a:	a804      	add	r0, sp, #16
 80a2a1c:	9103      	str	r1, [sp, #12]
 80a2a1e:	f7ff feef 	bl	80a2800 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2a22:	4b22      	ldr	r3, [pc, #136]	; (80a2aac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2a24:	2008      	movs	r0, #8
 80a2a26:	9308      	str	r3, [sp, #32]
 80a2a28:	f7fd fb39 	bl	80a009e <_Znwj>
 80a2a2c:	4604      	mov	r4, r0
 80a2a2e:	b128      	cbz	r0, 80a2a3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2a30:	9b03      	ldr	r3, [sp, #12]
 80a2a32:	a904      	add	r1, sp, #16
 80a2a34:	f840 3b04 	str.w	r3, [r0], #4
 80a2a38:	f7ff fd60 	bl	80a24fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2a3c:	9500      	str	r5, [sp, #0]
 80a2a3e:	fa5f f38a 	uxtb.w	r3, sl
 80a2a42:	464a      	mov	r2, r9
 80a2a44:	4641      	mov	r1, r8
 80a2a46:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2a48:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a2a4a:	f7ff fa6f 	bl	80a1f2c <spark_send_event>
 80a2a4e:	b920      	cbnz	r0, 80a2a5a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2a50:	9b03      	ldr	r3, [sp, #12]
 80a2a52:	785b      	ldrb	r3, [r3, #1]
 80a2a54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2a58:	b183      	cbz	r3, 80a2a7c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a2a5a:	9b03      	ldr	r3, [sp, #12]
 80a2a5c:	a904      	add	r1, sp, #16
 80a2a5e:	a806      	add	r0, sp, #24
 80a2a60:	9305      	str	r3, [sp, #20]
 80a2a62:	f7ff fd4b 	bl	80a24fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a2a66:	a905      	add	r1, sp, #20
 80a2a68:	4630      	mov	r0, r6
 80a2a6a:	f7ff fe9a 	bl	80a27a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2a6e:	a806      	add	r0, sp, #24
 80a2a70:	f7fd fe0e 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2a74:	a804      	add	r0, sp, #16
 80a2a76:	f7fd fe0b 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2a7a:	e013      	b.n	80a2aa4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a2a7c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a2a80:	a905      	add	r1, sp, #20
 80a2a82:	a803      	add	r0, sp, #12
 80a2a84:	9205      	str	r2, [sp, #20]
 80a2a86:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a2a8a:	f7ff fefd 	bl	80a2888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2a8e:	a805      	add	r0, sp, #20
 80a2a90:	f7ff fe30 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a2a94:	a805      	add	r0, sp, #20
 80a2a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a2a98:	f7ff fe94 	bl	80a27c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a2a9c:	a806      	add	r0, sp, #24
 80a2a9e:	f7fd fdf7 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a2aa2:	e7da      	b.n	80a2a5a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a2aa4:	4630      	mov	r0, r6
 80a2aa6:	b00b      	add	sp, #44	; 0x2c
 80a2aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2aac:	080a2c21 	.word	0x080a2c21

080a2ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2ab0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2ab4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2ab6:	d006      	beq.n	80a2ac6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a2ab8:	2a03      	cmp	r2, #3
 80a2aba:	d017      	beq.n	80a2aec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a2abc:	2a01      	cmp	r2, #1
 80a2abe:	d122      	bne.n	80a2b06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2ac0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2ac2:	6003      	str	r3, [r0, #0]
	      break;
 80a2ac4:	e01f      	b.n	80a2b06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2ac6:	2018      	movs	r0, #24
 80a2ac8:	680e      	ldr	r6, [r1, #0]
 80a2aca:	f7fd fae8 	bl	80a009e <_Znwj>
 80a2ace:	4605      	mov	r5, r0
 80a2ad0:	b150      	cbz	r0, 80a2ae8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2ad2:	4631      	mov	r1, r6
 80a2ad4:	f7ff fec8 	bl	80a2868 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2ad8:	6930      	ldr	r0, [r6, #16]
 80a2ada:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2ade:	b108      	cbz	r0, 80a2ae4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2ae0:	f002 f952 	bl	80a4d88 <strdup>
 80a2ae4:	6128      	str	r0, [r5, #16]
 80a2ae6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2ae8:	6025      	str	r5, [r4, #0]
 80a2aea:	e00c      	b.n	80a2b06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2aec:	6804      	ldr	r4, [r0, #0]
 80a2aee:	b154      	cbz	r4, 80a2b06 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a2af0:	f104 0010 	add.w	r0, r4, #16
 80a2af4:	f7ff fdfe 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2af8:	4620      	mov	r0, r4
 80a2afa:	f7fd fb6a 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2afe:	2118      	movs	r1, #24
 80a2b00:	4620      	mov	r0, r4
 80a2b02:	f000 fc9f 	bl	80a3444 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2b06:	2000      	movs	r0, #0
 80a2b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2b0a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2b0a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2b0c:	2300      	movs	r3, #0
 80a2b0e:	6083      	str	r3, [r0, #8]
 80a2b10:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2b12:	4604      	mov	r4, r0
 80a2b14:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2b16:	b12b      	cbz	r3, 80a2b24 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2b18:	2202      	movs	r2, #2
 80a2b1a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a2b1c:	68eb      	ldr	r3, [r5, #12]
 80a2b1e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2b20:	68ab      	ldr	r3, [r5, #8]
 80a2b22:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2b24:	4620      	mov	r0, r4
 80a2b26:	bd38      	pop	{r3, r4, r5, pc}

080a2b28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2b28:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a2b2a:	b570      	push	{r4, r5, r6, lr}
 80a2b2c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2b2e:	d006      	beq.n	80a2b3e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2b30:	2a03      	cmp	r2, #3
 80a2b32:	d011      	beq.n	80a2b58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2b34:	2a01      	cmp	r2, #1
 80a2b36:	d118      	bne.n	80a2b6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2b38:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a2b3a:	6003      	str	r3, [r0, #0]
	      break;
 80a2b3c:	e015      	b.n	80a2b6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2b3e:	2014      	movs	r0, #20
 80a2b40:	680e      	ldr	r6, [r1, #0]
 80a2b42:	f7fd faac 	bl	80a009e <_Znwj>
 80a2b46:	4605      	mov	r5, r0
 80a2b48:	b120      	cbz	r0, 80a2b54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2b4a:	4631      	mov	r1, r6
 80a2b4c:	f7ff ffdd 	bl	80a2b0a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2b50:	7c33      	ldrb	r3, [r6, #16]
 80a2b52:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2b54:	6025      	str	r5, [r4, #0]
 80a2b56:	e008      	b.n	80a2b6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2b58:	6804      	ldr	r4, [r0, #0]
 80a2b5a:	b134      	cbz	r4, 80a2b6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2b5c:	4620      	mov	r0, r4
 80a2b5e:	f7fd fb38 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2b62:	2114      	movs	r1, #20
 80a2b64:	4620      	mov	r0, r4
 80a2b66:	f000 fc6d 	bl	80a3444 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2b6a:	2000      	movs	r0, #0
 80a2b6c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2b70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a2b70:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2b72:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a2b74:	f3bf 8f5f 	dmb	sy
 80a2b78:	b087      	sub	sp, #28
 80a2b7a:	2300      	movs	r3, #0
 80a2b7c:	e850 6f00 	ldrex	r6, [r0]
 80a2b80:	e840 3200 	strex	r2, r3, [r0]
 80a2b84:	2a00      	cmp	r2, #0
 80a2b86:	d1f9      	bne.n	80a2b7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a2b88:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2b8c:	2e00      	cmp	r6, #0
 80a2b8e:	d03f      	beq.n	80a2c10 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a2b90:	4618      	mov	r0, r3
 80a2b92:	f7ff f947 	bl	80a1e24 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a2b96:	4607      	mov	r7, r0
 80a2b98:	b120      	cbz	r0, 80a2ba4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2b9a:	4621      	mov	r1, r4
 80a2b9c:	4630      	mov	r0, r6
 80a2b9e:	f7ff fe53 	bl	80a2848 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2ba2:	e02e      	b.n	80a2c02 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a2ba4:	4631      	mov	r1, r6
 80a2ba6:	a801      	add	r0, sp, #4
 80a2ba8:	f7ff ffaf 	bl	80a2b0a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a2bac:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2bae:	2010      	movs	r0, #16
 80a2bb0:	f88d 3014 	strb.w	r3, [sp, #20]
 80a2bb4:	f7fd fa73 	bl	80a009e <_Znwj>
 80a2bb8:	4605      	mov	r5, r0
 80a2bba:	b1d0      	cbz	r0, 80a2bf2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2bbc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2bbe:	2014      	movs	r0, #20
 80a2bc0:	f7fd fa6d 	bl	80a009e <_Znwj>
 80a2bc4:	4604      	mov	r4, r0
 80a2bc6:	b178      	cbz	r0, 80a2be8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2bc8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2bca:	4601      	mov	r1, r0
 80a2bcc:	a801      	add	r0, sp, #4
 80a2bce:	f7ff fcb8 	bl	80a2542 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2bd2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2bd4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2bd6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2bd8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2bda:	9203      	str	r2, [sp, #12]
 80a2bdc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2bde:	60e3      	str	r3, [r4, #12]
 80a2be0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2be4:	9204      	str	r2, [sp, #16]
 80a2be6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2be8:	4b0a      	ldr	r3, [pc, #40]	; (80a2c14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2bea:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2bec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2bee:	4b0a      	ldr	r3, [pc, #40]	; (80a2c18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2bf0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2bf2:	a801      	add	r0, sp, #4
 80a2bf4:	f7fd faed 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2bf8:	2200      	movs	r2, #0
 80a2bfa:	4629      	mov	r1, r5
 80a2bfc:	4807      	ldr	r0, [pc, #28]	; (80a2c1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a2bfe:	f7ff f919 	bl	80a1e34 <application_thread_invoke>
 80a2c02:	4630      	mov	r0, r6
 80a2c04:	f7fd fae5 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2c08:	2110      	movs	r1, #16
 80a2c0a:	4630      	mov	r0, r6
 80a2c0c:	f000 fc1a 	bl	80a3444 <_ZdlPvj>
        }
    }
 80a2c10:	b007      	add	sp, #28
 80a2c12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2c14:	080a285b 	.word	0x080a285b
 80a2c18:	080a2b29 	.word	0x080a2b29
 80a2c1c:	080a3009 	.word	0x080a3009

080a2c20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2c20:	b530      	push	{r4, r5, lr}
 80a2c22:	4604      	mov	r4, r0
 80a2c24:	b085      	sub	sp, #20
 80a2c26:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2c28:	4668      	mov	r0, sp
 80a2c2a:	4611      	mov	r1, r2
 80a2c2c:	f7ff fdca 	bl	80a27c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2c30:	b17c      	cbz	r4, 80a2c52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2c32:	b224      	sxth	r4, r4
 80a2c34:	4628      	mov	r0, r5
 80a2c36:	b10d      	cbz	r5, 80a2c3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2c38:	f002 f8a6 	bl	80a4d88 <strdup>
 80a2c3c:	9002      	str	r0, [sp, #8]
 80a2c3e:	a902      	add	r1, sp, #8
 80a2c40:	4668      	mov	r0, sp
 80a2c42:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a2c46:	f7ff fe1f 	bl	80a2888 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a2c4a:	a802      	add	r0, sp, #8
 80a2c4c:	f7ff fd52 	bl	80a26f4 <_ZN8particle5ErrorD1Ev>
 80a2c50:	e01d      	b.n	80a2c8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2c52:	f04f 0201 	mov.w	r2, #1
 80a2c56:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2c58:	f88d 4008 	strb.w	r4, [sp, #8]
 80a2c5c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2c60:	42a3      	cmp	r3, r4
 80a2c62:	d103      	bne.n	80a2c6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2c64:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2c68:	2900      	cmp	r1, #0
 80a2c6a:	d1f7      	bne.n	80a2c5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a2c6c:	d002      	beq.n	80a2c74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a2c6e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a2c72:	e00c      	b.n	80a2c8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a2c74:	f110 010c 	adds.w	r1, r0, #12
 80a2c78:	f04f 0301 	mov.w	r3, #1
 80a2c7c:	bf18      	it	ne
 80a2c7e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a2c80:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a2c84:	3004      	adds	r0, #4
 80a2c86:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a2c8a:	f7ff ff71 	bl	80a2b70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a2c8e:	a801      	add	r0, sp, #4
 80a2c90:	f7fd fcfe 	bl	80a0690 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a2c94:	b005      	add	sp, #20
 80a2c96:	bd30      	pop	{r4, r5, pc}

080a2c98 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a2c98:	4770      	bx	lr

080a2c9a <_ZN9IPAddressD0Ev>:
 80a2c9a:	b510      	push	{r4, lr}
 80a2c9c:	4604      	mov	r4, r0
 80a2c9e:	2118      	movs	r1, #24
 80a2ca0:	f000 fbd0 	bl	80a3444 <_ZdlPvj>
 80a2ca4:	4620      	mov	r0, r4
 80a2ca6:	bd10      	pop	{r4, pc}

080a2ca8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a2ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2caa:	460f      	mov	r7, r1
 80a2cac:	f100 0608 	add.w	r6, r0, #8
 80a2cb0:	1d05      	adds	r5, r0, #4
 80a2cb2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2cb4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a2cb8:	220a      	movs	r2, #10
 80a2cba:	4638      	mov	r0, r7
 80a2cbc:	f7ff fb21 	bl	80a2302 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2cc0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a2cc2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a2cc4:	d007      	beq.n	80a2cd6 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a2cc6:	2c00      	cmp	r4, #0
 80a2cc8:	d0f4      	beq.n	80a2cb4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a2cca:	212e      	movs	r1, #46	; 0x2e
 80a2ccc:	4638      	mov	r0, r7
 80a2cce:	f7ff fadf 	bl	80a2290 <_ZN5Print5printEc>
 80a2cd2:	4404      	add	r4, r0
 80a2cd4:	e7ee      	b.n	80a2cb4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2cd6:	4620      	mov	r0, r4
 80a2cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a2cdc <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a2cdc:	b510      	push	{r4, lr}
 80a2cde:	4604      	mov	r4, r0
 80a2ce0:	4b04      	ldr	r3, [pc, #16]	; (80a2cf4 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2ce2:	2211      	movs	r2, #17
 80a2ce4:	f840 3b04 	str.w	r3, [r0], #4
 80a2ce8:	2100      	movs	r1, #0
 80a2cea:	f002 f814 	bl	80a4d16 <memset>
{
    clear();
}
 80a2cee:	4620      	mov	r0, r4
 80a2cf0:	bd10      	pop	{r4, pc}
 80a2cf2:	bf00      	nop
 80a2cf4:	080a51fc 	.word	0x080a51fc

080a2cf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2cf8:	4603      	mov	r3, r0
 80a2cfa:	4a07      	ldr	r2, [pc, #28]	; (80a2d18 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a2cfc:	b510      	push	{r4, lr}
 80a2cfe:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2d02:	f101 0210 	add.w	r2, r1, #16
 80a2d06:	f851 4b04 	ldr.w	r4, [r1], #4
 80a2d0a:	4291      	cmp	r1, r2
 80a2d0c:	f843 4b04 	str.w	r4, [r3], #4
 80a2d10:	d1f9      	bne.n	80a2d06 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2d12:	780a      	ldrb	r2, [r1, #0]
 80a2d14:	701a      	strb	r2, [r3, #0]
}
 80a2d16:	bd10      	pop	{r4, pc}
 80a2d18:	080a51fc 	.word	0x080a51fc

080a2d1c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2d1c:	4a02      	ldr	r2, [pc, #8]	; (80a2d28 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a2d1e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2d20:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2d22:	2204      	movs	r2, #4
 80a2d24:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2d26:	4770      	bx	lr
 80a2d28:	080a51fc 	.word	0x080a51fc

080a2d2c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a2d2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a2d2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2d32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2d36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a2d3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a2d3e:	2304      	movs	r3, #4
 80a2d40:	6041      	str	r1, [r0, #4]
 80a2d42:	7503      	strb	r3, [r0, #20]
 80a2d44:	bd10      	pop	{r4, pc}
	...

080a2d48 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2d48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2d4a:	4d04      	ldr	r5, [pc, #16]	; (80a2d5c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a2d4c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a2d4e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2d52:	9500      	str	r5, [sp, #0]
 80a2d54:	f7ff ffea 	bl	80a2d2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2d58:	b003      	add	sp, #12
 80a2d5a:	bd30      	pop	{r4, r5, pc}
 80a2d5c:	080a51fc 	.word	0x080a51fc

080a2d60 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2d60:	7441      	strb	r1, [r0, #17]
 80a2d62:	4770      	bx	lr

080a2d64 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2d64:	4770      	bx	lr

080a2d66 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2d66:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2d68:	2100      	movs	r1, #0
 80a2d6a:	7c00      	ldrb	r0, [r0, #16]
 80a2d6c:	f7ff f82a 	bl	80a1dc4 <HAL_USB_USART_Receive_Data>
}
 80a2d70:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2d74:	bf28      	it	cs
 80a2d76:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2d7a:	bd08      	pop	{r3, pc}

080a2d7c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a2d7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a2d7e:	2101      	movs	r1, #1
 80a2d80:	7c00      	ldrb	r0, [r0, #16]
 80a2d82:	f7ff f81f 	bl	80a1dc4 <HAL_USB_USART_Receive_Data>
}
 80a2d86:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2d8a:	bf28      	it	cs
 80a2d8c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2d90:	bd08      	pop	{r3, pc}

080a2d92 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a2d92:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a2d94:	7c00      	ldrb	r0, [r0, #16]
 80a2d96:	f7ff f80d 	bl	80a1db4 <HAL_USB_USART_Available_Data_For_Write>
}
 80a2d9a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2d9e:	bd08      	pop	{r3, pc}

080a2da0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a2da0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a2da2:	7c00      	ldrb	r0, [r0, #16]
 80a2da4:	f7fe fffe 	bl	80a1da4 <HAL_USB_USART_Available_Data>
}
 80a2da8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2dac:	bd08      	pop	{r3, pc}

080a2dae <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a2dae:	7c00      	ldrb	r0, [r0, #16]
 80a2db0:	f7ff b818 	b.w	80a1de4 <HAL_USB_USART_Flush_Data>

080a2db4 <_ZN9USBSerialD0Ev>:
 80a2db4:	b510      	push	{r4, lr}
 80a2db6:	4604      	mov	r4, r0
 80a2db8:	2114      	movs	r1, #20
 80a2dba:	f000 fb43 	bl	80a3444 <_ZdlPvj>
 80a2dbe:	4620      	mov	r0, r4
 80a2dc0:	bd10      	pop	{r4, pc}

080a2dc2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2dc2:	b538      	push	{r3, r4, r5, lr}
 80a2dc4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2dc6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a2dc8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a2dca:	f7fe fff3 	bl	80a1db4 <HAL_USB_USART_Available_Data_For_Write>
 80a2dce:	2800      	cmp	r0, #0
 80a2dd0:	dc01      	bgt.n	80a2dd6 <_ZN9USBSerial5writeEh+0x14>
 80a2dd2:	7c60      	ldrb	r0, [r4, #17]
 80a2dd4:	b128      	cbz	r0, 80a2de2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2dd6:	4629      	mov	r1, r5
 80a2dd8:	7c20      	ldrb	r0, [r4, #16]
 80a2dda:	f7fe fffb 	bl	80a1dd4 <HAL_USB_USART_Send_Data>
 80a2dde:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2de2:	bd38      	pop	{r3, r4, r5, pc}

080a2de4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2de4:	b510      	push	{r4, lr}
 80a2de6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2de8:	2300      	movs	r3, #0
 80a2dea:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a2dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2df0:	60a3      	str	r3, [r4, #8]
 80a2df2:	4b05      	ldr	r3, [pc, #20]	; (80a2e08 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2df4:	4608      	mov	r0, r1
 80a2df6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2df8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a2dfa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a2dfc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a2dfe:	4611      	mov	r1, r2
 80a2e00:	f7fe ffc8 	bl	80a1d94 <HAL_USB_USART_Init>
}
 80a2e04:	4620      	mov	r0, r4
 80a2e06:	bd10      	pop	{r4, pc}
 80a2e08:	080a5210 	.word	0x080a5210

080a2e0c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a2e0c:	b510      	push	{r4, lr}
 80a2e0e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2e10:	2214      	movs	r2, #20
 80a2e12:	2100      	movs	r1, #0
 80a2e14:	f001 ff7f 	bl	80a4d16 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2e18:	4b05      	ldr	r3, [pc, #20]	; (80a2e30 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2e1a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2e1c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a2e1e:	4b05      	ldr	r3, [pc, #20]	; (80a2e34 <_Z19acquireSerialBufferv+0x28>)
 80a2e20:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2e22:	f240 1301 	movw	r3, #257	; 0x101
 80a2e26:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2e28:	2381      	movs	r3, #129	; 0x81
 80a2e2a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2e2c:	bd10      	pop	{r4, pc}
 80a2e2e:	bf00      	nop
 80a2e30:	20000265 	.word	0x20000265
 80a2e34:	200001e4 	.word	0x200001e4

080a2e38 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2e38:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2e3a:	4d0e      	ldr	r5, [pc, #56]	; (80a2e74 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a2e3c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a2e3e:	a801      	add	r0, sp, #4
 80a2e40:	f7ff ffe4 	bl	80a2e0c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2e44:	6829      	ldr	r1, [r5, #0]
 80a2e46:	f011 0401 	ands.w	r4, r1, #1
 80a2e4a:	d110      	bne.n	80a2e6e <_Z16_fetch_usbserialv+0x36>
 80a2e4c:	4628      	mov	r0, r5
 80a2e4e:	f7fd f92a 	bl	80a00a6 <__cxa_guard_acquire>
 80a2e52:	b160      	cbz	r0, 80a2e6e <_Z16_fetch_usbserialv+0x36>
 80a2e54:	aa01      	add	r2, sp, #4
 80a2e56:	4621      	mov	r1, r4
 80a2e58:	4807      	ldr	r0, [pc, #28]	; (80a2e78 <_Z16_fetch_usbserialv+0x40>)
 80a2e5a:	f7ff ffc3 	bl	80a2de4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2e5e:	4628      	mov	r0, r5
 80a2e60:	f7fd f926 	bl	80a00b0 <__cxa_guard_release>
 80a2e64:	4a05      	ldr	r2, [pc, #20]	; (80a2e7c <_Z16_fetch_usbserialv+0x44>)
 80a2e66:	4906      	ldr	r1, [pc, #24]	; (80a2e80 <_Z16_fetch_usbserialv+0x48>)
 80a2e68:	4803      	ldr	r0, [pc, #12]	; (80a2e78 <_Z16_fetch_usbserialv+0x40>)
 80a2e6a:	f000 fadd 	bl	80a3428 <__aeabi_atexit>
	return _usbserial;
}
 80a2e6e:	4802      	ldr	r0, [pc, #8]	; (80a2e78 <_Z16_fetch_usbserialv+0x40>)
 80a2e70:	b007      	add	sp, #28
 80a2e72:	bd30      	pop	{r4, r5, pc}
 80a2e74:	200001e0 	.word	0x200001e0
 80a2e78:	20000368 	.word	0x20000368
 80a2e7c:	200000a4 	.word	0x200000a4
 80a2e80:	080a2d65 	.word	0x080a2d65

080a2e84 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a2e84:	b510      	push	{r4, lr}
 80a2e86:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2e88:	2214      	movs	r2, #20
 80a2e8a:	2100      	movs	r1, #0
 80a2e8c:	f001 ff43 	bl	80a4d16 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2e90:	4b05      	ldr	r3, [pc, #20]	; (80a2ea8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a2e92:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a2e94:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a2e96:	4b05      	ldr	r3, [pc, #20]	; (80a2eac <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a2e98:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2e9a:	f240 1301 	movw	r3, #257	; 0x101
 80a2e9e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2ea0:	2381      	movs	r3, #129	; 0x81
 80a2ea2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a2ea4:	bd10      	pop	{r4, pc}
 80a2ea6:	bf00      	nop
 80a2ea8:	20000418 	.word	0x20000418
 80a2eac:	20000380 	.word	0x20000380

080a2eb0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a2eb0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2eb2:	4c0e      	ldr	r4, [pc, #56]	; (80a2eec <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a2eb4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a2eb6:	a801      	add	r0, sp, #4
 80a2eb8:	f7ff ffe4 	bl	80a2e84 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a2ebc:	6823      	ldr	r3, [r4, #0]
 80a2ebe:	07db      	lsls	r3, r3, #31
 80a2ec0:	d410      	bmi.n	80a2ee4 <_Z17_fetch_usbserial1v+0x34>
 80a2ec2:	4620      	mov	r0, r4
 80a2ec4:	f7fd f8ef 	bl	80a00a6 <__cxa_guard_acquire>
 80a2ec8:	b160      	cbz	r0, 80a2ee4 <_Z17_fetch_usbserial1v+0x34>
 80a2eca:	aa01      	add	r2, sp, #4
 80a2ecc:	2101      	movs	r1, #1
 80a2ece:	4808      	ldr	r0, [pc, #32]	; (80a2ef0 <_Z17_fetch_usbserial1v+0x40>)
 80a2ed0:	f7ff ff88 	bl	80a2de4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2ed4:	4620      	mov	r0, r4
 80a2ed6:	f7fd f8eb 	bl	80a00b0 <__cxa_guard_release>
 80a2eda:	4a06      	ldr	r2, [pc, #24]	; (80a2ef4 <_Z17_fetch_usbserial1v+0x44>)
 80a2edc:	4906      	ldr	r1, [pc, #24]	; (80a2ef8 <_Z17_fetch_usbserial1v+0x48>)
 80a2ede:	4804      	ldr	r0, [pc, #16]	; (80a2ef0 <_Z17_fetch_usbserial1v+0x40>)
 80a2ee0:	f000 faa2 	bl	80a3428 <__aeabi_atexit>
  return _usbserial1;
}
 80a2ee4:	4802      	ldr	r0, [pc, #8]	; (80a2ef0 <_Z17_fetch_usbserial1v+0x40>)
 80a2ee6:	b006      	add	sp, #24
 80a2ee8:	bd10      	pop	{r4, pc}
 80a2eea:	bf00      	nop
 80a2eec:	2000037c 	.word	0x2000037c
 80a2ef0:	20000404 	.word	0x20000404
 80a2ef4:	200000a4 	.word	0x200000a4
 80a2ef8:	080a2d65 	.word	0x080a2d65

080a2efc <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a2efc:	f7fe be40 	b.w	80a1b80 <HAL_Interrupts_Disable_All>

080a2f00 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a2f00:	f7fe be36 	b.w	80a1b70 <HAL_Interrupts_Enable_All>

080a2f04 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2f04:	4770      	bx	lr

080a2f06 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2f06:	7441      	strb	r1, [r0, #17]
 80a2f08:	4770      	bx	lr

080a2f0a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a2f0a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a2f0c:	7c00      	ldrb	r0, [r0, #16]
 80a2f0e:	f7fe fedf 	bl	80a1cd0 <HAL_USART_Available_Data_For_Write>
}
 80a2f12:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2f16:	bd08      	pop	{r3, pc}

080a2f18 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2f18:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a2f1a:	7c00      	ldrb	r0, [r0, #16]
 80a2f1c:	f7fe feb0 	bl	80a1c80 <HAL_USART_Available_Data>
}
 80a2f20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2f24:	bd08      	pop	{r3, pc}

080a2f26 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2f26:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2f28:	7c00      	ldrb	r0, [r0, #16]
 80a2f2a:	f7fe feb9 	bl	80a1ca0 <HAL_USART_Peek_Data>
}
 80a2f2e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f32:	bf28      	it	cs
 80a2f34:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2f38:	bd08      	pop	{r3, pc}

080a2f3a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a2f3a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a2f3c:	7c00      	ldrb	r0, [r0, #16]
 80a2f3e:	f7fe fea7 	bl	80a1c90 <HAL_USART_Read_Data>
}
 80a2f42:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2f46:	bf28      	it	cs
 80a2f48:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2f4c:	bd08      	pop	{r3, pc}

080a2f4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a2f4e:	7c00      	ldrb	r0, [r0, #16]
 80a2f50:	f7fe beae 	b.w	80a1cb0 <HAL_USART_Flush_Data>

080a2f54 <_ZN11USARTSerialD0Ev>:
 80a2f54:	b510      	push	{r4, lr}
 80a2f56:	4604      	mov	r4, r0
 80a2f58:	2114      	movs	r1, #20
 80a2f5a:	f000 fa73 	bl	80a3444 <_ZdlPvj>
 80a2f5e:	4620      	mov	r0, r4
 80a2f60:	bd10      	pop	{r4, pc}

080a2f62 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2f62:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2f64:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2f66:	4604      	mov	r4, r0
 80a2f68:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2f6a:	b925      	cbnz	r5, 80a2f76 <_ZN11USARTSerial5writeEh+0x14>
 80a2f6c:	7c00      	ldrb	r0, [r0, #16]
 80a2f6e:	f7fe feaf 	bl	80a1cd0 <HAL_USART_Available_Data_For_Write>
 80a2f72:	2800      	cmp	r0, #0
 80a2f74:	dd05      	ble.n	80a2f82 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2f76:	4631      	mov	r1, r6
 80a2f78:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a2f7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a2f7e:	f7fe be77 	b.w	80a1c70 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a2f82:	4628      	mov	r0, r5
 80a2f84:	bd70      	pop	{r4, r5, r6, pc}
	...

080a2f88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2f88:	b510      	push	{r4, lr}
 80a2f8a:	4604      	mov	r4, r0
 80a2f8c:	4608      	mov	r0, r1
 80a2f8e:	4611      	mov	r1, r2
 80a2f90:	2200      	movs	r2, #0
 80a2f92:	6062      	str	r2, [r4, #4]
 80a2f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a2f98:	60a2      	str	r2, [r4, #8]
 80a2f9a:	4a05      	ldr	r2, [pc, #20]	; (80a2fb0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a2f9c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a2f9e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a2fa0:	2201      	movs	r2, #1
 80a2fa2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a2fa4:	461a      	mov	r2, r3
 80a2fa6:	f7fe fe5b 	bl	80a1c60 <HAL_USART_Init>
}
 80a2faa:	4620      	mov	r0, r4
 80a2fac:	bd10      	pop	{r4, pc}
 80a2fae:	bf00      	nop
 80a2fb0:	080a5240 	.word	0x080a5240

080a2fb4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a2fb4:	7c00      	ldrb	r0, [r0, #16]
 80a2fb6:	f7fe be83 	b.w	80a1cc0 <HAL_USART_Is_Enabled>
	...

080a2fbc <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a2fbc:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a2fbe:	4d0c      	ldr	r5, [pc, #48]	; (80a2ff0 <_Z22__fetch_global_Serial1v+0x34>)
 80a2fc0:	6829      	ldr	r1, [r5, #0]
 80a2fc2:	f011 0401 	ands.w	r4, r1, #1
 80a2fc6:	d111      	bne.n	80a2fec <_Z22__fetch_global_Serial1v+0x30>
 80a2fc8:	4628      	mov	r0, r5
 80a2fca:	f7fd f86c 	bl	80a00a6 <__cxa_guard_acquire>
 80a2fce:	b168      	cbz	r0, 80a2fec <_Z22__fetch_global_Serial1v+0x30>
 80a2fd0:	4a08      	ldr	r2, [pc, #32]	; (80a2ff4 <_Z22__fetch_global_Serial1v+0x38>)
 80a2fd2:	4621      	mov	r1, r4
 80a2fd4:	4b08      	ldr	r3, [pc, #32]	; (80a2ff8 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2fd6:	4809      	ldr	r0, [pc, #36]	; (80a2ffc <_Z22__fetch_global_Serial1v+0x40>)
 80a2fd8:	f7ff ffd6 	bl	80a2f88 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a2fdc:	4628      	mov	r0, r5
 80a2fde:	f7fd f867 	bl	80a00b0 <__cxa_guard_release>
 80a2fe2:	4a07      	ldr	r2, [pc, #28]	; (80a3000 <_Z22__fetch_global_Serial1v+0x44>)
 80a2fe4:	4907      	ldr	r1, [pc, #28]	; (80a3004 <_Z22__fetch_global_Serial1v+0x48>)
 80a2fe6:	4805      	ldr	r0, [pc, #20]	; (80a2ffc <_Z22__fetch_global_Serial1v+0x40>)
 80a2fe8:	f000 fa1e 	bl	80a3428 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a2fec:	4803      	ldr	r0, [pc, #12]	; (80a2ffc <_Z22__fetch_global_Serial1v+0x40>)
 80a2fee:	bd38      	pop	{r3, r4, r5, pc}
 80a2ff0:	200005b4 	.word	0x200005b4
 80a2ff4:	200005b8 	.word	0x200005b8
 80a2ff8:	20000530 	.word	0x20000530
 80a2ffc:	2000051c 	.word	0x2000051c
 80a3000:	200000a4 	.word	0x200000a4
 80a3004:	080a2f05 	.word	0x080a2f05

080a3008 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a3008:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a300a:	6883      	ldr	r3, [r0, #8]
 80a300c:	4604      	mov	r4, r0
 80a300e:	b90b      	cbnz	r3, 80a3014 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a3010:	f000 fa29 	bl	80a3466 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3014:	68c3      	ldr	r3, [r0, #12]
 80a3016:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a3018:	68a3      	ldr	r3, [r4, #8]
 80a301a:	b11b      	cbz	r3, 80a3024 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a301c:	2203      	movs	r2, #3
 80a301e:	4621      	mov	r1, r4
 80a3020:	4620      	mov	r0, r4
 80a3022:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a3024:	4620      	mov	r0, r4
}
 80a3026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a302a:	2110      	movs	r1, #16
 80a302c:	f000 ba0a 	b.w	80a3444 <_ZdlPvj>

080a3030 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a3030:	4770      	bx	lr

080a3032 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a3032:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3034:	4606      	mov	r6, r0
 80a3036:	4615      	mov	r5, r2
 80a3038:	460c      	mov	r4, r1
 80a303a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a303c:	42bc      	cmp	r4, r7
 80a303e:	d006      	beq.n	80a304e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a3040:	6833      	ldr	r3, [r6, #0]
 80a3042:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a3046:	689b      	ldr	r3, [r3, #8]
 80a3048:	4630      	mov	r0, r6
 80a304a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a304c:	e7f6      	b.n	80a303c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a304e:	4628      	mov	r0, r5
 80a3050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3052 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a3052:	2200      	movs	r2, #0
 80a3054:	7c00      	ldrb	r0, [r0, #16]
 80a3056:	f7fe be63 	b.w	80a1d20 <HAL_I2C_Write_Data>

080a305a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a305a:	2100      	movs	r1, #0
 80a305c:	7c00      	ldrb	r0, [r0, #16]
 80a305e:	f7fe be67 	b.w	80a1d30 <HAL_I2C_Available_Data>

080a3062 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a3062:	2100      	movs	r1, #0
 80a3064:	7c00      	ldrb	r0, [r0, #16]
 80a3066:	f7fe be6b 	b.w	80a1d40 <HAL_I2C_Read_Data>

080a306a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a306a:	2100      	movs	r1, #0
 80a306c:	7c00      	ldrb	r0, [r0, #16]
 80a306e:	f7fe be6f 	b.w	80a1d50 <HAL_I2C_Peek_Data>

080a3072 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a3072:	2100      	movs	r1, #0
 80a3074:	7c00      	ldrb	r0, [r0, #16]
 80a3076:	f7fe be73 	b.w	80a1d60 <HAL_I2C_Flush_Data>

080a307a <_ZN7TwoWireD0Ev>:
 80a307a:	b510      	push	{r4, lr}
 80a307c:	4604      	mov	r4, r0
 80a307e:	2114      	movs	r1, #20
 80a3080:	f000 f9e0 	bl	80a3444 <_ZdlPvj>
 80a3084:	4620      	mov	r0, r4
 80a3086:	bd10      	pop	{r4, pc}

080a3088 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a3088:	b510      	push	{r4, lr}
 80a308a:	4604      	mov	r4, r0
 80a308c:	4608      	mov	r0, r1
 80a308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3092:	60a3      	str	r3, [r4, #8]
 80a3094:	4b04      	ldr	r3, [pc, #16]	; (80a30a8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a3096:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a3098:	7420      	strb	r0, [r4, #16]
 80a309a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a309c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a309e:	f7fe fe6f 	bl	80a1d80 <HAL_I2C_Init>

}
 80a30a2:	4620      	mov	r0, r4
 80a30a4:	bd10      	pop	{r4, pc}
 80a30a6:	bf00      	nop
 80a30a8:	080a5270 	.word	0x080a5270

080a30ac <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a30ac:	2300      	movs	r3, #0
 80a30ae:	461a      	mov	r2, r3
 80a30b0:	4619      	mov	r1, r3
 80a30b2:	7c00      	ldrb	r0, [r0, #16]
 80a30b4:	f7fe be14 	b.w	80a1ce0 <HAL_I2C_Begin>

080a30b8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a30b8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a30ba:	2400      	movs	r4, #0
 80a30bc:	7c00      	ldrb	r0, [r0, #16]
 80a30be:	9400      	str	r4, [sp, #0]
 80a30c0:	f7fe fe16 	bl	80a1cf0 <HAL_I2C_Request_Data>
  return result;
}
 80a30c4:	b2c0      	uxtb	r0, r0
 80a30c6:	b002      	add	sp, #8
 80a30c8:	bd10      	pop	{r4, pc}

080a30ca <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a30ca:	2301      	movs	r3, #1
 80a30cc:	f7ff bff4 	b.w	80a30b8 <_ZN7TwoWire11requestFromEhhh>

080a30d0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a30d0:	2301      	movs	r3, #1
 80a30d2:	b2d2      	uxtb	r2, r2
 80a30d4:	b2c9      	uxtb	r1, r1
 80a30d6:	f7ff bfef 	b.w	80a30b8 <_ZN7TwoWire11requestFromEhhh>

080a30da <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a30da:	2200      	movs	r2, #0
 80a30dc:	7c00      	ldrb	r0, [r0, #16]
 80a30de:	f7fe be0f 	b.w	80a1d00 <HAL_I2C_Begin_Transmission>

080a30e2 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a30e2:	b2c9      	uxtb	r1, r1
 80a30e4:	f7ff bff9 	b.w	80a30da <_ZN7TwoWire17beginTransmissionEh>

080a30e8 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a30e8:	2200      	movs	r2, #0
 80a30ea:	7c00      	ldrb	r0, [r0, #16]
 80a30ec:	f7fe be10 	b.w	80a1d10 <HAL_I2C_End_Transmission>

080a30f0 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a30f0:	2101      	movs	r1, #1
 80a30f2:	f7ff bff9 	b.w	80a30e8 <_ZN7TwoWire15endTransmissionEh>

080a30f6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a30f6:	2100      	movs	r1, #0
 80a30f8:	7c00      	ldrb	r0, [r0, #16]
 80a30fa:	f7fe be39 	b.w	80a1d70 <HAL_I2C_Is_Enabled>

080a30fe <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a30fe:	2200      	movs	r2, #0
 80a3100:	4611      	mov	r1, r2
 80a3102:	6840      	ldr	r0, [r0, #4]
 80a3104:	f7fe beca 	b.w	80a1e9c <network_ready>

080a3108 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3108:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a310a:	4616      	mov	r6, r2
 80a310c:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a310e:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a3110:	460f      	mov	r7, r1
 80a3112:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a3114:	2100      	movs	r1, #0
 80a3116:	a803      	add	r0, sp, #12
 80a3118:	f001 fdfd 	bl	80a4d16 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a311c:	4630      	mov	r0, r6
 80a311e:	f001 fe4e 	bl	80a4dbe <strlen>
 80a3122:	2500      	movs	r5, #0
 80a3124:	9500      	str	r5, [sp, #0]
 80a3126:	b281      	uxth	r1, r0
 80a3128:	687b      	ldr	r3, [r7, #4]
 80a312a:	aa03      	add	r2, sp, #12
 80a312c:	4630      	mov	r0, r6
 80a312e:	f7fe fe61 	bl	80a1df4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a3132:	b120      	cbz	r0, 80a313e <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a3134:	4629      	mov	r1, r5
 80a3136:	4620      	mov	r0, r4
 80a3138:	f7ff fdf0 	bl	80a2d1c <_ZN9IPAddressC1Em>
 80a313c:	e003      	b.n	80a3146 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a313e:	a903      	add	r1, sp, #12
 80a3140:	4620      	mov	r0, r4
 80a3142:	f7ff fdd9 	bl	80a2cf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a3146:	4620      	mov	r0, r4
 80a3148:	b009      	add	sp, #36	; 0x24
 80a314a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a314c <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a314c:	2200      	movs	r2, #0
 80a314e:	4611      	mov	r1, r2
 80a3150:	6840      	ldr	r0, [r0, #4]
 80a3152:	f7fe bec3 	b.w	80a1edc <network_listening>

080a3156 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a3156:	2200      	movs	r2, #0
 80a3158:	4611      	mov	r1, r2
 80a315a:	6840      	ldr	r0, [r0, #4]
 80a315c:	f7fe bece 	b.w	80a1efc <network_get_listen_timeout>

080a3160 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a3160:	2200      	movs	r2, #0
 80a3162:	6840      	ldr	r0, [r0, #4]
 80a3164:	f7fe bec2 	b.w	80a1eec <network_set_listen_timeout>

080a3168 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a3168:	2200      	movs	r2, #0
 80a316a:	f081 0101 	eor.w	r1, r1, #1
 80a316e:	6840      	ldr	r0, [r0, #4]
 80a3170:	f7fe beac 	b.w	80a1ecc <network_listen>

080a3174 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a3174:	2300      	movs	r3, #0
 80a3176:	461a      	mov	r2, r3
 80a3178:	4619      	mov	r1, r3
 80a317a:	6840      	ldr	r0, [r0, #4]
 80a317c:	f7fe be9e 	b.w	80a1ebc <network_off>

080a3180 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a3180:	2200      	movs	r2, #0
 80a3182:	4611      	mov	r1, r2
 80a3184:	6840      	ldr	r0, [r0, #4]
 80a3186:	f7fe be79 	b.w	80a1e7c <network_connecting>

080a318a <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a318a:	2200      	movs	r2, #0
 80a318c:	2102      	movs	r1, #2
 80a318e:	6840      	ldr	r0, [r0, #4]
 80a3190:	f7fe be7c 	b.w	80a1e8c <network_disconnect>

080a3194 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a3194:	2300      	movs	r3, #0
 80a3196:	461a      	mov	r2, r3
 80a3198:	6840      	ldr	r0, [r0, #4]
 80a319a:	f7fe be67 	b.w	80a1e6c <network_connect>
	...

080a31a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a31a0:	4b02      	ldr	r3, [pc, #8]	; (80a31ac <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a31a2:	2204      	movs	r2, #4
 80a31a4:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a31a6:	4a02      	ldr	r2, [pc, #8]	; (80a31b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a31a8:	601a      	str	r2, [r3, #0]
 80a31aa:	4770      	bx	lr
 80a31ac:	2000063c 	.word	0x2000063c
 80a31b0:	080a5298 	.word	0x080a5298

080a31b4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a31b4:	2300      	movs	r3, #0
 80a31b6:	461a      	mov	r2, r3
 80a31b8:	6840      	ldr	r0, [r0, #4]
 80a31ba:	f7fe be57 	b.w	80a1e6c <network_connect>

080a31be <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a31be:	2200      	movs	r2, #0
 80a31c0:	2102      	movs	r1, #2
 80a31c2:	6840      	ldr	r0, [r0, #4]
 80a31c4:	f7fe be62 	b.w	80a1e8c <network_disconnect>

080a31c8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a31c8:	2200      	movs	r2, #0
 80a31ca:	4611      	mov	r1, r2
 80a31cc:	6840      	ldr	r0, [r0, #4]
 80a31ce:	f7fe be55 	b.w	80a1e7c <network_connecting>

080a31d2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a31d2:	2200      	movs	r2, #0
 80a31d4:	4611      	mov	r1, r2
 80a31d6:	6840      	ldr	r0, [r0, #4]
 80a31d8:	f7fe be60 	b.w	80a1e9c <network_ready>

080a31dc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a31dc:	2300      	movs	r3, #0
 80a31de:	461a      	mov	r2, r3
 80a31e0:	4619      	mov	r1, r3
 80a31e2:	6840      	ldr	r0, [r0, #4]
 80a31e4:	f7fe be62 	b.w	80a1eac <network_on>

080a31e8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a31e8:	2300      	movs	r3, #0
 80a31ea:	461a      	mov	r2, r3
 80a31ec:	4619      	mov	r1, r3
 80a31ee:	6840      	ldr	r0, [r0, #4]
 80a31f0:	f7fe be64 	b.w	80a1ebc <network_off>

080a31f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a31f4:	2200      	movs	r2, #0
 80a31f6:	f081 0101 	eor.w	r1, r1, #1
 80a31fa:	6840      	ldr	r0, [r0, #4]
 80a31fc:	f7fe be66 	b.w	80a1ecc <network_listen>

080a3200 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a3200:	2200      	movs	r2, #0
 80a3202:	6840      	ldr	r0, [r0, #4]
 80a3204:	f7fe be72 	b.w	80a1eec <network_set_listen_timeout>

080a3208 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a3208:	2200      	movs	r2, #0
 80a320a:	4611      	mov	r1, r2
 80a320c:	6840      	ldr	r0, [r0, #4]
 80a320e:	f7fe be75 	b.w	80a1efc <network_get_listen_timeout>

080a3212 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a3212:	2200      	movs	r2, #0
 80a3214:	4611      	mov	r1, r2
 80a3216:	6840      	ldr	r0, [r0, #4]
 80a3218:	f7fe be60 	b.w	80a1edc <network_listening>

080a321c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a321c:	b570      	push	{r4, r5, r6, lr}
 80a321e:	4616      	mov	r6, r2
 80a3220:	b08e      	sub	sp, #56	; 0x38
 80a3222:	4604      	mov	r4, r0
    IPAddress addr;
 80a3224:	a808      	add	r0, sp, #32
 80a3226:	f7ff fd59 	bl	80a2cdc <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a322a:	2211      	movs	r2, #17
 80a322c:	2100      	movs	r1, #0
 80a322e:	a803      	add	r0, sp, #12
 80a3230:	f001 fd71 	bl	80a4d16 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a3234:	4630      	mov	r0, r6
 80a3236:	f001 fdc2 	bl	80a4dbe <strlen>
 80a323a:	2500      	movs	r5, #0
 80a323c:	4b0a      	ldr	r3, [pc, #40]	; (80a3268 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a323e:	9500      	str	r5, [sp, #0]
 80a3240:	b281      	uxth	r1, r0
 80a3242:	685b      	ldr	r3, [r3, #4]
 80a3244:	aa03      	add	r2, sp, #12
 80a3246:	4630      	mov	r0, r6
 80a3248:	f7fe fdd4 	bl	80a1df4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a324c:	b120      	cbz	r0, 80a3258 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a324e:	4629      	mov	r1, r5
 80a3250:	4620      	mov	r0, r4
 80a3252:	f7ff fd63 	bl	80a2d1c <_ZN9IPAddressC1Em>
 80a3256:	e003      	b.n	80a3260 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a3258:	a903      	add	r1, sp, #12
 80a325a:	4620      	mov	r0, r4
 80a325c:	f7ff fd4c 	bl	80a2cf8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a3260:	4620      	mov	r0, r4
 80a3262:	b00e      	add	sp, #56	; 0x38
 80a3264:	bd70      	pop	{r4, r5, r6, pc}
 80a3266:	bf00      	nop
 80a3268:	2000063c 	.word	0x2000063c

080a326c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a326c:	4b02      	ldr	r3, [pc, #8]	; (80a3278 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a326e:	4a03      	ldr	r2, [pc, #12]	; (80a327c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a3270:	601a      	str	r2, [r3, #0]
 80a3272:	2200      	movs	r2, #0
 80a3274:	605a      	str	r2, [r3, #4]
 80a3276:	4770      	bx	lr
 80a3278:	20000644 	.word	0x20000644
 80a327c:	080a52cc 	.word	0x080a52cc

080a3280 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a3280:	b510      	push	{r4, lr}
 80a3282:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a3284:	480f      	ldr	r0, [pc, #60]	; (80a32c4 <pinAvailable+0x44>)
 80a3286:	f7fe feb5 	bl	80a1ff4 <_ZN8SPIClass9isEnabledEv>
 80a328a:	b128      	cbz	r0, 80a3298 <pinAvailable+0x18>
 80a328c:	f1a4 030d 	sub.w	r3, r4, #13
 80a3290:	2b02      	cmp	r3, #2
 80a3292:	d801      	bhi.n	80a3298 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a3294:	2000      	movs	r0, #0
 80a3296:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a3298:	f000 f8a6 	bl	80a33e8 <_Z19__fetch_global_Wirev>
 80a329c:	f7ff ff2b 	bl	80a30f6 <_ZN7TwoWire9isEnabledEv>
 80a32a0:	b108      	cbz	r0, 80a32a6 <pinAvailable+0x26>
 80a32a2:	2c01      	cmp	r4, #1
 80a32a4:	d9f6      	bls.n	80a3294 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a32a6:	f7ff fe89 	bl	80a2fbc <_Z22__fetch_global_Serial1v>
 80a32aa:	f7ff fe83 	bl	80a2fb4 <_ZN11USARTSerial9isEnabledEv>
 80a32ae:	b118      	cbz	r0, 80a32b8 <pinAvailable+0x38>
 80a32b0:	f1a4 0312 	sub.w	r3, r4, #18
 80a32b4:	2b01      	cmp	r3, #1
 80a32b6:	d9ed      	bls.n	80a3294 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a32b8:	2c17      	cmp	r4, #23
 80a32ba:	bf8c      	ite	hi
 80a32bc:	2000      	movhi	r0, #0
 80a32be:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a32c0:	bd10      	pop	{r4, pc}
 80a32c2:	bf00      	nop
 80a32c4:	2000064c 	.word	0x2000064c

080a32c8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a32c8:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a32ca:	b538      	push	{r3, r4, r5, lr}
 80a32cc:	4604      	mov	r4, r0
 80a32ce:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a32d0:	d80a      	bhi.n	80a32e8 <pinMode+0x20>
 80a32d2:	29ff      	cmp	r1, #255	; 0xff
 80a32d4:	d008      	beq.n	80a32e8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a32d6:	f7ff ffd3 	bl	80a3280 <pinAvailable>
 80a32da:	b128      	cbz	r0, 80a32e8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a32dc:	4629      	mov	r1, r5
 80a32de:	4620      	mov	r0, r4
}
 80a32e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a32e4:	f7fe bc34 	b.w	80a1b50 <HAL_Pin_Mode>
 80a32e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a32ec <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a32ec:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a32ee:	4c0c      	ldr	r4, [pc, #48]	; (80a3320 <_GLOBAL__sub_I_SPI+0x34>)
 80a32f0:	4e0c      	ldr	r6, [pc, #48]	; (80a3324 <_GLOBAL__sub_I_SPI+0x38>)
 80a32f2:	4d0d      	ldr	r5, [pc, #52]	; (80a3328 <_GLOBAL__sub_I_SPI+0x3c>)
 80a32f4:	2100      	movs	r1, #0
 80a32f6:	4620      	mov	r0, r4
 80a32f8:	f7fe fe68 	bl	80a1fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a32fc:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a32fe:	4c0b      	ldr	r4, [pc, #44]	; (80a332c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a3300:	4632      	mov	r2, r6
 80a3302:	4629      	mov	r1, r5
 80a3304:	f000 f890 	bl	80a3428 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a3308:	2101      	movs	r1, #1
 80a330a:	4620      	mov	r0, r4
 80a330c:	f7fe fe5e 	bl	80a1fcc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a3310:	4632      	mov	r2, r6
 80a3312:	4629      	mov	r1, r5
 80a3314:	4620      	mov	r0, r4
 80a3316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a331a:	f000 b885 	b.w	80a3428 <__aeabi_atexit>
 80a331e:	bf00      	nop
 80a3320:	2000064c 	.word	0x2000064c
 80a3324:	200000a4 	.word	0x200000a4
 80a3328:	080a1fbd 	.word	0x080a1fbd
 80a332c:	2000065c 	.word	0x2000065c

080a3330 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a3330:	b530      	push	{r4, r5, lr}
 80a3332:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a3334:	4d1b      	ldr	r5, [pc, #108]	; (80a33a4 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a3336:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 80a3338:	6820      	ldr	r0, [r4, #0]
 80a333a:	f7fe fc41 	bl	80a1bc0 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a333e:	f7fe fc4f 	bl	80a1be0 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a3342:	682b      	ldr	r3, [r5, #0]
 80a3344:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 80a3346:	1ac0      	subs	r0, r0, r3
 80a3348:	4290      	cmp	r0, r2
 80a334a:	d3f5      	bcc.n	80a3338 <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 80a334c:	6823      	ldr	r3, [r4, #0]
 80a334e:	b333      	cbz	r3, 80a339e <_ZN19ApplicationWatchdog4loopEv+0x6e>
 80a3350:	68e3      	ldr	r3, [r4, #12]
 80a3352:	b323      	cbz	r3, 80a339e <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3354:	1d25      	adds	r5, r4, #4
 80a3356:	6923      	ldr	r3, [r4, #16]
 80a3358:	4628      	mov	r0, r5
 80a335a:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a335c:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a335e:	a904      	add	r1, sp, #16
 80a3360:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3362:	9302      	str	r3, [sp, #8]
 80a3364:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3366:	f7ff f8ec 	bl	80a2542 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a336a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a336c:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80a336e:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3370:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3372:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a3374:	9a07      	ldr	r2, [sp, #28]
 80a3376:	4629      	mov	r1, r5
 80a3378:	a804      	add	r0, sp, #16
 80a337a:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a337c:	9307      	str	r3, [sp, #28]
 80a337e:	f7ff f8e0 	bl	80a2542 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3382:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a3384:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3386:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3388:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a338a:	9206      	str	r2, [sp, #24]
 80a338c:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a338e:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80a3390:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3392:	9207      	str	r2, [sp, #28]
 80a3394:	f7fc ff1d 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
 80a3398:	4668      	mov	r0, sp
 80a339a:	f7fc ff1a 	bl	80a01d2 <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80a339e:	b009      	add	sp, #36	; 0x24
 80a33a0:	bd30      	pop	{r4, r5, pc}
 80a33a2:	bf00      	nop
 80a33a4:	2000066c 	.word	0x2000066c

080a33a8 <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80a33a8:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80a33aa:	f7ff ffc1 	bl	80a3330 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80a33ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80a33b2:	2000      	movs	r0, #0
 80a33b4:	f7fe bc3c 	b.w	80a1c30 <os_thread_cleanup>

080a33b8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a33b8:	b513      	push	{r0, r1, r4, lr}
 80a33ba:	4c08      	ldr	r4, [pc, #32]	; (80a33dc <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a33bc:	2300      	movs	r3, #0
 80a33be:	461a      	mov	r2, r3
 80a33c0:	4619      	mov	r1, r3
 80a33c2:	9300      	str	r3, [sp, #0]
 80a33c4:	4620      	mov	r0, r4
 80a33c6:	f7ff fcbf 	bl	80a2d48 <_ZN9IPAddressC1Ehhhh>
 80a33ca:	4620      	mov	r0, r4
 80a33cc:	4a04      	ldr	r2, [pc, #16]	; (80a33e0 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a33ce:	4905      	ldr	r1, [pc, #20]	; (80a33e4 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a33d0:	b002      	add	sp, #8
 80a33d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a33d6:	f000 b827 	b.w	80a3428 <__aeabi_atexit>
 80a33da:	bf00      	nop
 80a33dc:	20000670 	.word	0x20000670
 80a33e0:	200000a4 	.word	0x200000a4
 80a33e4:	080a2c99 	.word	0x080a2c99

080a33e8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a33e8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a33ea:	4d0b      	ldr	r5, [pc, #44]	; (80a3418 <_Z19__fetch_global_Wirev+0x30>)
 80a33ec:	6829      	ldr	r1, [r5, #0]
 80a33ee:	f011 0401 	ands.w	r4, r1, #1
 80a33f2:	d10f      	bne.n	80a3414 <_Z19__fetch_global_Wirev+0x2c>
 80a33f4:	4628      	mov	r0, r5
 80a33f6:	f7fc fe56 	bl	80a00a6 <__cxa_guard_acquire>
 80a33fa:	b158      	cbz	r0, 80a3414 <_Z19__fetch_global_Wirev+0x2c>
 80a33fc:	4621      	mov	r1, r4
 80a33fe:	4807      	ldr	r0, [pc, #28]	; (80a341c <_Z19__fetch_global_Wirev+0x34>)
 80a3400:	f7ff fe42 	bl	80a3088 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a3404:	4628      	mov	r0, r5
 80a3406:	f7fc fe53 	bl	80a00b0 <__cxa_guard_release>
 80a340a:	4a05      	ldr	r2, [pc, #20]	; (80a3420 <_Z19__fetch_global_Wirev+0x38>)
 80a340c:	4905      	ldr	r1, [pc, #20]	; (80a3424 <_Z19__fetch_global_Wirev+0x3c>)
 80a340e:	4803      	ldr	r0, [pc, #12]	; (80a341c <_Z19__fetch_global_Wirev+0x34>)
 80a3410:	f000 f80a 	bl	80a3428 <__aeabi_atexit>
	return wire;
}
 80a3414:	4801      	ldr	r0, [pc, #4]	; (80a341c <_Z19__fetch_global_Wirev+0x34>)
 80a3416:	bd38      	pop	{r3, r4, r5, pc}
 80a3418:	20000688 	.word	0x20000688
 80a341c:	2000068c 	.word	0x2000068c
 80a3420:	200000a4 	.word	0x200000a4
 80a3424:	080a3031 	.word	0x080a3031

080a3428 <__aeabi_atexit>:
 80a3428:	460b      	mov	r3, r1
 80a342a:	4601      	mov	r1, r0
 80a342c:	4618      	mov	r0, r3
 80a342e:	f001 bc59 	b.w	80a4ce4 <__cxa_atexit>
	...

080a3434 <_ZSt15get_new_handlerv>:
 80a3434:	4b02      	ldr	r3, [pc, #8]	; (80a3440 <_ZSt15get_new_handlerv+0xc>)
 80a3436:	6818      	ldr	r0, [r3, #0]
 80a3438:	f3bf 8f5f 	dmb	sy
 80a343c:	4770      	bx	lr
 80a343e:	bf00      	nop
 80a3440:	200006a0 	.word	0x200006a0

080a3444 <_ZdlPvj>:
 80a3444:	f7fc be2d 	b.w	80a00a2 <_ZdlPv>

080a3448 <_ZnwjRKSt9nothrow_t>:
 80a3448:	b510      	push	{r4, lr}
 80a344a:	2800      	cmp	r0, #0
 80a344c:	bf14      	ite	ne
 80a344e:	4604      	movne	r4, r0
 80a3450:	2401      	moveq	r4, #1
 80a3452:	4620      	mov	r0, r4
 80a3454:	f7fe fd7a 	bl	80a1f4c <malloc>
 80a3458:	b920      	cbnz	r0, 80a3464 <_ZnwjRKSt9nothrow_t+0x1c>
 80a345a:	f7ff ffeb 	bl	80a3434 <_ZSt15get_new_handlerv>
 80a345e:	b108      	cbz	r0, 80a3464 <_ZnwjRKSt9nothrow_t+0x1c>
 80a3460:	4780      	blx	r0
 80a3462:	e7f6      	b.n	80a3452 <_ZnwjRKSt9nothrow_t+0xa>
 80a3464:	bd10      	pop	{r4, pc}

080a3466 <_ZSt25__throw_bad_function_callv>:
 80a3466:	b508      	push	{r3, lr}
 80a3468:	f7fe fd90 	bl	80a1f8c <abort>

080a346c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a346c:	4b18      	ldr	r3, [pc, #96]	; (80a34d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a346e:	681a      	ldr	r2, [r3, #0]
 80a3470:	07d1      	lsls	r1, r2, #31
 80a3472:	bf5c      	itt	pl
 80a3474:	2201      	movpl	r2, #1
 80a3476:	601a      	strpl	r2, [r3, #0]
 80a3478:	4b16      	ldr	r3, [pc, #88]	; (80a34d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a347a:	681a      	ldr	r2, [r3, #0]
 80a347c:	07d2      	lsls	r2, r2, #31
 80a347e:	bf5c      	itt	pl
 80a3480:	2201      	movpl	r2, #1
 80a3482:	601a      	strpl	r2, [r3, #0]
 80a3484:	4b14      	ldr	r3, [pc, #80]	; (80a34d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3486:	681a      	ldr	r2, [r3, #0]
 80a3488:	07d0      	lsls	r0, r2, #31
 80a348a:	bf5c      	itt	pl
 80a348c:	2201      	movpl	r2, #1
 80a348e:	601a      	strpl	r2, [r3, #0]
 80a3490:	4b12      	ldr	r3, [pc, #72]	; (80a34dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a3492:	681a      	ldr	r2, [r3, #0]
 80a3494:	07d1      	lsls	r1, r2, #31
 80a3496:	bf5c      	itt	pl
 80a3498:	2201      	movpl	r2, #1
 80a349a:	601a      	strpl	r2, [r3, #0]
 80a349c:	4b10      	ldr	r3, [pc, #64]	; (80a34e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a349e:	681a      	ldr	r2, [r3, #0]
 80a34a0:	07d2      	lsls	r2, r2, #31
 80a34a2:	bf5c      	itt	pl
 80a34a4:	2201      	movpl	r2, #1
 80a34a6:	601a      	strpl	r2, [r3, #0]
 80a34a8:	4b0e      	ldr	r3, [pc, #56]	; (80a34e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a34aa:	681a      	ldr	r2, [r3, #0]
 80a34ac:	07d0      	lsls	r0, r2, #31
 80a34ae:	bf5c      	itt	pl
 80a34b0:	2201      	movpl	r2, #1
 80a34b2:	601a      	strpl	r2, [r3, #0]
 80a34b4:	4b0c      	ldr	r3, [pc, #48]	; (80a34e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a34b6:	681a      	ldr	r2, [r3, #0]
 80a34b8:	07d1      	lsls	r1, r2, #31
 80a34ba:	bf5c      	itt	pl
 80a34bc:	2201      	movpl	r2, #1
 80a34be:	601a      	strpl	r2, [r3, #0]
 80a34c0:	4b0a      	ldr	r3, [pc, #40]	; (80a34ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a34c2:	681a      	ldr	r2, [r3, #0]
 80a34c4:	07d2      	lsls	r2, r2, #31
 80a34c6:	bf5c      	itt	pl
 80a34c8:	2201      	movpl	r2, #1
 80a34ca:	601a      	strpl	r2, [r3, #0]
 80a34cc:	4770      	bx	lr
 80a34ce:	bf00      	nop
 80a34d0:	200006c0 	.word	0x200006c0
 80a34d4:	200006bc 	.word	0x200006bc
 80a34d8:	200006b8 	.word	0x200006b8
 80a34dc:	200006b4 	.word	0x200006b4
 80a34e0:	200006b0 	.word	0x200006b0
 80a34e4:	200006ac 	.word	0x200006ac
 80a34e8:	200006a8 	.word	0x200006a8
 80a34ec:	200006a4 	.word	0x200006a4

080a34f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a34f0:	4b24      	ldr	r3, [pc, #144]	; (80a3584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a34f2:	681a      	ldr	r2, [r3, #0]
 80a34f4:	07d0      	lsls	r0, r2, #31
 80a34f6:	bf5c      	itt	pl
 80a34f8:	2201      	movpl	r2, #1
 80a34fa:	601a      	strpl	r2, [r3, #0]
 80a34fc:	4b22      	ldr	r3, [pc, #136]	; (80a3588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a34fe:	681a      	ldr	r2, [r3, #0]
 80a3500:	07d1      	lsls	r1, r2, #31
 80a3502:	bf5c      	itt	pl
 80a3504:	2201      	movpl	r2, #1
 80a3506:	601a      	strpl	r2, [r3, #0]
 80a3508:	4b20      	ldr	r3, [pc, #128]	; (80a358c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a350a:	681a      	ldr	r2, [r3, #0]
 80a350c:	07d2      	lsls	r2, r2, #31
 80a350e:	bf5c      	itt	pl
 80a3510:	2201      	movpl	r2, #1
 80a3512:	601a      	strpl	r2, [r3, #0]
 80a3514:	4b1e      	ldr	r3, [pc, #120]	; (80a3590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a3516:	681a      	ldr	r2, [r3, #0]
 80a3518:	07d0      	lsls	r0, r2, #31
 80a351a:	bf5c      	itt	pl
 80a351c:	2201      	movpl	r2, #1
 80a351e:	601a      	strpl	r2, [r3, #0]
 80a3520:	4b1c      	ldr	r3, [pc, #112]	; (80a3594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a3522:	681a      	ldr	r2, [r3, #0]
 80a3524:	07d1      	lsls	r1, r2, #31
 80a3526:	bf5c      	itt	pl
 80a3528:	2201      	movpl	r2, #1
 80a352a:	601a      	strpl	r2, [r3, #0]
 80a352c:	4b1a      	ldr	r3, [pc, #104]	; (80a3598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a352e:	681a      	ldr	r2, [r3, #0]
 80a3530:	07d2      	lsls	r2, r2, #31
 80a3532:	bf5c      	itt	pl
 80a3534:	2201      	movpl	r2, #1
 80a3536:	601a      	strpl	r2, [r3, #0]
 80a3538:	4b18      	ldr	r3, [pc, #96]	; (80a359c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a353a:	681a      	ldr	r2, [r3, #0]
 80a353c:	07d0      	lsls	r0, r2, #31
 80a353e:	bf5c      	itt	pl
 80a3540:	2201      	movpl	r2, #1
 80a3542:	601a      	strpl	r2, [r3, #0]
 80a3544:	4b16      	ldr	r3, [pc, #88]	; (80a35a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a3546:	681a      	ldr	r2, [r3, #0]
 80a3548:	07d1      	lsls	r1, r2, #31
 80a354a:	bf5c      	itt	pl
 80a354c:	2201      	movpl	r2, #1
 80a354e:	601a      	strpl	r2, [r3, #0]
 80a3550:	4b14      	ldr	r3, [pc, #80]	; (80a35a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a3552:	681a      	ldr	r2, [r3, #0]
 80a3554:	07d2      	lsls	r2, r2, #31
 80a3556:	bf5c      	itt	pl
 80a3558:	2201      	movpl	r2, #1
 80a355a:	601a      	strpl	r2, [r3, #0]
 80a355c:	4b12      	ldr	r3, [pc, #72]	; (80a35a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a355e:	681a      	ldr	r2, [r3, #0]
 80a3560:	07d0      	lsls	r0, r2, #31
 80a3562:	bf5c      	itt	pl
 80a3564:	2201      	movpl	r2, #1
 80a3566:	601a      	strpl	r2, [r3, #0]
 80a3568:	4b10      	ldr	r3, [pc, #64]	; (80a35ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a356a:	681a      	ldr	r2, [r3, #0]
 80a356c:	07d1      	lsls	r1, r2, #31
 80a356e:	bf5c      	itt	pl
 80a3570:	2201      	movpl	r2, #1
 80a3572:	601a      	strpl	r2, [r3, #0]
 80a3574:	4b0e      	ldr	r3, [pc, #56]	; (80a35b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a3576:	681a      	ldr	r2, [r3, #0]
 80a3578:	07d2      	lsls	r2, r2, #31
 80a357a:	bf5c      	itt	pl
 80a357c:	2201      	movpl	r2, #1
 80a357e:	601a      	strpl	r2, [r3, #0]
 80a3580:	4770      	bx	lr
 80a3582:	bf00      	nop
 80a3584:	200006f0 	.word	0x200006f0
 80a3588:	200006ec 	.word	0x200006ec
 80a358c:	200006e8 	.word	0x200006e8
 80a3590:	200006e4 	.word	0x200006e4
 80a3594:	200006e0 	.word	0x200006e0
 80a3598:	200006dc 	.word	0x200006dc
 80a359c:	200006d8 	.word	0x200006d8
 80a35a0:	200006d4 	.word	0x200006d4
 80a35a4:	200006d0 	.word	0x200006d0
 80a35a8:	200006cc 	.word	0x200006cc
 80a35ac:	200006c8 	.word	0x200006c8
 80a35b0:	200006c4 	.word	0x200006c4

080a35b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a35b4:	4b24      	ldr	r3, [pc, #144]	; (80a3648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a35b6:	681a      	ldr	r2, [r3, #0]
 80a35b8:	07d0      	lsls	r0, r2, #31
 80a35ba:	bf5c      	itt	pl
 80a35bc:	2201      	movpl	r2, #1
 80a35be:	601a      	strpl	r2, [r3, #0]
 80a35c0:	4b22      	ldr	r3, [pc, #136]	; (80a364c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a35c2:	681a      	ldr	r2, [r3, #0]
 80a35c4:	07d1      	lsls	r1, r2, #31
 80a35c6:	bf5c      	itt	pl
 80a35c8:	2201      	movpl	r2, #1
 80a35ca:	601a      	strpl	r2, [r3, #0]
 80a35cc:	4b20      	ldr	r3, [pc, #128]	; (80a3650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a35ce:	681a      	ldr	r2, [r3, #0]
 80a35d0:	07d2      	lsls	r2, r2, #31
 80a35d2:	bf5c      	itt	pl
 80a35d4:	2201      	movpl	r2, #1
 80a35d6:	601a      	strpl	r2, [r3, #0]
 80a35d8:	4b1e      	ldr	r3, [pc, #120]	; (80a3654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a35da:	681a      	ldr	r2, [r3, #0]
 80a35dc:	07d0      	lsls	r0, r2, #31
 80a35de:	bf5c      	itt	pl
 80a35e0:	2201      	movpl	r2, #1
 80a35e2:	601a      	strpl	r2, [r3, #0]
 80a35e4:	4b1c      	ldr	r3, [pc, #112]	; (80a3658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a35e6:	681a      	ldr	r2, [r3, #0]
 80a35e8:	07d1      	lsls	r1, r2, #31
 80a35ea:	bf5c      	itt	pl
 80a35ec:	2201      	movpl	r2, #1
 80a35ee:	601a      	strpl	r2, [r3, #0]
 80a35f0:	4b1a      	ldr	r3, [pc, #104]	; (80a365c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a35f2:	681a      	ldr	r2, [r3, #0]
 80a35f4:	07d2      	lsls	r2, r2, #31
 80a35f6:	bf5c      	itt	pl
 80a35f8:	2201      	movpl	r2, #1
 80a35fa:	601a      	strpl	r2, [r3, #0]
 80a35fc:	4b18      	ldr	r3, [pc, #96]	; (80a3660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a35fe:	681a      	ldr	r2, [r3, #0]
 80a3600:	07d0      	lsls	r0, r2, #31
 80a3602:	bf5c      	itt	pl
 80a3604:	2201      	movpl	r2, #1
 80a3606:	601a      	strpl	r2, [r3, #0]
 80a3608:	4b16      	ldr	r3, [pc, #88]	; (80a3664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a360a:	681a      	ldr	r2, [r3, #0]
 80a360c:	07d1      	lsls	r1, r2, #31
 80a360e:	bf5c      	itt	pl
 80a3610:	2201      	movpl	r2, #1
 80a3612:	601a      	strpl	r2, [r3, #0]
 80a3614:	4b14      	ldr	r3, [pc, #80]	; (80a3668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a3616:	681a      	ldr	r2, [r3, #0]
 80a3618:	07d2      	lsls	r2, r2, #31
 80a361a:	bf5c      	itt	pl
 80a361c:	2201      	movpl	r2, #1
 80a361e:	601a      	strpl	r2, [r3, #0]
 80a3620:	4b12      	ldr	r3, [pc, #72]	; (80a366c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a3622:	681a      	ldr	r2, [r3, #0]
 80a3624:	07d0      	lsls	r0, r2, #31
 80a3626:	bf5c      	itt	pl
 80a3628:	2201      	movpl	r2, #1
 80a362a:	601a      	strpl	r2, [r3, #0]
 80a362c:	4b10      	ldr	r3, [pc, #64]	; (80a3670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a362e:	681a      	ldr	r2, [r3, #0]
 80a3630:	07d1      	lsls	r1, r2, #31
 80a3632:	bf5c      	itt	pl
 80a3634:	2201      	movpl	r2, #1
 80a3636:	601a      	strpl	r2, [r3, #0]
 80a3638:	4b0e      	ldr	r3, [pc, #56]	; (80a3674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a363a:	681a      	ldr	r2, [r3, #0]
 80a363c:	07d2      	lsls	r2, r2, #31
 80a363e:	bf5c      	itt	pl
 80a3640:	2201      	movpl	r2, #1
 80a3642:	601a      	strpl	r2, [r3, #0]
 80a3644:	4770      	bx	lr
 80a3646:	bf00      	nop
 80a3648:	20000720 	.word	0x20000720
 80a364c:	2000071c 	.word	0x2000071c
 80a3650:	20000718 	.word	0x20000718
 80a3654:	20000714 	.word	0x20000714
 80a3658:	20000710 	.word	0x20000710
 80a365c:	2000070c 	.word	0x2000070c
 80a3660:	20000708 	.word	0x20000708
 80a3664:	20000704 	.word	0x20000704
 80a3668:	20000700 	.word	0x20000700
 80a366c:	200006fc 	.word	0x200006fc
 80a3670:	200006f8 	.word	0x200006f8
 80a3674:	200006f4 	.word	0x200006f4

080a3678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a3678:	4b18      	ldr	r3, [pc, #96]	; (80a36dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a367a:	681a      	ldr	r2, [r3, #0]
 80a367c:	07d1      	lsls	r1, r2, #31
 80a367e:	bf5c      	itt	pl
 80a3680:	2201      	movpl	r2, #1
 80a3682:	601a      	strpl	r2, [r3, #0]
 80a3684:	4b16      	ldr	r3, [pc, #88]	; (80a36e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a3686:	681a      	ldr	r2, [r3, #0]
 80a3688:	07d2      	lsls	r2, r2, #31
 80a368a:	bf5c      	itt	pl
 80a368c:	2201      	movpl	r2, #1
 80a368e:	601a      	strpl	r2, [r3, #0]
 80a3690:	4b14      	ldr	r3, [pc, #80]	; (80a36e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a3692:	681a      	ldr	r2, [r3, #0]
 80a3694:	07d0      	lsls	r0, r2, #31
 80a3696:	bf5c      	itt	pl
 80a3698:	2201      	movpl	r2, #1
 80a369a:	601a      	strpl	r2, [r3, #0]
 80a369c:	4b12      	ldr	r3, [pc, #72]	; (80a36e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a369e:	681a      	ldr	r2, [r3, #0]
 80a36a0:	07d1      	lsls	r1, r2, #31
 80a36a2:	bf5c      	itt	pl
 80a36a4:	2201      	movpl	r2, #1
 80a36a6:	601a      	strpl	r2, [r3, #0]
 80a36a8:	4b10      	ldr	r3, [pc, #64]	; (80a36ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a36aa:	681a      	ldr	r2, [r3, #0]
 80a36ac:	07d2      	lsls	r2, r2, #31
 80a36ae:	bf5c      	itt	pl
 80a36b0:	2201      	movpl	r2, #1
 80a36b2:	601a      	strpl	r2, [r3, #0]
 80a36b4:	4b0e      	ldr	r3, [pc, #56]	; (80a36f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a36b6:	681a      	ldr	r2, [r3, #0]
 80a36b8:	07d0      	lsls	r0, r2, #31
 80a36ba:	bf5c      	itt	pl
 80a36bc:	2201      	movpl	r2, #1
 80a36be:	601a      	strpl	r2, [r3, #0]
 80a36c0:	4b0c      	ldr	r3, [pc, #48]	; (80a36f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a36c2:	681a      	ldr	r2, [r3, #0]
 80a36c4:	07d1      	lsls	r1, r2, #31
 80a36c6:	bf5c      	itt	pl
 80a36c8:	2201      	movpl	r2, #1
 80a36ca:	601a      	strpl	r2, [r3, #0]
 80a36cc:	4b0a      	ldr	r3, [pc, #40]	; (80a36f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a36ce:	681a      	ldr	r2, [r3, #0]
 80a36d0:	07d2      	lsls	r2, r2, #31
 80a36d2:	bf5c      	itt	pl
 80a36d4:	2201      	movpl	r2, #1
 80a36d6:	601a      	strpl	r2, [r3, #0]
 80a36d8:	4770      	bx	lr
 80a36da:	bf00      	nop
 80a36dc:	20000740 	.word	0x20000740
 80a36e0:	2000073c 	.word	0x2000073c
 80a36e4:	20000738 	.word	0x20000738
 80a36e8:	20000734 	.word	0x20000734
 80a36ec:	20000730 	.word	0x20000730
 80a36f0:	2000072c 	.word	0x2000072c
 80a36f4:	20000728 	.word	0x20000728
 80a36f8:	20000724 	.word	0x20000724
 80a36fc:	00000000 	.word	0x00000000

080a3700 <floor>:
 80a3700:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a3704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a3708:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a370c:	2e13      	cmp	r6, #19
 80a370e:	460b      	mov	r3, r1
 80a3710:	4604      	mov	r4, r0
 80a3712:	460d      	mov	r5, r1
 80a3714:	4688      	mov	r8, r1
 80a3716:	4607      	mov	r7, r0
 80a3718:	dc1c      	bgt.n	80a3754 <floor+0x54>
 80a371a:	2e00      	cmp	r6, #0
 80a371c:	db3f      	blt.n	80a379e <floor+0x9e>
 80a371e:	4a3a      	ldr	r2, [pc, #232]	; (80a3808 <floor+0x108>)
 80a3720:	4686      	mov	lr, r0
 80a3722:	fa42 f906 	asr.w	r9, r2, r6
 80a3726:	ea01 0209 	and.w	r2, r1, r9
 80a372a:	4302      	orrs	r2, r0
 80a372c:	d017      	beq.n	80a375e <floor+0x5e>
 80a372e:	a334      	add	r3, pc, #208	; (adr r3, 80a3800 <floor+0x100>)
 80a3730:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3734:	f000 faee 	bl	80a3d14 <__adddf3>
 80a3738:	2200      	movs	r2, #0
 80a373a:	2300      	movs	r3, #0
 80a373c:	f000 ff2c 	bl	80a4598 <__aeabi_dcmpgt>
 80a3740:	b120      	cbz	r0, 80a374c <floor+0x4c>
 80a3742:	2d00      	cmp	r5, #0
 80a3744:	db40      	blt.n	80a37c8 <floor+0xc8>
 80a3746:	ea28 0509 	bic.w	r5, r8, r9
 80a374a:	2700      	movs	r7, #0
 80a374c:	4638      	mov	r0, r7
 80a374e:	4629      	mov	r1, r5
 80a3750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3754:	2e33      	cmp	r6, #51	; 0x33
 80a3756:	dd06      	ble.n	80a3766 <floor+0x66>
 80a3758:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a375c:	d02f      	beq.n	80a37be <floor+0xbe>
 80a375e:	4620      	mov	r0, r4
 80a3760:	4619      	mov	r1, r3
 80a3762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3766:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a376a:	f04f 39ff 	mov.w	r9, #4294967295
 80a376e:	fa29 f902 	lsr.w	r9, r9, r2
 80a3772:	ea10 0f09 	tst.w	r0, r9
 80a3776:	d0f2      	beq.n	80a375e <floor+0x5e>
 80a3778:	a321      	add	r3, pc, #132	; (adr r3, 80a3800 <floor+0x100>)
 80a377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a377e:	f000 fac9 	bl	80a3d14 <__adddf3>
 80a3782:	2200      	movs	r2, #0
 80a3784:	2300      	movs	r3, #0
 80a3786:	f000 ff07 	bl	80a4598 <__aeabi_dcmpgt>
 80a378a:	2800      	cmp	r0, #0
 80a378c:	d0de      	beq.n	80a374c <floor+0x4c>
 80a378e:	2d00      	cmp	r5, #0
 80a3790:	db20      	blt.n	80a37d4 <floor+0xd4>
 80a3792:	4645      	mov	r5, r8
 80a3794:	ea27 0709 	bic.w	r7, r7, r9
 80a3798:	4638      	mov	r0, r7
 80a379a:	4629      	mov	r1, r5
 80a379c:	e7d8      	b.n	80a3750 <floor+0x50>
 80a379e:	a318      	add	r3, pc, #96	; (adr r3, 80a3800 <floor+0x100>)
 80a37a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a37a4:	f000 fab6 	bl	80a3d14 <__adddf3>
 80a37a8:	2200      	movs	r2, #0
 80a37aa:	2300      	movs	r3, #0
 80a37ac:	f000 fef4 	bl	80a4598 <__aeabi_dcmpgt>
 80a37b0:	2800      	cmp	r0, #0
 80a37b2:	d0cb      	beq.n	80a374c <floor+0x4c>
 80a37b4:	2d00      	cmp	r5, #0
 80a37b6:	db18      	blt.n	80a37ea <floor+0xea>
 80a37b8:	2700      	movs	r7, #0
 80a37ba:	463d      	mov	r5, r7
 80a37bc:	e7c6      	b.n	80a374c <floor+0x4c>
 80a37be:	4602      	mov	r2, r0
 80a37c0:	460b      	mov	r3, r1
 80a37c2:	f000 faa7 	bl	80a3d14 <__adddf3>
 80a37c6:	e7cc      	b.n	80a3762 <floor+0x62>
 80a37c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a37cc:	fa43 f606 	asr.w	r6, r3, r6
 80a37d0:	44b0      	add	r8, r6
 80a37d2:	e7b8      	b.n	80a3746 <floor+0x46>
 80a37d4:	2e14      	cmp	r6, #20
 80a37d6:	d010      	beq.n	80a37fa <floor+0xfa>
 80a37d8:	2301      	movs	r3, #1
 80a37da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a37de:	fa03 f606 	lsl.w	r6, r3, r6
 80a37e2:	1937      	adds	r7, r6, r4
 80a37e4:	bf28      	it	cs
 80a37e6:	4498      	addcs	r8, r3
 80a37e8:	e7d3      	b.n	80a3792 <floor+0x92>
 80a37ea:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a37ee:	4b07      	ldr	r3, [pc, #28]	; (80a380c <floor+0x10c>)
 80a37f0:	4322      	orrs	r2, r4
 80a37f2:	bf18      	it	ne
 80a37f4:	461d      	movne	r5, r3
 80a37f6:	2700      	movs	r7, #0
 80a37f8:	e7a8      	b.n	80a374c <floor+0x4c>
 80a37fa:	f105 0801 	add.w	r8, r5, #1
 80a37fe:	e7c8      	b.n	80a3792 <floor+0x92>
 80a3800:	8800759c 	.word	0x8800759c
 80a3804:	7e37e43c 	.word	0x7e37e43c
 80a3808:	000fffff 	.word	0x000fffff
 80a380c:	bff00000 	.word	0xbff00000

080a3810 <log>:
 80a3810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3814:	b08a      	sub	sp, #40	; 0x28
 80a3816:	4604      	mov	r4, r0
 80a3818:	460d      	mov	r5, r1
 80a381a:	f000 f879 	bl	80a3910 <__ieee754_log>
 80a381e:	4b37      	ldr	r3, [pc, #220]	; (80a38fc <log+0xec>)
 80a3820:	4606      	mov	r6, r0
 80a3822:	f993 8000 	ldrsb.w	r8, [r3]
 80a3826:	460f      	mov	r7, r1
 80a3828:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a382c:	d00d      	beq.n	80a384a <log+0x3a>
 80a382e:	4622      	mov	r2, r4
 80a3830:	462b      	mov	r3, r5
 80a3832:	4620      	mov	r0, r4
 80a3834:	4629      	mov	r1, r5
 80a3836:	f000 feb9 	bl	80a45ac <__aeabi_dcmpun>
 80a383a:	b930      	cbnz	r0, 80a384a <log+0x3a>
 80a383c:	2200      	movs	r2, #0
 80a383e:	2300      	movs	r3, #0
 80a3840:	4620      	mov	r0, r4
 80a3842:	4629      	mov	r1, r5
 80a3844:	f000 fea8 	bl	80a4598 <__aeabi_dcmpgt>
 80a3848:	b120      	cbz	r0, 80a3854 <log+0x44>
 80a384a:	4630      	mov	r0, r6
 80a384c:	4639      	mov	r1, r7
 80a384e:	b00a      	add	sp, #40	; 0x28
 80a3850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3854:	4b2a      	ldr	r3, [pc, #168]	; (80a3900 <log+0xf0>)
 80a3856:	9008      	str	r0, [sp, #32]
 80a3858:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a385c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a3860:	9301      	str	r3, [sp, #4]
 80a3862:	f1b8 0f00 	cmp.w	r8, #0
 80a3866:	d119      	bne.n	80a389c <log+0x8c>
 80a3868:	4f26      	ldr	r7, [pc, #152]	; (80a3904 <log+0xf4>)
 80a386a:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a386e:	4620      	mov	r0, r4
 80a3870:	4629      	mov	r1, r5
 80a3872:	2200      	movs	r2, #0
 80a3874:	2300      	movs	r3, #0
 80a3876:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a387a:	f000 fe65 	bl	80a4548 <__aeabi_dcmpeq>
 80a387e:	2800      	cmp	r0, #0
 80a3880:	d034      	beq.n	80a38ec <log+0xdc>
 80a3882:	2302      	movs	r3, #2
 80a3884:	9300      	str	r3, [sp, #0]
 80a3886:	4668      	mov	r0, sp
 80a3888:	f000 fa36 	bl	80a3cf8 <matherr>
 80a388c:	b1a8      	cbz	r0, 80a38ba <log+0xaa>
 80a388e:	9b08      	ldr	r3, [sp, #32]
 80a3890:	b9c3      	cbnz	r3, 80a38c4 <log+0xb4>
 80a3892:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a3896:	b00a      	add	sp, #40	; 0x28
 80a3898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a389c:	4f1a      	ldr	r7, [pc, #104]	; (80a3908 <log+0xf8>)
 80a389e:	2600      	movs	r6, #0
 80a38a0:	4620      	mov	r0, r4
 80a38a2:	4629      	mov	r1, r5
 80a38a4:	2200      	movs	r2, #0
 80a38a6:	2300      	movs	r3, #0
 80a38a8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a38ac:	f000 fe4c 	bl	80a4548 <__aeabi_dcmpeq>
 80a38b0:	b168      	cbz	r0, 80a38ce <log+0xbe>
 80a38b2:	2302      	movs	r3, #2
 80a38b4:	4598      	cmp	r8, r3
 80a38b6:	9300      	str	r3, [sp, #0]
 80a38b8:	d1e5      	bne.n	80a3886 <log+0x76>
 80a38ba:	f7fe fb77 	bl	80a1fac <__errno>
 80a38be:	2322      	movs	r3, #34	; 0x22
 80a38c0:	6003      	str	r3, [r0, #0]
 80a38c2:	e7e4      	b.n	80a388e <log+0x7e>
 80a38c4:	f7fe fb72 	bl	80a1fac <__errno>
 80a38c8:	9b08      	ldr	r3, [sp, #32]
 80a38ca:	6003      	str	r3, [r0, #0]
 80a38cc:	e7e1      	b.n	80a3892 <log+0x82>
 80a38ce:	2301      	movs	r3, #1
 80a38d0:	f1b8 0f02 	cmp.w	r8, #2
 80a38d4:	9300      	str	r3, [sp, #0]
 80a38d6:	d10b      	bne.n	80a38f0 <log+0xe0>
 80a38d8:	f7fe fb68 	bl	80a1fac <__errno>
 80a38dc:	2321      	movs	r3, #33	; 0x21
 80a38de:	6003      	str	r3, [r0, #0]
 80a38e0:	480a      	ldr	r0, [pc, #40]	; (80a390c <log+0xfc>)
 80a38e2:	f000 fa0b 	bl	80a3cfc <nan>
 80a38e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a38ea:	e7d0      	b.n	80a388e <log+0x7e>
 80a38ec:	2301      	movs	r3, #1
 80a38ee:	9300      	str	r3, [sp, #0]
 80a38f0:	4668      	mov	r0, sp
 80a38f2:	f000 fa01 	bl	80a3cf8 <matherr>
 80a38f6:	2800      	cmp	r0, #0
 80a38f8:	d1f2      	bne.n	80a38e0 <log+0xd0>
 80a38fa:	e7ed      	b.n	80a38d8 <log+0xc8>
 80a38fc:	20000038 	.word	0x20000038
 80a3900:	080a52fc 	.word	0x080a52fc
 80a3904:	c7efffff 	.word	0xc7efffff
 80a3908:	fff00000 	.word	0xfff00000
 80a390c:	080a5300 	.word	0x080a5300

080a3910 <__ieee754_log>:
 80a3910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3914:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3918:	b085      	sub	sp, #20
 80a391a:	4606      	mov	r6, r0
 80a391c:	460f      	mov	r7, r1
 80a391e:	460b      	mov	r3, r1
 80a3920:	da5a      	bge.n	80a39d8 <__ieee754_log+0xc8>
 80a3922:	4602      	mov	r2, r0
 80a3924:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a3928:	4322      	orrs	r2, r4
 80a392a:	f000 80f7 	beq.w	80a3b1c <__ieee754_log+0x20c>
 80a392e:	2900      	cmp	r1, #0
 80a3930:	f2c0 8179 	blt.w	80a3c26 <__ieee754_log+0x316>
 80a3934:	2200      	movs	r2, #0
 80a3936:	4bd6      	ldr	r3, [pc, #856]	; (80a3c90 <__ieee754_log+0x380>)
 80a3938:	f000 fb9e 	bl	80a4078 <__aeabi_dmul>
 80a393c:	460b      	mov	r3, r1
 80a393e:	460f      	mov	r7, r1
 80a3940:	49d4      	ldr	r1, [pc, #848]	; (80a3c94 <__ieee754_log+0x384>)
 80a3942:	4606      	mov	r6, r0
 80a3944:	428b      	cmp	r3, r1
 80a3946:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a394a:	dc49      	bgt.n	80a39e0 <__ieee754_log+0xd0>
 80a394c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a3950:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a3954:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a3958:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a395c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a3960:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a3964:	151b      	asrs	r3, r3, #20
 80a3966:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a396a:	ea41 0705 	orr.w	r7, r1, r5
 80a396e:	189c      	adds	r4, r3, r2
 80a3970:	4630      	mov	r0, r6
 80a3972:	2200      	movs	r2, #0
 80a3974:	4bc8      	ldr	r3, [pc, #800]	; (80a3c98 <__ieee754_log+0x388>)
 80a3976:	4639      	mov	r1, r7
 80a3978:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a397c:	f000 f9c8 	bl	80a3d10 <__aeabi_dsub>
 80a3980:	1cab      	adds	r3, r5, #2
 80a3982:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a3986:	2b02      	cmp	r3, #2
 80a3988:	4682      	mov	sl, r0
 80a398a:	468b      	mov	fp, r1
 80a398c:	f04f 0200 	mov.w	r2, #0
 80a3990:	dc2f      	bgt.n	80a39f2 <__ieee754_log+0xe2>
 80a3992:	2300      	movs	r3, #0
 80a3994:	f000 fdd8 	bl	80a4548 <__aeabi_dcmpeq>
 80a3998:	2800      	cmp	r0, #0
 80a399a:	f000 80c8 	beq.w	80a3b2e <__ieee754_log+0x21e>
 80a399e:	2c00      	cmp	r4, #0
 80a39a0:	f000 814a 	beq.w	80a3c38 <__ieee754_log+0x328>
 80a39a4:	4620      	mov	r0, r4
 80a39a6:	f000 fb01 	bl	80a3fac <__aeabi_i2d>
 80a39aa:	a3a5      	add	r3, pc, #660	; (adr r3, 80a3c40 <__ieee754_log+0x330>)
 80a39ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39b0:	4606      	mov	r6, r0
 80a39b2:	460f      	mov	r7, r1
 80a39b4:	f000 fb60 	bl	80a4078 <__aeabi_dmul>
 80a39b8:	a3a3      	add	r3, pc, #652	; (adr r3, 80a3c48 <__ieee754_log+0x338>)
 80a39ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a39be:	4604      	mov	r4, r0
 80a39c0:	460d      	mov	r5, r1
 80a39c2:	4630      	mov	r0, r6
 80a39c4:	4639      	mov	r1, r7
 80a39c6:	f000 fb57 	bl	80a4078 <__aeabi_dmul>
 80a39ca:	4602      	mov	r2, r0
 80a39cc:	460b      	mov	r3, r1
 80a39ce:	4620      	mov	r0, r4
 80a39d0:	4629      	mov	r1, r5
 80a39d2:	f000 f99f 	bl	80a3d14 <__adddf3>
 80a39d6:	e009      	b.n	80a39ec <__ieee754_log+0xdc>
 80a39d8:	49ae      	ldr	r1, [pc, #696]	; (80a3c94 <__ieee754_log+0x384>)
 80a39da:	2200      	movs	r2, #0
 80a39dc:	428b      	cmp	r3, r1
 80a39de:	ddb5      	ble.n	80a394c <__ieee754_log+0x3c>
 80a39e0:	4632      	mov	r2, r6
 80a39e2:	463b      	mov	r3, r7
 80a39e4:	4630      	mov	r0, r6
 80a39e6:	4639      	mov	r1, r7
 80a39e8:	f000 f994 	bl	80a3d14 <__adddf3>
 80a39ec:	b005      	add	sp, #20
 80a39ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a39f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a39f6:	f000 f98d 	bl	80a3d14 <__adddf3>
 80a39fa:	4602      	mov	r2, r0
 80a39fc:	460b      	mov	r3, r1
 80a39fe:	4650      	mov	r0, sl
 80a3a00:	4659      	mov	r1, fp
 80a3a02:	f000 fc63 	bl	80a42cc <__aeabi_ddiv>
 80a3a06:	4606      	mov	r6, r0
 80a3a08:	4620      	mov	r0, r4
 80a3a0a:	460f      	mov	r7, r1
 80a3a0c:	f000 face 	bl	80a3fac <__aeabi_i2d>
 80a3a10:	4632      	mov	r2, r6
 80a3a12:	e9cd 0100 	strd	r0, r1, [sp]
 80a3a16:	463b      	mov	r3, r7
 80a3a18:	4630      	mov	r0, r6
 80a3a1a:	4639      	mov	r1, r7
 80a3a1c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3a20:	f000 fb2a 	bl	80a4078 <__aeabi_dmul>
 80a3a24:	4602      	mov	r2, r0
 80a3a26:	460b      	mov	r3, r1
 80a3a28:	4680      	mov	r8, r0
 80a3a2a:	4689      	mov	r9, r1
 80a3a2c:	f000 fb24 	bl	80a4078 <__aeabi_dmul>
 80a3a30:	a387      	add	r3, pc, #540	; (adr r3, 80a3c50 <__ieee754_log+0x340>)
 80a3a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a36:	4606      	mov	r6, r0
 80a3a38:	460f      	mov	r7, r1
 80a3a3a:	f000 fb1d 	bl	80a4078 <__aeabi_dmul>
 80a3a3e:	a386      	add	r3, pc, #536	; (adr r3, 80a3c58 <__ieee754_log+0x348>)
 80a3a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a44:	f000 f966 	bl	80a3d14 <__adddf3>
 80a3a48:	4632      	mov	r2, r6
 80a3a4a:	463b      	mov	r3, r7
 80a3a4c:	f000 fb14 	bl	80a4078 <__aeabi_dmul>
 80a3a50:	a383      	add	r3, pc, #524	; (adr r3, 80a3c60 <__ieee754_log+0x350>)
 80a3a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a56:	f000 f95d 	bl	80a3d14 <__adddf3>
 80a3a5a:	4632      	mov	r2, r6
 80a3a5c:	463b      	mov	r3, r7
 80a3a5e:	f000 fb0b 	bl	80a4078 <__aeabi_dmul>
 80a3a62:	a381      	add	r3, pc, #516	; (adr r3, 80a3c68 <__ieee754_log+0x358>)
 80a3a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a68:	f000 f954 	bl	80a3d14 <__adddf3>
 80a3a6c:	4642      	mov	r2, r8
 80a3a6e:	464b      	mov	r3, r9
 80a3a70:	f000 fb02 	bl	80a4078 <__aeabi_dmul>
 80a3a74:	a37e      	add	r3, pc, #504	; (adr r3, 80a3c70 <__ieee754_log+0x360>)
 80a3a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a7a:	4680      	mov	r8, r0
 80a3a7c:	4689      	mov	r9, r1
 80a3a7e:	4630      	mov	r0, r6
 80a3a80:	4639      	mov	r1, r7
 80a3a82:	f000 faf9 	bl	80a4078 <__aeabi_dmul>
 80a3a86:	a37c      	add	r3, pc, #496	; (adr r3, 80a3c78 <__ieee754_log+0x368>)
 80a3a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a8c:	f000 f942 	bl	80a3d14 <__adddf3>
 80a3a90:	4632      	mov	r2, r6
 80a3a92:	463b      	mov	r3, r7
 80a3a94:	f000 faf0 	bl	80a4078 <__aeabi_dmul>
 80a3a98:	a379      	add	r3, pc, #484	; (adr r3, 80a3c80 <__ieee754_log+0x370>)
 80a3a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3a9e:	f000 f939 	bl	80a3d14 <__adddf3>
 80a3aa2:	4632      	mov	r2, r6
 80a3aa4:	463b      	mov	r3, r7
 80a3aa6:	f000 fae7 	bl	80a4078 <__aeabi_dmul>
 80a3aaa:	460b      	mov	r3, r1
 80a3aac:	4602      	mov	r2, r0
 80a3aae:	4649      	mov	r1, r9
 80a3ab0:	4640      	mov	r0, r8
 80a3ab2:	f000 f92f 	bl	80a3d14 <__adddf3>
 80a3ab6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a3aba:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a3abe:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a3ac2:	3551      	adds	r5, #81	; 0x51
 80a3ac4:	431d      	orrs	r5, r3
 80a3ac6:	2d00      	cmp	r5, #0
 80a3ac8:	4680      	mov	r8, r0
 80a3aca:	4689      	mov	r9, r1
 80a3acc:	dd56      	ble.n	80a3b7c <__ieee754_log+0x26c>
 80a3ace:	2200      	movs	r2, #0
 80a3ad0:	4b72      	ldr	r3, [pc, #456]	; (80a3c9c <__ieee754_log+0x38c>)
 80a3ad2:	4650      	mov	r0, sl
 80a3ad4:	4659      	mov	r1, fp
 80a3ad6:	f000 facf 	bl	80a4078 <__aeabi_dmul>
 80a3ada:	4652      	mov	r2, sl
 80a3adc:	465b      	mov	r3, fp
 80a3ade:	f000 facb 	bl	80a4078 <__aeabi_dmul>
 80a3ae2:	4606      	mov	r6, r0
 80a3ae4:	460f      	mov	r7, r1
 80a3ae6:	2c00      	cmp	r4, #0
 80a3ae8:	d168      	bne.n	80a3bbc <__ieee754_log+0x2ac>
 80a3aea:	4632      	mov	r2, r6
 80a3aec:	463b      	mov	r3, r7
 80a3aee:	4640      	mov	r0, r8
 80a3af0:	4649      	mov	r1, r9
 80a3af2:	f000 f90f 	bl	80a3d14 <__adddf3>
 80a3af6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3afa:	f000 fabd 	bl	80a4078 <__aeabi_dmul>
 80a3afe:	4602      	mov	r2, r0
 80a3b00:	460b      	mov	r3, r1
 80a3b02:	4630      	mov	r0, r6
 80a3b04:	4639      	mov	r1, r7
 80a3b06:	f000 f903 	bl	80a3d10 <__aeabi_dsub>
 80a3b0a:	4602      	mov	r2, r0
 80a3b0c:	460b      	mov	r3, r1
 80a3b0e:	4650      	mov	r0, sl
 80a3b10:	4659      	mov	r1, fp
 80a3b12:	f000 f8fd 	bl	80a3d10 <__aeabi_dsub>
 80a3b16:	b005      	add	sp, #20
 80a3b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3b1c:	2200      	movs	r2, #0
 80a3b1e:	2300      	movs	r3, #0
 80a3b20:	2000      	movs	r0, #0
 80a3b22:	495f      	ldr	r1, [pc, #380]	; (80a3ca0 <__ieee754_log+0x390>)
 80a3b24:	f000 fbd2 	bl	80a42cc <__aeabi_ddiv>
 80a3b28:	b005      	add	sp, #20
 80a3b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3b2e:	a356      	add	r3, pc, #344	; (adr r3, 80a3c88 <__ieee754_log+0x378>)
 80a3b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b34:	4650      	mov	r0, sl
 80a3b36:	4659      	mov	r1, fp
 80a3b38:	f000 fa9e 	bl	80a4078 <__aeabi_dmul>
 80a3b3c:	4602      	mov	r2, r0
 80a3b3e:	460b      	mov	r3, r1
 80a3b40:	2000      	movs	r0, #0
 80a3b42:	4956      	ldr	r1, [pc, #344]	; (80a3c9c <__ieee754_log+0x38c>)
 80a3b44:	f000 f8e4 	bl	80a3d10 <__aeabi_dsub>
 80a3b48:	4652      	mov	r2, sl
 80a3b4a:	4606      	mov	r6, r0
 80a3b4c:	460f      	mov	r7, r1
 80a3b4e:	465b      	mov	r3, fp
 80a3b50:	4650      	mov	r0, sl
 80a3b52:	4659      	mov	r1, fp
 80a3b54:	f000 fa90 	bl	80a4078 <__aeabi_dmul>
 80a3b58:	4602      	mov	r2, r0
 80a3b5a:	460b      	mov	r3, r1
 80a3b5c:	4630      	mov	r0, r6
 80a3b5e:	4639      	mov	r1, r7
 80a3b60:	f000 fa8a 	bl	80a4078 <__aeabi_dmul>
 80a3b64:	4606      	mov	r6, r0
 80a3b66:	460f      	mov	r7, r1
 80a3b68:	2c00      	cmp	r4, #0
 80a3b6a:	f040 809b 	bne.w	80a3ca4 <__ieee754_log+0x394>
 80a3b6e:	4602      	mov	r2, r0
 80a3b70:	460b      	mov	r3, r1
 80a3b72:	4650      	mov	r0, sl
 80a3b74:	4659      	mov	r1, fp
 80a3b76:	f000 f8cb 	bl	80a3d10 <__aeabi_dsub>
 80a3b7a:	e737      	b.n	80a39ec <__ieee754_log+0xdc>
 80a3b7c:	2c00      	cmp	r4, #0
 80a3b7e:	f000 80a5 	beq.w	80a3ccc <__ieee754_log+0x3bc>
 80a3b82:	a32f      	add	r3, pc, #188	; (adr r3, 80a3c40 <__ieee754_log+0x330>)
 80a3b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3b8c:	f000 fa74 	bl	80a4078 <__aeabi_dmul>
 80a3b90:	4642      	mov	r2, r8
 80a3b92:	464b      	mov	r3, r9
 80a3b94:	4604      	mov	r4, r0
 80a3b96:	460d      	mov	r5, r1
 80a3b98:	4650      	mov	r0, sl
 80a3b9a:	4659      	mov	r1, fp
 80a3b9c:	f000 f8b8 	bl	80a3d10 <__aeabi_dsub>
 80a3ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3ba4:	f000 fa68 	bl	80a4078 <__aeabi_dmul>
 80a3ba8:	a327      	add	r3, pc, #156	; (adr r3, 80a3c48 <__ieee754_log+0x338>)
 80a3baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bae:	4606      	mov	r6, r0
 80a3bb0:	460f      	mov	r7, r1
 80a3bb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3bb6:	f000 fa5f 	bl	80a4078 <__aeabi_dmul>
 80a3bba:	e021      	b.n	80a3c00 <__ieee754_log+0x2f0>
 80a3bbc:	a320      	add	r3, pc, #128	; (adr r3, 80a3c40 <__ieee754_log+0x330>)
 80a3bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3bc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3bc6:	f000 fa57 	bl	80a4078 <__aeabi_dmul>
 80a3bca:	4632      	mov	r2, r6
 80a3bcc:	463b      	mov	r3, r7
 80a3bce:	4604      	mov	r4, r0
 80a3bd0:	460d      	mov	r5, r1
 80a3bd2:	4640      	mov	r0, r8
 80a3bd4:	4649      	mov	r1, r9
 80a3bd6:	f000 f89d 	bl	80a3d14 <__adddf3>
 80a3bda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3bde:	f000 fa4b 	bl	80a4078 <__aeabi_dmul>
 80a3be2:	a319      	add	r3, pc, #100	; (adr r3, 80a3c48 <__ieee754_log+0x338>)
 80a3be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3be8:	4680      	mov	r8, r0
 80a3bea:	4689      	mov	r9, r1
 80a3bec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3bf0:	f000 fa42 	bl	80a4078 <__aeabi_dmul>
 80a3bf4:	4602      	mov	r2, r0
 80a3bf6:	460b      	mov	r3, r1
 80a3bf8:	4640      	mov	r0, r8
 80a3bfa:	4649      	mov	r1, r9
 80a3bfc:	f000 f88a 	bl	80a3d14 <__adddf3>
 80a3c00:	4602      	mov	r2, r0
 80a3c02:	460b      	mov	r3, r1
 80a3c04:	4630      	mov	r0, r6
 80a3c06:	4639      	mov	r1, r7
 80a3c08:	f000 f882 	bl	80a3d10 <__aeabi_dsub>
 80a3c0c:	4652      	mov	r2, sl
 80a3c0e:	465b      	mov	r3, fp
 80a3c10:	f000 f87e 	bl	80a3d10 <__aeabi_dsub>
 80a3c14:	4602      	mov	r2, r0
 80a3c16:	460b      	mov	r3, r1
 80a3c18:	4620      	mov	r0, r4
 80a3c1a:	4629      	mov	r1, r5
 80a3c1c:	f000 f878 	bl	80a3d10 <__aeabi_dsub>
 80a3c20:	b005      	add	sp, #20
 80a3c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3c26:	4602      	mov	r2, r0
 80a3c28:	460b      	mov	r3, r1
 80a3c2a:	f000 f871 	bl	80a3d10 <__aeabi_dsub>
 80a3c2e:	2200      	movs	r2, #0
 80a3c30:	2300      	movs	r3, #0
 80a3c32:	f000 fb4b 	bl	80a42cc <__aeabi_ddiv>
 80a3c36:	e6d9      	b.n	80a39ec <__ieee754_log+0xdc>
 80a3c38:	2000      	movs	r0, #0
 80a3c3a:	2100      	movs	r1, #0
 80a3c3c:	e6d6      	b.n	80a39ec <__ieee754_log+0xdc>
 80a3c3e:	bf00      	nop
 80a3c40:	fee00000 	.word	0xfee00000
 80a3c44:	3fe62e42 	.word	0x3fe62e42
 80a3c48:	35793c76 	.word	0x35793c76
 80a3c4c:	3dea39ef 	.word	0x3dea39ef
 80a3c50:	df3e5244 	.word	0xdf3e5244
 80a3c54:	3fc2f112 	.word	0x3fc2f112
 80a3c58:	96cb03de 	.word	0x96cb03de
 80a3c5c:	3fc74664 	.word	0x3fc74664
 80a3c60:	94229359 	.word	0x94229359
 80a3c64:	3fd24924 	.word	0x3fd24924
 80a3c68:	55555593 	.word	0x55555593
 80a3c6c:	3fe55555 	.word	0x3fe55555
 80a3c70:	d078c69f 	.word	0xd078c69f
 80a3c74:	3fc39a09 	.word	0x3fc39a09
 80a3c78:	1d8e78af 	.word	0x1d8e78af
 80a3c7c:	3fcc71c5 	.word	0x3fcc71c5
 80a3c80:	9997fa04 	.word	0x9997fa04
 80a3c84:	3fd99999 	.word	0x3fd99999
 80a3c88:	55555555 	.word	0x55555555
 80a3c8c:	3fd55555 	.word	0x3fd55555
 80a3c90:	43500000 	.word	0x43500000
 80a3c94:	7fefffff 	.word	0x7fefffff
 80a3c98:	3ff00000 	.word	0x3ff00000
 80a3c9c:	3fe00000 	.word	0x3fe00000
 80a3ca0:	c3500000 	.word	0xc3500000
 80a3ca4:	4620      	mov	r0, r4
 80a3ca6:	f000 f981 	bl	80a3fac <__aeabi_i2d>
 80a3caa:	a30f      	add	r3, pc, #60	; (adr r3, 80a3ce8 <__ieee754_log+0x3d8>)
 80a3cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cb0:	4680      	mov	r8, r0
 80a3cb2:	4689      	mov	r9, r1
 80a3cb4:	f000 f9e0 	bl	80a4078 <__aeabi_dmul>
 80a3cb8:	a30d      	add	r3, pc, #52	; (adr r3, 80a3cf0 <__ieee754_log+0x3e0>)
 80a3cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3cbe:	4604      	mov	r4, r0
 80a3cc0:	460d      	mov	r5, r1
 80a3cc2:	4640      	mov	r0, r8
 80a3cc4:	4649      	mov	r1, r9
 80a3cc6:	f000 f9d7 	bl	80a4078 <__aeabi_dmul>
 80a3cca:	e799      	b.n	80a3c00 <__ieee754_log+0x2f0>
 80a3ccc:	4602      	mov	r2, r0
 80a3cce:	460b      	mov	r3, r1
 80a3cd0:	4650      	mov	r0, sl
 80a3cd2:	4659      	mov	r1, fp
 80a3cd4:	f000 f81c 	bl	80a3d10 <__aeabi_dsub>
 80a3cd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a3cdc:	f000 f9cc 	bl	80a4078 <__aeabi_dmul>
 80a3ce0:	e713      	b.n	80a3b0a <__ieee754_log+0x1fa>
 80a3ce2:	bf00      	nop
 80a3ce4:	f3af 8000 	nop.w
 80a3ce8:	fee00000 	.word	0xfee00000
 80a3cec:	3fe62e42 	.word	0x3fe62e42
 80a3cf0:	35793c76 	.word	0x35793c76
 80a3cf4:	3dea39ef 	.word	0x3dea39ef

080a3cf8 <matherr>:
 80a3cf8:	2000      	movs	r0, #0
 80a3cfa:	4770      	bx	lr

080a3cfc <nan>:
 80a3cfc:	2000      	movs	r0, #0
 80a3cfe:	4901      	ldr	r1, [pc, #4]	; (80a3d04 <nan+0x8>)
 80a3d00:	4770      	bx	lr
 80a3d02:	bf00      	nop
 80a3d04:	7ff80000 	.word	0x7ff80000

080a3d08 <__aeabi_drsub>:
 80a3d08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a3d0c:	e002      	b.n	80a3d14 <__adddf3>
 80a3d0e:	bf00      	nop

080a3d10 <__aeabi_dsub>:
 80a3d10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3d14 <__adddf3>:
 80a3d14:	b530      	push	{r4, r5, lr}
 80a3d16:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a3d1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a3d1e:	ea94 0f05 	teq	r4, r5
 80a3d22:	bf08      	it	eq
 80a3d24:	ea90 0f02 	teqeq	r0, r2
 80a3d28:	bf1f      	itttt	ne
 80a3d2a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a3d2e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3d32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3d36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3d3a:	f000 80e2 	beq.w	80a3f02 <__adddf3+0x1ee>
 80a3d3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3d42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3d46:	bfb8      	it	lt
 80a3d48:	426d      	neglt	r5, r5
 80a3d4a:	dd0c      	ble.n	80a3d66 <__adddf3+0x52>
 80a3d4c:	442c      	add	r4, r5
 80a3d4e:	ea80 0202 	eor.w	r2, r0, r2
 80a3d52:	ea81 0303 	eor.w	r3, r1, r3
 80a3d56:	ea82 0000 	eor.w	r0, r2, r0
 80a3d5a:	ea83 0101 	eor.w	r1, r3, r1
 80a3d5e:	ea80 0202 	eor.w	r2, r0, r2
 80a3d62:	ea81 0303 	eor.w	r3, r1, r3
 80a3d66:	2d36      	cmp	r5, #54	; 0x36
 80a3d68:	bf88      	it	hi
 80a3d6a:	bd30      	pophi	{r4, r5, pc}
 80a3d6c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3d70:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3d74:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3d78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a3d7c:	d002      	beq.n	80a3d84 <__adddf3+0x70>
 80a3d7e:	4240      	negs	r0, r0
 80a3d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3d84:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a3d88:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3d8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a3d90:	d002      	beq.n	80a3d98 <__adddf3+0x84>
 80a3d92:	4252      	negs	r2, r2
 80a3d94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a3d98:	ea94 0f05 	teq	r4, r5
 80a3d9c:	f000 80a7 	beq.w	80a3eee <__adddf3+0x1da>
 80a3da0:	f1a4 0401 	sub.w	r4, r4, #1
 80a3da4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a3da8:	db0d      	blt.n	80a3dc6 <__adddf3+0xb2>
 80a3daa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a3dae:	fa22 f205 	lsr.w	r2, r2, r5
 80a3db2:	1880      	adds	r0, r0, r2
 80a3db4:	f141 0100 	adc.w	r1, r1, #0
 80a3db8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a3dbc:	1880      	adds	r0, r0, r2
 80a3dbe:	fa43 f305 	asr.w	r3, r3, r5
 80a3dc2:	4159      	adcs	r1, r3
 80a3dc4:	e00e      	b.n	80a3de4 <__adddf3+0xd0>
 80a3dc6:	f1a5 0520 	sub.w	r5, r5, #32
 80a3dca:	f10e 0e20 	add.w	lr, lr, #32
 80a3dce:	2a01      	cmp	r2, #1
 80a3dd0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a3dd4:	bf28      	it	cs
 80a3dd6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a3dda:	fa43 f305 	asr.w	r3, r3, r5
 80a3dde:	18c0      	adds	r0, r0, r3
 80a3de0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3de4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3de8:	d507      	bpl.n	80a3dfa <__adddf3+0xe6>
 80a3dea:	f04f 0e00 	mov.w	lr, #0
 80a3dee:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3df2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3df6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a3dfa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3dfe:	d31b      	bcc.n	80a3e38 <__adddf3+0x124>
 80a3e00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3e04:	d30c      	bcc.n	80a3e20 <__adddf3+0x10c>
 80a3e06:	0849      	lsrs	r1, r1, #1
 80a3e08:	ea5f 0030 	movs.w	r0, r0, rrx
 80a3e0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3e10:	f104 0401 	add.w	r4, r4, #1
 80a3e14:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3e18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a3e1c:	f080 809a 	bcs.w	80a3f54 <__adddf3+0x240>
 80a3e20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3e24:	bf08      	it	eq
 80a3e26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3e2a:	f150 0000 	adcs.w	r0, r0, #0
 80a3e2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3e32:	ea41 0105 	orr.w	r1, r1, r5
 80a3e36:	bd30      	pop	{r4, r5, pc}
 80a3e38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a3e3c:	4140      	adcs	r0, r0
 80a3e3e:	eb41 0101 	adc.w	r1, r1, r1
 80a3e42:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3e46:	f1a4 0401 	sub.w	r4, r4, #1
 80a3e4a:	d1e9      	bne.n	80a3e20 <__adddf3+0x10c>
 80a3e4c:	f091 0f00 	teq	r1, #0
 80a3e50:	bf04      	itt	eq
 80a3e52:	4601      	moveq	r1, r0
 80a3e54:	2000      	moveq	r0, #0
 80a3e56:	fab1 f381 	clz	r3, r1
 80a3e5a:	bf08      	it	eq
 80a3e5c:	3320      	addeq	r3, #32
 80a3e5e:	f1a3 030b 	sub.w	r3, r3, #11
 80a3e62:	f1b3 0220 	subs.w	r2, r3, #32
 80a3e66:	da0c      	bge.n	80a3e82 <__adddf3+0x16e>
 80a3e68:	320c      	adds	r2, #12
 80a3e6a:	dd08      	ble.n	80a3e7e <__adddf3+0x16a>
 80a3e6c:	f102 0c14 	add.w	ip, r2, #20
 80a3e70:	f1c2 020c 	rsb	r2, r2, #12
 80a3e74:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3e78:	fa21 f102 	lsr.w	r1, r1, r2
 80a3e7c:	e00c      	b.n	80a3e98 <__adddf3+0x184>
 80a3e7e:	f102 0214 	add.w	r2, r2, #20
 80a3e82:	bfd8      	it	le
 80a3e84:	f1c2 0c20 	rsble	ip, r2, #32
 80a3e88:	fa01 f102 	lsl.w	r1, r1, r2
 80a3e8c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3e90:	bfdc      	itt	le
 80a3e92:	ea41 010c 	orrle.w	r1, r1, ip
 80a3e96:	4090      	lslle	r0, r2
 80a3e98:	1ae4      	subs	r4, r4, r3
 80a3e9a:	bfa2      	ittt	ge
 80a3e9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a3ea0:	4329      	orrge	r1, r5
 80a3ea2:	bd30      	popge	{r4, r5, pc}
 80a3ea4:	ea6f 0404 	mvn.w	r4, r4
 80a3ea8:	3c1f      	subs	r4, #31
 80a3eaa:	da1c      	bge.n	80a3ee6 <__adddf3+0x1d2>
 80a3eac:	340c      	adds	r4, #12
 80a3eae:	dc0e      	bgt.n	80a3ece <__adddf3+0x1ba>
 80a3eb0:	f104 0414 	add.w	r4, r4, #20
 80a3eb4:	f1c4 0220 	rsb	r2, r4, #32
 80a3eb8:	fa20 f004 	lsr.w	r0, r0, r4
 80a3ebc:	fa01 f302 	lsl.w	r3, r1, r2
 80a3ec0:	ea40 0003 	orr.w	r0, r0, r3
 80a3ec4:	fa21 f304 	lsr.w	r3, r1, r4
 80a3ec8:	ea45 0103 	orr.w	r1, r5, r3
 80a3ecc:	bd30      	pop	{r4, r5, pc}
 80a3ece:	f1c4 040c 	rsb	r4, r4, #12
 80a3ed2:	f1c4 0220 	rsb	r2, r4, #32
 80a3ed6:	fa20 f002 	lsr.w	r0, r0, r2
 80a3eda:	fa01 f304 	lsl.w	r3, r1, r4
 80a3ede:	ea40 0003 	orr.w	r0, r0, r3
 80a3ee2:	4629      	mov	r1, r5
 80a3ee4:	bd30      	pop	{r4, r5, pc}
 80a3ee6:	fa21 f004 	lsr.w	r0, r1, r4
 80a3eea:	4629      	mov	r1, r5
 80a3eec:	bd30      	pop	{r4, r5, pc}
 80a3eee:	f094 0f00 	teq	r4, #0
 80a3ef2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3ef6:	bf06      	itte	eq
 80a3ef8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a3efc:	3401      	addeq	r4, #1
 80a3efe:	3d01      	subne	r5, #1
 80a3f00:	e74e      	b.n	80a3da0 <__adddf3+0x8c>
 80a3f02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3f06:	bf18      	it	ne
 80a3f08:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a3f0c:	d029      	beq.n	80a3f62 <__adddf3+0x24e>
 80a3f0e:	ea94 0f05 	teq	r4, r5
 80a3f12:	bf08      	it	eq
 80a3f14:	ea90 0f02 	teqeq	r0, r2
 80a3f18:	d005      	beq.n	80a3f26 <__adddf3+0x212>
 80a3f1a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a3f1e:	bf04      	itt	eq
 80a3f20:	4619      	moveq	r1, r3
 80a3f22:	4610      	moveq	r0, r2
 80a3f24:	bd30      	pop	{r4, r5, pc}
 80a3f26:	ea91 0f03 	teq	r1, r3
 80a3f2a:	bf1e      	ittt	ne
 80a3f2c:	2100      	movne	r1, #0
 80a3f2e:	2000      	movne	r0, #0
 80a3f30:	bd30      	popne	{r4, r5, pc}
 80a3f32:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3f36:	d105      	bne.n	80a3f44 <__adddf3+0x230>
 80a3f38:	0040      	lsls	r0, r0, #1
 80a3f3a:	4149      	adcs	r1, r1
 80a3f3c:	bf28      	it	cs
 80a3f3e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3f42:	bd30      	pop	{r4, r5, pc}
 80a3f44:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3f48:	bf3c      	itt	cc
 80a3f4a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a3f4e:	bd30      	popcc	{r4, r5, pc}
 80a3f50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3f54:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3f58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3f5c:	f04f 0000 	mov.w	r0, #0
 80a3f60:	bd30      	pop	{r4, r5, pc}
 80a3f62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3f66:	bf1a      	itte	ne
 80a3f68:	4619      	movne	r1, r3
 80a3f6a:	4610      	movne	r0, r2
 80a3f6c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3f70:	bf1c      	itt	ne
 80a3f72:	460b      	movne	r3, r1
 80a3f74:	4602      	movne	r2, r0
 80a3f76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3f7a:	bf06      	itte	eq
 80a3f7c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a3f80:	ea91 0f03 	teqeq	r1, r3
 80a3f84:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a3f88:	bd30      	pop	{r4, r5, pc}
 80a3f8a:	bf00      	nop

080a3f8c <__aeabi_ui2d>:
 80a3f8c:	f090 0f00 	teq	r0, #0
 80a3f90:	bf04      	itt	eq
 80a3f92:	2100      	moveq	r1, #0
 80a3f94:	4770      	bxeq	lr
 80a3f96:	b530      	push	{r4, r5, lr}
 80a3f98:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3f9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3fa0:	f04f 0500 	mov.w	r5, #0
 80a3fa4:	f04f 0100 	mov.w	r1, #0
 80a3fa8:	e750      	b.n	80a3e4c <__adddf3+0x138>
 80a3faa:	bf00      	nop

080a3fac <__aeabi_i2d>:
 80a3fac:	f090 0f00 	teq	r0, #0
 80a3fb0:	bf04      	itt	eq
 80a3fb2:	2100      	moveq	r1, #0
 80a3fb4:	4770      	bxeq	lr
 80a3fb6:	b530      	push	{r4, r5, lr}
 80a3fb8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3fbc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a3fc0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a3fc4:	bf48      	it	mi
 80a3fc6:	4240      	negmi	r0, r0
 80a3fc8:	f04f 0100 	mov.w	r1, #0
 80a3fcc:	e73e      	b.n	80a3e4c <__adddf3+0x138>
 80a3fce:	bf00      	nop

080a3fd0 <__aeabi_f2d>:
 80a3fd0:	0042      	lsls	r2, r0, #1
 80a3fd2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a3fd6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3fda:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a3fde:	bf1f      	itttt	ne
 80a3fe0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3fe4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3fe8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a3fec:	4770      	bxne	lr
 80a3fee:	f092 0f00 	teq	r2, #0
 80a3ff2:	bf14      	ite	ne
 80a3ff4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3ff8:	4770      	bxeq	lr
 80a3ffa:	b530      	push	{r4, r5, lr}
 80a3ffc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a4000:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4004:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4008:	e720      	b.n	80a3e4c <__adddf3+0x138>
 80a400a:	bf00      	nop

080a400c <__aeabi_ul2d>:
 80a400c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4010:	bf08      	it	eq
 80a4012:	4770      	bxeq	lr
 80a4014:	b530      	push	{r4, r5, lr}
 80a4016:	f04f 0500 	mov.w	r5, #0
 80a401a:	e00a      	b.n	80a4032 <__aeabi_l2d+0x16>

080a401c <__aeabi_l2d>:
 80a401c:	ea50 0201 	orrs.w	r2, r0, r1
 80a4020:	bf08      	it	eq
 80a4022:	4770      	bxeq	lr
 80a4024:	b530      	push	{r4, r5, lr}
 80a4026:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a402a:	d502      	bpl.n	80a4032 <__aeabi_l2d+0x16>
 80a402c:	4240      	negs	r0, r0
 80a402e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4032:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a4036:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a403a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a403e:	f43f aedc 	beq.w	80a3dfa <__adddf3+0xe6>
 80a4042:	f04f 0203 	mov.w	r2, #3
 80a4046:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a404a:	bf18      	it	ne
 80a404c:	3203      	addne	r2, #3
 80a404e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a4052:	bf18      	it	ne
 80a4054:	3203      	addne	r2, #3
 80a4056:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a405a:	f1c2 0320 	rsb	r3, r2, #32
 80a405e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a4062:	fa20 f002 	lsr.w	r0, r0, r2
 80a4066:	fa01 fe03 	lsl.w	lr, r1, r3
 80a406a:	ea40 000e 	orr.w	r0, r0, lr
 80a406e:	fa21 f102 	lsr.w	r1, r1, r2
 80a4072:	4414      	add	r4, r2
 80a4074:	e6c1      	b.n	80a3dfa <__adddf3+0xe6>
 80a4076:	bf00      	nop

080a4078 <__aeabi_dmul>:
 80a4078:	b570      	push	{r4, r5, r6, lr}
 80a407a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a407e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a4082:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a4086:	bf1d      	ittte	ne
 80a4088:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a408c:	ea94 0f0c 	teqne	r4, ip
 80a4090:	ea95 0f0c 	teqne	r5, ip
 80a4094:	f000 f8de 	bleq	80a4254 <__aeabi_dmul+0x1dc>
 80a4098:	442c      	add	r4, r5
 80a409a:	ea81 0603 	eor.w	r6, r1, r3
 80a409e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a40a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a40a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a40aa:	bf18      	it	ne
 80a40ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a40b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a40b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a40b8:	d038      	beq.n	80a412c <__aeabi_dmul+0xb4>
 80a40ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80a40be:	f04f 0500 	mov.w	r5, #0
 80a40c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a40c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a40ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a40ce:	f04f 0600 	mov.w	r6, #0
 80a40d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a40d6:	f09c 0f00 	teq	ip, #0
 80a40da:	bf18      	it	ne
 80a40dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a40e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a40e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a40e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a40ec:	d204      	bcs.n	80a40f8 <__aeabi_dmul+0x80>
 80a40ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a40f2:	416d      	adcs	r5, r5
 80a40f4:	eb46 0606 	adc.w	r6, r6, r6
 80a40f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a40fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a4100:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a4104:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a4108:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a410c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a4110:	bf88      	it	hi
 80a4112:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a4116:	d81e      	bhi.n	80a4156 <__aeabi_dmul+0xde>
 80a4118:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a411c:	bf08      	it	eq
 80a411e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a4122:	f150 0000 	adcs.w	r0, r0, #0
 80a4126:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a412a:	bd70      	pop	{r4, r5, r6, pc}
 80a412c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a4130:	ea46 0101 	orr.w	r1, r6, r1
 80a4134:	ea40 0002 	orr.w	r0, r0, r2
 80a4138:	ea81 0103 	eor.w	r1, r1, r3
 80a413c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a4140:	bfc2      	ittt	gt
 80a4142:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4146:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a414a:	bd70      	popgt	{r4, r5, r6, pc}
 80a414c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a4150:	f04f 0e00 	mov.w	lr, #0
 80a4154:	3c01      	subs	r4, #1
 80a4156:	f300 80ab 	bgt.w	80a42b0 <__aeabi_dmul+0x238>
 80a415a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a415e:	bfde      	ittt	le
 80a4160:	2000      	movle	r0, #0
 80a4162:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a4166:	bd70      	pople	{r4, r5, r6, pc}
 80a4168:	f1c4 0400 	rsb	r4, r4, #0
 80a416c:	3c20      	subs	r4, #32
 80a416e:	da35      	bge.n	80a41dc <__aeabi_dmul+0x164>
 80a4170:	340c      	adds	r4, #12
 80a4172:	dc1b      	bgt.n	80a41ac <__aeabi_dmul+0x134>
 80a4174:	f104 0414 	add.w	r4, r4, #20
 80a4178:	f1c4 0520 	rsb	r5, r4, #32
 80a417c:	fa00 f305 	lsl.w	r3, r0, r5
 80a4180:	fa20 f004 	lsr.w	r0, r0, r4
 80a4184:	fa01 f205 	lsl.w	r2, r1, r5
 80a4188:	ea40 0002 	orr.w	r0, r0, r2
 80a418c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a4190:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a4194:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a4198:	fa21 f604 	lsr.w	r6, r1, r4
 80a419c:	eb42 0106 	adc.w	r1, r2, r6
 80a41a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a41a4:	bf08      	it	eq
 80a41a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a41aa:	bd70      	pop	{r4, r5, r6, pc}
 80a41ac:	f1c4 040c 	rsb	r4, r4, #12
 80a41b0:	f1c4 0520 	rsb	r5, r4, #32
 80a41b4:	fa00 f304 	lsl.w	r3, r0, r4
 80a41b8:	fa20 f005 	lsr.w	r0, r0, r5
 80a41bc:	fa01 f204 	lsl.w	r2, r1, r4
 80a41c0:	ea40 0002 	orr.w	r0, r0, r2
 80a41c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a41c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a41cc:	f141 0100 	adc.w	r1, r1, #0
 80a41d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a41d4:	bf08      	it	eq
 80a41d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a41da:	bd70      	pop	{r4, r5, r6, pc}
 80a41dc:	f1c4 0520 	rsb	r5, r4, #32
 80a41e0:	fa00 f205 	lsl.w	r2, r0, r5
 80a41e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a41e8:	fa20 f304 	lsr.w	r3, r0, r4
 80a41ec:	fa01 f205 	lsl.w	r2, r1, r5
 80a41f0:	ea43 0302 	orr.w	r3, r3, r2
 80a41f4:	fa21 f004 	lsr.w	r0, r1, r4
 80a41f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a41fc:	fa21 f204 	lsr.w	r2, r1, r4
 80a4200:	ea20 0002 	bic.w	r0, r0, r2
 80a4204:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a4208:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a420c:	bf08      	it	eq
 80a420e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a4212:	bd70      	pop	{r4, r5, r6, pc}
 80a4214:	f094 0f00 	teq	r4, #0
 80a4218:	d10f      	bne.n	80a423a <__aeabi_dmul+0x1c2>
 80a421a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a421e:	0040      	lsls	r0, r0, #1
 80a4220:	eb41 0101 	adc.w	r1, r1, r1
 80a4224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4228:	bf08      	it	eq
 80a422a:	3c01      	subeq	r4, #1
 80a422c:	d0f7      	beq.n	80a421e <__aeabi_dmul+0x1a6>
 80a422e:	ea41 0106 	orr.w	r1, r1, r6
 80a4232:	f095 0f00 	teq	r5, #0
 80a4236:	bf18      	it	ne
 80a4238:	4770      	bxne	lr
 80a423a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a423e:	0052      	lsls	r2, r2, #1
 80a4240:	eb43 0303 	adc.w	r3, r3, r3
 80a4244:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a4248:	bf08      	it	eq
 80a424a:	3d01      	subeq	r5, #1
 80a424c:	d0f7      	beq.n	80a423e <__aeabi_dmul+0x1c6>
 80a424e:	ea43 0306 	orr.w	r3, r3, r6
 80a4252:	4770      	bx	lr
 80a4254:	ea94 0f0c 	teq	r4, ip
 80a4258:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a425c:	bf18      	it	ne
 80a425e:	ea95 0f0c 	teqne	r5, ip
 80a4262:	d00c      	beq.n	80a427e <__aeabi_dmul+0x206>
 80a4264:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4268:	bf18      	it	ne
 80a426a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a426e:	d1d1      	bne.n	80a4214 <__aeabi_dmul+0x19c>
 80a4270:	ea81 0103 	eor.w	r1, r1, r3
 80a4274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a4278:	f04f 0000 	mov.w	r0, #0
 80a427c:	bd70      	pop	{r4, r5, r6, pc}
 80a427e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4282:	bf06      	itte	eq
 80a4284:	4610      	moveq	r0, r2
 80a4286:	4619      	moveq	r1, r3
 80a4288:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a428c:	d019      	beq.n	80a42c2 <__aeabi_dmul+0x24a>
 80a428e:	ea94 0f0c 	teq	r4, ip
 80a4292:	d102      	bne.n	80a429a <__aeabi_dmul+0x222>
 80a4294:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a4298:	d113      	bne.n	80a42c2 <__aeabi_dmul+0x24a>
 80a429a:	ea95 0f0c 	teq	r5, ip
 80a429e:	d105      	bne.n	80a42ac <__aeabi_dmul+0x234>
 80a42a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a42a4:	bf1c      	itt	ne
 80a42a6:	4610      	movne	r0, r2
 80a42a8:	4619      	movne	r1, r3
 80a42aa:	d10a      	bne.n	80a42c2 <__aeabi_dmul+0x24a>
 80a42ac:	ea81 0103 	eor.w	r1, r1, r3
 80a42b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a42b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a42b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a42bc:	f04f 0000 	mov.w	r0, #0
 80a42c0:	bd70      	pop	{r4, r5, r6, pc}
 80a42c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a42c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a42ca:	bd70      	pop	{r4, r5, r6, pc}

080a42cc <__aeabi_ddiv>:
 80a42cc:	b570      	push	{r4, r5, r6, lr}
 80a42ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a42d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a42d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a42da:	bf1d      	ittte	ne
 80a42dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a42e0:	ea94 0f0c 	teqne	r4, ip
 80a42e4:	ea95 0f0c 	teqne	r5, ip
 80a42e8:	f000 f8a7 	bleq	80a443a <__aeabi_ddiv+0x16e>
 80a42ec:	eba4 0405 	sub.w	r4, r4, r5
 80a42f0:	ea81 0e03 	eor.w	lr, r1, r3
 80a42f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a42f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a42fc:	f000 8088 	beq.w	80a4410 <__aeabi_ddiv+0x144>
 80a4300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4304:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a4308:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a430c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a4310:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a4314:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a4318:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a431c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a4320:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a4324:	429d      	cmp	r5, r3
 80a4326:	bf08      	it	eq
 80a4328:	4296      	cmpeq	r6, r2
 80a432a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a432e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a4332:	d202      	bcs.n	80a433a <__aeabi_ddiv+0x6e>
 80a4334:	085b      	lsrs	r3, r3, #1
 80a4336:	ea4f 0232 	mov.w	r2, r2, rrx
 80a433a:	1ab6      	subs	r6, r6, r2
 80a433c:	eb65 0503 	sbc.w	r5, r5, r3
 80a4340:	085b      	lsrs	r3, r3, #1
 80a4342:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4346:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a434a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a434e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4352:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4356:	bf22      	ittt	cs
 80a4358:	1ab6      	subcs	r6, r6, r2
 80a435a:	4675      	movcs	r5, lr
 80a435c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4360:	085b      	lsrs	r3, r3, #1
 80a4362:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4366:	ebb6 0e02 	subs.w	lr, r6, r2
 80a436a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a436e:	bf22      	ittt	cs
 80a4370:	1ab6      	subcs	r6, r6, r2
 80a4372:	4675      	movcs	r5, lr
 80a4374:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4378:	085b      	lsrs	r3, r3, #1
 80a437a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a437e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a4382:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a4386:	bf22      	ittt	cs
 80a4388:	1ab6      	subcs	r6, r6, r2
 80a438a:	4675      	movcs	r5, lr
 80a438c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4390:	085b      	lsrs	r3, r3, #1
 80a4392:	ea4f 0232 	mov.w	r2, r2, rrx
 80a4396:	ebb6 0e02 	subs.w	lr, r6, r2
 80a439a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a439e:	bf22      	ittt	cs
 80a43a0:	1ab6      	subcs	r6, r6, r2
 80a43a2:	4675      	movcs	r5, lr
 80a43a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a43a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a43ac:	d018      	beq.n	80a43e0 <__aeabi_ddiv+0x114>
 80a43ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a43b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a43b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a43ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a43be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a43c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a43c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a43ca:	d1c0      	bne.n	80a434e <__aeabi_ddiv+0x82>
 80a43cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a43d0:	d10b      	bne.n	80a43ea <__aeabi_ddiv+0x11e>
 80a43d2:	ea41 0100 	orr.w	r1, r1, r0
 80a43d6:	f04f 0000 	mov.w	r0, #0
 80a43da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a43de:	e7b6      	b.n	80a434e <__aeabi_ddiv+0x82>
 80a43e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a43e4:	bf04      	itt	eq
 80a43e6:	4301      	orreq	r1, r0
 80a43e8:	2000      	moveq	r0, #0
 80a43ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a43ee:	bf88      	it	hi
 80a43f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a43f4:	f63f aeaf 	bhi.w	80a4156 <__aeabi_dmul+0xde>
 80a43f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a43fc:	bf04      	itt	eq
 80a43fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a4402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4406:	f150 0000 	adcs.w	r0, r0, #0
 80a440a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a440e:	bd70      	pop	{r4, r5, r6, pc}
 80a4410:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a4414:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a4418:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a441c:	bfc2      	ittt	gt
 80a441e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a4422:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a4426:	bd70      	popgt	{r4, r5, r6, pc}
 80a4428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a442c:	f04f 0e00 	mov.w	lr, #0
 80a4430:	3c01      	subs	r4, #1
 80a4432:	e690      	b.n	80a4156 <__aeabi_dmul+0xde>
 80a4434:	ea45 0e06 	orr.w	lr, r5, r6
 80a4438:	e68d      	b.n	80a4156 <__aeabi_dmul+0xde>
 80a443a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a443e:	ea94 0f0c 	teq	r4, ip
 80a4442:	bf08      	it	eq
 80a4444:	ea95 0f0c 	teqeq	r5, ip
 80a4448:	f43f af3b 	beq.w	80a42c2 <__aeabi_dmul+0x24a>
 80a444c:	ea94 0f0c 	teq	r4, ip
 80a4450:	d10a      	bne.n	80a4468 <__aeabi_ddiv+0x19c>
 80a4452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a4456:	f47f af34 	bne.w	80a42c2 <__aeabi_dmul+0x24a>
 80a445a:	ea95 0f0c 	teq	r5, ip
 80a445e:	f47f af25 	bne.w	80a42ac <__aeabi_dmul+0x234>
 80a4462:	4610      	mov	r0, r2
 80a4464:	4619      	mov	r1, r3
 80a4466:	e72c      	b.n	80a42c2 <__aeabi_dmul+0x24a>
 80a4468:	ea95 0f0c 	teq	r5, ip
 80a446c:	d106      	bne.n	80a447c <__aeabi_ddiv+0x1b0>
 80a446e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a4472:	f43f aefd 	beq.w	80a4270 <__aeabi_dmul+0x1f8>
 80a4476:	4610      	mov	r0, r2
 80a4478:	4619      	mov	r1, r3
 80a447a:	e722      	b.n	80a42c2 <__aeabi_dmul+0x24a>
 80a447c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a4480:	bf18      	it	ne
 80a4482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a4486:	f47f aec5 	bne.w	80a4214 <__aeabi_dmul+0x19c>
 80a448a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a448e:	f47f af0d 	bne.w	80a42ac <__aeabi_dmul+0x234>
 80a4492:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a4496:	f47f aeeb 	bne.w	80a4270 <__aeabi_dmul+0x1f8>
 80a449a:	e712      	b.n	80a42c2 <__aeabi_dmul+0x24a>

080a449c <__gedf2>:
 80a449c:	f04f 3cff 	mov.w	ip, #4294967295
 80a44a0:	e006      	b.n	80a44b0 <__cmpdf2+0x4>
 80a44a2:	bf00      	nop

080a44a4 <__ledf2>:
 80a44a4:	f04f 0c01 	mov.w	ip, #1
 80a44a8:	e002      	b.n	80a44b0 <__cmpdf2+0x4>
 80a44aa:	bf00      	nop

080a44ac <__cmpdf2>:
 80a44ac:	f04f 0c01 	mov.w	ip, #1
 80a44b0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a44b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a44b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a44bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a44c0:	bf18      	it	ne
 80a44c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a44c6:	d01b      	beq.n	80a4500 <__cmpdf2+0x54>
 80a44c8:	b001      	add	sp, #4
 80a44ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a44ce:	bf0c      	ite	eq
 80a44d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a44d4:	ea91 0f03 	teqne	r1, r3
 80a44d8:	bf02      	ittt	eq
 80a44da:	ea90 0f02 	teqeq	r0, r2
 80a44de:	2000      	moveq	r0, #0
 80a44e0:	4770      	bxeq	lr
 80a44e2:	f110 0f00 	cmn.w	r0, #0
 80a44e6:	ea91 0f03 	teq	r1, r3
 80a44ea:	bf58      	it	pl
 80a44ec:	4299      	cmppl	r1, r3
 80a44ee:	bf08      	it	eq
 80a44f0:	4290      	cmpeq	r0, r2
 80a44f2:	bf2c      	ite	cs
 80a44f4:	17d8      	asrcs	r0, r3, #31
 80a44f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a44fa:	f040 0001 	orr.w	r0, r0, #1
 80a44fe:	4770      	bx	lr
 80a4500:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a4504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4508:	d102      	bne.n	80a4510 <__cmpdf2+0x64>
 80a450a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a450e:	d107      	bne.n	80a4520 <__cmpdf2+0x74>
 80a4510:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a4514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a4518:	d1d6      	bne.n	80a44c8 <__cmpdf2+0x1c>
 80a451a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a451e:	d0d3      	beq.n	80a44c8 <__cmpdf2+0x1c>
 80a4520:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4524:	4770      	bx	lr
 80a4526:	bf00      	nop

080a4528 <__aeabi_cdrcmple>:
 80a4528:	4684      	mov	ip, r0
 80a452a:	4610      	mov	r0, r2
 80a452c:	4662      	mov	r2, ip
 80a452e:	468c      	mov	ip, r1
 80a4530:	4619      	mov	r1, r3
 80a4532:	4663      	mov	r3, ip
 80a4534:	e000      	b.n	80a4538 <__aeabi_cdcmpeq>
 80a4536:	bf00      	nop

080a4538 <__aeabi_cdcmpeq>:
 80a4538:	b501      	push	{r0, lr}
 80a453a:	f7ff ffb7 	bl	80a44ac <__cmpdf2>
 80a453e:	2800      	cmp	r0, #0
 80a4540:	bf48      	it	mi
 80a4542:	f110 0f00 	cmnmi.w	r0, #0
 80a4546:	bd01      	pop	{r0, pc}

080a4548 <__aeabi_dcmpeq>:
 80a4548:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a454c:	f7ff fff4 	bl	80a4538 <__aeabi_cdcmpeq>
 80a4550:	bf0c      	ite	eq
 80a4552:	2001      	moveq	r0, #1
 80a4554:	2000      	movne	r0, #0
 80a4556:	f85d fb08 	ldr.w	pc, [sp], #8
 80a455a:	bf00      	nop

080a455c <__aeabi_dcmplt>:
 80a455c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4560:	f7ff ffea 	bl	80a4538 <__aeabi_cdcmpeq>
 80a4564:	bf34      	ite	cc
 80a4566:	2001      	movcc	r0, #1
 80a4568:	2000      	movcs	r0, #0
 80a456a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a456e:	bf00      	nop

080a4570 <__aeabi_dcmple>:
 80a4570:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4574:	f7ff ffe0 	bl	80a4538 <__aeabi_cdcmpeq>
 80a4578:	bf94      	ite	ls
 80a457a:	2001      	movls	r0, #1
 80a457c:	2000      	movhi	r0, #0
 80a457e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4582:	bf00      	nop

080a4584 <__aeabi_dcmpge>:
 80a4584:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4588:	f7ff ffce 	bl	80a4528 <__aeabi_cdrcmple>
 80a458c:	bf94      	ite	ls
 80a458e:	2001      	movls	r0, #1
 80a4590:	2000      	movhi	r0, #0
 80a4592:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4596:	bf00      	nop

080a4598 <__aeabi_dcmpgt>:
 80a4598:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a459c:	f7ff ffc4 	bl	80a4528 <__aeabi_cdrcmple>
 80a45a0:	bf34      	ite	cc
 80a45a2:	2001      	movcc	r0, #1
 80a45a4:	2000      	movcs	r0, #0
 80a45a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a45aa:	bf00      	nop

080a45ac <__aeabi_dcmpun>:
 80a45ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a45b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a45b4:	d102      	bne.n	80a45bc <__aeabi_dcmpun+0x10>
 80a45b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a45ba:	d10a      	bne.n	80a45d2 <__aeabi_dcmpun+0x26>
 80a45bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a45c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a45c4:	d102      	bne.n	80a45cc <__aeabi_dcmpun+0x20>
 80a45c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a45ca:	d102      	bne.n	80a45d2 <__aeabi_dcmpun+0x26>
 80a45cc:	f04f 0000 	mov.w	r0, #0
 80a45d0:	4770      	bx	lr
 80a45d2:	f04f 0001 	mov.w	r0, #1
 80a45d6:	4770      	bx	lr

080a45d8 <__aeabi_d2iz>:
 80a45d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a45dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a45e0:	d215      	bcs.n	80a460e <__aeabi_d2iz+0x36>
 80a45e2:	d511      	bpl.n	80a4608 <__aeabi_d2iz+0x30>
 80a45e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a45e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a45ec:	d912      	bls.n	80a4614 <__aeabi_d2iz+0x3c>
 80a45ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a45f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a45f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a45fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a45fe:	fa23 f002 	lsr.w	r0, r3, r2
 80a4602:	bf18      	it	ne
 80a4604:	4240      	negne	r0, r0
 80a4606:	4770      	bx	lr
 80a4608:	f04f 0000 	mov.w	r0, #0
 80a460c:	4770      	bx	lr
 80a460e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a4612:	d105      	bne.n	80a4620 <__aeabi_d2iz+0x48>
 80a4614:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a4618:	bf08      	it	eq
 80a461a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a461e:	4770      	bx	lr
 80a4620:	f04f 0000 	mov.w	r0, #0
 80a4624:	4770      	bx	lr
 80a4626:	bf00      	nop

080a4628 <__aeabi_d2uiz>:
 80a4628:	004a      	lsls	r2, r1, #1
 80a462a:	d211      	bcs.n	80a4650 <__aeabi_d2uiz+0x28>
 80a462c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a4630:	d211      	bcs.n	80a4656 <__aeabi_d2uiz+0x2e>
 80a4632:	d50d      	bpl.n	80a4650 <__aeabi_d2uiz+0x28>
 80a4634:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a4638:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a463c:	d40e      	bmi.n	80a465c <__aeabi_d2uiz+0x34>
 80a463e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a4642:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a4646:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a464a:	fa23 f002 	lsr.w	r0, r3, r2
 80a464e:	4770      	bx	lr
 80a4650:	f04f 0000 	mov.w	r0, #0
 80a4654:	4770      	bx	lr
 80a4656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a465a:	d102      	bne.n	80a4662 <__aeabi_d2uiz+0x3a>
 80a465c:	f04f 30ff 	mov.w	r0, #4294967295
 80a4660:	4770      	bx	lr
 80a4662:	f04f 0000 	mov.w	r0, #0
 80a4666:	4770      	bx	lr

080a4668 <__aeabi_d2f>:
 80a4668:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a466c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a4670:	bf24      	itt	cs
 80a4672:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a4676:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a467a:	d90d      	bls.n	80a4698 <__aeabi_d2f+0x30>
 80a467c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4680:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a4684:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a4688:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a468c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a4690:	bf08      	it	eq
 80a4692:	f020 0001 	biceq.w	r0, r0, #1
 80a4696:	4770      	bx	lr
 80a4698:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a469c:	d121      	bne.n	80a46e2 <__aeabi_d2f+0x7a>
 80a469e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a46a2:	bfbc      	itt	lt
 80a46a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a46a8:	4770      	bxlt	lr
 80a46aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a46ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a46b2:	f1c2 0218 	rsb	r2, r2, #24
 80a46b6:	f1c2 0c20 	rsb	ip, r2, #32
 80a46ba:	fa10 f30c 	lsls.w	r3, r0, ip
 80a46be:	fa20 f002 	lsr.w	r0, r0, r2
 80a46c2:	bf18      	it	ne
 80a46c4:	f040 0001 	orrne.w	r0, r0, #1
 80a46c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a46cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a46d0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a46d4:	ea40 000c 	orr.w	r0, r0, ip
 80a46d8:	fa23 f302 	lsr.w	r3, r3, r2
 80a46dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a46e0:	e7cc      	b.n	80a467c <__aeabi_d2f+0x14>
 80a46e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a46e6:	d107      	bne.n	80a46f8 <__aeabi_d2f+0x90>
 80a46e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a46ec:	bf1e      	ittt	ne
 80a46ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a46f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a46f6:	4770      	bxne	lr
 80a46f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a46fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4700:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4704:	4770      	bx	lr
 80a4706:	bf00      	nop

080a4708 <__aeabi_frsub>:
 80a4708:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a470c:	e002      	b.n	80a4714 <__addsf3>
 80a470e:	bf00      	nop

080a4710 <__aeabi_fsub>:
 80a4710:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a4714 <__addsf3>:
 80a4714:	0042      	lsls	r2, r0, #1
 80a4716:	bf1f      	itttt	ne
 80a4718:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a471c:	ea92 0f03 	teqne	r2, r3
 80a4720:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a4724:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4728:	d06a      	beq.n	80a4800 <__addsf3+0xec>
 80a472a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a472e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a4732:	bfc1      	itttt	gt
 80a4734:	18d2      	addgt	r2, r2, r3
 80a4736:	4041      	eorgt	r1, r0
 80a4738:	4048      	eorgt	r0, r1
 80a473a:	4041      	eorgt	r1, r0
 80a473c:	bfb8      	it	lt
 80a473e:	425b      	neglt	r3, r3
 80a4740:	2b19      	cmp	r3, #25
 80a4742:	bf88      	it	hi
 80a4744:	4770      	bxhi	lr
 80a4746:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a474a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a474e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a4752:	bf18      	it	ne
 80a4754:	4240      	negne	r0, r0
 80a4756:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a475a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a475e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a4762:	bf18      	it	ne
 80a4764:	4249      	negne	r1, r1
 80a4766:	ea92 0f03 	teq	r2, r3
 80a476a:	d03f      	beq.n	80a47ec <__addsf3+0xd8>
 80a476c:	f1a2 0201 	sub.w	r2, r2, #1
 80a4770:	fa41 fc03 	asr.w	ip, r1, r3
 80a4774:	eb10 000c 	adds.w	r0, r0, ip
 80a4778:	f1c3 0320 	rsb	r3, r3, #32
 80a477c:	fa01 f103 	lsl.w	r1, r1, r3
 80a4780:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a4784:	d502      	bpl.n	80a478c <__addsf3+0x78>
 80a4786:	4249      	negs	r1, r1
 80a4788:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a478c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a4790:	d313      	bcc.n	80a47ba <__addsf3+0xa6>
 80a4792:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a4796:	d306      	bcc.n	80a47a6 <__addsf3+0x92>
 80a4798:	0840      	lsrs	r0, r0, #1
 80a479a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a479e:	f102 0201 	add.w	r2, r2, #1
 80a47a2:	2afe      	cmp	r2, #254	; 0xfe
 80a47a4:	d251      	bcs.n	80a484a <__addsf3+0x136>
 80a47a6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a47aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a47ae:	bf08      	it	eq
 80a47b0:	f020 0001 	biceq.w	r0, r0, #1
 80a47b4:	ea40 0003 	orr.w	r0, r0, r3
 80a47b8:	4770      	bx	lr
 80a47ba:	0049      	lsls	r1, r1, #1
 80a47bc:	eb40 0000 	adc.w	r0, r0, r0
 80a47c0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a47c4:	f1a2 0201 	sub.w	r2, r2, #1
 80a47c8:	d1ed      	bne.n	80a47a6 <__addsf3+0x92>
 80a47ca:	fab0 fc80 	clz	ip, r0
 80a47ce:	f1ac 0c08 	sub.w	ip, ip, #8
 80a47d2:	ebb2 020c 	subs.w	r2, r2, ip
 80a47d6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a47da:	bfaa      	itet	ge
 80a47dc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a47e0:	4252      	neglt	r2, r2
 80a47e2:	4318      	orrge	r0, r3
 80a47e4:	bfbc      	itt	lt
 80a47e6:	40d0      	lsrlt	r0, r2
 80a47e8:	4318      	orrlt	r0, r3
 80a47ea:	4770      	bx	lr
 80a47ec:	f092 0f00 	teq	r2, #0
 80a47f0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a47f4:	bf06      	itte	eq
 80a47f6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a47fa:	3201      	addeq	r2, #1
 80a47fc:	3b01      	subne	r3, #1
 80a47fe:	e7b5      	b.n	80a476c <__addsf3+0x58>
 80a4800:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4804:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4808:	bf18      	it	ne
 80a480a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a480e:	d021      	beq.n	80a4854 <__addsf3+0x140>
 80a4810:	ea92 0f03 	teq	r2, r3
 80a4814:	d004      	beq.n	80a4820 <__addsf3+0x10c>
 80a4816:	f092 0f00 	teq	r2, #0
 80a481a:	bf08      	it	eq
 80a481c:	4608      	moveq	r0, r1
 80a481e:	4770      	bx	lr
 80a4820:	ea90 0f01 	teq	r0, r1
 80a4824:	bf1c      	itt	ne
 80a4826:	2000      	movne	r0, #0
 80a4828:	4770      	bxne	lr
 80a482a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a482e:	d104      	bne.n	80a483a <__addsf3+0x126>
 80a4830:	0040      	lsls	r0, r0, #1
 80a4832:	bf28      	it	cs
 80a4834:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4838:	4770      	bx	lr
 80a483a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a483e:	bf3c      	itt	cc
 80a4840:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4844:	4770      	bxcc	lr
 80a4846:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a484a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a484e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4852:	4770      	bx	lr
 80a4854:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4858:	bf16      	itet	ne
 80a485a:	4608      	movne	r0, r1
 80a485c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4860:	4601      	movne	r1, r0
 80a4862:	0242      	lsls	r2, r0, #9
 80a4864:	bf06      	itte	eq
 80a4866:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a486a:	ea90 0f01 	teqeq	r0, r1
 80a486e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4872:	4770      	bx	lr

080a4874 <__aeabi_ui2f>:
 80a4874:	f04f 0300 	mov.w	r3, #0
 80a4878:	e004      	b.n	80a4884 <__aeabi_i2f+0x8>
 80a487a:	bf00      	nop

080a487c <__aeabi_i2f>:
 80a487c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a4880:	bf48      	it	mi
 80a4882:	4240      	negmi	r0, r0
 80a4884:	ea5f 0c00 	movs.w	ip, r0
 80a4888:	bf08      	it	eq
 80a488a:	4770      	bxeq	lr
 80a488c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a4890:	4601      	mov	r1, r0
 80a4892:	f04f 0000 	mov.w	r0, #0
 80a4896:	e01c      	b.n	80a48d2 <__aeabi_l2f+0x2a>

080a4898 <__aeabi_ul2f>:
 80a4898:	ea50 0201 	orrs.w	r2, r0, r1
 80a489c:	bf08      	it	eq
 80a489e:	4770      	bxeq	lr
 80a48a0:	f04f 0300 	mov.w	r3, #0
 80a48a4:	e00a      	b.n	80a48bc <__aeabi_l2f+0x14>
 80a48a6:	bf00      	nop

080a48a8 <__aeabi_l2f>:
 80a48a8:	ea50 0201 	orrs.w	r2, r0, r1
 80a48ac:	bf08      	it	eq
 80a48ae:	4770      	bxeq	lr
 80a48b0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a48b4:	d502      	bpl.n	80a48bc <__aeabi_l2f+0x14>
 80a48b6:	4240      	negs	r0, r0
 80a48b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a48bc:	ea5f 0c01 	movs.w	ip, r1
 80a48c0:	bf02      	ittt	eq
 80a48c2:	4684      	moveq	ip, r0
 80a48c4:	4601      	moveq	r1, r0
 80a48c6:	2000      	moveq	r0, #0
 80a48c8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a48cc:	bf08      	it	eq
 80a48ce:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a48d2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a48d6:	fabc f28c 	clz	r2, ip
 80a48da:	3a08      	subs	r2, #8
 80a48dc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a48e0:	db10      	blt.n	80a4904 <__aeabi_l2f+0x5c>
 80a48e2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a48e6:	4463      	add	r3, ip
 80a48e8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a48ec:	f1c2 0220 	rsb	r2, r2, #32
 80a48f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a48f4:	fa20 f202 	lsr.w	r2, r0, r2
 80a48f8:	eb43 0002 	adc.w	r0, r3, r2
 80a48fc:	bf08      	it	eq
 80a48fe:	f020 0001 	biceq.w	r0, r0, #1
 80a4902:	4770      	bx	lr
 80a4904:	f102 0220 	add.w	r2, r2, #32
 80a4908:	fa01 fc02 	lsl.w	ip, r1, r2
 80a490c:	f1c2 0220 	rsb	r2, r2, #32
 80a4910:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4914:	fa21 f202 	lsr.w	r2, r1, r2
 80a4918:	eb43 0002 	adc.w	r0, r3, r2
 80a491c:	bf08      	it	eq
 80a491e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4922:	4770      	bx	lr

080a4924 <__aeabi_fmul>:
 80a4924:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4928:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a492c:	bf1e      	ittt	ne
 80a492e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4932:	ea92 0f0c 	teqne	r2, ip
 80a4936:	ea93 0f0c 	teqne	r3, ip
 80a493a:	d06f      	beq.n	80a4a1c <__aeabi_fmul+0xf8>
 80a493c:	441a      	add	r2, r3
 80a493e:	ea80 0c01 	eor.w	ip, r0, r1
 80a4942:	0240      	lsls	r0, r0, #9
 80a4944:	bf18      	it	ne
 80a4946:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a494a:	d01e      	beq.n	80a498a <__aeabi_fmul+0x66>
 80a494c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4950:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4954:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4958:	fba0 3101 	umull	r3, r1, r0, r1
 80a495c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4960:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4964:	bf3e      	ittt	cc
 80a4966:	0049      	lslcc	r1, r1, #1
 80a4968:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a496c:	005b      	lslcc	r3, r3, #1
 80a496e:	ea40 0001 	orr.w	r0, r0, r1
 80a4972:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4976:	2afd      	cmp	r2, #253	; 0xfd
 80a4978:	d81d      	bhi.n	80a49b6 <__aeabi_fmul+0x92>
 80a497a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a497e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4982:	bf08      	it	eq
 80a4984:	f020 0001 	biceq.w	r0, r0, #1
 80a4988:	4770      	bx	lr
 80a498a:	f090 0f00 	teq	r0, #0
 80a498e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4992:	bf08      	it	eq
 80a4994:	0249      	lsleq	r1, r1, #9
 80a4996:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a499a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a499e:	3a7f      	subs	r2, #127	; 0x7f
 80a49a0:	bfc2      	ittt	gt
 80a49a2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a49a6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a49aa:	4770      	bxgt	lr
 80a49ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a49b0:	f04f 0300 	mov.w	r3, #0
 80a49b4:	3a01      	subs	r2, #1
 80a49b6:	dc5d      	bgt.n	80a4a74 <__aeabi_fmul+0x150>
 80a49b8:	f112 0f19 	cmn.w	r2, #25
 80a49bc:	bfdc      	itt	le
 80a49be:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a49c2:	4770      	bxle	lr
 80a49c4:	f1c2 0200 	rsb	r2, r2, #0
 80a49c8:	0041      	lsls	r1, r0, #1
 80a49ca:	fa21 f102 	lsr.w	r1, r1, r2
 80a49ce:	f1c2 0220 	rsb	r2, r2, #32
 80a49d2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a49d6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a49da:	f140 0000 	adc.w	r0, r0, #0
 80a49de:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a49e2:	bf08      	it	eq
 80a49e4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a49e8:	4770      	bx	lr
 80a49ea:	f092 0f00 	teq	r2, #0
 80a49ee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a49f2:	bf02      	ittt	eq
 80a49f4:	0040      	lsleq	r0, r0, #1
 80a49f6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a49fa:	3a01      	subeq	r2, #1
 80a49fc:	d0f9      	beq.n	80a49f2 <__aeabi_fmul+0xce>
 80a49fe:	ea40 000c 	orr.w	r0, r0, ip
 80a4a02:	f093 0f00 	teq	r3, #0
 80a4a06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4a0a:	bf02      	ittt	eq
 80a4a0c:	0049      	lsleq	r1, r1, #1
 80a4a0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4a12:	3b01      	subeq	r3, #1
 80a4a14:	d0f9      	beq.n	80a4a0a <__aeabi_fmul+0xe6>
 80a4a16:	ea41 010c 	orr.w	r1, r1, ip
 80a4a1a:	e78f      	b.n	80a493c <__aeabi_fmul+0x18>
 80a4a1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4a20:	ea92 0f0c 	teq	r2, ip
 80a4a24:	bf18      	it	ne
 80a4a26:	ea93 0f0c 	teqne	r3, ip
 80a4a2a:	d00a      	beq.n	80a4a42 <__aeabi_fmul+0x11e>
 80a4a2c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4a30:	bf18      	it	ne
 80a4a32:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4a36:	d1d8      	bne.n	80a49ea <__aeabi_fmul+0xc6>
 80a4a38:	ea80 0001 	eor.w	r0, r0, r1
 80a4a3c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4a40:	4770      	bx	lr
 80a4a42:	f090 0f00 	teq	r0, #0
 80a4a46:	bf17      	itett	ne
 80a4a48:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a4a4c:	4608      	moveq	r0, r1
 80a4a4e:	f091 0f00 	teqne	r1, #0
 80a4a52:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4a56:	d014      	beq.n	80a4a82 <__aeabi_fmul+0x15e>
 80a4a58:	ea92 0f0c 	teq	r2, ip
 80a4a5c:	d101      	bne.n	80a4a62 <__aeabi_fmul+0x13e>
 80a4a5e:	0242      	lsls	r2, r0, #9
 80a4a60:	d10f      	bne.n	80a4a82 <__aeabi_fmul+0x15e>
 80a4a62:	ea93 0f0c 	teq	r3, ip
 80a4a66:	d103      	bne.n	80a4a70 <__aeabi_fmul+0x14c>
 80a4a68:	024b      	lsls	r3, r1, #9
 80a4a6a:	bf18      	it	ne
 80a4a6c:	4608      	movne	r0, r1
 80a4a6e:	d108      	bne.n	80a4a82 <__aeabi_fmul+0x15e>
 80a4a70:	ea80 0001 	eor.w	r0, r0, r1
 80a4a74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4a78:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4a7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4a80:	4770      	bx	lr
 80a4a82:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a4a86:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a4a8a:	4770      	bx	lr

080a4a8c <__aeabi_fdiv>:
 80a4a8c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4a90:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a4a94:	bf1e      	ittt	ne
 80a4a96:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4a9a:	ea92 0f0c 	teqne	r2, ip
 80a4a9e:	ea93 0f0c 	teqne	r3, ip
 80a4aa2:	d069      	beq.n	80a4b78 <__aeabi_fdiv+0xec>
 80a4aa4:	eba2 0203 	sub.w	r2, r2, r3
 80a4aa8:	ea80 0c01 	eor.w	ip, r0, r1
 80a4aac:	0249      	lsls	r1, r1, #9
 80a4aae:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a4ab2:	d037      	beq.n	80a4b24 <__aeabi_fdiv+0x98>
 80a4ab4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a4ab8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a4abc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a4ac0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4ac4:	428b      	cmp	r3, r1
 80a4ac6:	bf38      	it	cc
 80a4ac8:	005b      	lslcc	r3, r3, #1
 80a4aca:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a4ace:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a4ad2:	428b      	cmp	r3, r1
 80a4ad4:	bf24      	itt	cs
 80a4ad6:	1a5b      	subcs	r3, r3, r1
 80a4ad8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a4adc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4ae0:	bf24      	itt	cs
 80a4ae2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4ae6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a4aea:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a4aee:	bf24      	itt	cs
 80a4af0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4af4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4af8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a4afc:	bf24      	itt	cs
 80a4afe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4b02:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4b06:	011b      	lsls	r3, r3, #4
 80a4b08:	bf18      	it	ne
 80a4b0a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a4b0e:	d1e0      	bne.n	80a4ad2 <__aeabi_fdiv+0x46>
 80a4b10:	2afd      	cmp	r2, #253	; 0xfd
 80a4b12:	f63f af50 	bhi.w	80a49b6 <__aeabi_fmul+0x92>
 80a4b16:	428b      	cmp	r3, r1
 80a4b18:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a4b1c:	bf08      	it	eq
 80a4b1e:	f020 0001 	biceq.w	r0, r0, #1
 80a4b22:	4770      	bx	lr
 80a4b24:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4b28:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a4b2c:	327f      	adds	r2, #127	; 0x7f
 80a4b2e:	bfc2      	ittt	gt
 80a4b30:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4b34:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4b38:	4770      	bxgt	lr
 80a4b3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4b3e:	f04f 0300 	mov.w	r3, #0
 80a4b42:	3a01      	subs	r2, #1
 80a4b44:	e737      	b.n	80a49b6 <__aeabi_fmul+0x92>
 80a4b46:	f092 0f00 	teq	r2, #0
 80a4b4a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4b4e:	bf02      	ittt	eq
 80a4b50:	0040      	lsleq	r0, r0, #1
 80a4b52:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4b56:	3a01      	subeq	r2, #1
 80a4b58:	d0f9      	beq.n	80a4b4e <__aeabi_fdiv+0xc2>
 80a4b5a:	ea40 000c 	orr.w	r0, r0, ip
 80a4b5e:	f093 0f00 	teq	r3, #0
 80a4b62:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4b66:	bf02      	ittt	eq
 80a4b68:	0049      	lsleq	r1, r1, #1
 80a4b6a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4b6e:	3b01      	subeq	r3, #1
 80a4b70:	d0f9      	beq.n	80a4b66 <__aeabi_fdiv+0xda>
 80a4b72:	ea41 010c 	orr.w	r1, r1, ip
 80a4b76:	e795      	b.n	80a4aa4 <__aeabi_fdiv+0x18>
 80a4b78:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4b7c:	ea92 0f0c 	teq	r2, ip
 80a4b80:	d108      	bne.n	80a4b94 <__aeabi_fdiv+0x108>
 80a4b82:	0242      	lsls	r2, r0, #9
 80a4b84:	f47f af7d 	bne.w	80a4a82 <__aeabi_fmul+0x15e>
 80a4b88:	ea93 0f0c 	teq	r3, ip
 80a4b8c:	f47f af70 	bne.w	80a4a70 <__aeabi_fmul+0x14c>
 80a4b90:	4608      	mov	r0, r1
 80a4b92:	e776      	b.n	80a4a82 <__aeabi_fmul+0x15e>
 80a4b94:	ea93 0f0c 	teq	r3, ip
 80a4b98:	d104      	bne.n	80a4ba4 <__aeabi_fdiv+0x118>
 80a4b9a:	024b      	lsls	r3, r1, #9
 80a4b9c:	f43f af4c 	beq.w	80a4a38 <__aeabi_fmul+0x114>
 80a4ba0:	4608      	mov	r0, r1
 80a4ba2:	e76e      	b.n	80a4a82 <__aeabi_fmul+0x15e>
 80a4ba4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4ba8:	bf18      	it	ne
 80a4baa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4bae:	d1ca      	bne.n	80a4b46 <__aeabi_fdiv+0xba>
 80a4bb0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a4bb4:	f47f af5c 	bne.w	80a4a70 <__aeabi_fmul+0x14c>
 80a4bb8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a4bbc:	f47f af3c 	bne.w	80a4a38 <__aeabi_fmul+0x114>
 80a4bc0:	e75f      	b.n	80a4a82 <__aeabi_fmul+0x15e>
 80a4bc2:	bf00      	nop

080a4bc4 <__gesf2>:
 80a4bc4:	f04f 3cff 	mov.w	ip, #4294967295
 80a4bc8:	e006      	b.n	80a4bd8 <__cmpsf2+0x4>
 80a4bca:	bf00      	nop

080a4bcc <__lesf2>:
 80a4bcc:	f04f 0c01 	mov.w	ip, #1
 80a4bd0:	e002      	b.n	80a4bd8 <__cmpsf2+0x4>
 80a4bd2:	bf00      	nop

080a4bd4 <__cmpsf2>:
 80a4bd4:	f04f 0c01 	mov.w	ip, #1
 80a4bd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a4bdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4be0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4be4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4be8:	bf18      	it	ne
 80a4bea:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a4bee:	d011      	beq.n	80a4c14 <__cmpsf2+0x40>
 80a4bf0:	b001      	add	sp, #4
 80a4bf2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4bf6:	bf18      	it	ne
 80a4bf8:	ea90 0f01 	teqne	r0, r1
 80a4bfc:	bf58      	it	pl
 80a4bfe:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4c02:	bf88      	it	hi
 80a4c04:	17c8      	asrhi	r0, r1, #31
 80a4c06:	bf38      	it	cc
 80a4c08:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a4c0c:	bf18      	it	ne
 80a4c0e:	f040 0001 	orrne.w	r0, r0, #1
 80a4c12:	4770      	bx	lr
 80a4c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4c18:	d102      	bne.n	80a4c20 <__cmpsf2+0x4c>
 80a4c1a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4c1e:	d105      	bne.n	80a4c2c <__cmpsf2+0x58>
 80a4c20:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4c24:	d1e4      	bne.n	80a4bf0 <__cmpsf2+0x1c>
 80a4c26:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4c2a:	d0e1      	beq.n	80a4bf0 <__cmpsf2+0x1c>
 80a4c2c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4c30:	4770      	bx	lr
 80a4c32:	bf00      	nop

080a4c34 <__aeabi_cfrcmple>:
 80a4c34:	4684      	mov	ip, r0
 80a4c36:	4608      	mov	r0, r1
 80a4c38:	4661      	mov	r1, ip
 80a4c3a:	e7ff      	b.n	80a4c3c <__aeabi_cfcmpeq>

080a4c3c <__aeabi_cfcmpeq>:
 80a4c3c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a4c3e:	f7ff ffc9 	bl	80a4bd4 <__cmpsf2>
 80a4c42:	2800      	cmp	r0, #0
 80a4c44:	bf48      	it	mi
 80a4c46:	f110 0f00 	cmnmi.w	r0, #0
 80a4c4a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a4c4c <__aeabi_fcmpeq>:
 80a4c4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c50:	f7ff fff4 	bl	80a4c3c <__aeabi_cfcmpeq>
 80a4c54:	bf0c      	ite	eq
 80a4c56:	2001      	moveq	r0, #1
 80a4c58:	2000      	movne	r0, #0
 80a4c5a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4c5e:	bf00      	nop

080a4c60 <__aeabi_fcmplt>:
 80a4c60:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c64:	f7ff ffea 	bl	80a4c3c <__aeabi_cfcmpeq>
 80a4c68:	bf34      	ite	cc
 80a4c6a:	2001      	movcc	r0, #1
 80a4c6c:	2000      	movcs	r0, #0
 80a4c6e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4c72:	bf00      	nop

080a4c74 <__aeabi_fcmple>:
 80a4c74:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c78:	f7ff ffe0 	bl	80a4c3c <__aeabi_cfcmpeq>
 80a4c7c:	bf94      	ite	ls
 80a4c7e:	2001      	movls	r0, #1
 80a4c80:	2000      	movhi	r0, #0
 80a4c82:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4c86:	bf00      	nop

080a4c88 <__aeabi_fcmpge>:
 80a4c88:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4c8c:	f7ff ffd2 	bl	80a4c34 <__aeabi_cfrcmple>
 80a4c90:	bf94      	ite	ls
 80a4c92:	2001      	movls	r0, #1
 80a4c94:	2000      	movhi	r0, #0
 80a4c96:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4c9a:	bf00      	nop

080a4c9c <__aeabi_fcmpgt>:
 80a4c9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4ca0:	f7ff ffc8 	bl	80a4c34 <__aeabi_cfrcmple>
 80a4ca4:	bf34      	ite	cc
 80a4ca6:	2001      	movcc	r0, #1
 80a4ca8:	2000      	movcs	r0, #0
 80a4caa:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4cae:	bf00      	nop

080a4cb0 <__aeabi_fcmpun>:
 80a4cb0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4cb4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4cb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4cbc:	d102      	bne.n	80a4cc4 <__aeabi_fcmpun+0x14>
 80a4cbe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a4cc2:	d108      	bne.n	80a4cd6 <__aeabi_fcmpun+0x26>
 80a4cc4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4cc8:	d102      	bne.n	80a4cd0 <__aeabi_fcmpun+0x20>
 80a4cca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a4cce:	d102      	bne.n	80a4cd6 <__aeabi_fcmpun+0x26>
 80a4cd0:	f04f 0000 	mov.w	r0, #0
 80a4cd4:	4770      	bx	lr
 80a4cd6:	f04f 0001 	mov.w	r0, #1
 80a4cda:	4770      	bx	lr

080a4cdc <atol>:
 80a4cdc:	220a      	movs	r2, #10
 80a4cde:	2100      	movs	r1, #0
 80a4ce0:	f000 b916 	b.w	80a4f10 <strtol>

080a4ce4 <__cxa_atexit>:
 80a4ce4:	b510      	push	{r4, lr}
 80a4ce6:	4c05      	ldr	r4, [pc, #20]	; (80a4cfc <__cxa_atexit+0x18>)
 80a4ce8:	4613      	mov	r3, r2
 80a4cea:	b12c      	cbz	r4, 80a4cf8 <__cxa_atexit+0x14>
 80a4cec:	460a      	mov	r2, r1
 80a4cee:	4601      	mov	r1, r0
 80a4cf0:	2002      	movs	r0, #2
 80a4cf2:	f3af 8000 	nop.w
 80a4cf6:	bd10      	pop	{r4, pc}
 80a4cf8:	4620      	mov	r0, r4
 80a4cfa:	bd10      	pop	{r4, pc}
 80a4cfc:	00000000 	.word	0x00000000

080a4d00 <memcpy>:
 80a4d00:	b510      	push	{r4, lr}
 80a4d02:	1e43      	subs	r3, r0, #1
 80a4d04:	440a      	add	r2, r1
 80a4d06:	4291      	cmp	r1, r2
 80a4d08:	d004      	beq.n	80a4d14 <memcpy+0x14>
 80a4d0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a4d0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4d12:	e7f8      	b.n	80a4d06 <memcpy+0x6>
 80a4d14:	bd10      	pop	{r4, pc}

080a4d16 <memset>:
 80a4d16:	4603      	mov	r3, r0
 80a4d18:	4402      	add	r2, r0
 80a4d1a:	4293      	cmp	r3, r2
 80a4d1c:	d002      	beq.n	80a4d24 <memset+0xe>
 80a4d1e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4d22:	e7fa      	b.n	80a4d1a <memset+0x4>
 80a4d24:	4770      	bx	lr
	...

080a4d28 <srand>:
 80a4d28:	b538      	push	{r3, r4, r5, lr}
 80a4d2a:	4b12      	ldr	r3, [pc, #72]	; (80a4d74 <srand+0x4c>)
 80a4d2c:	4605      	mov	r5, r0
 80a4d2e:	681c      	ldr	r4, [r3, #0]
 80a4d30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4d32:	b9d3      	cbnz	r3, 80a4d6a <srand+0x42>
 80a4d34:	2018      	movs	r0, #24
 80a4d36:	f7fd f909 	bl	80a1f4c <malloc>
 80a4d3a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a4d3e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4d40:	8003      	strh	r3, [r0, #0]
 80a4d42:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4d46:	8043      	strh	r3, [r0, #2]
 80a4d48:	f241 2334 	movw	r3, #4660	; 0x1234
 80a4d4c:	8083      	strh	r3, [r0, #4]
 80a4d4e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4d52:	80c3      	strh	r3, [r0, #6]
 80a4d54:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4d58:	8103      	strh	r3, [r0, #8]
 80a4d5a:	2305      	movs	r3, #5
 80a4d5c:	8143      	strh	r3, [r0, #10]
 80a4d5e:	230b      	movs	r3, #11
 80a4d60:	8183      	strh	r3, [r0, #12]
 80a4d62:	2201      	movs	r2, #1
 80a4d64:	2300      	movs	r3, #0
 80a4d66:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a4d6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4d6c:	2200      	movs	r2, #0
 80a4d6e:	611d      	str	r5, [r3, #16]
 80a4d70:	615a      	str	r2, [r3, #20]
 80a4d72:	bd38      	pop	{r3, r4, r5, pc}
 80a4d74:	200000a0 	.word	0x200000a0

080a4d78 <strcpy>:
 80a4d78:	4603      	mov	r3, r0
 80a4d7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a4d7e:	f803 2b01 	strb.w	r2, [r3], #1
 80a4d82:	2a00      	cmp	r2, #0
 80a4d84:	d1f9      	bne.n	80a4d7a <strcpy+0x2>
 80a4d86:	4770      	bx	lr

080a4d88 <strdup>:
 80a4d88:	4b02      	ldr	r3, [pc, #8]	; (80a4d94 <strdup+0xc>)
 80a4d8a:	4601      	mov	r1, r0
 80a4d8c:	6818      	ldr	r0, [r3, #0]
 80a4d8e:	f000 b803 	b.w	80a4d98 <_strdup_r>
 80a4d92:	bf00      	nop
 80a4d94:	200000a0 	.word	0x200000a0

080a4d98 <_strdup_r>:
 80a4d98:	b570      	push	{r4, r5, r6, lr}
 80a4d9a:	4606      	mov	r6, r0
 80a4d9c:	4608      	mov	r0, r1
 80a4d9e:	460c      	mov	r4, r1
 80a4da0:	f000 f80d 	bl	80a4dbe <strlen>
 80a4da4:	1c45      	adds	r5, r0, #1
 80a4da6:	4629      	mov	r1, r5
 80a4da8:	4630      	mov	r0, r6
 80a4daa:	f7fd f8f7 	bl	80a1f9c <_malloc_r>
 80a4dae:	4606      	mov	r6, r0
 80a4db0:	b118      	cbz	r0, 80a4dba <_strdup_r+0x22>
 80a4db2:	462a      	mov	r2, r5
 80a4db4:	4621      	mov	r1, r4
 80a4db6:	f7ff ffa3 	bl	80a4d00 <memcpy>
 80a4dba:	4630      	mov	r0, r6
 80a4dbc:	bd70      	pop	{r4, r5, r6, pc}

080a4dbe <strlen>:
 80a4dbe:	4603      	mov	r3, r0
 80a4dc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a4dc4:	2a00      	cmp	r2, #0
 80a4dc6:	d1fb      	bne.n	80a4dc0 <strlen+0x2>
 80a4dc8:	1a18      	subs	r0, r3, r0
 80a4dca:	3801      	subs	r0, #1
 80a4dcc:	4770      	bx	lr

080a4dce <strstr>:
 80a4dce:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4dd0:	7803      	ldrb	r3, [r0, #0]
 80a4dd2:	b963      	cbnz	r3, 80a4dee <strstr+0x20>
 80a4dd4:	780b      	ldrb	r3, [r1, #0]
 80a4dd6:	2b00      	cmp	r3, #0
 80a4dd8:	bf18      	it	ne
 80a4dda:	2000      	movne	r0, #0
 80a4ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4dde:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80a4de2:	b162      	cbz	r2, 80a4dfe <strstr+0x30>
 80a4de4:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 80a4de8:	4630      	mov	r0, r6
 80a4dea:	4297      	cmp	r7, r2
 80a4dec:	d0f7      	beq.n	80a4dde <strstr+0x10>
 80a4dee:	4603      	mov	r3, r0
 80a4df0:	1c46      	adds	r6, r0, #1
 80a4df2:	7800      	ldrb	r0, [r0, #0]
 80a4df4:	b110      	cbz	r0, 80a4dfc <strstr+0x2e>
 80a4df6:	1e4d      	subs	r5, r1, #1
 80a4df8:	1e5c      	subs	r4, r3, #1
 80a4dfa:	e7f0      	b.n	80a4dde <strstr+0x10>
 80a4dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4dfe:	4618      	mov	r0, r3
 80a4e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a4e04 <_strtol_r>:
 80a4e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a4e08:	460f      	mov	r7, r1
 80a4e0a:	4680      	mov	r8, r0
 80a4e0c:	483f      	ldr	r0, [pc, #252]	; (80a4f0c <_strtol_r+0x108>)
 80a4e0e:	f8d0 9000 	ldr.w	r9, [r0]
 80a4e12:	463d      	mov	r5, r7
 80a4e14:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4e18:	eb09 0004 	add.w	r0, r9, r4
 80a4e1c:	7840      	ldrb	r0, [r0, #1]
 80a4e1e:	f000 0008 	and.w	r0, r0, #8
 80a4e22:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a4e26:	b108      	cbz	r0, 80a4e2c <_strtol_r+0x28>
 80a4e28:	462f      	mov	r7, r5
 80a4e2a:	e7f2      	b.n	80a4e12 <_strtol_r+0xe>
 80a4e2c:	2c2d      	cmp	r4, #45	; 0x2d
 80a4e2e:	d103      	bne.n	80a4e38 <_strtol_r+0x34>
 80a4e30:	1cbd      	adds	r5, r7, #2
 80a4e32:	787c      	ldrb	r4, [r7, #1]
 80a4e34:	2601      	movs	r6, #1
 80a4e36:	e003      	b.n	80a4e40 <_strtol_r+0x3c>
 80a4e38:	2c2b      	cmp	r4, #43	; 0x2b
 80a4e3a:	bf04      	itt	eq
 80a4e3c:	787c      	ldrbeq	r4, [r7, #1]
 80a4e3e:	1cbd      	addeq	r5, r7, #2
 80a4e40:	b113      	cbz	r3, 80a4e48 <_strtol_r+0x44>
 80a4e42:	2b10      	cmp	r3, #16
 80a4e44:	d10a      	bne.n	80a4e5c <_strtol_r+0x58>
 80a4e46:	e05b      	b.n	80a4f00 <_strtol_r+0xfc>
 80a4e48:	2c30      	cmp	r4, #48	; 0x30
 80a4e4a:	d157      	bne.n	80a4efc <_strtol_r+0xf8>
 80a4e4c:	7828      	ldrb	r0, [r5, #0]
 80a4e4e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a4e52:	2858      	cmp	r0, #88	; 0x58
 80a4e54:	d14d      	bne.n	80a4ef2 <_strtol_r+0xee>
 80a4e56:	786c      	ldrb	r4, [r5, #1]
 80a4e58:	2310      	movs	r3, #16
 80a4e5a:	3502      	adds	r5, #2
 80a4e5c:	2e00      	cmp	r6, #0
 80a4e5e:	bf14      	ite	ne
 80a4e60:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a4e64:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a4e68:	fbbc faf3 	udiv	sl, ip, r3
 80a4e6c:	2700      	movs	r7, #0
 80a4e6e:	4638      	mov	r0, r7
 80a4e70:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a4e74:	eb09 0e04 	add.w	lr, r9, r4
 80a4e78:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a4e7c:	f01e 0f04 	tst.w	lr, #4
 80a4e80:	d001      	beq.n	80a4e86 <_strtol_r+0x82>
 80a4e82:	3c30      	subs	r4, #48	; 0x30
 80a4e84:	e00b      	b.n	80a4e9e <_strtol_r+0x9a>
 80a4e86:	f01e 0e03 	ands.w	lr, lr, #3
 80a4e8a:	d01b      	beq.n	80a4ec4 <_strtol_r+0xc0>
 80a4e8c:	f1be 0f01 	cmp.w	lr, #1
 80a4e90:	bf0c      	ite	eq
 80a4e92:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a4e96:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a4e9a:	ebce 0404 	rsb	r4, lr, r4
 80a4e9e:	42a3      	cmp	r3, r4
 80a4ea0:	dd10      	ble.n	80a4ec4 <_strtol_r+0xc0>
 80a4ea2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a4ea6:	d00a      	beq.n	80a4ebe <_strtol_r+0xba>
 80a4ea8:	4550      	cmp	r0, sl
 80a4eaa:	d806      	bhi.n	80a4eba <_strtol_r+0xb6>
 80a4eac:	d101      	bne.n	80a4eb2 <_strtol_r+0xae>
 80a4eae:	4564      	cmp	r4, ip
 80a4eb0:	dc03      	bgt.n	80a4eba <_strtol_r+0xb6>
 80a4eb2:	fb03 4000 	mla	r0, r3, r0, r4
 80a4eb6:	2701      	movs	r7, #1
 80a4eb8:	e001      	b.n	80a4ebe <_strtol_r+0xba>
 80a4eba:	f04f 37ff 	mov.w	r7, #4294967295
 80a4ebe:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a4ec2:	e7d7      	b.n	80a4e74 <_strtol_r+0x70>
 80a4ec4:	1c7b      	adds	r3, r7, #1
 80a4ec6:	d10c      	bne.n	80a4ee2 <_strtol_r+0xde>
 80a4ec8:	2e00      	cmp	r6, #0
 80a4eca:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a4ece:	bf14      	ite	ne
 80a4ed0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a4ed4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a4ed8:	f8c8 3000 	str.w	r3, [r8]
 80a4edc:	b92a      	cbnz	r2, 80a4eea <_strtol_r+0xe6>
 80a4ede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4ee2:	b106      	cbz	r6, 80a4ee6 <_strtol_r+0xe2>
 80a4ee4:	4240      	negs	r0, r0
 80a4ee6:	b172      	cbz	r2, 80a4f06 <_strtol_r+0x102>
 80a4ee8:	b107      	cbz	r7, 80a4eec <_strtol_r+0xe8>
 80a4eea:	1e69      	subs	r1, r5, #1
 80a4eec:	6011      	str	r1, [r2, #0]
 80a4eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4ef2:	2430      	movs	r4, #48	; 0x30
 80a4ef4:	2b00      	cmp	r3, #0
 80a4ef6:	d1b1      	bne.n	80a4e5c <_strtol_r+0x58>
 80a4ef8:	2308      	movs	r3, #8
 80a4efa:	e7af      	b.n	80a4e5c <_strtol_r+0x58>
 80a4efc:	230a      	movs	r3, #10
 80a4efe:	e7ad      	b.n	80a4e5c <_strtol_r+0x58>
 80a4f00:	2c30      	cmp	r4, #48	; 0x30
 80a4f02:	d0a3      	beq.n	80a4e4c <_strtol_r+0x48>
 80a4f04:	e7aa      	b.n	80a4e5c <_strtol_r+0x58>
 80a4f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a4f0a:	bf00      	nop
 80a4f0c:	2000003c 	.word	0x2000003c

080a4f10 <strtol>:
 80a4f10:	4613      	mov	r3, r2
 80a4f12:	460a      	mov	r2, r1
 80a4f14:	4601      	mov	r1, r0
 80a4f16:	4802      	ldr	r0, [pc, #8]	; (80a4f20 <strtol+0x10>)
 80a4f18:	6800      	ldr	r0, [r0, #0]
 80a4f1a:	f7ff bf73 	b.w	80a4e04 <_strtol_r>
 80a4f1e:	bf00      	nop
 80a4f20:	200000a0 	.word	0x200000a0

080a4f24 <tolower>:
 80a4f24:	4b04      	ldr	r3, [pc, #16]	; (80a4f38 <tolower+0x14>)
 80a4f26:	681b      	ldr	r3, [r3, #0]
 80a4f28:	4403      	add	r3, r0
 80a4f2a:	785b      	ldrb	r3, [r3, #1]
 80a4f2c:	f003 0303 	and.w	r3, r3, #3
 80a4f30:	2b01      	cmp	r3, #1
 80a4f32:	bf08      	it	eq
 80a4f34:	3020      	addeq	r0, #32
 80a4f36:	4770      	bx	lr
 80a4f38:	2000003c 	.word	0x2000003c

080a4f3c <dynalib_user>:
 80a4f3c:	080a0021 080a0061 080a008d 080a0091     !...a...........
 80a4f4c:	00000000                                ....

080a4f50 <_ZL5psiFS>:
 80a4f50:	00001388 0000012c 0000012c 00000000     ....,...,.......
 80a4f60:	000001f4 00000000 00000000 00000000     ................
 80a4f70:	77707061 6f007464 666f006e 65640066     appwdt.on.off.de
 80a4f80:	69746361 65746176 676f7400 00656c67     activate.toggle.
 80a4f90:	70696c66 6c657200 6f007961 75707475     flip.relay.outpu
 80a4fa0:	61620074 61006b6e 25006c6c 2666322e     t.bank.all.%.2f&
 80a4fb0:	66322e25 322e2526 2e252666 25266632     %.2f&%.2f&%.2f&%
 80a4fc0:	2666322e 66322e25 322e2526 2e252666     .2f&%.2f&%.2f&%.
 80a4fd0:	25266632 2666322e 66322e25 322e2526     2f&%.2f&%.2f&%.2
 80a4fe0:	2e252666 64006632 4d455473 64005350     f&%.2f.dsTEMPS.d
 80a4ff0:	73705f73 6f670069 46464f00 6c655200     s_psi.go.OFF.Rel
 80a5000:	6f437961 6f72746e 6554006c 6552706d     ayControl.TempRe
 80a5010:	00746573 31565854 56585400 45520032     set.TXV1.TXV2.RE
 80a5020:	45535256 45520031 45535256 65530032     VRSE1.REVRSE2.Se
 80a5030:	6d614474 00726570 000000ff 000000ff     tDamper.........
 80a5040:	00202d20 75706e49 74532074 73757461      - .Input Status
 80a5050:	74655300 676e6974 4d575020 726f6620     .Setting PWM for
 80a5060:	44454c20 74200020 2000206f 00203e2d      LED . to . -> .
 80a5070:	65747441 6974706d 7420676e 6573206f     Attempting to se
 80a5080:	72662074 00207165 69747345 6574616d     t freq .Estimate
 80a5090:	72702064 63732d65 3a656c61 69460020     d pre-scale: .Fi
 80a50a0:	206c616e 2d657270 6c616373 00203a65     nal pre-scale: .

080a50b0 <_ZTV8SPIClass>:
	...
 80a50b8:	080a1fbd 080a1fbf 006e616e 0066766f     ........nan.ovf.
 80a50c8:	6e69002e 61620066 53006475 61697265     ..inf.baud.Seria
 80a50d8:	5355006c 72655342 316c6169 70797400     l.USBSerial1.typ
 80a50e8:	61700065 006d6172 00646d63 68006469     e.param.cmd.id.h
 80a50f8:	7300646e 006d7274 746c6966 6c766c00     nd.strm.filt.lvl
 80a5108:	64646100 646e6148 0072656c 6f6d6572     .addHandler.remo
 80a5118:	61486576 656c646e 6e650072 61486d75     veHandler.enumHa
 80a5128:	656c646e 4a007372 534e4f53 61657274     ndlers.JSONStrea
 80a5138:	676f4c6d 646e6148 0072656c 00707061     mLogHandler.app.
 80a5148:	30313025 5d002075 64250020 00202c00     %010u .] .%d., .
 80a5158:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
 80a5168:	64006925 69617465 3d20736c 0a0d0020     %i.details = ...
 80a5178:	006e6c00 63006e66 0065646f 61746564     .ln.fn.code.deta
 80a5188:	6e006c69 00656e6f 63617274 6e690065     il.none.trace.in
 80a5198:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
 80a51a8:	0063696e 2b25005a 3a643330 75323025     nic.Z.%+03d:%02u
 80a51b8:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
 80a51c8:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

080a51d8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a51e0:	080a26b9 080a26bf 080a2703 080a26cd     .&...&...'...&..
 80a51f0:	080a26bb                                .&..

080a51f4 <_ZTV9IPAddress>:
	...
 80a51fc:	080a2ca9 080a2c99 080a2c9b              .,...,...,..

080a5208 <_ZTV9USBSerial>:
	...
 80a5210:	080a2d65 080a2db5 080a2dc3 080a223d     e-...-...-..="..
 80a5220:	080a2da1 080a2d67 080a2d7d 080a2daf     .-..g-..}-...-..
 80a5230:	080a2d93 080a2d61                       .-..a-..

080a5238 <_ZTV11USARTSerial>:
	...
 80a5240:	080a2f05 080a2f55 080a2f63 080a223d     ./..U/..c/..="..
 80a5250:	080a2f19 080a2f3b 080a2f27 080a2f4f     ./..;/..'/..O/..
 80a5260:	080a2f07 080a2f0b                       ./.../..

080a5268 <_ZTV7TwoWire>:
	...
 80a5270:	080a3031 080a307b 080a3053 080a3033     10..{0..S0..30..
 80a5280:	080a305b 080a3063 080a306b 080a3073     [0..c0..k0..s0..

080a5290 <_ZTVN5spark9WiFiClassE>:
	...
 80a5298:	080a3195 080a318b 080a3181 080a30ff     .1...1...1...0..
 80a52a8:	080a24f1 080a3175 080a3169 080a3161     .$..u1..i1..a1..
 80a52b8:	080a3157 080a314d 080a3109              W1..M1...1..

080a52c4 <_ZTVN5spark12NetworkClassE>:
	...
 80a52cc:	080a31b5 080a31bf 080a31c9 080a31d3     .1...1...1...1..
 80a52dc:	080a31dd 080a31e9 080a31f5 080a3201     .1...1...1...2..
 80a52ec:	080a3209 080a3213 080a321d              .2...2...2..

080a52f8 <_ZSt7nothrow>:
 80a52f8:	00000000 00676f6c 00000000              ....log.....

080a5304 <_ctype_>:
 80a5304:	20202000 20202020 28282020 20282828     .         ((((( 
 80a5314:	20202020 20202020 20202020 20202020                     
 80a5324:	10108820 10101010 10101010 10101010      ...............
 80a5334:	04040410 04040404 10040404 10101010     ................
 80a5344:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a5354:	01010101 01010101 01010101 10101010     ................
 80a5364:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a5374:	02020202 02020202 02020202 10101010     ................
 80a5384:	00000020 00000000 00000000 00000000      ...............
	...

080a5408 <__sf_fake_stdin>:
	...

080a5428 <__sf_fake_stdout>:
	...

080a5448 <__sf_fake_stderr>:
	...
 80a5468:	00000043                                         C.

080a546a <link_const_variable_data_end>:
	...

080a546c <link_constructors_location>:
 80a546c:	080a0bf1 	.word	0x080a0bf1
 80a5470:	080a0ca1 	.word	0x080a0ca1
 80a5474:	080a0fd1 	.word	0x080a0fd1
 80a5478:	080a0fd5 	.word	0x080a0fd5
 80a547c:	080a1535 	.word	0x080a1535
 80a5480:	080a1731 	.word	0x080a1731
 80a5484:	080a1885 	.word	0x080a1885
 80a5488:	080a1b3d 	.word	0x080a1b3d
 80a548c:	080a200d 	.word	0x080a200d
 80a5490:	080a250d 	.word	0x080a250d
 80a5494:	080a251d 	.word	0x080a251d
 80a5498:	080a2565 	.word	0x080a2565
 80a549c:	080a31a1 	.word	0x080a31a1
 80a54a0:	080a326d 	.word	0x080a326d
 80a54a4:	080a32ed 	.word	0x080a32ed
 80a54a8:	080a33b9 	.word	0x080a33b9
 80a54ac:	080a346d 	.word	0x080a346d
 80a54b0:	080a34f1 	.word	0x080a34f1
 80a54b4:	080a35b5 	.word	0x080a35b5
 80a54b8:	080a3679 	.word	0x080a3679

080a54bc <link_constructors_end>:
 80a54bc:	00000000 	.word	0x00000000
