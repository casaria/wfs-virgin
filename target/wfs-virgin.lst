
c:/Users/casaria3/Documents/workbench/wfs-virgin/wfs-virgin/target/wfs-virgin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004c30  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000064  40024000  080a4c50  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  20000000  080a4cb4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000069c  200000a4  200000a4  000400a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a4d58  080a4d58  00034d58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a4d80  080a4d80  00034d80  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000f2394  00000000  00000000  00034d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015a96  00000000  00000000  00127118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001873b  00000000  00000000  0013cbae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025a0  00000000  00000000  001552e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003ab0  00000000  00000000  00157889  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002e32d  00000000  00000000  0015b339  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003328e  00000000  00000000  00189666  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000ac007  00000000  00000000  001bc8f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cc78  00000000  00000000  002688fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f004 fa75 	bl	80a4520 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f004 fa7a 	bl	80a4536 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a4cb4 	.word	0x080a4cb4
 80a0050:	200000a4 	.word	0x200000a4
 80a0054:	200000a4 	.word	0x200000a4
 80a0058:	20000740 	.word	0x20000740
 80a005c:	20000740 	.word	0x20000740

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f001 ff15 	bl	80a1e90 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a4bf8 	.word	0x080a4bf8
 80a0088:	080a4c48 	.word	0x080a4c48

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 b9e0 	b.w	80a0450 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 fbc5 	bl	80a0820 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f001 bebb 	b.w	80a1e14 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f001 bc01 	b.w	80a18a4 <malloc>

080a00a2 <_ZdlPv>:
 80a00a2:	f001 bc07 	b.w	80a18b4 <free>

080a00a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a6:	7800      	ldrb	r0, [r0, #0]
 80a00a8:	fab0 f080 	clz	r0, r0
 80a00ac:	0940      	lsrs	r0, r0, #5
 80a00ae:	4770      	bx	lr

080a00b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b0:	2301      	movs	r3, #1
 80a00b2:	7003      	strb	r3, [r0, #0]
 80a00b4:	4770      	bx	lr

080a00b6 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00b6:	6803      	ldr	r3, [r0, #0]
 80a00b8:	4718      	bx	r3

080a00ba <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00ba:	2a01      	cmp	r2, #1
 80a00bc:	d002      	beq.n	80a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00be:	2a02      	cmp	r2, #2
 80a00c0:	d002      	beq.n	80a00c8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00c2:	e004      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00c4:	6001      	str	r1, [r0, #0]
	      break;
 80a00c6:	e002      	b.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00c8:	680b      	ldr	r3, [r1, #0]
 80a00ca:	b100      	cbz	r0, 80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00cc:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00ce:	2000      	movs	r0, #0
 80a00d0:	4770      	bx	lr
	...

080a00d4 <_Z7cmdTXV26String>:
    }
  return 1;
}


int cmdTXV2(String command){
 80a00d4:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos =  command.toInt();
 80a00d6:	f001 fcc5 	bl	80a1a64 <_ZNK6String5toIntEv>
  if (TXVpos <= 4096) {
 80a00da:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
}


int cmdTXV2(String command){
  int TXVpos;
  TXVpos =  command.toInt();
 80a00de:	4604      	mov	r4, r0
  if (TXVpos <= 4096) {
 80a00e0:	dc05      	bgt.n	80a00ee <_Z7cmdTXV26String+0x1a>
    damper.setVal(4,TXVpos);
 80a00e2:	b282      	uxth	r2, r0
 80a00e4:	2300      	movs	r3, #0
 80a00e6:	2104      	movs	r1, #4
 80a00e8:	4802      	ldr	r0, [pc, #8]	; (80a00f4 <_Z7cmdTXV26String+0x20>)
 80a00ea:	f001 f8d5 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
  }
  return TXVpos;
            
}
 80a00ee:	4620      	mov	r0, r4
 80a00f0:	bd10      	pop	{r4, pc}
 80a00f2:	bf00      	nop
 80a00f4:	200000d0 	.word	0x200000d0

080a00f8 <_Z7cmdTXV16String>:

int cmdTXV1(String command){
 80a00f8:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos =  command.toInt();
 80a00fa:	f001 fcb3 	bl	80a1a64 <_ZNK6String5toIntEv>
  if (TXVpos <= 4096) {
 80a00fe:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
            
}

int cmdTXV1(String command){
  int TXVpos;
  TXVpos =  command.toInt();
 80a0102:	4604      	mov	r4, r0
  if (TXVpos <= 4096) {
 80a0104:	dc05      	bgt.n	80a0112 <_Z7cmdTXV16String+0x1a>
     damper.setVal(8,TXVpos);
 80a0106:	b282      	uxth	r2, r0
 80a0108:	2300      	movs	r3, #0
 80a010a:	2108      	movs	r1, #8
 80a010c:	4802      	ldr	r0, [pc, #8]	; (80a0118 <_Z7cmdTXV16String+0x20>)
 80a010e:	f001 f8c3 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
  }     
  return TXVpos;
}
 80a0112:	4620      	mov	r0, r4
 80a0114:	bd10      	pop	{r4, pc}
 80a0116:	bf00      	nop
 80a0118:	200000d0 	.word	0x200000d0

080a011c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a011c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80a011e:	2301      	movs	r3, #1
 80a0120:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80a0122:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a0124:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80a0126:	b10b      	cbz	r3, 80a012c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80a0128:	68c0      	ldr	r0, [r0, #12]
 80a012a:	e006      	b.n	80a013a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a012c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80a012e:	b128      	cbz	r0, 80a013c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0130:	6883      	ldr	r3, [r0, #8]
 80a0132:	b90b      	cbnz	r3, 80a0138 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80a0134:	f002 fda9 	bl	80a2c8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0138:	68c3      	ldr	r3, [r0, #12]
 80a013a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80a013c:	2301      	movs	r3, #1
 80a013e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80a0140:	2000      	movs	r0, #0
    }
 80a0142:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80a0146:	f001 ba2f 	b.w	80a15a8 <os_thread_exit>

080a014a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a014a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a014c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a014e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0150:	b113      	cbz	r3, 80a0158 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0152:	2203      	movs	r2, #3
 80a0154:	4601      	mov	r1, r0
 80a0156:	4798      	blx	r3
    }
 80a0158:	4620      	mov	r0, r4
 80a015a:	bd10      	pop	{r4, pc}

080a015c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 80a015c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a015e:	4604      	mov	r4, r0
 80a0160:	b170      	cbz	r0, 80a0180 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a0162:	6805      	ldr	r5, [r0, #0]
 80a0164:	b135      	cbz	r5, 80a0174 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0166:	4628      	mov	r0, r5
 80a0168:	f7ff ffef 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a016c:	2110      	movs	r1, #16
 80a016e:	4628      	mov	r0, r5
 80a0170:	f002 fd7a 	bl	80a2c68 <_ZdlPvj>
 80a0174:	4620      	mov	r0, r4
      }
 80a0176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a017a:	2114      	movs	r1, #20
 80a017c:	f002 bd74 	b.w	80a2c68 <_ZdlPvj>
 80a0180:	bd38      	pop	{r3, r4, r5, pc}

080a0182 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
 80a0182:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0184:	6943      	ldr	r3, [r0, #20]
 80a0186:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
 80a0188:	b1bb      	cbz	r3, 80a01ba <_ZN19ApplicationWatchdogD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 80a018a:	6858      	ldr	r0, [r3, #4]
 80a018c:	f001 f9ec 	bl	80a1568 <os_thread_is_current>
 80a0190:	b978      	cbnz	r0, 80a01b2 <_ZN19ApplicationWatchdogD1Ev+0x30>
 80a0192:	6963      	ldr	r3, [r4, #20]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 80a0194:	7c5a      	ldrb	r2, [r3, #17]
 80a0196:	b912      	cbnz	r2, 80a019e <_ZN19ApplicationWatchdogD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 80a0198:	6858      	ldr	r0, [r3, #4]
 80a019a:	f001 f9ed 	bl	80a1578 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 80a019e:	6963      	ldr	r3, [r4, #20]
 80a01a0:	6858      	ldr	r0, [r3, #4]
 80a01a2:	f001 f9f1 	bl	80a1588 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a01a6:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a01a8:	2300      	movs	r3, #0
 80a01aa:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a01ac:	b128      	cbz	r0, 80a01ba <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__p);
 80a01ae:	f7ff ffd5 	bl	80a015c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a01b2:	6960      	ldr	r0, [r4, #20]
 80a01b4:	b108      	cbz	r0, 80a01ba <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__ptr);
 80a01b6:	f7ff ffd1 	bl	80a015c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
 80a01ba:	1d20      	adds	r0, r4, #4
 80a01bc:	f7ff ffc5 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
 80a01c0:	4620      	mov	r0, r4
 80a01c2:	bd10      	pop	{r4, pc}

080a01c4 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 80a01c4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a01c6:	f001 f9b7 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a01ca:	4b01      	ldr	r3, [pc, #4]	; (80a01d0 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 80a01cc:	6018      	str	r0, [r3, #0]
 80a01ce:	bd08      	pop	{r3, pc}
 80a01d0:	20000668 	.word	0x20000668

080a01d4 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
		checkin();
	}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 80a01d4:	b530      	push	{r4, r5, lr}
 80a01d6:	461d      	mov	r5, r3
 80a01d8:	b087      	sub	sp, #28
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a01da:	2300      	movs	r3, #0
 80a01dc:	4604      	mov	r4, r0
 80a01de:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80a01e0:	b122      	cbz	r2, 80a01ec <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a01e2:	4b21      	ldr	r3, [pc, #132]	; (80a0268 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x94>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a01e4:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a01e6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a01e8:	4b20      	ldr	r3, [pc, #128]	; (80a026c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x98>)
 80a01ea:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a01ec:	2300      	movs	r3, #0
 80a01ee:	60e3      	str	r3, [r4, #12]
 80a01f0:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80a01f2:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a01f4:	b13b      	cbz	r3, 80a0206 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a01f6:	2202      	movs	r2, #2
 80a01f8:	a902      	add	r1, sp, #8
 80a01fa:	1d20      	adds	r0, r4, #4
 80a01fc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a01fe:	9b05      	ldr	r3, [sp, #20]
 80a0200:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 80a0202:	9b04      	ldr	r3, [sp, #16]
 80a0204:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80a0206:	491a      	ldr	r1, [pc, #104]	; (80a0270 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9c>)
 80a0208:	2014      	movs	r0, #20
 80a020a:	f002 fd2f 	bl	80a2c6c <_ZnwjRKSt9nothrow_t>
 80a020e:	b130      	cbz	r0, 80a021e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80a0210:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80a0212:	7403      	strb	r3, [r0, #16]
 80a0214:	6003      	str	r3, [r0, #0]
 80a0216:	6043      	str	r3, [r0, #4]
 80a0218:	6083      	str	r3, [r0, #8]
 80a021a:	60c3      	str	r3, [r0, #12]
 80a021c:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a021e:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80a0220:	b1a0      	cbz	r0, 80a024c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 80a0222:	4b14      	ldr	r3, [pc, #80]	; (80a0274 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa0>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0224:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 80a0226:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0228:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a022a:	4913      	ldr	r1, [pc, #76]	; (80a0278 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 80a022c:	60dc      	str	r4, [r3, #12]
 80a022e:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0230:	4b12      	ldr	r3, [pc, #72]	; (80a027c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa8>)
 80a0232:	e88d 0021 	stmia.w	sp, {r0, r5}
 80a0236:	3004      	adds	r0, #4
 80a0238:	f001 f98e 	bl	80a1558 <os_thread_create>
 80a023c:	b930      	cbnz	r0, 80a024c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 80a023e:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 80a0240:	7c1b      	ldrb	r3, [r3, #16]
 80a0242:	b94b      	cbnz	r3, 80a0258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 80a0244:	2001      	movs	r0, #1
 80a0246:	f001 f967 	bl	80a1518 <HAL_Delay_Milliseconds>
 80a024a:	e7f8      	b.n	80a023e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a024c:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a024e:	2300      	movs	r3, #0
 80a0250:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a0252:	b108      	cbz	r0, 80a0258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
	  get_deleter()(__p);
 80a0254:	f7ff ff82 	bl	80a015c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
	{
		checkin();
 80a0258:	f7ff ffb4 	bl	80a01c4 <_ZN19ApplicationWatchdog7checkinEv>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a025c:	a802      	add	r0, sp, #8
 80a025e:	f7ff ff74 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 80a0262:	4620      	mov	r0, r4
 80a0264:	b007      	add	sp, #28
 80a0266:	bd30      	pop	{r4, r5, pc}
 80a0268:	080a00b7 	.word	0x080a00b7
 80a026c:	080a00bb 	.word	0x080a00bb
 80a0270:	080a4a84 	.word	0x080a4a84
 80a0274:	080a2bcd 	.word	0x080a2bcd
 80a0278:	080a4734 	.word	0x080a4734
 80a027c:	080a011d 	.word	0x080a011d

080a0280 <_Z12relayOff8574v>:
   HaltTemp = FALSE;
   relayOn8574();
   return 0;
}

void relayOff8574(){
 80a0280:	b510      	push	{r4, lr}
       Wire.begin();
 80a0282:	f002 fcc3 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0286:	f002 fb29 	bl	80a28dc <_ZN7TwoWire5beginEv>
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
      // Select GPIO as input
      relayMap=0xff;
 80a028a:	4c0a      	ldr	r4, [pc, #40]	; (80a02b4 <_Z12relayOff8574v+0x34>)
}

void relayOff8574(){
       Wire.begin();
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
 80a028c:	f002 fcbe 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0290:	2124      	movs	r1, #36	; 0x24
 80a0292:	f002 fb39 	bl	80a2908 <_ZN7TwoWire17beginTransmissionEi>
      // Select GPIO as input
      relayMap=0xff;
 80a0296:	23ff      	movs	r3, #255	; 0xff
 80a0298:	7023      	strb	r3, [r4, #0]
      Wire.write(relayMap);  //Wire.write(0xff);
 80a029a:	f002 fcb7 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a029e:	6803      	ldr	r3, [r0, #0]
 80a02a0:	7821      	ldrb	r1, [r4, #0]
 80a02a2:	689b      	ldr	r3, [r3, #8]
 80a02a4:	4798      	blx	r3


      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a02a6:	f002 fcb1 	bl	80a2c0c <_Z19__fetch_global_Wirev>
}
 80a02aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      Wire.write(relayMap);  //Wire.write(0xff);


      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a02ae:	f002 bb32 	b.w	80a2916 <_ZN7TwoWire15endTransmissionEv>
 80a02b2:	bf00      	nop
 80a02b4:	20000030 	.word	0x20000030

080a02b8 <_Z7getTempPh>:
}




double getTemp(uint8_t addr[8]) {
 80a02b8:	b570      	push	{r4, r5, r6, lr}
 80a02ba:	4606      	mov	r6, r0

      double _temp;
      int   i = 0;
 80a02bc:	2400      	movs	r4, #0
    
      do {
        _temp = ds18b20.getTemperature(addr);
 80a02be:	2200      	movs	r2, #0
 80a02c0:	4631      	mov	r1, r6
 80a02c2:	480a      	ldr	r0, [pc, #40]	; (80a02ec <_Z7getTempPh+0x34>)
 80a02c4:	f000 fe1e 	bl	80a0f04 <_ZN7DS18B2014getTemperatureEPhb>
 80a02c8:	4605      	mov	r5, r0
      } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a02ca:	4808      	ldr	r0, [pc, #32]	; (80a02ec <_Z7getTempPh+0x34>)
 80a02cc:	f000 fed4 	bl	80a1078 <_ZN7DS18B208crcCheckEv>
 80a02d0:	b928      	cbnz	r0, 80a02de <_Z7getTempPh+0x26>
 80a02d2:	3401      	adds	r4, #1
 80a02d4:	2c04      	cmp	r4, #4
 80a02d6:	d1f2      	bne.n	80a02be <_Z7getTempPh+0x6>
      if (i < MAXRETRY) {
        //_temp = ds18b20.convertToFahrenheit(_temp);
       // Serial.println(_temp);
      }
      else {
        _temp = -99;
 80a02d8:	2000      	movs	r0, #0
 80a02da:	4905      	ldr	r1, [pc, #20]	; (80a02f0 <_Z7getTempPh+0x38>)
 80a02dc:	bd70      	pop	{r4, r5, r6, pc}
      do {
        _temp = ds18b20.getTemperature(addr);
      } while (!ds18b20.crcCheck() && MAXRETRY > i++);
      
    
      if (i < MAXRETRY) {
 80a02de:	2c03      	cmp	r4, #3
 80a02e0:	d0fa      	beq.n	80a02d8 <_Z7getTempPh+0x20>

      double _temp;
      int   i = 0;
    
      do {
        _temp = ds18b20.getTemperature(addr);
 80a02e2:	4628      	mov	r0, r5
 80a02e4:	f003 fa84 	bl	80a37f0 <__aeabi_f2d>
      else {
        _temp = -99;
       // Serial.println("Invalid reading");
      }
      return _temp; 
}   
 80a02e8:	bd70      	pop	{r4, r5, r6, pc}
 80a02ea:	bf00      	nop
 80a02ec:	20000190 	.word	0x20000190
 80a02f0:	c058c000 	.word	0xc058c000

080a02f4 <_Z5bitophhi>:
        Wire.endTransmission();
    }
    
}
byte bitop(byte b1, byte b2, int op){
    switch(op){
 80a02f4:	2a02      	cmp	r2, #2
 80a02f6:	d005      	beq.n	80a0304 <_Z5bitophhi+0x10>
 80a02f8:	2a03      	cmp	r2, #3
 80a02fa:	d006      	beq.n	80a030a <_Z5bitophhi+0x16>
 80a02fc:	2a01      	cmp	r2, #1
 80a02fe:	d106      	bne.n	80a030e <_Z5bitophhi+0x1a>
        case 1:
            return b1 | b2;
 80a0300:	4308      	orrs	r0, r1
 80a0302:	4770      	bx	lr
        case 2:
            return b1 & ~b2;
 80a0304:	ea20 0001 	bic.w	r0, r0, r1
 80a0308:	4770      	bx	lr
        case 3:
            return b1 ^ b2;
 80a030a:	4048      	eors	r0, r1
 80a030c:	4770      	bx	lr
    }
    return 0;
 80a030e:	2000      	movs	r0, #0
}
 80a0310:	4770      	bx	lr
	...

080a0314 <_Z7relayOpii>:
    damper.setVal(0, dutyCycle);
    return dutyCycle;
}

void relayOp(int relay, int op){
    if(relay > 8){
 80a0314:	2808      	cmp	r0, #8
    } 
    damper.setVal(0, dutyCycle);
    return dutyCycle;
}

void relayOp(int relay, int op){
 80a0316:	b570      	push	{r4, r5, r6, lr}
 80a0318:	4604      	mov	r4, r0
 80a031a:	460e      	mov	r6, r1
    if(relay > 8){
 80a031c:	dc1a      	bgt.n	80a0354 <_Z7relayOpii+0x40>
      
    }else{
        byte rbit = (1<<(relay-1));
        Wire.beginTransmission(Addr8574);
 80a031e:	f002 fc75 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0322:	2124      	movs	r1, #36	; 0x24
 80a0324:	f002 faf0 	bl	80a2908 <_ZN7TwoWire17beginTransmissionEi>
        // Select GPIO as input                                                                                                                                                                                                            
        //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
         //Wire.write(0x00); 
        // Stop I2C transmission
        relayMap = bitop(relayMap, rbit, op);
 80a0328:	4d0b      	ldr	r5, [pc, #44]	; (80a0358 <_Z7relayOpii+0x44>)
 80a032a:	3c01      	subs	r4, #1
 80a032c:	2101      	movs	r1, #1
 80a032e:	40a1      	lsls	r1, r4
 80a0330:	4632      	mov	r2, r6
 80a0332:	7828      	ldrb	r0, [r5, #0]
 80a0334:	b2c9      	uxtb	r1, r1
 80a0336:	f7ff ffdd 	bl	80a02f4 <_Z5bitophhi>
 80a033a:	7028      	strb	r0, [r5, #0]
        Wire.write(relayMap);
 80a033c:	f002 fc66 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0340:	6803      	ldr	r3, [r0, #0]
 80a0342:	7829      	ldrb	r1, [r5, #0]
 80a0344:	689b      	ldr	r3, [r3, #8]
 80a0346:	4798      	blx	r3
        Wire.endTransmission();
 80a0348:	f002 fc60 	bl	80a2c0c <_Z19__fetch_global_Wirev>
    }
    
}
 80a034c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
         //Wire.write(0x00); 
        // Stop I2C transmission
        relayMap = bitop(relayMap, rbit, op);
        Wire.write(relayMap);
        Wire.endTransmission();
 80a0350:	f002 bae1 	b.w	80a2916 <_ZN7TwoWire15endTransmissionEv>
 80a0354:	bd70      	pop	{r4, r5, r6, pc}
 80a0356:	bf00      	nop
 80a0358:	20000030 	.word	0x20000030

080a035c <_Z11turnOnRelayi>:
    }
    return 0;
}

void turnOnRelay(int relay){
    relayOp(relay, 2);
 80a035c:	2102      	movs	r1, #2
 80a035e:	f7ff bfd9 	b.w	80a0314 <_Z7relayOpii>
	...

080a0364 <_Z15cmdStopDefrost16String>:
    if (InReverse1) msStartReverse1 = millis();

    return 1;
}

int cmdStopDefrost1(String command) {
 80a0364:	b508      	push	{r3, lr}
   turnOnRelay(RelayCool1);
 80a0366:	2003      	movs	r0, #3
 80a0368:	f7ff fff8 	bl	80a035c <_Z11turnOnRelayi>
   turnOnRelay(RelayFan1);
 80a036c:	2002      	movs	r0, #2
 80a036e:	f7ff fff5 	bl	80a035c <_Z11turnOnRelayi>
   turnOnRelay(RelayBypassDamper1);
 80a0372:	2004      	movs	r0, #4
 80a0374:	f7ff fff2 	bl	80a035c <_Z11turnOnRelayi>
   InReverse1=0;
 80a0378:	4b01      	ldr	r3, [pc, #4]	; (80a0380 <_Z15cmdStopDefrost16String+0x1c>)
 80a037a:	2000      	movs	r0, #0
 80a037c:	7018      	strb	r0, [r3, #0]
   //msDefrost2 = millis() + defrostTimer -100000;
   return 0;
}
 80a037e:	bd08      	pop	{r3, pc}
 80a0380:	20000164 	.word	0x20000164

080a0384 <_Z15cmdStopDefrost26String>:

int cmdStopDefrost2(String command) {
 80a0384:	b508      	push	{r3, lr}
   turnOnRelay(RelayCool2);
 80a0386:	2005      	movs	r0, #5
 80a0388:	f7ff ffe8 	bl	80a035c <_Z11turnOnRelayi>
   turnOnRelay(RelayFan2);
 80a038c:	2007      	movs	r0, #7
 80a038e:	f7ff ffe5 	bl	80a035c <_Z11turnOnRelayi>
   turnOnRelay(RelayBypassDamper2);
 80a0392:	2006      	movs	r0, #6
 80a0394:	f7ff ffe2 	bl	80a035c <_Z11turnOnRelayi>
   InReverse2=0;
 80a0398:	4b01      	ldr	r3, [pc, #4]	; (80a03a0 <_Z15cmdStopDefrost26String+0x1c>)
 80a039a:	2000      	movs	r0, #0
 80a039c:	7018      	strb	r0, [r3, #0]
   return 0;
}
 80a039e:	bd08      	pop	{r3, pc}
 80a03a0:	20000165 	.word	0x20000165

080a03a4 <_Z11toggleRelayi>:
}
void turnOffRelay(int relay){
    relayOp(relay, 1);
}
void toggleRelay(int relay){
    relayOp(relay, 3);
 80a03a4:	2103      	movs	r1, #3
 80a03a6:	f7ff bfb5 	b.w	80a0314 <_Z7relayOpii>
	...

080a03ac <_Z7cmdRev16String>:
     damper.setVal(8,TXVpos);
  }     
  return TXVpos;
}

int cmdRev1(String command){
 80a03ac:	b508      	push	{r3, lr}

    toggleRelay(RelayCool1);
 80a03ae:	2003      	movs	r0, #3
 80a03b0:	f7ff fff8 	bl	80a03a4 <_Z11toggleRelayi>
    toggleRelay(RelayFan1);
 80a03b4:	2002      	movs	r0, #2
 80a03b6:	f7ff fff5 	bl	80a03a4 <_Z11toggleRelayi>
    toggleRelay(RelayBypassDamper1);
 80a03ba:	2004      	movs	r0, #4
 80a03bc:	f7ff fff2 	bl	80a03a4 <_Z11toggleRelayi>
    InReverse1 = !InReverse1;
 80a03c0:	4a05      	ldr	r2, [pc, #20]	; (80a03d8 <_Z7cmdRev16String+0x2c>)
 80a03c2:	7813      	ldrb	r3, [r2, #0]
 80a03c4:	f083 0301 	eor.w	r3, r3, #1
 80a03c8:	7013      	strb	r3, [r2, #0]
    if (InReverse1) msStartReverse1 = millis();
 80a03ca:	b11b      	cbz	r3, 80a03d4 <_Z7cmdRev16String+0x28>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a03cc:	f001 f8b4 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
 80a03d0:	4b02      	ldr	r3, [pc, #8]	; (80a03dc <_Z7cmdRev16String+0x30>)
 80a03d2:	6018      	str	r0, [r3, #0]

    return 1;
}
 80a03d4:	2001      	movs	r0, #1
 80a03d6:	bd08      	pop	{r3, pc}
 80a03d8:	20000164 	.word	0x20000164
 80a03dc:	200000ac 	.word	0x200000ac

080a03e0 <_Z7cmdRev26String>:
   turnOnRelay(RelayBypassDamper2);
   InReverse2=0;
   return 0;
}

int cmdRev2(String command){
 80a03e0:	b508      	push	{r3, lr}
    toggleRelay(RelayCool2);
 80a03e2:	2005      	movs	r0, #5
 80a03e4:	f7ff ffde 	bl	80a03a4 <_Z11toggleRelayi>
    toggleRelay(RelayFan2);
 80a03e8:	2007      	movs	r0, #7
 80a03ea:	f7ff ffdb 	bl	80a03a4 <_Z11toggleRelayi>
    toggleRelay(RelayBypassDamper2);
 80a03ee:	2006      	movs	r0, #6
 80a03f0:	f7ff ffd8 	bl	80a03a4 <_Z11toggleRelayi>
    InReverse2 = !InReverse2;
 80a03f4:	4a05      	ldr	r2, [pc, #20]	; (80a040c <_Z7cmdRev26String+0x2c>)
 80a03f6:	7813      	ldrb	r3, [r2, #0]
 80a03f8:	f083 0301 	eor.w	r3, r3, #1
 80a03fc:	7013      	strb	r3, [r2, #0]
    if (InReverse2) msStartReverse2 = millis();
 80a03fe:	b11b      	cbz	r3, 80a0408 <_Z7cmdRev26String+0x28>
 80a0400:	f001 f89a 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
 80a0404:	4b02      	ldr	r3, [pc, #8]	; (80a0410 <_Z7cmdRev26String+0x30>)
 80a0406:	6018      	str	r0, [r3, #0]
    return 0;
}
 80a0408:	2000      	movs	r0, #0
 80a040a:	bd08      	pop	{r3, pc}
 80a040c:	20000165 	.word	0x20000165
 80a0410:	200000cc 	.word	0x200000cc

080a0414 <_Z9Relay8574hb>:
void toggleRelay(int relay){
    relayOp(relay, 3);
}


void Relay8574(byte bitnum, boolean value){
 80a0414:	b508      	push	{r3, lr}
  static bool toggle;


  Wire.beginTransmission(Addr8574);
 80a0416:	f002 fbf9 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a041a:	2124      	movs	r1, #36	; 0x24
 80a041c:	f002 fa74 	bl	80a2908 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input                                                                                                                                                                                                            
   //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
 //Wire.write(0x00); 
  // Stop I2C transmission
  Wire.write(0x00);
 80a0420:	f002 fbf4 	bl	80a2c0c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0424:	6803      	ldr	r3, [r0, #0]
 80a0426:	2100      	movs	r1, #0
 80a0428:	689b      	ldr	r3, [r3, #8]
 80a042a:	4798      	blx	r3
  relayMap= 0x00;
 80a042c:	4b06      	ldr	r3, [pc, #24]	; (80a0448 <_Z9Relay8574hb+0x34>)
 80a042e:	2200      	movs	r2, #0
 80a0430:	701a      	strb	r2, [r3, #0]
  Wire.endTransmission();
 80a0432:	f002 fbeb 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0436:	f002 fa6e 	bl	80a2916 <_ZN7TwoWire15endTransmissionEv>
  toggle= !toggle;
 80a043a:	4a04      	ldr	r2, [pc, #16]	; (80a044c <_Z9Relay8574hb+0x38>)
 80a043c:	7813      	ldrb	r3, [r2, #0]
 80a043e:	f083 0301 	eor.w	r3, r3, #1
 80a0442:	7013      	strb	r3, [r2, #0]
 80a0444:	bd08      	pop	{r3, pc}
 80a0446:	bf00      	nop
 80a0448:	20000030 	.word	0x20000030
 80a044c:	20000104 	.word	0x20000104

080a0450 <setup>:
      Wire.endTransmission();
}



void setup() {        
 80a0450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  cmdStopDefrost1("abort");
 80a0452:	4947      	ldr	r1, [pc, #284]	; (80a0570 <setup+0x120>)
 80a0454:	4668      	mov	r0, sp
 80a0456:	f001 fad8 	bl	80a1a0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a045a:	4668      	mov	r0, sp
 80a045c:	f7ff ff82 	bl	80a0364 <_Z15cmdStopDefrost16String>
 80a0460:	4668      	mov	r0, sp
 80a0462:	f001 fa8b 	bl	80a197c <_ZN6StringD1Ev>
  cmdStopDefrost2("abort");                                                    
 80a0466:	4942      	ldr	r1, [pc, #264]	; (80a0570 <setup+0x120>)
 80a0468:	4668      	mov	r0, sp
 80a046a:	f001 face 	bl	80a1a0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a046e:	4668      	mov	r0, sp
 80a0470:	f7ff ff88 	bl	80a0384 <_Z15cmdStopDefrost26String>
 80a0474:	4668      	mov	r0, sp
 80a0476:	f001 fa81 	bl	80a197c <_ZN6StringD1Ev>
  relayOff8574();
 80a047a:	f7ff ff01 	bl	80a0280 <_Z12relayOff8574v>
  delay(5000);
 80a047e:	f241 3088 	movw	r0, #5000	; 0x1388
 80a0482:	f001 fc6d 	bl	80a1d60 <delay>
   //find all temp sensors
  ds18b20.resetsearch();
 80a0486:	483b      	ldr	r0, [pc, #236]	; (80a0574 <setup+0x124>)
 80a0488:	f000 fd39 	bl	80a0efe <_ZN7DS18B2011resetsearchEv>
  delay(200);                 // initialise for sensor search
 80a048c:	20c8      	movs	r0, #200	; 0xc8
 80a048e:	f001 fc67 	bl	80a1d60 <delay>
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a0492:	4e39      	ldr	r6, [pc, #228]	; (80a0578 <setup+0x128>)
  relayOff8574();
  delay(5000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(200);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
 80a0494:	2400      	movs	r4, #0
        ds18b20.search(sensorAddresses[i]); // and if available store
        delay(300); 
        celsius[i]= 0;
 80a0496:	2500      	movs	r5, #0
  delay(5000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(200);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
        ds18b20.search(sensorAddresses[i]); // and if available store
 80a0498:	210c      	movs	r1, #12
 80a049a:	fb01 6104 	mla	r1, r1, r4, r6
 80a049e:	4835      	ldr	r0, [pc, #212]	; (80a0574 <setup+0x124>)
 80a04a0:	f000 fd11 	bl	80a0ec6 <_ZN7DS18B206searchEPh>
        delay(300); 
 80a04a4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80a04a8:	f001 fc5a 	bl	80a1d60 <delay>
        celsius[i]= 0;
 80a04ac:	4b33      	ldr	r3, [pc, #204]	; (80a057c <setup+0x12c>)
 80a04ae:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  relayOff8574();
  delay(5000);
   //find all temp sensors
  ds18b20.resetsearch();
  delay(200);                 // initialise for sensor search
  for (int i = 0; i < nSENSORS; i++) {   // try to read the sensor addre
 80a04b2:	3401      	adds	r4, #1
 80a04b4:	2c0c      	cmp	r4, #12
 80a04b6:	d1ef      	bne.n	80a0498 <setup+0x48>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a04b8:	4a31      	ldr	r2, [pc, #196]	; (80a0580 <setup+0x130>)
 80a04ba:	4932      	ldr	r1, [pc, #200]	; (80a0584 <setup+0x134>)
 80a04bc:	4832      	ldr	r0, [pc, #200]	; (80a0588 <setup+0x138>)
 80a04be:	f001 fd71 	bl	80a1fa4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a04c2:	4a32      	ldr	r2, [pc, #200]	; (80a058c <setup+0x13c>)
 80a04c4:	4932      	ldr	r1, [pc, #200]	; (80a0590 <setup+0x140>)
 80a04c6:	4830      	ldr	r0, [pc, #192]	; (80a0588 <setup+0x138>)
 80a04c8:	f001 fd6c 	bl	80a1fa4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   // Particle.variable("Bank_2", b2status);
   
    
    //Particle.variable("Input Status", b4status);
    //relays.turnOffAllRelays();
    pinMode(pinLED, OUTPUT);  
 80a04cc:	2101      	movs	r1, #1
 80a04ce:	2007      	movs	r0, #7
 80a04d0:	f002 fb0c 	bl	80a2aec <pinMode>
   
   
    
    
    
    damper.begin();    // This calls Wire.begin()
 80a04d4:	482f      	ldr	r0, [pc, #188]	; (80a0594 <setup+0x144>)
 80a04d6:	f000 ff46 	bl	80a1366 <_ZN16Adafruit_PCA96855beginEv>
    damper.setPWMFreq(1500);     // Maximum PWM frequency is 1600
 80a04da:	492f      	ldr	r1, [pc, #188]	; (80a0598 <setup+0x148>)
 80a04dc:	482d      	ldr	r0, [pc, #180]	; (80a0594 <setup+0x144>)
 80a04de:	f000 ff4f 	bl	80a1380 <_ZN16Adafruit_PCA968510setPWMFreqEf>
    
    damper.setVal(damper2_2, 2800);
 80a04e2:	2300      	movs	r3, #0
 80a04e4:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80a04e8:	2101      	movs	r1, #1
 80a04ea:	482a      	ldr	r0, [pc, #168]	; (80a0594 <setup+0x144>)
 80a04ec:	f000 fed4 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper2_1, 3000);
 80a04f0:	2300      	movs	r3, #0
 80a04f2:	4619      	mov	r1, r3
 80a04f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a04f8:	4826      	ldr	r0, [pc, #152]	; (80a0594 <setup+0x144>)
 80a04fa:	f000 fecd 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_2, 2800);
 80a04fe:	2300      	movs	r3, #0
 80a0500:	f44f 622f 	mov.w	r2, #2800	; 0xaf0
 80a0504:	2103      	movs	r1, #3
 80a0506:	4823      	ldr	r0, [pc, #140]	; (80a0594 <setup+0x144>)
 80a0508:	f000 fec6 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_1, 3000);
 80a050c:	2300      	movs	r3, #0
 80a050e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0512:	2102      	movs	r1, #2
 80a0514:	481f      	ldr	r0, [pc, #124]	; (80a0594 <setup+0x144>)
 80a0516:	f000 febf 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv1, 3900); //default TXV2
 80a051a:	2300      	movs	r3, #0
 80a051c:	f640 723c 	movw	r2, #3900	; 0xf3c
 80a0520:	2104      	movs	r1, #4
 80a0522:	481c      	ldr	r0, [pc, #112]	; (80a0594 <setup+0x144>)
 80a0524:	f000 feb8 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv2, 3900); //default TXV
 80a0528:	f640 723c 	movw	r2, #3900	; 0xf3c
 80a052c:	2300      	movs	r3, #0
 80a052e:	2108      	movs	r1, #8
 80a0530:	4818      	ldr	r0, [pc, #96]	; (80a0594 <setup+0x144>)
 80a0532:	f000 feb1 	bl	80a1298 <_ZN16Adafruit_PCA96856setValEhtb>
    // Select configuration command
    // Continuous conversion mode, Channel-1, 12-bit resolution
    //Wire.write(0x10);
    // Stop I2C Transmission
    //Wire.endTransmission();
      Wire.begin();
 80a0536:	f002 fb69 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a053a:	f002 f9cf 	bl	80a28dc <_ZN7TwoWire5beginEv>
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
      // Select GPIO as input
      relayMap=0xFF;
 80a053e:	4c17      	ldr	r4, [pc, #92]	; (80a059c <setup+0x14c>)
    //Wire.write(0x10);
    // Stop I2C Transmission
    //Wire.endTransmission();
      Wire.begin();
      //Wire.reset();
      Wire.beginTransmission(Addr8574);
 80a0540:	f002 fb64 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0544:	2124      	movs	r1, #36	; 0x24
 80a0546:	f002 f9df 	bl	80a2908 <_ZN7TwoWire17beginTransmissionEi>
      // Select GPIO as input
      relayMap=0xFF;
 80a054a:	23ff      	movs	r3, #255	; 0xff
 80a054c:	7023      	strb	r3, [r4, #0]
      Wire.write(relayMap);  //Wire.write(0xff);
 80a054e:	f002 fb5d 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0552:	6803      	ldr	r3, [r0, #0]
 80a0554:	7821      	ldrb	r1, [r4, #0]
 80a0556:	689b      	ldr	r3, [r3, #8]
 80a0558:	4798      	blx	r3
      Relay8574(1,1);
 80a055a:	2101      	movs	r1, #1
 80a055c:	4608      	mov	r0, r1
 80a055e:	f7ff ff59 	bl	80a0414 <_Z9Relay8574hb>

      // All relafys turn off 
      // Stop I2C transmission
      Wire.endTransmission();
 80a0562:	f002 fb53 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a0566:	f002 f9d6 	bl	80a2916 <_ZN7TwoWire15endTransmissionEv>
  

  
}
 80a056a:	b004      	add	sp, #16
 80a056c:	bd70      	pop	{r4, r5, r6, pc}
 80a056e:	bf00      	nop
 80a0570:	080a473b 	.word	0x080a473b
 80a0574:	20000190 	.word	0x20000190
 80a0578:	40024000 	.word	0x40024000
 80a057c:	20000000 	.word	0x20000000
 80a0580:	080a4741 	.word	0x080a4741
 80a0584:	080a00f9 	.word	0x080a00f9
 80a0588:	080a1f79 	.word	0x080a1f79
 80a058c:	080a4746 	.word	0x080a4746
 80a0590:	080a00d5 	.word	0x080a00d5
 80a0594:	200000d0 	.word	0x200000d0
 80a0598:	44bb8000 	.word	0x44bb8000
 80a059c:	20000030 	.word	0x20000030

080a05a0 <_Z6getMCPv>:
  wd.checkin(); // resets the AWDT count    
}



void getMCP(){
 80a05a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}


 byte error;
    int8_t address;

    address = mcp1.devAddr; 
 80a05a4:	4b37      	ldr	r3, [pc, #220]	; (80a0684 <_Z6getMCPv+0xe4>)
 80a05a6:	f993 400e 	ldrsb.w	r4, [r3, #14]
    // The i2c_scanner uses the  return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
 80a05aa:	f002 fb2f 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a05ae:	4621      	mov	r1, r4
 80a05b0:	f002 f9aa 	bl	80a2908 <_ZN7TwoWire17beginTransmissionEi>
    error = Wire.endTransmission();
 80a05b4:	f002 fb2a 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a05b8:	f002 f9ad 	bl	80a2916 <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
 80a05bc:	b190      	cbz	r0, 80a05e4 <_Z6getMCPv+0x44>
        
    }  
    
    
    
    address = mcp2.devAddr;
 80a05be:	4b32      	ldr	r3, [pc, #200]	; (80a0688 <_Z6getMCPv+0xe8>)
 80a05c0:	f993 400e 	ldrsb.w	r4, [r3, #14]
    // The i2c_scanner uses the return value of
    // the Write.endTransmisstion to see if
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
 80a05c4:	f002 fb22 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a05c8:	4621      	mov	r1, r4
 80a05ca:	f002 f99d 	bl	80a2908 <_ZN7TwoWire17beginTransmissionEi>
    error = Wire.endTransmission();
 80a05ce:	f002 fb1d 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a05d2:	f002 f9a0 	bl	80a2916 <_ZN7TwoWire15endTransmissionEv>
    if (error == 0)
 80a05d6:	2800      	cmp	r0, #0
 80a05d8:	d150      	bne.n	80a067c <_Z6getMCPv+0xdc>
 80a05da:	4f2c      	ldr	r7, [pc, #176]	; (80a068c <_Z6getMCPv+0xec>)
 80a05dc:	4e2c      	ldr	r6, [pc, #176]	; (80a0690 <_Z6getMCPv+0xf0>)
 80a05de:	4d2d      	ldr	r5, [pc, #180]	; (80a0694 <_Z6getMCPv+0xf4>)
 80a05e0:	2404      	movs	r4, #4
 80a05e2:	e028      	b.n	80a0636 <_Z6getMCPv+0x96>
 80a05e4:	4604      	mov	r4, r0

        for(int i=1;i<=4;i++)
        {
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp1.SetConfiguration(i,16,1,2);
 80a05e6:	1c65      	adds	r5, r4, #1
 80a05e8:	2302      	movs	r3, #2
 80a05ea:	2210      	movs	r2, #16
 80a05ec:	b2e9      	uxtb	r1, r5
 80a05ee:	9300      	str	r3, [sp, #0]
 80a05f0:	4824      	ldr	r0, [pc, #144]	; (80a0684 <_Z6getMCPv+0xe4>)
 80a05f2:	2301      	movs	r3, #1
 80a05f4:	f000 fd58 	bl	80a10a8 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>
            Raw_adc[i-1] = mcp1.readADC();
 80a05f8:	4822      	ldr	r0, [pc, #136]	; (80a0684 <_Z6getMCPv+0xe4>)
 80a05fa:	f000 fdbb 	bl	80a1174 <_ZN15CASARIA_MCP34287readADCEv>
 80a05fe:	4b26      	ldr	r3, [pc, #152]	; (80a0698 <_Z6getMCPv+0xf8>)
 80a0600:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
            // Note that the library waits for a complete conversion
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813)* psiFS[i-1];
 80a0604:	f003 fd4a 	bl	80a409c <__aeabi_i2f>
 80a0608:	4924      	ldr	r1, [pc, #144]	; (80a069c <_Z6getMCPv+0xfc>)
 80a060a:	f003 fc91 	bl	80a3f30 <__aeabi_fsub>
 80a060e:	4924      	ldr	r1, [pc, #144]	; (80a06a0 <_Z6getMCPv+0x100>)
 80a0610:	f003 fe4c 	bl	80a42ac <__aeabi_fdiv>
 80a0614:	4b23      	ldr	r3, [pc, #140]	; (80a06a4 <_Z6getMCPv+0x104>)
 80a0616:	4606      	mov	r6, r0
 80a0618:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a061c:	f003 fd3e 	bl	80a409c <__aeabi_i2f>
 80a0620:	4601      	mov	r1, r0
 80a0622:	4630      	mov	r0, r6
 80a0624:	f003 fd8e 	bl	80a4144 <__aeabi_fmul>
 80a0628:	4b1f      	ldr	r3, [pc, #124]	; (80a06a8 <_Z6getMCPv+0x108>)
    error = Wire.endTransmission();
    if (error == 0)
    {


        for(int i=1;i<=4;i++)
 80a062a:	2d04      	cmp	r5, #4
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp1.SetConfiguration(i,16,1,2);
            Raw_adc[i-1] = mcp1.readADC();
            // Note that the library waits for a complete conversion
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813)* psiFS[i-1];
 80a062c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80a0630:	462c      	mov	r4, r5
    error = Wire.endTransmission();
    if (error == 0)
    {


        for(int i=1;i<=4;i++)
 80a0632:	d1d8      	bne.n	80a05e6 <_Z6getMCPv+0x46>
 80a0634:	e7c3      	b.n	80a05be <_Z6getMCPv+0x1e>
    {
        for(int i=4;i<=8;i++)
        {
            // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp2.SetConfiguration(i,16,1,2);
 80a0636:	2302      	movs	r3, #2
 80a0638:	2210      	movs	r2, #16
 80a063a:	b2e1      	uxtb	r1, r4
 80a063c:	9300      	str	r3, [sp, #0]
 80a063e:	4812      	ldr	r0, [pc, #72]	; (80a0688 <_Z6getMCPv+0xe8>)
 80a0640:	2301      	movs	r3, #1
 80a0642:	f000 fd31 	bl	80a10a8 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>

            // Note that the library waits for a complete conversion
            Raw_adc[i-1] = mcp2.readADC();
 80a0646:	4810      	ldr	r0, [pc, #64]	; (80a0688 <_Z6getMCPv+0xe8>)
 80a0648:	f000 fd94 	bl	80a1174 <_ZN15CASARIA_MCP34287readADCEv>
 80a064c:	f847 0f04 	str.w	r0, [r7, #4]!
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813) * psiFS[i-1];
 80a0650:	f003 fd24 	bl	80a409c <__aeabi_i2f>
 80a0654:	4911      	ldr	r1, [pc, #68]	; (80a069c <_Z6getMCPv+0xfc>)
 80a0656:	f003 fc6b 	bl	80a3f30 <__aeabi_fsub>
 80a065a:	4911      	ldr	r1, [pc, #68]	; (80a06a0 <_Z6getMCPv+0x100>)
 80a065c:	f003 fe26 	bl	80a42ac <__aeabi_fdiv>
 80a0660:	4680      	mov	r8, r0
 80a0662:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a0666:	f003 fd19 	bl	80a409c <__aeabi_i2f>
 80a066a:	4601      	mov	r1, r0
 80a066c:	4640      	mov	r0, r8
 80a066e:	f003 fd69 	bl	80a4144 <__aeabi_fmul>
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0)
    {
        for(int i=4;i<=8;i++)
 80a0672:	3401      	adds	r4, #1
 80a0674:	2c09      	cmp	r4, #9
            // This arrangement of the mentioned paarmeters can be changed as per convenience
            mcp2.SetConfiguration(i,16,1,2);

            // Note that the library waits for a complete conversion
            Raw_adc[i-1] = mcp2.readADC();
            psi[i-1] = ((float(Raw_adc[i-1]))-5813)/(29390-5813) * psiFS[i-1];
 80a0676:	f845 0f04 	str.w	r0, [r5, #4]!
    // a device did acknowledge to the address.
    Wire.beginTransmission(address);
    error = Wire.endTransmission();
    if (error == 0)
    {
        for(int i=4;i<=8;i++)
 80a067a:	d1dc      	bne.n	80a0636 <_Z6getMCPv+0x96>
    else
    {  //errors occurred
        
    }  

}
 80a067c:	b002      	add	sp, #8
 80a067e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0682:	bf00      	nop
 80a0684:	20000144 	.word	0x20000144
 80a0688:	20000154 	.word	0x20000154
 80a068c:	20000114 	.word	0x20000114
 80a0690:	080a471c 	.word	0x080a471c
 80a0694:	20000178 	.word	0x20000178
 80a0698:	2000010c 	.word	0x2000010c
 80a069c:	45b5a800 	.word	0x45b5a800
 80a06a0:	46b83200 	.word	0x46b83200
 80a06a4:	080a4714 	.word	0x080a4714
 80a06a8:	20000170 	.word	0x20000170

080a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a06ac:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a06ae:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a06b0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a06b2:	b17c      	cbz	r4, 80a06d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a06b4:	6863      	ldr	r3, [r4, #4]
 80a06b6:	3b01      	subs	r3, #1
 80a06b8:	6063      	str	r3, [r4, #4]
 80a06ba:	b95b      	cbnz	r3, 80a06d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a06bc:	6823      	ldr	r3, [r4, #0]
 80a06be:	4620      	mov	r0, r4
 80a06c0:	689b      	ldr	r3, [r3, #8]
 80a06c2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a06c4:	68a3      	ldr	r3, [r4, #8]
 80a06c6:	3b01      	subs	r3, #1
 80a06c8:	60a3      	str	r3, [r4, #8]
 80a06ca:	b91b      	cbnz	r3, 80a06d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a06cc:	6823      	ldr	r3, [r4, #0]
 80a06ce:	4620      	mov	r0, r4
 80a06d0:	68db      	ldr	r3, [r3, #12]
 80a06d2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a06d4:	4628      	mov	r0, r5
 80a06d6:	bd38      	pop	{r3, r4, r5, pc}

080a06d8 <_Z11publishDatav>:
       // Serial.println("Invalid reading");
      }
      return _temp; 
}   
    
void publishData() {
 80a06d8:	b510      	push	{r4, lr}
  char szInfo[200];
      snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
      celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9],  celsius[10], celsius[11]);
 80a06da:	4c29      	ldr	r4, [pc, #164]	; (80a0780 <_Z11publishDatav+0xa8>)
       // Serial.println("Invalid reading");
      }
      return _temp; 
}   
    
void publishData() {
 80a06dc:	b0cc      	sub	sp, #304	; 0x130
  char szInfo[200];
      snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
      celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9],  celsius[10], celsius[11]);
 80a06de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a06e0:	f003 f886 	bl	80a37f0 <__aeabi_f2d>
 80a06e4:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80a06e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a06ea:	f003 f881 	bl	80a37f0 <__aeabi_f2d>
 80a06ee:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80a06f2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a06f4:	f003 f87c 	bl	80a37f0 <__aeabi_f2d>
 80a06f8:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80a06fc:	6a20      	ldr	r0, [r4, #32]
 80a06fe:	f003 f877 	bl	80a37f0 <__aeabi_f2d>
 80a0702:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80a0706:	69e0      	ldr	r0, [r4, #28]
 80a0708:	f003 f872 	bl	80a37f0 <__aeabi_f2d>
 80a070c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a0710:	69a0      	ldr	r0, [r4, #24]
 80a0712:	f003 f86d 	bl	80a37f0 <__aeabi_f2d>
 80a0716:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a071a:	6960      	ldr	r0, [r4, #20]
 80a071c:	f003 f868 	bl	80a37f0 <__aeabi_f2d>
 80a0720:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0724:	6920      	ldr	r0, [r4, #16]
 80a0726:	f003 f863 	bl	80a37f0 <__aeabi_f2d>
 80a072a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a072e:	68e0      	ldr	r0, [r4, #12]
 80a0730:	f003 f85e 	bl	80a37f0 <__aeabi_f2d>
 80a0734:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a0738:	68a0      	ldr	r0, [r4, #8]
 80a073a:	f003 f859 	bl	80a37f0 <__aeabi_f2d>
 80a073e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0742:	6860      	ldr	r0, [r4, #4]
 80a0744:	f003 f854 	bl	80a37f0 <__aeabi_f2d>
 80a0748:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a074c:	6820      	ldr	r0, [r4, #0]
 80a074e:	f003 f84f 	bl	80a37f0 <__aeabi_f2d>
 80a0752:	4a0c      	ldr	r2, [pc, #48]	; (80a0784 <_Z11publishDatav+0xac>)
 80a0754:	e9cd 0100 	strd	r0, r1, [sp]
 80a0758:	21c8      	movs	r1, #200	; 0xc8
 80a075a:	a81a      	add	r0, sp, #104	; 0x68
 80a075c:	f001 f8ba 	bl	80a18d4 <snprintf>
 80a0760:	4b09      	ldr	r3, [pc, #36]	; (80a0788 <_Z11publishDatav+0xb0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0762:	aa1a      	add	r2, sp, #104	; 0x68
 80a0764:	781b      	ldrb	r3, [r3, #0]
 80a0766:	4909      	ldr	r1, [pc, #36]	; (80a078c <_Z11publishDatav+0xb4>)
 80a0768:	f88d 3000 	strb.w	r3, [sp]
 80a076c:	a818      	add	r0, sp, #96	; 0x60
 80a076e:	233c      	movs	r3, #60	; 0x3c
 80a0770:	f001 fd28 	bl	80a21c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0774:	a819      	add	r0, sp, #100	; 0x64
 80a0776:	f7ff ff99 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorAddresses[4], sensorAddresses[5], sensorAddresses[6], sensorAddresses[7], sensorAddresses[8],sensorAddresses[9],sensorAddresses[10],sensorAddresses[11]);
    Particle.publish("dsAddress", szInfo, PRIVATE);
  
  }
  */
}
 80a077a:	b04c      	add	sp, #304	; 0x130
 80a077c:	bd10      	pop	{r4, pc}
 80a077e:	bf00      	nop
 80a0780:	20000000 	.word	0x20000000
 80a0784:	080a477f 	.word	0x080a477f
 80a0788:	200000a9 	.word	0x200000a9
 80a078c:	080a47bb 	.word	0x080a47bb

080a0790 <_Z15publishPressurev>:
    

void publishPressure(){   
 80a0790:	b510      	push	{r4, lr}
    char szInfo[200];
 
     //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
     // Particle.publish("dsAnalogin",szInfo, PRIVATE );
        snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", psi[0], psi[1], psi[2], psi[3], psi[4], psi[5], psi[6], psi[7]);
 80a0792:	4c1f      	ldr	r4, [pc, #124]	; (80a0810 <_Z15publishPressurev+0x80>)
  }
  */
}
    

void publishPressure(){   
 80a0794:	b0c4      	sub	sp, #272	; 0x110
    char szInfo[200];
 
     //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
     // Particle.publish("dsAnalogin",szInfo, PRIVATE );
        snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", psi[0], psi[1], psi[2], psi[3], psi[4], psi[5], psi[6], psi[7]);
 80a0796:	69e0      	ldr	r0, [r4, #28]
 80a0798:	f003 f82a 	bl	80a37f0 <__aeabi_f2d>
 80a079c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a07a0:	69a0      	ldr	r0, [r4, #24]
 80a07a2:	f003 f825 	bl	80a37f0 <__aeabi_f2d>
 80a07a6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a07aa:	6960      	ldr	r0, [r4, #20]
 80a07ac:	f003 f820 	bl	80a37f0 <__aeabi_f2d>
 80a07b0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a07b4:	6920      	ldr	r0, [r4, #16]
 80a07b6:	f003 f81b 	bl	80a37f0 <__aeabi_f2d>
 80a07ba:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a07be:	68e0      	ldr	r0, [r4, #12]
 80a07c0:	f003 f816 	bl	80a37f0 <__aeabi_f2d>
 80a07c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a07c8:	68a0      	ldr	r0, [r4, #8]
 80a07ca:	f003 f811 	bl	80a37f0 <__aeabi_f2d>
 80a07ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a07d2:	6860      	ldr	r0, [r4, #4]
 80a07d4:	f003 f80c 	bl	80a37f0 <__aeabi_f2d>
 80a07d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a07dc:	6820      	ldr	r0, [r4, #0]
 80a07de:	f003 f807 	bl	80a37f0 <__aeabi_f2d>
 80a07e2:	4a0c      	ldr	r2, [pc, #48]	; (80a0814 <_Z15publishPressurev+0x84>)
 80a07e4:	e9cd 0100 	strd	r0, r1, [sp]
 80a07e8:	21c8      	movs	r1, #200	; 0xc8
 80a07ea:	a812      	add	r0, sp, #72	; 0x48
 80a07ec:	f001 f872 	bl	80a18d4 <snprintf>
 80a07f0:	4b09      	ldr	r3, [pc, #36]	; (80a0818 <_Z15publishPressurev+0x88>)
 80a07f2:	aa12      	add	r2, sp, #72	; 0x48
 80a07f4:	781b      	ldrb	r3, [r3, #0]
 80a07f6:	4909      	ldr	r1, [pc, #36]	; (80a081c <_Z15publishPressurev+0x8c>)
 80a07f8:	f88d 3000 	strb.w	r3, [sp]
 80a07fc:	a810      	add	r0, sp, #64	; 0x40
 80a07fe:	233c      	movs	r3, #60	; 0x3c
 80a0800:	f001 fce0 	bl	80a21c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0804:	a811      	add	r0, sp, #68	; 0x44
 80a0806:	f7ff ff51 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      Particle.publish("ds_psi",szInfo, PRIVATE );
           
}
 80a080a:	b044      	add	sp, #272	; 0x110
 80a080c:	bd10      	pop	{r4, pc}
 80a080e:	bf00      	nop
 80a0810:	20000170 	.word	0x20000170
 80a0814:	080a4793 	.word	0x080a4793
 80a0818:	200000a9 	.word	0x200000a9
 80a081c:	080a47c3 	.word	0x080a47c3

080a0820 <loop>:
  Wire.endTransmission();
  toggle= !toggle;
}


void loop(){
 80a0820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static uint32_t msReverse2 = 0;
  

  static uint32_t now;

  if (msDefrost1 ==0) msDefrost1 = now + defrostTimer/2;
 80a0824:	4e7b      	ldr	r6, [pc, #492]	; (80a0a14 <loop+0x1f4>)
  Wire.endTransmission();
  toggle= !toggle;
}


void loop(){
 80a0826:	b085      	sub	sp, #20
  static uint32_t msReverse2 = 0;
  

  static uint32_t now;

  if (msDefrost1 ==0) msDefrost1 = now + defrostTimer/2;
 80a0828:	6833      	ldr	r3, [r6, #0]
 80a082a:	4c7b      	ldr	r4, [pc, #492]	; (80a0a18 <loop+0x1f8>)
 80a082c:	b92b      	cbnz	r3, 80a083a <loop+0x1a>
 80a082e:	6823      	ldr	r3, [r4, #0]
 80a0830:	f503 23f4 	add.w	r3, r3, #499712	; 0x7a000
 80a0834:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80a0838:	6033      	str	r3, [r6, #0]
  
  if (msDefrost2 ==0) msDefrost2 = now;
 80a083a:	4d78      	ldr	r5, [pc, #480]	; (80a0a1c <loop+0x1fc>)
 80a083c:	682b      	ldr	r3, [r5, #0]
 80a083e:	b90b      	cbnz	r3, 80a0844 <loop+0x24>
 80a0840:	6823      	ldr	r3, [r4, #0]
 80a0842:	602b      	str	r3, [r5, #0]
 
  wd.checkin();
 80a0844:	f7ff fcbe 	bl	80a01c4 <_ZN19ApplicationWatchdog7checkinEv>
 80a0848:	f000 fe76 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
   
  now = millis();


  if (now - msRelaySample >= msRelaySampleTime) {
 80a084c:	4f74      	ldr	r7, [pc, #464]	; (80a0a20 <loop+0x200>)
  
  if (msDefrost2 ==0) msDefrost2 = now;
 
  wd.checkin();
   
  now = millis();
 80a084e:	6020      	str	r0, [r4, #0]


  if (now - msRelaySample >= msRelaySampleTime) {
 80a0850:	683b      	ldr	r3, [r7, #0]
 80a0852:	1ac0      	subs	r0, r0, r3
 80a0854:	f240 736b 	movw	r3, #1899	; 0x76b
 80a0858:	4298      	cmp	r0, r3
 80a085a:	d902      	bls.n	80a0862 <loop+0x42>
 80a085c:	f000 fe6c 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
                        
    msRelaySample = millis();
 80a0860:	6038      	str	r0, [r7, #0]
  }   
  if (now - msDefrost1 >= defrostTimer) {
 80a0862:	6832      	ldr	r2, [r6, #0]
 80a0864:	6823      	ldr	r3, [r4, #0]
 80a0866:	1a9b      	subs	r3, r3, r2
 80a0868:	4a6e      	ldr	r2, [pc, #440]	; (80a0a24 <loop+0x204>)
 80a086a:	4293      	cmp	r3, r2
 80a086c:	d90d      	bls.n	80a088a <loop+0x6a>
    cmdRev1("go"); 
 80a086e:	496e      	ldr	r1, [pc, #440]	; (80a0a28 <loop+0x208>)
 80a0870:	4668      	mov	r0, sp
 80a0872:	f001 f8ca 	bl	80a1a0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0876:	4668      	mov	r0, sp
 80a0878:	f7ff fd98 	bl	80a03ac <_Z7cmdRev16String>
 80a087c:	4668      	mov	r0, sp
 80a087e:	f001 f87d 	bl	80a197c <_ZN6StringD1Ev>
 80a0882:	f000 fe59 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
    msDefrost1 = millis();
 80a0886:	4b63      	ldr	r3, [pc, #396]	; (80a0a14 <loop+0x1f4>)
 80a0888:	6018      	str	r0, [r3, #0]
  }    

  wd.checkin();
 80a088a:	f7ff fc9b 	bl	80a01c4 <_ZN19ApplicationWatchdog7checkinEv>

  if (now - msDefrost2 >= defrostTimer) {
 80a088e:	682a      	ldr	r2, [r5, #0]
 80a0890:	6823      	ldr	r3, [r4, #0]
 80a0892:	1a9b      	subs	r3, r3, r2
 80a0894:	4a63      	ldr	r2, [pc, #396]	; (80a0a24 <loop+0x204>)
 80a0896:	4293      	cmp	r3, r2
 80a0898:	d90d      	bls.n	80a08b6 <loop+0x96>
    cmdRev2("go"); 
 80a089a:	4963      	ldr	r1, [pc, #396]	; (80a0a28 <loop+0x208>)
 80a089c:	4668      	mov	r0, sp
 80a089e:	f001 f8b4 	bl	80a1a0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a08a2:	4668      	mov	r0, sp
 80a08a4:	f7ff fd9c 	bl	80a03e0 <_Z7cmdRev26String>
 80a08a8:	4668      	mov	r0, sp
 80a08aa:	f001 f867 	bl	80a197c <_ZN6StringD1Ev>
 80a08ae:	f000 fe43 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
    msDefrost2 = millis();
 80a08b2:	4b5a      	ldr	r3, [pc, #360]	; (80a0a1c <loop+0x1fc>)
 80a08b4:	6018      	str	r0, [r3, #0]
  }    


  if (now - msTempSample >= msTempSampleTime) {
 80a08b6:	4e5d      	ldr	r6, [pc, #372]	; (80a0a2c <loop+0x20c>)
 80a08b8:	6823      	ldr	r3, [r4, #0]
 80a08ba:	6832      	ldr	r2, [r6, #0]
 80a08bc:	1a9b      	subs	r3, r3, r2
 80a08be:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a08c2:	4293      	cmp	r3, r2
 80a08c4:	d932      	bls.n	80a092c <loop+0x10c>
    if (!HaltTemp){
 80a08c6:	4b5a      	ldr	r3, [pc, #360]	; (80a0a30 <loop+0x210>)
 80a08c8:	781d      	ldrb	r5, [r3, #0]
 80a08ca:	b11d      	cbz	r5, 80a08d4 <loop+0xb4>
 80a08cc:	f000 fe34 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
          }
          
        wd.checkin();
        }
    }
    msTempSample = millis();
 80a08d0:	6030      	str	r0, [r6, #0]
 80a08d2:	e02b      	b.n	80a092c <loop+0x10c>
 80a08d4:	f8df a190 	ldr.w	sl, [pc, #400]	; 80a0a68 <loop+0x248>


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);      
 80a08d8:	f8df 8190 	ldr.w	r8, [pc, #400]	; 80a0a6c <loop+0x24c>
           if (!isnan(temp))  {
             celsius[i] = temp;
          }
          else {
              temp = getTemp(sensorAddresses[i]);
              if (!isnan(temp)) celsius[i] = temp;
 80a08dc:	f8df 9190 	ldr.w	r9, [pc, #400]	; 80a0a70 <loop+0x250>
 80a08e0:	270c      	movs	r7, #12
 80a08e2:	fb07 a705 	mla	r7, r7, r5, sl


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);      
 80a08e6:	4638      	mov	r0, r7
 80a08e8:	f7ff fce6 	bl	80a02b8 <_Z7getTempPh>
 80a08ec:	f003 facc 	bl	80a3e88 <__aeabi_d2f>
            
           if (!isnan(temp))  {
 80a08f0:	4601      	mov	r1, r0


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
          temp = getTemp(sensorAddresses[i]);      
 80a08f2:	4683      	mov	fp, r0
 80a08f4:	f8c8 0000 	str.w	r0, [r8]
            
           if (!isnan(temp))  {
 80a08f8:	f003 fdea 	bl	80a44d0 <__aeabi_fcmpun>
 80a08fc:	b910      	cbnz	r0, 80a0904 <loop+0xe4>
             celsius[i] = temp;
 80a08fe:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 80a0902:	e00d      	b.n	80a0920 <loop+0x100>
          }
          else {
              temp = getTemp(sensorAddresses[i]);
 80a0904:	4638      	mov	r0, r7
 80a0906:	f7ff fcd7 	bl	80a02b8 <_Z7getTempPh>
 80a090a:	f003 fabd 	bl	80a3e88 <__aeabi_d2f>
              if (!isnan(temp)) celsius[i] = temp;
 80a090e:	4601      	mov	r1, r0
            
           if (!isnan(temp))  {
             celsius[i] = temp;
          }
          else {
              temp = getTemp(sensorAddresses[i]);
 80a0910:	4607      	mov	r7, r0
 80a0912:	f8c8 0000 	str.w	r0, [r8]
              if (!isnan(temp)) celsius[i] = temp;
 80a0916:	f003 fddb 	bl	80a44d0 <__aeabi_fcmpun>
 80a091a:	b908      	cbnz	r0, 80a0920 <loop+0x100>
 80a091c:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  }    


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
 80a0920:	3501      	adds	r5, #1
              temp = getTemp(sensorAddresses[i]);
              if (!isnan(temp)) celsius[i] = temp;
              
          }
          
        wd.checkin();
 80a0922:	f7ff fc4f 	bl	80a01c4 <_ZN19ApplicationWatchdog7checkinEv>
  }    


  if (now - msTempSample >= msTempSampleTime) {
    if (!HaltTemp){
        for(int i=0; i < nSENSORS; i++) {
 80a0926:	2d0c      	cmp	r5, #12
 80a0928:	d1da      	bne.n	80a08e0 <loop+0xc0>
 80a092a:	e7cf      	b.n	80a08cc <loop+0xac>
    }
    msTempSample = millis();
  }
  
  
  if (now - msPressureSample >= msPressureSampleTime) {
 80a092c:	4d41      	ldr	r5, [pc, #260]	; (80a0a34 <loop+0x214>)
 80a092e:	6823      	ldr	r3, [r4, #0]
 80a0930:	682a      	ldr	r2, [r5, #0]
 80a0932:	1a9b      	subs	r3, r3, r2
 80a0934:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a0938:	d344      	bcc.n	80a09c4 <loop+0x1a4>
    getMCP();
 80a093a:	f7ff fe31 	bl	80a05a0 <_Z6getMCPv>
 80a093e:	f000 fdfb 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
    msPressureSample = millis();
 80a0942:	6028      	str	r0, [r5, #0]
 80a0944:	f000 fdf8 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
    msReverse1 = millis() - msStartReverse1;
 80a0948:	4b3b      	ldr	r3, [pc, #236]	; (80a0a38 <loop+0x218>)
 80a094a:	4d3c      	ldr	r5, [pc, #240]	; (80a0a3c <loop+0x21c>)
 80a094c:	681b      	ldr	r3, [r3, #0]
    msReverse2 = millis() - msStartReverse2;
 80a094e:	4e3c      	ldr	r6, [pc, #240]	; (80a0a40 <loop+0x220>)
  
  
  if (now - msPressureSample >= msPressureSampleTime) {
    getMCP();
    msPressureSample = millis();
    msReverse1 = millis() - msStartReverse1;
 80a0950:	1ac0      	subs	r0, r0, r3
 80a0952:	6028      	str	r0, [r5, #0]
 80a0954:	f000 fdf0 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
    msReverse2 = millis() - msStartReverse2;
 80a0958:	4b3a      	ldr	r3, [pc, #232]	; (80a0a44 <loop+0x224>)
 80a095a:	681b      	ldr	r3, [r3, #0]
 80a095c:	1ac0      	subs	r0, r0, r3
 80a095e:	6030      	str	r0, [r6, #0]
    
    wd.checkin();
 80a0960:	f7ff fc30 	bl	80a01c4 <_ZN19ApplicationWatchdog7checkinEv>
    if ((InReverse1) && (msReverse1 > 12000) && (psi[4]>290)) {
 80a0964:	4b38      	ldr	r3, [pc, #224]	; (80a0a48 <loop+0x228>)
 80a0966:	781b      	ldrb	r3, [r3, #0]
 80a0968:	b1a3      	cbz	r3, 80a0994 <loop+0x174>
 80a096a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80a096e:	682a      	ldr	r2, [r5, #0]
 80a0970:	429a      	cmp	r2, r3
 80a0972:	d90f      	bls.n	80a0994 <loop+0x174>
 80a0974:	4b35      	ldr	r3, [pc, #212]	; (80a0a4c <loop+0x22c>)
 80a0976:	4936      	ldr	r1, [pc, #216]	; (80a0a50 <loop+0x230>)
 80a0978:	6918      	ldr	r0, [r3, #16]
 80a097a:	f003 fd9f 	bl	80a44bc <__aeabi_fcmpgt>
 80a097e:	b148      	cbz	r0, 80a0994 <loop+0x174>
      //if ( (psi[4]>300)) {
        cmdStopDefrost1("OFF");
 80a0980:	4934      	ldr	r1, [pc, #208]	; (80a0a54 <loop+0x234>)
 80a0982:	4668      	mov	r0, sp
 80a0984:	f001 f841 	bl	80a1a0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a0988:	4668      	mov	r0, sp
 80a098a:	f7ff fceb 	bl	80a0364 <_Z15cmdStopDefrost16String>
 80a098e:	4668      	mov	r0, sp
 80a0990:	f000 fff4 	bl	80a197c <_ZN6StringD1Ev>
    }
    if ((InReverse2) && (msReverse2 > 12000) && (psi[0]>290)) {
 80a0994:	4b30      	ldr	r3, [pc, #192]	; (80a0a58 <loop+0x238>)
 80a0996:	781b      	ldrb	r3, [r3, #0]
 80a0998:	b1a3      	cbz	r3, 80a09c4 <loop+0x1a4>
 80a099a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80a099e:	6832      	ldr	r2, [r6, #0]
 80a09a0:	429a      	cmp	r2, r3
 80a09a2:	d90f      	bls.n	80a09c4 <loop+0x1a4>
 80a09a4:	4b29      	ldr	r3, [pc, #164]	; (80a0a4c <loop+0x22c>)
 80a09a6:	492a      	ldr	r1, [pc, #168]	; (80a0a50 <loop+0x230>)
 80a09a8:	6818      	ldr	r0, [r3, #0]
 80a09aa:	f003 fd87 	bl	80a44bc <__aeabi_fcmpgt>
 80a09ae:	b148      	cbz	r0, 80a09c4 <loop+0x1a4>
    //  if ( (psi[0]>300)) {
        cmdStopDefrost2("OFF");
 80a09b0:	4928      	ldr	r1, [pc, #160]	; (80a0a54 <loop+0x234>)
 80a09b2:	4668      	mov	r0, sp
 80a09b4:	f001 f829 	bl	80a1a0a <_ZN6StringC1EPK19__FlashStringHelper>
 80a09b8:	4668      	mov	r0, sp
 80a09ba:	f7ff fce3 	bl	80a0384 <_Z15cmdStopDefrost26String>
 80a09be:	4668      	mov	r0, sp
 80a09c0:	f000 ffdc 	bl	80a197c <_ZN6StringD1Ev>
    }
  }   


  if (now - msPublish2 >= msPublishTime2) {
 80a09c4:	4d25      	ldr	r5, [pc, #148]	; (80a0a5c <loop+0x23c>)
 80a09c6:	6823      	ldr	r3, [r4, #0]
 80a09c8:	682a      	ldr	r2, [r5, #0]
 80a09ca:	1a9b      	subs	r3, r3, r2
 80a09cc:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a09d0:	4293      	cmp	r3, r2
 80a09d2:	d904      	bls.n	80a09de <loop+0x1be>
 80a09d4:	f000 fdb0 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
    msPublish2 = millis();
 80a09d8:	6028      	str	r0, [r5, #0]
    publishPressure();
 80a09da:	f7ff fed9 	bl	80a0790 <_Z15publishPressurev>
    //publishStatus();
    //publishDebug();
}

  if (now - msPublish3 >= msPublishTime3){
 80a09de:	4d20      	ldr	r5, [pc, #128]	; (80a0a60 <loop+0x240>)
 80a09e0:	6823      	ldr	r3, [r4, #0]
 80a09e2:	682a      	ldr	r2, [r5, #0]
 80a09e4:	1a9b      	subs	r3, r3, r2
 80a09e6:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80a09ea:	d302      	bcc.n	80a09f2 <loop+0x1d2>
 80a09ec:	f000 fda4 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
      
      msPublish3 = millis();
 80a09f0:	6028      	str	r0, [r5, #0]

  }

  if (now - msPublish >= msPublishTime) {
 80a09f2:	4d1c      	ldr	r5, [pc, #112]	; (80a0a64 <loop+0x244>)
 80a09f4:	6823      	ldr	r3, [r4, #0]
 80a09f6:	682a      	ldr	r2, [r5, #0]
 80a09f8:	1a9b      	subs	r3, r3, r2
 80a09fa:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80a09fe:	d304      	bcc.n	80a0a0a <loop+0x1ea>

    publishData();
 80a0a00:	f7ff fe6a 	bl	80a06d8 <_Z11publishDatav>
 80a0a04:	f000 fd98 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
    //ModulateDamper(); 
    msPublish = millis();    
 80a0a08:	6028      	str	r0, [r5, #0]
  }    
  wd.checkin(); // resets the AWDT count    
 80a0a0a:	f7ff fbdb 	bl	80a01c4 <_ZN19ApplicationWatchdog7checkinEv>
}
 80a0a0e:	b005      	add	sp, #20
 80a0a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0a14:	20000134 	.word	0x20000134
 80a0a18:	20000130 	.word	0x20000130
 80a0a1c:	20000138 	.word	0x20000138
 80a0a20:	20000108 	.word	0x20000108
 80a0a24:	000f423f 	.word	0x000f423f
 80a0a28:	080a47ca 	.word	0x080a47ca
 80a0a2c:	20000168 	.word	0x20000168
 80a0a30:	200000a8 	.word	0x200000a8
 80a0a34:	2000012c 	.word	0x2000012c
 80a0a38:	200000ac 	.word	0x200000ac
 80a0a3c:	200001ac 	.word	0x200001ac
 80a0a40:	200001b0 	.word	0x200001b0
 80a0a44:	200000cc 	.word	0x200000cc
 80a0a48:	20000164 	.word	0x20000164
 80a0a4c:	20000170 	.word	0x20000170
 80a0a50:	43910000 	.word	0x43910000
 80a0a54:	080a47cd 	.word	0x080a47cd
 80a0a58:	20000165 	.word	0x20000165
 80a0a5c:	2000013c 	.word	0x2000013c
 80a0a60:	20000140 	.word	0x20000140
 80a0a64:	200000c8 	.word	0x200000c8
 80a0a68:	40024000 	.word	0x40024000
 80a0a6c:	2000016c 	.word	0x2000016c
 80a0a70:	20000000 	.word	0x20000000

080a0a74 <_GLOBAL__sub_I_msStartReverse1>:
int triggerRelay(String command){

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
      return 1;
}
 80a0a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0a76:	4b1f      	ldr	r3, [pc, #124]	; (80a0af4 <_GLOBAL__sub_I_msStartReverse1+0x80>)
 
// SYSTEM_THREAD(ENABLED);

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(20000, System.reset);
 80a0a78:	4e1f      	ldr	r6, [pc, #124]	; (80a0af8 <_GLOBAL__sub_I_msStartReverse1+0x84>)
 80a0a7a:	2501      	movs	r5, #1
 80a0a7c:	4c1f      	ldr	r4, [pc, #124]	; (80a0afc <_GLOBAL__sub_I_msStartReverse1+0x88>)
 80a0a7e:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a0a80:	f000 fd0a 	bl	80a1498 <HAL_Pin_Map>
 80a0a84:	f44f 7300 	mov.w	r3, #512	; 0x200
 80a0a88:	4a1d      	ldr	r2, [pc, #116]	; (80a0b00 <_GLOBAL__sub_I_msStartReverse1+0x8c>)
 80a0a8a:	f644 6120 	movw	r1, #20000	; 0x4e20
 80a0a8e:	4630      	mov	r0, r6
 80a0a90:	f7ff fba0 	bl	80a01d4 <_ZN19ApplicationWatchdogC1EjPFvvEj>
 80a0a94:	4630      	mov	r0, r6
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
DS18B20 ds18b20(pinOneWire);
 80a0a96:	4e1b      	ldr	r6, [pc, #108]	; (80a0b04 <_GLOBAL__sub_I_msStartReverse1+0x90>)
 
// SYSTEM_THREAD(ENABLED);

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(20000, System.reset);
 80a0a98:	4622      	mov	r2, r4
 80a0a9a:	491b      	ldr	r1, [pc, #108]	; (80a0b08 <_GLOBAL__sub_I_msStartReverse1+0x94>)
 80a0a9c:	f002 f8d6 	bl	80a2c4c <__aeabi_atexit>
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
DS18B20 ds18b20(pinOneWire);
 80a0aa0:	2200      	movs	r2, #0
 80a0aa2:	2104      	movs	r1, #4
 80a0aa4:	4630      	mov	r0, r6
 80a0aa6:	f000 f9f7 	bl	80a0e98 <_ZN7DS18B20C1Etb>
 80a0aaa:	4630      	mov	r0, r6
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68);  
 80a0aac:	4e17      	ldr	r6, [pc, #92]	; (80a0b0c <_GLOBAL__sub_I_msStartReverse1+0x98>)
ApplicationWatchdog wd(20000, System.reset);
// Initialize objects from the lib

const int nSENSORS =12;
                                                        
DS18B20 ds18b20(pinOneWire);
 80a0aae:	4622      	mov	r2, r4
 80a0ab0:	4917      	ldr	r1, [pc, #92]	; (80a0b10 <_GLOBAL__sub_I_msStartReverse1+0x9c>)
 80a0ab2:	f002 f8cb 	bl	80a2c4c <__aeabi_atexit>
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68);  
 80a0ab6:	4f17      	ldr	r7, [pc, #92]	; (80a0b14 <_GLOBAL__sub_I_msStartReverse1+0xa0>)
 80a0ab8:	2168      	movs	r1, #104	; 0x68
 80a0aba:	4630      	mov	r0, r6
 80a0abc:	f000 fae4 	bl	80a1088 <_ZN15CASARIA_MCP3428C1Eh>
 80a0ac0:	4630      	mov	r0, r6
CASARIA_MCP3428  mcp2(0x6E); 
 80a0ac2:	4e15      	ldr	r6, [pc, #84]	; (80a0b18 <_GLOBAL__sub_I_msStartReverse1+0xa4>)
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428  mcp1(0x68);  
 80a0ac4:	4622      	mov	r2, r4
 80a0ac6:	4639      	mov	r1, r7
 80a0ac8:	f002 f8c0 	bl	80a2c4c <__aeabi_atexit>
CASARIA_MCP3428  mcp2(0x6E); 
 80a0acc:	216e      	movs	r1, #110	; 0x6e
 80a0ace:	4630      	mov	r0, r6
 80a0ad0:	f000 fada 	bl	80a1088 <_ZN15CASARIA_MCP3428C1Eh>
 80a0ad4:	4622      	mov	r2, r4
 80a0ad6:	4639      	mov	r1, r7
 80a0ad8:	4630      	mov	r0, r6
 80a0ada:	f002 f8b7 	bl	80a2c4c <__aeabi_atexit>

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true);  // Use the default address, but also turn on debugging
 80a0ade:	462a      	mov	r2, r5
 80a0ae0:	2140      	movs	r1, #64	; 0x40
 80a0ae2:	480e      	ldr	r0, [pc, #56]	; (80a0b1c <_GLOBAL__sub_I_msStartReverse1+0xa8>)
 80a0ae4:	f000 fb80 	bl	80a11e8 <_ZN16Adafruit_PCA9685C1Ehb>
int triggerRelay(String command){

      //relays.relayTalk(relayCmd(command));
      relays.relayTalk(command);
      return 1;
}
 80a0ae8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true);  // Use the default address, but also turn on debugging

CASARIA_MCP23017 relays;  //not used
 80a0aec:	480c      	ldr	r0, [pc, #48]	; (80a0b20 <_GLOBAL__sub_I_msStartReverse1+0xac>)
 80a0aee:	f000 b9b5 	b.w	80a0e5c <_ZN16CASARIA_MCP23017C1Ev>
 80a0af2:	bf00      	nop
 80a0af4:	200000a9 	.word	0x200000a9
 80a0af8:	200000b0 	.word	0x200000b0
 80a0afc:	200000a4 	.word	0x200000a4
 80a0b00:	080a195d 	.word	0x080a195d
 80a0b04:	20000190 	.word	0x20000190
 80a0b08:	080a0183 	.word	0x080a0183
 80a0b0c:	20000144 	.word	0x20000144
 80a0b10:	080a0eef 	.word	0x080a0eef
 80a0b14:	080a10a1 	.word	0x080a10a1
 80a0b18:	20000154 	.word	0x20000154
 80a0b1c:	200000d0 	.word	0x200000d0
 80a0b20:	200000d4 	.word	0x200000d4

080a0b24 <_GLOBAL__sub_I_lastTime>:
 80a0b24:	f000 bcb8 	b.w	80a1498 <HAL_Pin_Map>

080a0b28 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a0b28:	8802      	ldrh	r2, [r0, #0]
 80a0b2a:	231c      	movs	r3, #28
 80a0b2c:	4353      	muls	r3, r2
 80a0b2e:	6842      	ldr	r2, [r0, #4]
 80a0b30:	18d1      	adds	r1, r2, r3
 80a0b32:	58d3      	ldr	r3, [r2, r3]
 80a0b34:	888a      	ldrh	r2, [r1, #4]
 80a0b36:	835a      	strh	r2, [r3, #26]
 80a0b38:	4770      	bx	lr

080a0b3a <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0b3a:	b538      	push	{r3, r4, r5, lr}
 80a0b3c:	4604      	mov	r4, r0
 80a0b3e:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a0b40:	f000 fcaa 	bl	80a1498 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a0b44:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a0b46:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a0b48:	4628      	mov	r0, r5
 80a0b4a:	f001 ffcf 	bl	80a2aec <pinMode>
    _pin = pin;
 80a0b4e:	8025      	strh	r5, [r4, #0]
}
 80a0b50:	4620      	mov	r0, r4
 80a0b52:	bd38      	pop	{r3, r4, r5, pc}

080a0b54 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a0b54:	b538      	push	{r3, r4, r5, lr}
 80a0b56:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a0b58:	f001 fde8 	bl	80a272c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0b5c:	2100      	movs	r1, #0
 80a0b5e:	8828      	ldrh	r0, [r5, #0]
 80a0b60:	f000 fca2 	bl	80a14a8 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a0b64:	f001 fde4 	bl	80a2730 <_Z10interruptsv>
 80a0b68:	247d      	movs	r4, #125	; 0x7d
 80a0b6a:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 80a0b6c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a0b70:	d02d      	beq.n	80a0bce <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a0b72:	2002      	movs	r0, #2
 80a0b74:	f000 fcd8 	bl	80a1528 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0b78:	8828      	ldrh	r0, [r5, #0]
 80a0b7a:	f000 fc9d 	bl	80a14b8 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 80a0b7e:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a0b82:	d0f2      	beq.n	80a0b6a <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 80a0b84:	f001 fdd2 	bl	80a272c <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a0b88:	4628      	mov	r0, r5
 80a0b8a:	f7ff ffcd 	bl	80a0b28 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0b8e:	2101      	movs	r1, #1
 80a0b90:	8828      	ldrh	r0, [r5, #0]
 80a0b92:	f000 fc89 	bl	80a14a8 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 80a0b96:	f001 fdcb 	bl	80a2730 <_Z10interruptsv>
 80a0b9a:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a0b9e:	f000 fcc3 	bl	80a1528 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 80a0ba2:	f001 fdc3 	bl	80a272c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0ba6:	2100      	movs	r1, #0
 80a0ba8:	8828      	ldrh	r0, [r5, #0]
 80a0baa:	f000 fc7d 	bl	80a14a8 <HAL_Pin_Mode>
 80a0bae:	2046      	movs	r0, #70	; 0x46
 80a0bb0:	f000 fcba 	bl	80a1528 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0bb4:	8828      	ldrh	r0, [r5, #0]
 80a0bb6:	f000 fc7f 	bl	80a14b8 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a0bba:	b2c0      	uxtb	r0, r0
 80a0bbc:	fab0 f480 	clz	r4, r0

    interrupts();
 80a0bc0:	f001 fdb6 	bl	80a2730 <_Z10interruptsv>
 80a0bc4:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a0bc8:	0964      	lsrs	r4, r4, #5
 80a0bca:	f000 fcad 	bl	80a1528 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 80a0bce:	4620      	mov	r0, r4
 80a0bd0:	bd38      	pop	{r3, r4, r5, pc}

080a0bd2 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a0bd2:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a0bd4:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a0bd8:	4604      	mov	r4, r0
    if (v & 1) {
 80a0bda:	d013      	beq.n	80a0c04 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a0bdc:	f001 fda6 	bl	80a272c <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a0be0:	4620      	mov	r0, r4
 80a0be2:	f7ff ffa1 	bl	80a0b28 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0be6:	2101      	movs	r1, #1
 80a0be8:	8820      	ldrh	r0, [r4, #0]
 80a0bea:	f000 fc5d 	bl	80a14a8 <HAL_Pin_Mode>
 80a0bee:	200a      	movs	r0, #10
 80a0bf0:	f000 fc9a 	bl	80a1528 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0bf4:	8820      	ldrh	r0, [r4, #0]
 80a0bf6:	2100      	movs	r1, #0
 80a0bf8:	f000 fc56 	bl	80a14a8 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80a0bfc:	f001 fd98 	bl	80a2730 <_Z10interruptsv>
 80a0c00:	2037      	movs	r0, #55	; 0x37
 80a0c02:	e012      	b.n	80a0c2a <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80a0c04:	f001 fd92 	bl	80a272c <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a0c08:	4620      	mov	r0, r4
 80a0c0a:	f7ff ff8d 	bl	80a0b28 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0c0e:	2101      	movs	r1, #1
 80a0c10:	8820      	ldrh	r0, [r4, #0]
 80a0c12:	f000 fc49 	bl	80a14a8 <HAL_Pin_Mode>
 80a0c16:	2041      	movs	r0, #65	; 0x41
 80a0c18:	f000 fc86 	bl	80a1528 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0c1c:	8820      	ldrh	r0, [r4, #0]
 80a0c1e:	4629      	mov	r1, r5
 80a0c20:	f000 fc42 	bl	80a14a8 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80a0c24:	f001 fd84 	bl	80a2730 <_Z10interruptsv>
 80a0c28:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80a0c2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0c2e:	f000 bc7b 	b.w	80a1528 <HAL_Delay_Microseconds>

080a0c32 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a0c32:	b510      	push	{r4, lr}
 80a0c34:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80a0c36:	f001 fd79 	bl	80a272c <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a0c3a:	4620      	mov	r0, r4
 80a0c3c:	f7ff ff74 	bl	80a0b28 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0c40:	2101      	movs	r1, #1
 80a0c42:	8820      	ldrh	r0, [r4, #0]
 80a0c44:	f000 fc30 	bl	80a14a8 <HAL_Pin_Mode>
 80a0c48:	2003      	movs	r0, #3
 80a0c4a:	f000 fc6d 	bl	80a1528 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a0c4e:	2100      	movs	r1, #0
 80a0c50:	8820      	ldrh	r0, [r4, #0]
 80a0c52:	f000 fc29 	bl	80a14a8 <HAL_Pin_Mode>
 80a0c56:	200a      	movs	r0, #10
 80a0c58:	f000 fc66 	bl	80a1528 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a0c5c:	8820      	ldrh	r0, [r4, #0]
 80a0c5e:	f000 fc2b 	bl	80a14b8 <HAL_GPIO_Read>
 80a0c62:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 80a0c64:	f001 fd64 	bl	80a2730 <_Z10interruptsv>
 80a0c68:	2035      	movs	r0, #53	; 0x35
 80a0c6a:	f000 fc5d 	bl	80a1528 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 80a0c6e:	b2e0      	uxtb	r0, r4
 80a0c70:	bd10      	pop	{r4, pc}

080a0c72 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 80a0c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a0c76:	4605      	mov	r5, r0
 80a0c78:	4688      	mov	r8, r1
 80a0c7a:	4617      	mov	r7, r2
 80a0c7c:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0c7e:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a0c80:	ea18 0f04 	tst.w	r8, r4
 80a0c84:	bf14      	ite	ne
 80a0c86:	2101      	movne	r1, #1
 80a0c88:	2100      	moveq	r1, #0
 80a0c8a:	4628      	mov	r0, r5
 80a0c8c:	f7ff ffa1 	bl	80a0bd2 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0c90:	0064      	lsls	r4, r4, #1
 80a0c92:	3e01      	subs	r6, #1
 80a0c94:	b2e4      	uxtb	r4, r4
 80a0c96:	d1f3      	bne.n	80a0c80 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 80a0c98:	b18f      	cbz	r7, 80a0cbe <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 80a0c9a:	f001 fd47 	bl	80a272c <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0c9e:	882a      	ldrh	r2, [r5, #0]
 80a0ca0:	231c      	movs	r3, #28
 80a0ca2:	4353      	muls	r3, r2
 80a0ca4:	686a      	ldr	r2, [r5, #4]
 80a0ca6:	18d1      	adds	r1, r2, r3
 80a0ca8:	58d3      	ldr	r3, [r2, r3]
 80a0caa:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0cac:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a0cae:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a0cb0:	8828      	ldrh	r0, [r5, #0]
 80a0cb2:	f000 fbf9 	bl	80a14a8 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a0cb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 80a0cba:	f001 bd39 	b.w	80a2730 <_Z10interruptsv>
 80a0cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a0cc2 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 80a0cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0cc4:	4607      	mov	r7, r0
 80a0cc6:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a0cc8:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0cca:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a0ccc:	4638      	mov	r0, r7
 80a0cce:	f7ff ffb0 	bl	80a0c32 <_ZN7OneWire8read_bitEv>
 80a0cd2:	b100      	cbz	r0, 80a0cd6 <_ZN7OneWire4readEv+0x14>
 80a0cd4:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a0cd6:	0064      	lsls	r4, r4, #1
 80a0cd8:	3e01      	subs	r6, #1
 80a0cda:	b2e4      	uxtb	r4, r4
 80a0cdc:	d1f6      	bne.n	80a0ccc <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 80a0cde:	4628      	mov	r0, r5
 80a0ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a0ce2 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0ce2:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0ce4:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0ce6:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0ce8:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a0cea:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 80a0cec:	f7ff ffc1 	bl	80a0c72 <_ZN7OneWire5writeEhh>
 80a0cf0:	1e65      	subs	r5, r4, #1
 80a0cf2:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80a0cf4:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a0cf8:	2200      	movs	r2, #0
 80a0cfa:	4630      	mov	r0, r6
 80a0cfc:	f7ff ffb9 	bl	80a0c72 <_ZN7OneWire5writeEhh>
 80a0d00:	42a5      	cmp	r5, r4
 80a0d02:	d1f7      	bne.n	80a0cf4 <_ZN7OneWire6selectEPKh+0x12>
}
 80a0d04:	bd70      	pop	{r4, r5, r6, pc}

080a0d06 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
 80a0d06:	2200      	movs	r2, #0
 80a0d08:	21cc      	movs	r1, #204	; 0xcc
 80a0d0a:	f7ff bfb2 	b.w	80a0c72 <_ZN7OneWire5writeEhh>

080a0d0e <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a0d0e:	2300      	movs	r3, #0
 80a0d10:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a0d12:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a0d14:	7443      	strb	r3, [r0, #17]
 80a0d16:	f100 0210 	add.w	r2, r0, #16
 80a0d1a:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a0d1c:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80a0d20:	4282      	cmp	r2, r0
 80a0d22:	d1fb      	bne.n	80a0d1c <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80a0d24:	4770      	bx	lr

080a0d26 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0d26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0d2a:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a0d2c:	4604      	mov	r4, r0
 80a0d2e:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a0d30:	2d00      	cmp	r5, #0
 80a0d32:	d15e      	bne.n	80a0df2 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80a0d34:	f7ff ff0e 	bl	80a0b54 <_ZN7OneWire5resetEv>
 80a0d38:	b920      	cbnz	r0, 80a0d44 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80a0d3a:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a0d3c:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a0d3e:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a0d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a0d44:	462a      	mov	r2, r5
 80a0d46:	21f0      	movs	r1, #240	; 0xf0
 80a0d48:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a0d4a:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a0d4c:	f7ff ff91 	bl	80a0c72 <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a0d50:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0d52:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a0d54:	4620      	mov	r0, r4
 80a0d56:	f7ff ff6c 	bl	80a0c32 <_ZN7OneWire8read_bitEv>
 80a0d5a:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a0d5c:	4620      	mov	r0, r4
 80a0d5e:	f7ff ff68 	bl	80a0c32 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a0d62:	f1b9 0f01 	cmp.w	r9, #1
 80a0d66:	d102      	bne.n	80a0d6e <_ZN7OneWire6searchEPh+0x48>
 80a0d68:	2801      	cmp	r0, #1
 80a0d6a:	d11b      	bne.n	80a0da4 <_ZN7OneWire6searchEPh+0x7e>
 80a0d6c:	e037      	b.n	80a0dde <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 80a0d6e:	4581      	cmp	r9, r0
 80a0d70:	eb04 0305 	add.w	r3, r4, r5
 80a0d74:	d11e      	bne.n	80a0db4 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a0d76:	7c22      	ldrb	r2, [r4, #16]
 80a0d78:	4297      	cmp	r7, r2
 80a0d7a:	d207      	bcs.n	80a0d8c <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a0d7c:	7a1a      	ldrb	r2, [r3, #8]
 80a0d7e:	4216      	tst	r6, r2
 80a0d80:	bf14      	ite	ne
 80a0d82:	f04f 0901 	movne.w	r9, #1
 80a0d86:	f04f 0900 	moveq.w	r9, #0
 80a0d8a:	e004      	b.n	80a0d96 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a0d8c:	bf0c      	ite	eq
 80a0d8e:	f04f 0901 	moveq.w	r9, #1
 80a0d92:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 80a0d96:	f1b9 0f00 	cmp.w	r9, #0
 80a0d9a:	d103      	bne.n	80a0da4 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a0d9c:	2f08      	cmp	r7, #8
 80a0d9e:	d808      	bhi.n	80a0db2 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a0da0:	7467      	strb	r7, [r4, #17]
 80a0da2:	e006      	b.n	80a0db2 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a0da4:	1962      	adds	r2, r4, r5
 80a0da6:	7a13      	ldrb	r3, [r2, #8]
 80a0da8:	f04f 0901 	mov.w	r9, #1
 80a0dac:	4333      	orrs	r3, r6
 80a0dae:	7213      	strb	r3, [r2, #8]
 80a0db0:	e004      	b.n	80a0dbc <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a0db2:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a0db4:	7a1a      	ldrb	r2, [r3, #8]
 80a0db6:	ea22 0206 	bic.w	r2, r2, r6
 80a0dba:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a0dbc:	4649      	mov	r1, r9
 80a0dbe:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a0dc0:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a0dc2:	f7ff ff06 	bl	80a0bd2 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a0dc6:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a0dca:	bf04      	itt	eq
 80a0dcc:	3501      	addeq	r5, #1
 80a0dce:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0dd0:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a0dd4:	bf08      	it	eq
 80a0dd6:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a0dd8:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a0dda:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a0ddc:	d9ba      	bls.n	80a0d54 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a0dde:	2f40      	cmp	r7, #64	; 0x40
 80a0de0:	d907      	bls.n	80a0df2 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a0de2:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a0de6:	f1ba 0f00 	cmp.w	sl, #0
 80a0dea:	d112      	bne.n	80a0e12 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a0dec:	2301      	movs	r3, #1
 80a0dee:	74a3      	strb	r3, [r4, #18]
 80a0df0:	e00f      	b.n	80a0e12 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a0df2:	2000      	movs	r0, #0
 80a0df4:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a0df6:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a0df8:	7460      	strb	r0, [r4, #17]
 80a0dfa:	1de3      	adds	r3, r4, #7
 80a0dfc:	f108 38ff 	add.w	r8, r8, #4294967295
 80a0e00:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a0e02:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a0e06:	42a3      	cmp	r3, r4
 80a0e08:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a0e0c:	d1f9      	bne.n	80a0e02 <_ZN7OneWire6searchEPh+0xdc>
 80a0e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80a0e12:	7a23      	ldrb	r3, [r4, #8]
 80a0e14:	2b00      	cmp	r3, #0
 80a0e16:	d0ec      	beq.n	80a0df2 <_ZN7OneWire6searchEPh+0xcc>
 80a0e18:	2001      	movs	r0, #1
 80a0e1a:	e7ee      	b.n	80a0dfa <_ZN7OneWire6searchEPh+0xd4>

080a0e1c <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a0e1c:	b530      	push	{r4, r5, lr}
 80a0e1e:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a0e20:	2000      	movs	r0, #0

    while (len--) {
 80a0e22:	3901      	subs	r1, #1
 80a0e24:	b2c9      	uxtb	r1, r1
 80a0e26:	29ff      	cmp	r1, #255	; 0xff
 80a0e28:	d013      	beq.n	80a0e52 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80a0e2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a0e2e:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a0e30:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a0e34:	f013 0f01 	tst.w	r3, #1
 80a0e38:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a0e3c:	bf1c      	itt	ne
 80a0e3e:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a0e42:	b2d8      	uxtbne	r0, r3
 80a0e44:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0e46:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80a0e4a:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a0e4e:	d1ef      	bne.n	80a0e30 <_ZN7OneWire4crc8EPhh+0x14>
 80a0e50:	e7e7      	b.n	80a0e22 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80a0e52:	bd30      	pop	{r4, r5, pc}

080a0e54 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a0e54:	f000 bb20 	b.w	80a1498 <HAL_Pin_Map>

080a0e58 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a0e58:	f000 bb1e 	b.w	80a1498 <HAL_Pin_Map>

080a0e5c <_ZN16CASARIA_MCP23017C1Ev>:

//Comment line below out to turn off Serial logging
//#define LOGGING

//Constructor
CASARIA_MCP23017::CASARIA_MCP23017(){
 80a0e5c:	4603      	mov	r3, r0
 80a0e5e:	4909      	ldr	r1, [pc, #36]	; (80a0e84 <_ZN16CASARIA_MCP23017C1Ev+0x28>)
 80a0e60:	f100 020c 	add.w	r2, r0, #12
 80a0e64:	c903      	ldmia	r1, {r0, r1}
 80a0e66:	e882 0003 	stmia.w	r2, {r0, r1}
 80a0e6a:	2200      	movs	r2, #0
 80a0e6c:	615a      	str	r2, [r3, #20]
 80a0e6e:	619a      	str	r2, [r3, #24]
 80a0e70:	771a      	strb	r2, [r3, #28]
 80a0e72:	621a      	str	r2, [r3, #32]
 80a0e74:	2120      	movs	r1, #32
 80a0e76:	629a      	str	r2, [r3, #40]	; 0x28
 80a0e78:	220a      	movs	r2, #10
 80a0e7a:	6259      	str	r1, [r3, #36]	; 0x24
 80a0e7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80a0e80:	4618      	mov	r0, r3
 80a0e82:	4770      	bx	lr
 80a0e84:	080a47d4 	.word	0x080a47d4

080a0e88 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev>:
 80a0e88:	4b02      	ldr	r3, [pc, #8]	; (80a0e94 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev+0xc>)
 80a0e8a:	2200      	movs	r2, #0
 80a0e8c:	701a      	strb	r2, [r3, #0]
 80a0e8e:	f000 bb03 	b.w	80a1498 <HAL_Pin_Map>
 80a0e92:	bf00      	nop
 80a0e94:	200001b4 	.word	0x200001b4

080a0e98 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a0e98:	b570      	push	{r4, r5, r6, lr}
 80a0e9a:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
 80a0e9c:	2300      	movs	r3, #0
 80a0e9e:	6063      	str	r3, [r4, #4]
 80a0ea0:	60a3      	str	r3, [r4, #8]
 80a0ea2:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
 80a0ea4:	6123      	str	r3, [r4, #16]
 80a0ea6:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
 80a0ea8:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
 80a0eaa:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
 80a0eac:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
 80a0eae:	2014      	movs	r0, #20
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a0eb0:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
 80a0eb2:	f7ff f8f4 	bl	80a009e <_Znwj>
 80a0eb6:	4605      	mov	r5, r0
 80a0eb8:	b110      	cbz	r0, 80a0ec0 <_ZN7DS18B20C1Etb+0x28>
 80a0eba:	4631      	mov	r1, r6
 80a0ebc:	f7ff fe3d 	bl	80a0b3a <_ZN7OneWireC1Et>
 80a0ec0:	6025      	str	r5, [r4, #0]
}
 80a0ec2:	4620      	mov	r0, r4
 80a0ec4:	bd70      	pop	{r4, r5, r6, pc}

080a0ec6 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a0ec6:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a0ec8:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a0ecc:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a0ece:	6800      	ldr	r0, [r0, #0]
 80a0ed0:	4629      	mov	r1, r5
 80a0ed2:	f7ff ff28 	bl	80a0d26 <_ZN7OneWire6searchEPh>
 80a0ed6:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a0ed8:	bf17      	itett	ne
 80a0eda:	682b      	ldrne	r3, [r5, #0]
  else           memset(addr, 0, 8);
 80a0edc:	6023      	streq	r3, [r4, #0]
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
  if (isSuccess) memcpy(addr, _addr, 8);
 80a0ede:	6023      	strne	r3, [r4, #0]
 80a0ee0:	686b      	ldrne	r3, [r5, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a0ee2:	bf18      	it	ne
 80a0ee4:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
 80a0ee6:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a0ee8:	bf08      	it	eq
 80a0eea:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
 80a0eec:	bd38      	pop	{r3, r4, r5, pc}

080a0eee <_ZN7DS18B20D1Ev>:
  
DS18B20::~DS18B20()
 80a0eee:	b510      	push	{r4, lr}
 80a0ef0:	4604      	mov	r4, r0
{
  delete(ds);
 80a0ef2:	2114      	movs	r1, #20
 80a0ef4:	6800      	ldr	r0, [r0, #0]
 80a0ef6:	f001 feb7 	bl	80a2c68 <_ZdlPvj>
}
 80a0efa:	4620      	mov	r0, r4
 80a0efc:	bd10      	pop	{r4, pc}

080a0efe <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a0efe:	6800      	ldr	r0, [r0, #0]
 80a0f00:	f7ff bf05 	b.w	80a0d0e <_ZN7OneWire12reset_searchEv>

080a0f04 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a0f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a0f06:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a0f08:	4604      	mov	r4, r0
 80a0f0a:	460d      	mov	r5, r1
 80a0f0c:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a0f0e:	b91b      	cbnz	r3, 80a0f18 <_ZN7DS18B2014getTemperatureEPhb+0x14>
 80a0f10:	780b      	ldrb	r3, [r1, #0]
 80a0f12:	2b00      	cmp	r3, #0
 80a0f14:	f000 80a4 	beq.w	80a1060 <_ZN7DS18B2014getTemperatureEPhb+0x15c>

  ds->reset();
 80a0f18:	6820      	ldr	r0, [r4, #0]
 80a0f1a:	f7ff fe1b 	bl	80a0b54 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a0f1e:	7ea3      	ldrb	r3, [r4, #26]
 80a0f20:	b123      	cbz	r3, 80a0f2c <_ZN7DS18B2014getTemperatureEPhb+0x28>
 80a0f22:	b91e      	cbnz	r6, 80a0f2c <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
 80a0f24:	6820      	ldr	r0, [r4, #0]
 80a0f26:	f7ff feee 	bl	80a0d06 <_ZN7OneWire4skipEv>
 80a0f2a:	e003      	b.n	80a0f34 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
 80a0f2c:	4629      	mov	r1, r5
 80a0f2e:	6820      	ldr	r0, [r4, #0]
 80a0f30:	f7ff fed7 	bl	80a0ce2 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a0f34:	2200      	movs	r2, #0
 80a0f36:	2144      	movs	r1, #68	; 0x44
 80a0f38:	6820      	ldr	r0, [r4, #0]
 80a0f3a:	f7ff fe9a 	bl	80a0c72 <_ZN7OneWire5writeEhh>
  delay(750);     // maybe 750ms is enough, maybe not
 80a0f3e:	f240 20ee 	movw	r0, #750	; 0x2ee
 80a0f42:	f000 ff0d 	bl	80a1d60 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
 80a0f46:	6820      	ldr	r0, [r4, #0]
 80a0f48:	f7ff fe04 	bl	80a0b54 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a0f4c:	7ea3      	ldrb	r3, [r4, #26]
 80a0f4e:	b123      	cbz	r3, 80a0f5a <_ZN7DS18B2014getTemperatureEPhb+0x56>
 80a0f50:	b91e      	cbnz	r6, 80a0f5a <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
 80a0f52:	6820      	ldr	r0, [r4, #0]
 80a0f54:	f7ff fed7 	bl	80a0d06 <_ZN7OneWire4skipEv>
 80a0f58:	e003      	b.n	80a0f62 <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
 80a0f5a:	4629      	mov	r1, r5
 80a0f5c:	6820      	ldr	r0, [r4, #0]
 80a0f5e:	f7ff fec0 	bl	80a0ce2 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
 80a0f62:	2200      	movs	r2, #0
 80a0f64:	21be      	movs	r1, #190	; 0xbe
 80a0f66:	6820      	ldr	r0, [r4, #0]
 80a0f68:	f7ff fe83 	bl	80a0c72 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a0f6c:	782b      	ldrb	r3, [r5, #0]
 80a0f6e:	2b26      	cmp	r3, #38	; 0x26
 80a0f70:	d104      	bne.n	80a0f7c <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a0f72:	2200      	movs	r2, #0
 80a0f74:	4611      	mov	r1, r2
 80a0f76:	6820      	ldr	r0, [r4, #0]
 80a0f78:	f7ff fe7b 	bl	80a0c72 <_ZN7OneWire5writeEhh>
 80a0f7c:	1ce6      	adds	r6, r4, #3
 80a0f7e:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
 80a0f82:	6820      	ldr	r0, [r4, #0]
 80a0f84:	f7ff fe9d 	bl	80a0cc2 <_ZN7OneWire4readEv>
 80a0f88:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
 80a0f8c:	42be      	cmp	r6, r7
 80a0f8e:	d1f8      	bne.n	80a0f82 <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a0f90:	2108      	movs	r1, #8
 80a0f92:	1d20      	adds	r0, r4, #4
 80a0f94:	f7ff ff42 	bl	80a0e1c <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a0f98:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a0f9a:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
 80a0f9c:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
 80a0f9e:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a0fa0:	d15e      	bne.n	80a1060 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a0fa2:	782b      	ldrb	r3, [r5, #0]
 80a0fa4:	2b22      	cmp	r3, #34	; 0x22
 80a0fa6:	d01b      	beq.n	80a0fe0 <_ZN7DS18B2014getTemperatureEPhb+0xdc>
 80a0fa8:	d816      	bhi.n	80a0fd8 <_ZN7DS18B2014getTemperatureEPhb+0xd4>
 80a0faa:	2b10      	cmp	r3, #16
 80a0fac:	d158      	bne.n	80a1060 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a0fae:	7ae3      	ldrb	r3, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a0fb0:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a0fb2:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a0fb4:	bf08      	it	eq
 80a0fb6:	7aa3      	ldrbeq	r3, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a0fb8:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a0fbc:	bf02      	ittt	eq
 80a0fbe:	f020 000f 	biceq.w	r0, r0, #15
 80a0fc2:	f1c3 030c 	rsbeq	r3, r3, #12
 80a0fc6:	18c0      	addeq	r0, r0, r3
 80a0fc8:	b200      	sxth	r0, r0
      celsius = (float)raw / 16.0;
 80a0fca:	f003 f867 	bl	80a409c <__aeabi_i2f>
 80a0fce:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a0fd2:	f003 f8b7 	bl	80a4144 <__aeabi_fmul>
      break;
 80a0fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a0fd8:	2b26      	cmp	r3, #38	; 0x26
 80a0fda:	d01f      	beq.n	80a101c <_ZN7DS18B2014getTemperatureEPhb+0x118>
 80a0fdc:	2b28      	cmp	r3, #40	; 0x28
 80a0fde:	d13f      	bne.n	80a1060 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
 80a0fe0:	7a22      	ldrb	r2, [r4, #8]
 80a0fe2:	7923      	ldrb	r3, [r4, #4]
 80a0fe4:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a0fe8:	2a20      	cmp	r2, #32
 80a0fea:	d005      	beq.n	80a0ff8 <_ZN7DS18B2014getTemperatureEPhb+0xf4>
 80a0fec:	2a40      	cmp	r2, #64	; 0x40
 80a0fee:	d006      	beq.n	80a0ffe <_ZN7DS18B2014getTemperatureEPhb+0xfa>
 80a0ff0:	b942      	cbnz	r2, 80a1004 <_ZN7DS18B2014getTemperatureEPhb+0x100>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a0ff2:	f023 0307 	bic.w	r3, r3, #7
 80a0ff6:	e004      	b.n	80a1002 <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a0ff8:	f023 0303 	bic.w	r3, r3, #3
 80a0ffc:	e001      	b.n	80a1002 <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a0ffe:	f023 0301 	bic.w	r3, r3, #1
 80a1002:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a1004:	7923      	ldrb	r3, [r4, #4]
 80a1006:	7960      	ldrb	r0, [r4, #5]
 80a1008:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a100c:	b200      	sxth	r0, r0
 80a100e:	f002 fbdd 	bl	80a37cc <__aeabi_i2d>
 80a1012:	2200      	movs	r2, #0
 80a1014:	4b13      	ldr	r3, [pc, #76]	; (80a1064 <_ZN7DS18B2014getTemperatureEPhb+0x160>)
 80a1016:	f002 fc3f 	bl	80a3898 <__aeabi_dmul>
 80a101a:	e01e      	b.n	80a105a <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a101c:	79a5      	ldrb	r5, [r4, #6]
 80a101e:	4628      	mov	r0, r5
 80a1020:	f002 fbd4 	bl	80a37cc <__aeabi_i2d>
 80a1024:	4606      	mov	r6, r0
 80a1026:	7960      	ldrb	r0, [r4, #5]
 80a1028:	460f      	mov	r7, r1
 80a102a:	08c0      	lsrs	r0, r0, #3
 80a102c:	f003 f836 	bl	80a409c <__aeabi_i2f>
 80a1030:	f002 fbde 	bl	80a37f0 <__aeabi_f2d>
 80a1034:	2200      	movs	r2, #0
 80a1036:	4b0c      	ldr	r3, [pc, #48]	; (80a1068 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
 80a1038:	f002 fc2e 	bl	80a3898 <__aeabi_dmul>
 80a103c:	460b      	mov	r3, r1
 80a103e:	0629      	lsls	r1, r5, #24
 80a1040:	4602      	mov	r2, r0
 80a1042:	bf48      	it	mi
 80a1044:	4909      	ldrmi	r1, [pc, #36]	; (80a106c <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a1046:	f04f 0000 	mov.w	r0, #0
 80a104a:	bf58      	it	pl
 80a104c:	4908      	ldrpl	r1, [pc, #32]	; (80a1070 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a104e:	f002 fc23 	bl	80a3898 <__aeabi_dmul>
 80a1052:	4632      	mov	r2, r6
 80a1054:	463b      	mov	r3, r7
 80a1056:	f002 fa6d 	bl	80a3534 <__adddf3>
 80a105a:	f002 ff15 	bl	80a3e88 <__aeabi_d2f>
      break;
 80a105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
 80a1060:	4804      	ldr	r0, [pc, #16]	; (80a1074 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
      break;                            
  }
  
  return celsius;
}
 80a1062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1064:	3fb00000 	.word	0x3fb00000
 80a1068:	3fa00000 	.word	0x3fa00000
 80a106c:	bff00000 	.word	0xbff00000
 80a1070:	3ff00000 	.word	0x3ff00000
 80a1074:	7fc00000 	.word	0x7fc00000

080a1078 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a1078:	7e02      	ldrb	r2, [r0, #24]
 80a107a:	7e40      	ldrb	r0, [r0, #25]
}
 80a107c:	1a13      	subs	r3, r2, r0
 80a107e:	4258      	negs	r0, r3
 80a1080:	4158      	adcs	r0, r3
 80a1082:	4770      	bx	lr

080a1084 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
 80a1084:	f000 ba08 	b.w	80a1498 <HAL_Pin_Map>

080a1088 <_ZN15CASARIA_MCP3428C1Eh>:
/**************************************************************************/
/*
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
 80a1088:	b538      	push	{r3, r4, r5, lr}
 80a108a:	460c      	mov	r4, r1
 80a108c:	4605      	mov	r5, r0
{
    Wire.begin();
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a108e:	f044 0468 	orr.w	r4, r4, #104	; 0x68
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
{
    Wire.begin();
 80a1092:	f001 fdbb 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1096:	f001 fc21 	bl	80a28dc <_ZN7TwoWire5beginEv>
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a109a:	73ac      	strb	r4, [r5, #14]
}
 80a109c:	4628      	mov	r0, r5
 80a109e:	bd38      	pop	{r3, r4, r5, pc}

080a10a0 <_ZN15CASARIA_MCP3428D1Ev>:
CASARIA_MCP3428::~CASARIA_MCP3428()
{
}
 80a10a0:	4770      	bx	lr
 80a10a2:	0000      	movs	r0, r0
 80a10a4:	0000      	movs	r0, r0
	...

080a10a8 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>:
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a10a8:	b538      	push	{r3, r4, r5, lr}
 80a10aa:	4604      	mov	r4, r0
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a10ac:	f002 05fd 	and.w	r5, r2, #253	; 0xfd
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a10b0:	f89d 0010 	ldrb.w	r0, [sp, #16]
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a10b4:	2d0c      	cmp	r5, #12
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
    GAIN = PGA;
 80a10b6:	7260      	strb	r0, [r4, #9]

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a10b8:	d002      	beq.n	80a10c0 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x18>
 80a10ba:	2a10      	cmp	r2, #16
    {
        SPS = 12;
 80a10bc:	bf18      	it	ne
 80a10be:	220c      	movne	r2, #12
    }
    else
    {
        SPS = resolution;
 80a10c0:	7122      	strb	r2, [r4, #4]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a10c2:	7922      	ldrb	r2, [r4, #4]
 80a10c4:	3901      	subs	r1, #1
    else
    {
        SPS = resolution;
    }

    MODE = mode;
 80a10c6:	7163      	strb	r3, [r4, #5]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a10c8:	3a0c      	subs	r2, #12
 80a10ca:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80a10ce:	2102      	movs	r1, #2
 80a10d0:	fb92 f2f1 	sdiv	r2, r2, r1
 80a10d4:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80a10d8:	408b      	lsls	r3, r1
 80a10da:	7223      	strb	r3, [r4, #8]
    // Setting the PGA Gain
    config|=int(log(PGA)/log(2));
 80a10dc:	f002 fb66 	bl	80a37ac <__aeabi_ui2d>
 80a10e0:	f001 ffa6 	bl	80a3030 <log>
 80a10e4:	a30e      	add	r3, pc, #56	; (adr r3, 80a1120 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x78>)
 80a10e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a10ea:	f002 fcff 	bl	80a3aec <__aeabi_ddiv>
 80a10ee:	f002 fe83 	bl	80a3df8 <__aeabi_d2iz>
 80a10f2:	7a23      	ldrb	r3, [r4, #8]
 80a10f4:	4318      	orrs	r0, r3
 80a10f6:	7220      	strb	r0, [r4, #8]
    
    // Start a conversion using configuration settings
    Wire.beginTransmission(devAddr);
 80a10f8:	f001 fd88 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a10fc:	7ba1      	ldrb	r1, [r4, #14]
 80a10fe:	f001 fbff 	bl	80a2900 <_ZN7TwoWire17beginTransmissionEh>
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
 80a1102:	f001 fd83 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1106:	7a21      	ldrb	r1, [r4, #8]
 80a1108:	6803      	ldr	r3, [r0, #0]
 80a110a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a110e:	689b      	ldr	r3, [r3, #8]
 80a1110:	7221      	strb	r1, [r4, #8]
 80a1112:	4798      	blx	r3
    Wire.endTransmission();
 80a1114:	f001 fd7a 	bl	80a2c0c <_Z19__fetch_global_Wirev>
}
 80a1118:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.beginTransmission(devAddr);
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
    Wire.endTransmission();
 80a111c:	f001 bbfb 	b.w	80a2916 <_ZN7TwoWire15endTransmissionEv>
 80a1120:	fefa39ef 	.word	0xfefa39ef
 80a1124:	3fe62e42 	.word	0x3fe62e42

080a1128 <_ZN15CASARIA_MCP342815CheckConversionEv>:
/*
        Check the adc conversion
*/
/**************************************************************************/
bool CASARIA_MCP3428::CheckConversion()
{
 80a1128:	b570      	push	{r4, r5, r6, lr}
 80a112a:	4604      	mov	r4, r0
    uint8_t i = 0;
    no_of_bytes = 3;
 80a112c:	2303      	movs	r3, #3
 80a112e:	7283      	strb	r3, [r0, #10]
    Wire.requestFrom(devAddr, no_of_bytes);
 80a1130:	f001 fd6c 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1134:	7aa2      	ldrb	r2, [r4, #10]
 80a1136:	7ba1      	ldrb	r1, [r4, #14]
 80a1138:	f001 fbdf 	bl	80a28fa <_ZN7TwoWire11requestFromEhh>
 80a113c:	2500      	movs	r5, #0

    while(Wire.available())
 80a113e:	f001 fd65 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1142:	6803      	ldr	r3, [r0, #0]
 80a1144:	1c6e      	adds	r6, r5, #1
 80a1146:	691b      	ldr	r3, [r3, #16]
 80a1148:	4798      	blx	r3
 80a114a:	b170      	cbz	r0, 80a116a <_ZN15CASARIA_MCP342815CheckConversionEv+0x42>
    {   data[i++] = Wire.read();
 80a114c:	f001 fd5e 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1150:	6803      	ldr	r3, [r0, #0]
 80a1152:	b2ed      	uxtb	r5, r5
 80a1154:	695b      	ldr	r3, [r3, #20]
 80a1156:	4798      	blx	r3
 80a1158:	4425      	add	r5, r4
 80a115a:	72e8      	strb	r0, [r5, #11]

        testvar = data[no_of_bytes-1] >> 7;
 80a115c:	7aa3      	ldrb	r3, [r4, #10]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a115e:	4635      	mov	r5, r6
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
 80a1160:	4423      	add	r3, r4
 80a1162:	7a9b      	ldrb	r3, [r3, #10]
 80a1164:	11db      	asrs	r3, r3, #7
 80a1166:	71e3      	strb	r3, [r4, #7]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a1168:	e7e9      	b.n	80a113e <_ZN15CASARIA_MCP342815CheckConversionEv+0x16>
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
    }
    return testvar;
 80a116a:	79e0      	ldrb	r0, [r4, #7]
}
 80a116c:	3000      	adds	r0, #0
 80a116e:	bf18      	it	ne
 80a1170:	2001      	movne	r0, #1
 80a1172:	bd70      	pop	{r4, r5, r6, pc}

080a1174 <_ZN15CASARIA_MCP34287readADCEv>:
        Where:
        N = Resolution, which is programmed in the Configuration Register: 12, 14, or 16
*/
/**************************************************************************/
long CASARIA_MCP3428::readADC()
{
 80a1174:	b510      	push	{r4, lr}
 80a1176:	4604      	mov	r4, r0

    raw_adc = 0;
 80a1178:	2300      	movs	r3, #0
 80a117a:	6003      	str	r3, [r0, #0]

    while(CheckConversion() == 1);
 80a117c:	4620      	mov	r0, r4
 80a117e:	f7ff ffd3 	bl	80a1128 <_ZN15CASARIA_MCP342815CheckConversionEv>
 80a1182:	2800      	cmp	r0, #0
 80a1184:	d1fa      	bne.n	80a117c <_ZN15CASARIA_MCP34287readADCEv+0x8>

    switch (SPS)
 80a1186:	7923      	ldrb	r3, [r4, #4]
 80a1188:	2b0e      	cmp	r3, #14
 80a118a:	d00f      	beq.n	80a11ac <_ZN15CASARIA_MCP34287readADCEv+0x38>
 80a118c:	2b10      	cmp	r3, #16
 80a118e:	d019      	beq.n	80a11c4 <_ZN15CASARIA_MCP34287readADCEv+0x50>
 80a1190:	2b0c      	cmp	r3, #12
 80a1192:	d121      	bne.n	80a11d8 <_ZN15CASARIA_MCP34287readADCEv+0x64>
  
        case 12:
                raw_adc = data[0];
                raw_adc &= 0b00001111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1194:	7ae3      	ldrb	r3, [r4, #11]
 80a1196:	f003 020f 	and.w	r2, r3, #15
 80a119a:	7b23      	ldrb	r3, [r4, #12]
 80a119c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 2047)
 80a11a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
                {
                    raw_adc = raw_adc - 4096;
 80a11a4:	bfa8      	it	ge
 80a11a6:	f5a3 5380 	subge.w	r3, r3, #4096	; 0x1000
 80a11aa:	e014      	b.n	80a11d6 <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 14:
                raw_adc = data[0];
                raw_adc &= 0b00111111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a11ac:	7ae3      	ldrb	r3, [r4, #11]
 80a11ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80a11b2:	7b23      	ldrb	r3, [r4, #12]
 80a11b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 8191)
 80a11b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
                {
                    raw_adc = raw_adc - 16384;
 80a11bc:	bfa8      	it	ge
 80a11be:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 80a11c2:	e008      	b.n	80a11d6 <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 16:

                raw_adc = data[0];
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a11c4:	7ae2      	ldrb	r2, [r4, #11]
 80a11c6:	7b23      	ldrb	r3, [r4, #12]
 80a11c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 32767)
 80a11cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
                {
                    raw_adc = raw_adc - 65536;
 80a11d0:	bfa8      	it	ge
 80a11d2:	f5a3 3380 	subge.w	r3, r3, #65536	; 0x10000
 80a11d6:	6023      	str	r3, [r4, #0]
                // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;
      
                break;
    }
    return raw_adc;
}
 80a11d8:	6820      	ldr	r0, [r4, #0]
 80a11da:	bd10      	pop	{r4, pc}

080a11dc <_GLOBAL__sub_I__ZN15CASARIA_MCP3428C2Eh>:
 80a11dc:	f000 b95c 	b.w	80a1498 <HAL_Pin_Map>

080a11e0 <_ZN7TwoWire5writeEi>:
 80a11e0:	6803      	ldr	r3, [r0, #0]
 80a11e2:	b2c9      	uxtb	r1, r1
 80a11e4:	689b      	ldr	r3, [r3, #8]
 80a11e6:	4718      	bx	r3

080a11e8 <_ZN16Adafruit_PCA9685C1Ehb>:
 * the address that is set by the physical jumpers on the driver. If the
 * address is not being set by hardware, give no parameters and it will
 * use the default as specified in the header file (0x40)
 */
Adafruit_PCA9685::Adafruit_PCA9685(uint8_t addr, bool debug) {
  _i2caddr = addr;
 80a11e8:	7001      	strb	r1, [r0, #0]
  _debug = debug;
 80a11ea:	7042      	strb	r2, [r0, #1]
}
 80a11ec:	4770      	bx	lr
	...

080a11f0 <_ZN16Adafruit_PCA96856setPWMEhtt>:
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a11f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a11f2:	461d      	mov	r5, r3
  if (_debug) {
 80a11f4:	7843      	ldrb	r3, [r0, #1]
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a11f6:	4607      	mov	r7, r0
 80a11f8:	460c      	mov	r4, r1
 80a11fa:	4616      	mov	r6, r2
  if (_debug) {
 80a11fc:	b303      	cbz	r3, 80a1240 <_ZN16Adafruit_PCA96856setPWMEhtt+0x50>
   Serial.print("Setting PWM for LED "); Serial.print(ledNum); Serial.print(" to ");
 80a11fe:	f001 fa33 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a1202:	4922      	ldr	r1, [pc, #136]	; (80a128c <_ZN16Adafruit_PCA96856setPWMEhtt+0x9c>)
 80a1204:	f000 fc59 	bl	80a1aba <_ZN5Print5printEPKc>
 80a1208:	f001 fa2e 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a120c:	220a      	movs	r2, #10
 80a120e:	4621      	mov	r1, r4
 80a1210:	f000 fc90 	bl	80a1b34 <_ZN5Print5printEhi>
 80a1214:	f001 fa28 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a1218:	491d      	ldr	r1, [pc, #116]	; (80a1290 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa0>)
 80a121a:	f000 fc4e 	bl	80a1aba <_ZN5Print5printEPKc>
   Serial.print(on); Serial.print(" -> "); Serial.println(off);
 80a121e:	f001 fa23 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a1222:	220a      	movs	r2, #10
 80a1224:	4631      	mov	r1, r6
 80a1226:	f000 fcb3 	bl	80a1b90 <_ZN5Print5printEii>
 80a122a:	f001 fa1d 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a122e:	4919      	ldr	r1, [pc, #100]	; (80a1294 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa4>)
 80a1230:	f000 fc43 	bl	80a1aba <_ZN5Print5printEPKc>
 80a1234:	f001 fa18 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a1238:	220a      	movs	r2, #10
 80a123a:	4629      	mov	r1, r5
 80a123c:	f000 fcaa 	bl	80a1b94 <_ZN5Print7printlnEii>
  }

  Wire.beginTransmission(_i2caddr);
 80a1240:	f001 fce4 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1244:	7839      	ldrb	r1, [r7, #0]
 80a1246:	f001 fb5b 	bl	80a2900 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
 80a124a:	f001 fcdf 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a124e:	00a1      	lsls	r1, r4, #2
 80a1250:	3106      	adds	r1, #6
 80a1252:	f7ff ffc5 	bl	80a11e0 <_ZN7TwoWire5writeEi>
  Wire.write(on);                    // Write the first byte for On
 80a1256:	f001 fcd9 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a125a:	4631      	mov	r1, r6
 80a125c:	f7ff ffc0 	bl	80a11e0 <_ZN7TwoWire5writeEi>
  Wire.write(on >> 8);               // Write the second byte
 80a1260:	f001 fcd4 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1264:	0a31      	lsrs	r1, r6, #8
 80a1266:	f7ff ffbb 	bl	80a11e0 <_ZN7TwoWire5writeEi>
  Wire.write(off);                   // First byte for Off
 80a126a:	f001 fccf 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a126e:	4629      	mov	r1, r5
 80a1270:	f7ff ffb6 	bl	80a11e0 <_ZN7TwoWire5writeEi>
  Wire.write(off >> 8);              // Second byte for Off
 80a1274:	f001 fcca 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1278:	0a29      	lsrs	r1, r5, #8
 80a127a:	f7ff ffb1 	bl	80a11e0 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a127e:	f001 fcc5 	bl	80a2c0c <_Z19__fetch_global_Wirev>
}
 80a1282:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
  Wire.write(on);                    // Write the first byte for On
  Wire.write(on >> 8);               // Write the second byte
  Wire.write(off);                   // First byte for Off
  Wire.write(off >> 8);              // Second byte for Off
  Wire.endTransmission();
 80a1286:	f001 bb46 	b.w	80a2916 <_ZN7TwoWire15endTransmissionEv>
 80a128a:	bf00      	nop
 80a128c:	080a47dc 	.word	0x080a47dc
 80a1290:	080a47f1 	.word	0x080a47f1
 80a1294:	080a47f6 	.word	0x080a47f6

080a1298 <_ZN16Adafruit_PCA96856setValEhtb>:
 * @param val     The duty cycle value. Should be from 0 to 4095 inclusive, 
 *                will be clamped if not within range
 * @param invert  Whether or not to invert the pulse for sinking to ground
 */
void Adafruit_PCA9685::setVal(uint8_t ledNum, uint16_t val, bool invert)
{
 80a1298:	b5f0      	push	{r4, r5, r6, r7, lr}
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
 80a129a:	f640 76ff 	movw	r6, #4095	; 0xfff
 80a129e:	42b2      	cmp	r2, r6
 80a12a0:	bfa8      	it	ge
 80a12a2:	4632      	movge	r2, r6
 80a12a4:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 80a12a8:	4607      	mov	r7, r0
 80a12aa:	468e      	mov	lr, r1
  // Clamp value between 0 and 4095 inclusive.
  val = min(val, 4095);
  val = max(0, val);
 80a12ac:	b2a5      	uxth	r5, r4
  if (invert) {
 80a12ae:	461a      	mov	r2, r3
 80a12b0:	b193      	cbz	r3, 80a12d8 <_ZN16Adafruit_PCA96856setValEhtb+0x40>
    if (val == 0) {
 80a12b2:	b91c      	cbnz	r4, 80a12bc <_ZN16Adafruit_PCA96856setValEhtb+0x24>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
 80a12b4:	2300      	movs	r3, #0
 80a12b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a12ba:	e004      	b.n	80a12c6 <_ZN16Adafruit_PCA96856setValEhtb+0x2e>
    }
    else if (val == 4095) {
 80a12bc:	42b4      	cmp	r4, r6
 80a12be:	d105      	bne.n	80a12cc <_ZN16Adafruit_PCA96856setValEhtb+0x34>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
 80a12c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a12c4:	2200      	movs	r2, #0
 80a12c6:	4671      	mov	r1, lr
 80a12c8:	4638      	mov	r0, r7
 80a12ca:	e00a      	b.n	80a12e2 <_ZN16Adafruit_PCA96856setValEhtb+0x4a>
    }
    else {
      setPWM(ledNum, 0, 4095-val);
 80a12cc:	f5c5 637f 	rsb	r3, r5, #4080	; 0xff0
 80a12d0:	330f      	adds	r3, #15
 80a12d2:	b29b      	uxth	r3, r3
 80a12d4:	2200      	movs	r2, #0
 80a12d6:	e004      	b.n	80a12e2 <_ZN16Adafruit_PCA96856setValEhtb+0x4a>
    }
  }
  else {
    if (val == 4095) {
 80a12d8:	42b4      	cmp	r4, r6
 80a12da:	d0eb      	beq.n	80a12b4 <_ZN16Adafruit_PCA96856setValEhtb+0x1c>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
    }
    else if (val == 0) {
 80a12dc:	2c00      	cmp	r4, #0
 80a12de:	d0ef      	beq.n	80a12c0 <_ZN16Adafruit_PCA96856setValEhtb+0x28>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a12e0:	462b      	mov	r3, r5
    }
  }
}
 80a12e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    else if (val == 0) {
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a12e6:	f7ff bf83 	b.w	80a11f0 <_ZN16Adafruit_PCA96856setPWMEhtt>

080a12ea <_ZN16Adafruit_PCA96855read8Eh>:
/**
 * Read a byte from a given address on the driver
 * @param  addr  The address
 * @return       The value at the given address
 */
uint8_t Adafruit_PCA9685::read8(uint8_t addr) {
 80a12ea:	b538      	push	{r3, r4, r5, lr}
 80a12ec:	4604      	mov	r4, r0
 80a12ee:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a12f0:	f001 fc8c 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a12f4:	7821      	ldrb	r1, [r4, #0]
 80a12f6:	f001 fb03 	bl	80a2900 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a12fa:	f001 fc87 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a12fe:	6803      	ldr	r3, [r0, #0]
 80a1300:	4629      	mov	r1, r5
 80a1302:	689b      	ldr	r3, [r3, #8]
 80a1304:	4798      	blx	r3
  Wire.endTransmission();
 80a1306:	f001 fc81 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a130a:	f001 fb04 	bl	80a2916 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
 80a130e:	f001 fc7d 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1312:	2201      	movs	r2, #1
 80a1314:	7821      	ldrb	r1, [r4, #0]
 80a1316:	f001 faf0 	bl	80a28fa <_ZN7TwoWire11requestFromEhh>
  return Wire.read();
 80a131a:	f001 fc77 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a131e:	6803      	ldr	r3, [r0, #0]
 80a1320:	695b      	ldr	r3, [r3, #20]
 80a1322:	4798      	blx	r3
}
 80a1324:	b2c0      	uxtb	r0, r0
 80a1326:	bd38      	pop	{r3, r4, r5, pc}

080a1328 <_ZN16Adafruit_PCA96856write8Ehh>:
/**
 * Write a byte to a given address on the driver
 * @param addr  The address
 * @param val   The byte to be written
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
 80a1328:	b570      	push	{r4, r5, r6, lr}
 80a132a:	4606      	mov	r6, r0
 80a132c:	4614      	mov	r4, r2
 80a132e:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a1330:	f001 fc6c 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a1334:	7831      	ldrb	r1, [r6, #0]
 80a1336:	f001 fae3 	bl	80a2900 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a133a:	f001 fc67 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a133e:	6803      	ldr	r3, [r0, #0]
 80a1340:	4629      	mov	r1, r5
 80a1342:	689b      	ldr	r3, [r3, #8]
 80a1344:	4798      	blx	r3
  Wire.write(val);
 80a1346:	f001 fc61 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a134a:	6803      	ldr	r3, [r0, #0]
 80a134c:	4621      	mov	r1, r4
 80a134e:	689b      	ldr	r3, [r3, #8]
 80a1350:	4798      	blx	r3
  Wire.endTransmission();
 80a1352:	f001 fc5b 	bl	80a2c0c <_Z19__fetch_global_Wirev>
}
 80a1356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(addr);
  Wire.write(val);
  Wire.endTransmission();
 80a135a:	f001 badc 	b.w	80a2916 <_ZN7TwoWire15endTransmissionEv>

080a135e <_ZN16Adafruit_PCA96855resetEv>:

/**
 * Setup the driver's modes
 */
void Adafruit_PCA9685::reset(void) {
 write8(MODE1, 0x0);  // See page 13 of datasheet
 80a135e:	2200      	movs	r2, #0
 80a1360:	4611      	mov	r1, r2
 80a1362:	f7ff bfe1 	b.w	80a1328 <_ZN16Adafruit_PCA96856write8Ehh>

080a1366 <_ZN16Adafruit_PCA96855beginEv>:
}

/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 80a1366:	b510      	push	{r4, lr}
 80a1368:	4604      	mov	r4, r0
 Wire.begin();
 80a136a:	f001 fc4f 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a136e:	f001 fab5 	bl	80a28dc <_ZN7TwoWire5beginEv>
 reset();
 80a1372:	4620      	mov	r0, r4
}
 80a1374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 Wire.begin();
 reset();
 80a1378:	f7ff bff1 	b.w	80a135e <_ZN16Adafruit_PCA96855resetEv>
 80a137c:	0000      	movs	r0, r0
	...

080a1380 <_ZN16Adafruit_PCA968510setPWMFreqEf>:

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1380:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if ( _debug ) {
 80a1382:	7843      	ldrb	r3, [r0, #1]

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1384:	4604      	mov	r4, r0
 80a1386:	460d      	mov	r5, r1
  if ( _debug ) {
 80a1388:	b18b      	cbz	r3, 80a13ae <_ZN16Adafruit_PCA968510setPWMFreqEf+0x2e>
    Serial.print("Attempting to set freq "); Serial.println(freq);
 80a138a:	f001 f96d 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a138e:	493c      	ldr	r1, [pc, #240]	; (80a1480 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x100>)
 80a1390:	f000 fb93 	bl	80a1aba <_ZN5Print5printEPKc>
 80a1394:	f001 f968 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a1398:	4606      	mov	r6, r0
 80a139a:	4628      	mov	r0, r5
 80a139c:	f002 fa28 	bl	80a37f0 <__aeabi_f2d>
 80a13a0:	2302      	movs	r3, #2
 80a13a2:	9300      	str	r3, [sp, #0]
 80a13a4:	4602      	mov	r2, r0
 80a13a6:	460b      	mov	r3, r1
 80a13a8:	4630      	mov	r0, r6
 80a13aa:	f000 fcab 	bl	80a1d04 <_ZN5Print7printlnEdi>
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
 80a13ae:	4628      	mov	r0, r5
 80a13b0:	f002 fa1e 	bl	80a37f0 <__aeabi_f2d>
 80a13b4:	a330      	add	r3, pc, #192	; (adr r3, 80a1478 <_ZN16Adafruit_PCA968510setPWMFreqEf+0xf8>)
 80a13b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a13ba:	f002 fa6d 	bl	80a3898 <__aeabi_dmul>
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
 80a13be:	f002 fd63 	bl	80a3e88 <__aeabi_d2f>
 80a13c2:	4601      	mov	r1, r0
 80a13c4:	482f      	ldr	r0, [pc, #188]	; (80a1484 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x104>)
 80a13c6:	f002 ff71 	bl	80a42ac <__aeabi_fdiv>
  prescaleval -= 1;
 80a13ca:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a13ce:	f002 fdaf 	bl	80a3f30 <__aeabi_fsub>
  if ( _debug ) {
 80a13d2:	7863      	ldrb	r3, [r4, #1]
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
 80a13d4:	4605      	mov	r5, r0
  if ( _debug ) {
 80a13d6:	b18b      	cbz	r3, 80a13fc <_ZN16Adafruit_PCA968510setPWMFreqEf+0x7c>
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
 80a13d8:	f001 f946 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a13dc:	492a      	ldr	r1, [pc, #168]	; (80a1488 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x108>)
 80a13de:	f000 fb6c 	bl	80a1aba <_ZN5Print5printEPKc>
 80a13e2:	f001 f941 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a13e6:	4606      	mov	r6, r0
 80a13e8:	4628      	mov	r0, r5
 80a13ea:	f002 fa01 	bl	80a37f0 <__aeabi_f2d>
 80a13ee:	2302      	movs	r3, #2
 80a13f0:	9300      	str	r3, [sp, #0]
 80a13f2:	4602      	mov	r2, r0
 80a13f4:	460b      	mov	r3, r1
 80a13f6:	4630      	mov	r0, r6
 80a13f8:	f000 fc84 	bl	80a1d04 <_ZN5Print7printlnEdi>
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a13fc:	4628      	mov	r0, r5
 80a13fe:	f002 f9f7 	bl	80a37f0 <__aeabi_f2d>
 80a1402:	4b22      	ldr	r3, [pc, #136]	; (80a148c <_ZN16Adafruit_PCA968510setPWMFreqEf+0x10c>)
 80a1404:	2200      	movs	r2, #0
 80a1406:	f002 f895 	bl	80a3534 <__adddf3>
 80a140a:	f001 fd89 	bl	80a2f20 <floor>
 80a140e:	f002 fd1b 	bl	80a3e48 <__aeabi_d2uiz>
  if ( _debug ) {
 80a1412:	7863      	ldrb	r3, [r4, #1]
  prescaleval /= freq;
  prescaleval -= 1;
  if ( _debug ) {
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a1414:	b2c6      	uxtb	r6, r0
  if ( _debug ) {
 80a1416:	b153      	cbz	r3, 80a142e <_ZN16Adafruit_PCA968510setPWMFreqEf+0xae>
    Serial.print("Final pre-scale: "); Serial.println(prescale);
 80a1418:	f001 f926 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a141c:	491c      	ldr	r1, [pc, #112]	; (80a1490 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x110>)
 80a141e:	f000 fb4c 	bl	80a1aba <_ZN5Print5printEPKc>
 80a1422:	f001 f921 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a1426:	220a      	movs	r2, #10
 80a1428:	4631      	mov	r1, r6
 80a142a:	f000 fb85 	bl	80a1b38 <_ZN5Print7printlnEhi>
  }
  
  uint8_t oldmode = read8(MODE1);
 80a142e:	2100      	movs	r1, #0
 80a1430:	4620      	mov	r0, r4
 80a1432:	f7ff ff5a 	bl	80a12ea <_ZN16Adafruit_PCA96855read8Eh>
 80a1436:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
 80a1438:	f000 026f 	and.w	r2, r0, #111	; 0x6f
 80a143c:	f042 0210 	orr.w	r2, r2, #16
 80a1440:	4620      	mov	r0, r4
 80a1442:	2100      	movs	r1, #0
 80a1444:	f7ff ff70 	bl	80a1328 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(PRESCALE, prescale); // set the prescaler
 80a1448:	4632      	mov	r2, r6
 80a144a:	4620      	mov	r0, r4
 80a144c:	21fe      	movs	r1, #254	; 0xfe
 80a144e:	f7ff ff6b 	bl	80a1328 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(MODE1, oldmode);
 80a1452:	462a      	mov	r2, r5
 80a1454:	2100      	movs	r1, #0
 80a1456:	4620      	mov	r0, r4
 80a1458:	f7ff ff66 	bl	80a1328 <_ZN16Adafruit_PCA96856write8Ehh>
  delay(5);
 80a145c:	2005      	movs	r0, #5
 80a145e:	f000 fc7f 	bl	80a1d60 <delay>
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a1462:	4620      	mov	r0, r4
 80a1464:	f065 025e 	orn	r2, r5, #94	; 0x5e
 80a1468:	b2d2      	uxtb	r2, r2
 80a146a:	2100      	movs	r1, #0
}
 80a146c:	b002      	add	sp, #8
 80a146e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
  write8(PRESCALE, prescale); // set the prescaler
  write8(MODE1, oldmode);
  delay(5);
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a1472:	f7ff bf59 	b.w	80a1328 <_ZN16Adafruit_PCA96856write8Ehh>
 80a1476:	bf00      	nop
 80a1478:	cccccccd 	.word	0xcccccccd
 80a147c:	3feccccc 	.word	0x3feccccc
 80a1480:	080a47fb 	.word	0x080a47fb
 80a1484:	45bebc20 	.word	0x45bebc20
 80a1488:	080a4813 	.word	0x080a4813
 80a148c:	3fe00000 	.word	0x3fe00000
 80a1490:	080a4829 	.word	0x080a4829

080a1494 <_GLOBAL__sub_I__ZN16Adafruit_PCA9685C2Ehb>:
 80a1494:	f000 b800 	b.w	80a1498 <HAL_Pin_Map>

080a1498 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a1498:	b508      	push	{r3, lr}
 80a149a:	4b02      	ldr	r3, [pc, #8]	; (80a14a4 <HAL_Pin_Map+0xc>)
 80a149c:	681b      	ldr	r3, [r3, #0]
 80a149e:	681b      	ldr	r3, [r3, #0]
 80a14a0:	9301      	str	r3, [sp, #4]
 80a14a2:	bd08      	pop	{r3, pc}
 80a14a4:	080601b0 	.word	0x080601b0

080a14a8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a14a8:	b508      	push	{r3, lr}
 80a14aa:	4b02      	ldr	r3, [pc, #8]	; (80a14b4 <HAL_Pin_Mode+0xc>)
 80a14ac:	681b      	ldr	r3, [r3, #0]
 80a14ae:	689b      	ldr	r3, [r3, #8]
 80a14b0:	9301      	str	r3, [sp, #4]
 80a14b2:	bd08      	pop	{r3, pc}
 80a14b4:	080601b0 	.word	0x080601b0

080a14b8 <HAL_GPIO_Read>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a14b8:	b508      	push	{r3, lr}
 80a14ba:	4b02      	ldr	r3, [pc, #8]	; (80a14c4 <HAL_GPIO_Read+0xc>)
 80a14bc:	681b      	ldr	r3, [r3, #0]
 80a14be:	695b      	ldr	r3, [r3, #20]
 80a14c0:	9301      	str	r3, [sp, #4]
 80a14c2:	bd08      	pop	{r3, pc}
 80a14c4:	080601b0 	.word	0x080601b0

080a14c8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a14c8:	b508      	push	{r3, lr}
 80a14ca:	4b02      	ldr	r3, [pc, #8]	; (80a14d4 <HAL_Interrupts_Enable_All+0xc>)
 80a14cc:	681b      	ldr	r3, [r3, #0]
 80a14ce:	6a1b      	ldr	r3, [r3, #32]
 80a14d0:	9301      	str	r3, [sp, #4]
 80a14d2:	bd08      	pop	{r3, pc}
 80a14d4:	080601b0 	.word	0x080601b0

080a14d8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a14d8:	b508      	push	{r3, lr}
 80a14da:	4b02      	ldr	r3, [pc, #8]	; (80a14e4 <HAL_Interrupts_Disable_All+0xc>)
 80a14dc:	681b      	ldr	r3, [r3, #0]
 80a14de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a14e0:	9301      	str	r3, [sp, #4]
 80a14e2:	bd08      	pop	{r3, pc}
 80a14e4:	080601b0 	.word	0x080601b0

080a14e8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a14e8:	b508      	push	{r3, lr}
 80a14ea:	4b02      	ldr	r3, [pc, #8]	; (80a14f4 <HAL_SPI_Init+0xc>)
 80a14ec:	681b      	ldr	r3, [r3, #0]
 80a14ee:	69db      	ldr	r3, [r3, #28]
 80a14f0:	9301      	str	r3, [sp, #4]
 80a14f2:	bd08      	pop	{r3, pc}
 80a14f4:	080601b4 	.word	0x080601b4

080a14f8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a14f8:	b508      	push	{r3, lr}
 80a14fa:	4b02      	ldr	r3, [pc, #8]	; (80a1504 <HAL_SPI_Is_Enabled+0xc>)
 80a14fc:	681b      	ldr	r3, [r3, #0]
 80a14fe:	6a1b      	ldr	r3, [r3, #32]
 80a1500:	9301      	str	r3, [sp, #4]
 80a1502:	bd08      	pop	{r3, pc}
 80a1504:	080601b4 	.word	0x080601b4

080a1508 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a1508:	b508      	push	{r3, lr}
 80a150a:	4b02      	ldr	r3, [pc, #8]	; (80a1514 <HAL_RNG_GetRandomNumber+0xc>)
 80a150c:	681b      	ldr	r3, [r3, #0]
 80a150e:	685b      	ldr	r3, [r3, #4]
 80a1510:	9301      	str	r3, [sp, #4]
 80a1512:	bd08      	pop	{r3, pc}
 80a1514:	0806019c 	.word	0x0806019c

080a1518 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80a1518:	b508      	push	{r3, lr}
 80a151a:	4b02      	ldr	r3, [pc, #8]	; (80a1524 <HAL_Delay_Milliseconds+0xc>)
 80a151c:	681b      	ldr	r3, [r3, #0]
 80a151e:	689b      	ldr	r3, [r3, #8]
 80a1520:	9301      	str	r3, [sp, #4]
 80a1522:	bd08      	pop	{r3, pc}
 80a1524:	0806019c 	.word	0x0806019c

080a1528 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a1528:	b508      	push	{r3, lr}
 80a152a:	4b02      	ldr	r3, [pc, #8]	; (80a1534 <HAL_Delay_Microseconds+0xc>)
 80a152c:	681b      	ldr	r3, [r3, #0]
 80a152e:	68db      	ldr	r3, [r3, #12]
 80a1530:	9301      	str	r3, [sp, #4]
 80a1532:	bd08      	pop	{r3, pc}
 80a1534:	0806019c 	.word	0x0806019c

080a1538 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a1538:	b508      	push	{r3, lr}
 80a153a:	4b02      	ldr	r3, [pc, #8]	; (80a1544 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a153c:	681b      	ldr	r3, [r3, #0]
 80a153e:	695b      	ldr	r3, [r3, #20]
 80a1540:	9301      	str	r3, [sp, #4]
 80a1542:	bd08      	pop	{r3, pc}
 80a1544:	0806019c 	.word	0x0806019c

080a1548 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a1548:	b508      	push	{r3, lr}
 80a154a:	4b02      	ldr	r3, [pc, #8]	; (80a1554 <HAL_Core_System_Reset_Ex+0xc>)
 80a154c:	681b      	ldr	r3, [r3, #0]
 80a154e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a1550:	9301      	str	r3, [sp, #4]
 80a1552:	bd08      	pop	{r3, pc}
 80a1554:	080601b8 	.word	0x080601b8

080a1558 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a1558:	b508      	push	{r3, lr}
 80a155a:	4b02      	ldr	r3, [pc, #8]	; (80a1564 <os_thread_create+0xc>)
 80a155c:	681b      	ldr	r3, [r3, #0]
 80a155e:	685b      	ldr	r3, [r3, #4]
 80a1560:	9301      	str	r3, [sp, #4]
 80a1562:	bd08      	pop	{r3, pc}
 80a1564:	080601d0 	.word	0x080601d0

080a1568 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80a1568:	b508      	push	{r3, lr}
 80a156a:	4b02      	ldr	r3, [pc, #8]	; (80a1574 <os_thread_is_current+0xc>)
 80a156c:	681b      	ldr	r3, [r3, #0]
 80a156e:	689b      	ldr	r3, [r3, #8]
 80a1570:	9301      	str	r3, [sp, #4]
 80a1572:	bd08      	pop	{r3, pc}
 80a1574:	080601d0 	.word	0x080601d0

080a1578 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80a1578:	b508      	push	{r3, lr}
 80a157a:	4b02      	ldr	r3, [pc, #8]	; (80a1584 <os_thread_join+0xc>)
 80a157c:	681b      	ldr	r3, [r3, #0]
 80a157e:	691b      	ldr	r3, [r3, #16]
 80a1580:	9301      	str	r3, [sp, #4]
 80a1582:	bd08      	pop	{r3, pc}
 80a1584:	080601d0 	.word	0x080601d0

080a1588 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80a1588:	b508      	push	{r3, lr}
 80a158a:	4b02      	ldr	r3, [pc, #8]	; (80a1594 <os_thread_cleanup+0xc>)
 80a158c:	681b      	ldr	r3, [r3, #0]
 80a158e:	695b      	ldr	r3, [r3, #20]
 80a1590:	9301      	str	r3, [sp, #4]
 80a1592:	bd08      	pop	{r3, pc}
 80a1594:	080601d0 	.word	0x080601d0

080a1598 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a1598:	b508      	push	{r3, lr}
 80a159a:	4b02      	ldr	r3, [pc, #8]	; (80a15a4 <os_mutex_create+0xc>)
 80a159c:	681b      	ldr	r3, [r3, #0]
 80a159e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a15a0:	9301      	str	r3, [sp, #4]
 80a15a2:	bd08      	pop	{r3, pc}
 80a15a4:	080601d0 	.word	0x080601d0

080a15a8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80a15a8:	b508      	push	{r3, lr}
 80a15aa:	4b02      	ldr	r3, [pc, #8]	; (80a15b4 <os_thread_exit+0xc>)
 80a15ac:	681b      	ldr	r3, [r3, #0]
 80a15ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a15b0:	9301      	str	r3, [sp, #4]
 80a15b2:	bd08      	pop	{r3, pc}
 80a15b4:	080601d0 	.word	0x080601d0

080a15b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a15b8:	b508      	push	{r3, lr}
 80a15ba:	4b02      	ldr	r3, [pc, #8]	; (80a15c4 <HAL_USART_Init+0xc>)
 80a15bc:	681b      	ldr	r3, [r3, #0]
 80a15be:	699b      	ldr	r3, [r3, #24]
 80a15c0:	9301      	str	r3, [sp, #4]
 80a15c2:	bd08      	pop	{r3, pc}
 80a15c4:	080601c4 	.word	0x080601c4

080a15c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a15c8:	b508      	push	{r3, lr}
 80a15ca:	4b02      	ldr	r3, [pc, #8]	; (80a15d4 <HAL_USART_Write_Data+0xc>)
 80a15cc:	681b      	ldr	r3, [r3, #0]
 80a15ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a15d0:	9301      	str	r3, [sp, #4]
 80a15d2:	bd08      	pop	{r3, pc}
 80a15d4:	080601c4 	.word	0x080601c4

080a15d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a15d8:	b508      	push	{r3, lr}
 80a15da:	4b02      	ldr	r3, [pc, #8]	; (80a15e4 <HAL_USART_Available_Data+0xc>)
 80a15dc:	681b      	ldr	r3, [r3, #0]
 80a15de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a15e0:	9301      	str	r3, [sp, #4]
 80a15e2:	bd08      	pop	{r3, pc}
 80a15e4:	080601c4 	.word	0x080601c4

080a15e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a15e8:	b508      	push	{r3, lr}
 80a15ea:	4b02      	ldr	r3, [pc, #8]	; (80a15f4 <HAL_USART_Read_Data+0xc>)
 80a15ec:	681b      	ldr	r3, [r3, #0]
 80a15ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a15f0:	9301      	str	r3, [sp, #4]
 80a15f2:	bd08      	pop	{r3, pc}
 80a15f4:	080601c4 	.word	0x080601c4

080a15f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a15f8:	b508      	push	{r3, lr}
 80a15fa:	4b02      	ldr	r3, [pc, #8]	; (80a1604 <HAL_USART_Peek_Data+0xc>)
 80a15fc:	681b      	ldr	r3, [r3, #0]
 80a15fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a1600:	9301      	str	r3, [sp, #4]
 80a1602:	bd08      	pop	{r3, pc}
 80a1604:	080601c4 	.word	0x080601c4

080a1608 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a1608:	b508      	push	{r3, lr}
 80a160a:	4b02      	ldr	r3, [pc, #8]	; (80a1614 <HAL_USART_Flush_Data+0xc>)
 80a160c:	681b      	ldr	r3, [r3, #0]
 80a160e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a1610:	9301      	str	r3, [sp, #4]
 80a1612:	bd08      	pop	{r3, pc}
 80a1614:	080601c4 	.word	0x080601c4

080a1618 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a1618:	b508      	push	{r3, lr}
 80a161a:	4b02      	ldr	r3, [pc, #8]	; (80a1624 <HAL_USART_Is_Enabled+0xc>)
 80a161c:	681b      	ldr	r3, [r3, #0]
 80a161e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a1620:	9301      	str	r3, [sp, #4]
 80a1622:	bd08      	pop	{r3, pc}
 80a1624:	080601c4 	.word	0x080601c4

080a1628 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a1628:	b508      	push	{r3, lr}
 80a162a:	4b02      	ldr	r3, [pc, #8]	; (80a1634 <HAL_USART_Available_Data_For_Write+0xc>)
 80a162c:	681b      	ldr	r3, [r3, #0]
 80a162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a1630:	9301      	str	r3, [sp, #4]
 80a1632:	bd08      	pop	{r3, pc}
 80a1634:	080601c4 	.word	0x080601c4

080a1638 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a1638:	b508      	push	{r3, lr}
 80a163a:	4b02      	ldr	r3, [pc, #8]	; (80a1644 <HAL_I2C_Begin+0xc>)
 80a163c:	681b      	ldr	r3, [r3, #0]
 80a163e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1640:	9301      	str	r3, [sp, #4]
 80a1642:	bd08      	pop	{r3, pc}
 80a1644:	080601ac 	.word	0x080601ac

080a1648 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a1648:	b508      	push	{r3, lr}
 80a164a:	4b02      	ldr	r3, [pc, #8]	; (80a1654 <HAL_I2C_Request_Data+0xc>)
 80a164c:	681b      	ldr	r3, [r3, #0]
 80a164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1650:	9301      	str	r3, [sp, #4]
 80a1652:	bd08      	pop	{r3, pc}
 80a1654:	080601ac 	.word	0x080601ac

080a1658 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a1658:	b508      	push	{r3, lr}
 80a165a:	4b02      	ldr	r3, [pc, #8]	; (80a1664 <HAL_I2C_Begin_Transmission+0xc>)
 80a165c:	681b      	ldr	r3, [r3, #0]
 80a165e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a1660:	9301      	str	r3, [sp, #4]
 80a1662:	bd08      	pop	{r3, pc}
 80a1664:	080601ac 	.word	0x080601ac

080a1668 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a1668:	b508      	push	{r3, lr}
 80a166a:	4b02      	ldr	r3, [pc, #8]	; (80a1674 <HAL_I2C_End_Transmission+0xc>)
 80a166c:	681b      	ldr	r3, [r3, #0]
 80a166e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a1670:	9301      	str	r3, [sp, #4]
 80a1672:	bd08      	pop	{r3, pc}
 80a1674:	080601ac 	.word	0x080601ac

080a1678 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a1678:	b508      	push	{r3, lr}
 80a167a:	4b02      	ldr	r3, [pc, #8]	; (80a1684 <HAL_I2C_Write_Data+0xc>)
 80a167c:	681b      	ldr	r3, [r3, #0]
 80a167e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a1680:	9301      	str	r3, [sp, #4]
 80a1682:	bd08      	pop	{r3, pc}
 80a1684:	080601ac 	.word	0x080601ac

080a1688 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a1688:	b508      	push	{r3, lr}
 80a168a:	4b02      	ldr	r3, [pc, #8]	; (80a1694 <HAL_I2C_Available_Data+0xc>)
 80a168c:	681b      	ldr	r3, [r3, #0]
 80a168e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a1690:	9301      	str	r3, [sp, #4]
 80a1692:	bd08      	pop	{r3, pc}
 80a1694:	080601ac 	.word	0x080601ac

080a1698 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a1698:	b508      	push	{r3, lr}
 80a169a:	4b02      	ldr	r3, [pc, #8]	; (80a16a4 <HAL_I2C_Read_Data+0xc>)
 80a169c:	681b      	ldr	r3, [r3, #0]
 80a169e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a16a0:	9301      	str	r3, [sp, #4]
 80a16a2:	bd08      	pop	{r3, pc}
 80a16a4:	080601ac 	.word	0x080601ac

080a16a8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a16a8:	b508      	push	{r3, lr}
 80a16aa:	4b02      	ldr	r3, [pc, #8]	; (80a16b4 <HAL_I2C_Peek_Data+0xc>)
 80a16ac:	681b      	ldr	r3, [r3, #0]
 80a16ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a16b0:	9301      	str	r3, [sp, #4]
 80a16b2:	bd08      	pop	{r3, pc}
 80a16b4:	080601ac 	.word	0x080601ac

080a16b8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a16b8:	b508      	push	{r3, lr}
 80a16ba:	4b02      	ldr	r3, [pc, #8]	; (80a16c4 <HAL_I2C_Flush_Data+0xc>)
 80a16bc:	681b      	ldr	r3, [r3, #0]
 80a16be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a16c0:	9301      	str	r3, [sp, #4]
 80a16c2:	bd08      	pop	{r3, pc}
 80a16c4:	080601ac 	.word	0x080601ac

080a16c8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a16c8:	b508      	push	{r3, lr}
 80a16ca:	4b02      	ldr	r3, [pc, #8]	; (80a16d4 <HAL_I2C_Is_Enabled+0xc>)
 80a16cc:	681b      	ldr	r3, [r3, #0]
 80a16ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a16d0:	9301      	str	r3, [sp, #4]
 80a16d2:	bd08      	pop	{r3, pc}
 80a16d4:	080601ac 	.word	0x080601ac

080a16d8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a16d8:	b508      	push	{r3, lr}
 80a16da:	4b03      	ldr	r3, [pc, #12]	; (80a16e8 <HAL_I2C_Init+0x10>)
 80a16dc:	681b      	ldr	r3, [r3, #0]
 80a16de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a16e2:	9301      	str	r3, [sp, #4]
 80a16e4:	bd08      	pop	{r3, pc}
 80a16e6:	0000      	.short	0x0000
 80a16e8:	080601ac 	.word	0x080601ac

080a16ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a16ec:	b508      	push	{r3, lr}
 80a16ee:	4b02      	ldr	r3, [pc, #8]	; (80a16f8 <HAL_USB_USART_Init+0xc>)
 80a16f0:	681b      	ldr	r3, [r3, #0]
 80a16f2:	681b      	ldr	r3, [r3, #0]
 80a16f4:	9301      	str	r3, [sp, #4]
 80a16f6:	bd08      	pop	{r3, pc}
 80a16f8:	080601d8 	.word	0x080601d8

080a16fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a16fc:	b508      	push	{r3, lr}
 80a16fe:	4b02      	ldr	r3, [pc, #8]	; (80a1708 <HAL_USB_USART_Available_Data+0xc>)
 80a1700:	681b      	ldr	r3, [r3, #0]
 80a1702:	691b      	ldr	r3, [r3, #16]
 80a1704:	9301      	str	r3, [sp, #4]
 80a1706:	bd08      	pop	{r3, pc}
 80a1708:	080601d8 	.word	0x080601d8

080a170c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a170c:	b508      	push	{r3, lr}
 80a170e:	4b02      	ldr	r3, [pc, #8]	; (80a1718 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a1710:	681b      	ldr	r3, [r3, #0]
 80a1712:	695b      	ldr	r3, [r3, #20]
 80a1714:	9301      	str	r3, [sp, #4]
 80a1716:	bd08      	pop	{r3, pc}
 80a1718:	080601d8 	.word	0x080601d8

080a171c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a171c:	b508      	push	{r3, lr}
 80a171e:	4b02      	ldr	r3, [pc, #8]	; (80a1728 <HAL_USB_USART_Receive_Data+0xc>)
 80a1720:	681b      	ldr	r3, [r3, #0]
 80a1722:	699b      	ldr	r3, [r3, #24]
 80a1724:	9301      	str	r3, [sp, #4]
 80a1726:	bd08      	pop	{r3, pc}
 80a1728:	080601d8 	.word	0x080601d8

080a172c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a172c:	b508      	push	{r3, lr}
 80a172e:	4b02      	ldr	r3, [pc, #8]	; (80a1738 <HAL_USB_USART_Send_Data+0xc>)
 80a1730:	681b      	ldr	r3, [r3, #0]
 80a1732:	69db      	ldr	r3, [r3, #28]
 80a1734:	9301      	str	r3, [sp, #4]
 80a1736:	bd08      	pop	{r3, pc}
 80a1738:	080601d8 	.word	0x080601d8

080a173c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a173c:	b508      	push	{r3, lr}
 80a173e:	4b02      	ldr	r3, [pc, #8]	; (80a1748 <HAL_USB_USART_Flush_Data+0xc>)
 80a1740:	681b      	ldr	r3, [r3, #0]
 80a1742:	6a1b      	ldr	r3, [r3, #32]
 80a1744:	9301      	str	r3, [sp, #4]
 80a1746:	bd08      	pop	{r3, pc}
 80a1748:	080601d8 	.word	0x080601d8

080a174c <inet_gethostbyname>:
DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a174c:	b508      	push	{r3, lr}
 80a174e:	4b02      	ldr	r3, [pc, #8]	; (80a1758 <inet_gethostbyname+0xc>)
 80a1750:	681b      	ldr	r3, [r3, #0]
 80a1752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a1754:	9301      	str	r3, [sp, #4]
 80a1756:	bd08      	pop	{r3, pc}
 80a1758:	080601c0 	.word	0x080601c0

080a175c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a175c:	b508      	push	{r3, lr}
 80a175e:	4b02      	ldr	r3, [pc, #8]	; (80a1768 <set_system_mode+0xc>)
 80a1760:	681b      	ldr	r3, [r3, #0]
 80a1762:	685b      	ldr	r3, [r3, #4]
 80a1764:	9301      	str	r3, [sp, #4]
 80a1766:	bd08      	pop	{r3, pc}
 80a1768:	080601a4 	.word	0x080601a4

080a176c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a176c:	b508      	push	{r3, lr}
 80a176e:	4b02      	ldr	r3, [pc, #8]	; (80a1778 <system_delay_ms+0xc>)
 80a1770:	681b      	ldr	r3, [r3, #0]
 80a1772:	695b      	ldr	r3, [r3, #20]
 80a1774:	9301      	str	r3, [sp, #4]
 80a1776:	bd08      	pop	{r3, pc}
 80a1778:	080601a4 	.word	0x080601a4

080a177c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a177c:	b508      	push	{r3, lr}
 80a177e:	4b02      	ldr	r3, [pc, #8]	; (80a1788 <application_thread_current+0xc>)
 80a1780:	681b      	ldr	r3, [r3, #0]
 80a1782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a1784:	9301      	str	r3, [sp, #4]
 80a1786:	bd08      	pop	{r3, pc}
 80a1788:	080601a4 	.word	0x080601a4

080a178c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a178c:	b508      	push	{r3, lr}
 80a178e:	4b02      	ldr	r3, [pc, #8]	; (80a1798 <application_thread_invoke+0xc>)
 80a1790:	681b      	ldr	r3, [r3, #0]
 80a1792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a1794:	9301      	str	r3, [sp, #4]
 80a1796:	bd08      	pop	{r3, pc}
 80a1798:	080601a4 	.word	0x080601a4

080a179c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a179c:	b508      	push	{r3, lr}
 80a179e:	4b03      	ldr	r3, [pc, #12]	; (80a17ac <system_ctrl_set_app_request_handler+0x10>)
 80a17a0:	681b      	ldr	r3, [r3, #0]
 80a17a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a17a6:	9301      	str	r3, [sp, #4]
 80a17a8:	bd08      	pop	{r3, pc}
 80a17aa:	0000      	.short	0x0000
 80a17ac:	080601a4 	.word	0x080601a4

080a17b0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a17b0:	b508      	push	{r3, lr}
 80a17b2:	4b03      	ldr	r3, [pc, #12]	; (80a17c0 <system_ctrl_set_result+0x10>)
 80a17b4:	681b      	ldr	r3, [r3, #0]
 80a17b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a17ba:	9301      	str	r3, [sp, #4]
 80a17bc:	bd08      	pop	{r3, pc}
 80a17be:	0000      	.short	0x0000
 80a17c0:	080601a4 	.word	0x080601a4

080a17c4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a17c4:	b508      	push	{r3, lr}
 80a17c6:	4b02      	ldr	r3, [pc, #8]	; (80a17d0 <network_connect+0xc>)
 80a17c8:	681b      	ldr	r3, [r3, #0]
 80a17ca:	685b      	ldr	r3, [r3, #4]
 80a17cc:	9301      	str	r3, [sp, #4]
 80a17ce:	bd08      	pop	{r3, pc}
 80a17d0:	080601c8 	.word	0x080601c8

080a17d4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a17d4:	b508      	push	{r3, lr}
 80a17d6:	4b02      	ldr	r3, [pc, #8]	; (80a17e0 <network_connecting+0xc>)
 80a17d8:	681b      	ldr	r3, [r3, #0]
 80a17da:	689b      	ldr	r3, [r3, #8]
 80a17dc:	9301      	str	r3, [sp, #4]
 80a17de:	bd08      	pop	{r3, pc}
 80a17e0:	080601c8 	.word	0x080601c8

080a17e4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a17e4:	b508      	push	{r3, lr}
 80a17e6:	4b02      	ldr	r3, [pc, #8]	; (80a17f0 <network_disconnect+0xc>)
 80a17e8:	681b      	ldr	r3, [r3, #0]
 80a17ea:	68db      	ldr	r3, [r3, #12]
 80a17ec:	9301      	str	r3, [sp, #4]
 80a17ee:	bd08      	pop	{r3, pc}
 80a17f0:	080601c8 	.word	0x080601c8

080a17f4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a17f4:	b508      	push	{r3, lr}
 80a17f6:	4b02      	ldr	r3, [pc, #8]	; (80a1800 <network_ready+0xc>)
 80a17f8:	681b      	ldr	r3, [r3, #0]
 80a17fa:	691b      	ldr	r3, [r3, #16]
 80a17fc:	9301      	str	r3, [sp, #4]
 80a17fe:	bd08      	pop	{r3, pc}
 80a1800:	080601c8 	.word	0x080601c8

080a1804 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1804:	b508      	push	{r3, lr}
 80a1806:	4b02      	ldr	r3, [pc, #8]	; (80a1810 <network_on+0xc>)
 80a1808:	681b      	ldr	r3, [r3, #0]
 80a180a:	695b      	ldr	r3, [r3, #20]
 80a180c:	9301      	str	r3, [sp, #4]
 80a180e:	bd08      	pop	{r3, pc}
 80a1810:	080601c8 	.word	0x080601c8

080a1814 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a1814:	b508      	push	{r3, lr}
 80a1816:	4b02      	ldr	r3, [pc, #8]	; (80a1820 <network_off+0xc>)
 80a1818:	681b      	ldr	r3, [r3, #0]
 80a181a:	699b      	ldr	r3, [r3, #24]
 80a181c:	9301      	str	r3, [sp, #4]
 80a181e:	bd08      	pop	{r3, pc}
 80a1820:	080601c8 	.word	0x080601c8

080a1824 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a1824:	b508      	push	{r3, lr}
 80a1826:	4b02      	ldr	r3, [pc, #8]	; (80a1830 <network_listen+0xc>)
 80a1828:	681b      	ldr	r3, [r3, #0]
 80a182a:	69db      	ldr	r3, [r3, #28]
 80a182c:	9301      	str	r3, [sp, #4]
 80a182e:	bd08      	pop	{r3, pc}
 80a1830:	080601c8 	.word	0x080601c8

080a1834 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a1834:	b508      	push	{r3, lr}
 80a1836:	4b02      	ldr	r3, [pc, #8]	; (80a1840 <network_listening+0xc>)
 80a1838:	681b      	ldr	r3, [r3, #0]
 80a183a:	6a1b      	ldr	r3, [r3, #32]
 80a183c:	9301      	str	r3, [sp, #4]
 80a183e:	bd08      	pop	{r3, pc}
 80a1840:	080601c8 	.word	0x080601c8

080a1844 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a1844:	b508      	push	{r3, lr}
 80a1846:	4b02      	ldr	r3, [pc, #8]	; (80a1850 <network_set_listen_timeout+0xc>)
 80a1848:	681b      	ldr	r3, [r3, #0]
 80a184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a184c:	9301      	str	r3, [sp, #4]
 80a184e:	bd08      	pop	{r3, pc}
 80a1850:	080601c8 	.word	0x080601c8

080a1854 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a1854:	b508      	push	{r3, lr}
 80a1856:	4b02      	ldr	r3, [pc, #8]	; (80a1860 <network_get_listen_timeout+0xc>)
 80a1858:	681b      	ldr	r3, [r3, #0]
 80a185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a185c:	9301      	str	r3, [sp, #4]
 80a185e:	bd08      	pop	{r3, pc}
 80a1860:	080601c8 	.word	0x080601c8

080a1864 <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a1864:	b508      	push	{r3, lr}
 80a1866:	4b02      	ldr	r3, [pc, #8]	; (80a1870 <spark_function+0xc>)
 80a1868:	681b      	ldr	r3, [r3, #0]
 80a186a:	685b      	ldr	r3, [r3, #4]
 80a186c:	9301      	str	r3, [sp, #4]
 80a186e:	bd08      	pop	{r3, pc}
 80a1870:	080601cc 	.word	0x080601cc

080a1874 <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a1874:	b508      	push	{r3, lr}
 80a1876:	4b02      	ldr	r3, [pc, #8]	; (80a1880 <spark_cloud_flag_connected+0xc>)
 80a1878:	681b      	ldr	r3, [r3, #0]
 80a187a:	695b      	ldr	r3, [r3, #20]
 80a187c:	9301      	str	r3, [sp, #4]
 80a187e:	bd08      	pop	{r3, pc}
 80a1880:	080601cc 	.word	0x080601cc

080a1884 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a1884:	b508      	push	{r3, lr}
 80a1886:	4b02      	ldr	r3, [pc, #8]	; (80a1890 <spark_send_event+0xc>)
 80a1888:	681b      	ldr	r3, [r3, #0]
 80a188a:	6a1b      	ldr	r3, [r3, #32]
 80a188c:	9301      	str	r3, [sp, #4]
 80a188e:	bd08      	pop	{r3, pc}
 80a1890:	080601cc 	.word	0x080601cc

080a1894 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a1894:	b508      	push	{r3, lr}
 80a1896:	4b02      	ldr	r3, [pc, #8]	; (80a18a0 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a1898:	681b      	ldr	r3, [r3, #0]
 80a189a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a189c:	9301      	str	r3, [sp, #4]
 80a189e:	bd08      	pop	{r3, pc}
 80a18a0:	080601cc 	.word	0x080601cc

080a18a4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a18a4:	b508      	push	{r3, lr}
 80a18a6:	4b02      	ldr	r3, [pc, #8]	; (80a18b0 <malloc+0xc>)
 80a18a8:	681b      	ldr	r3, [r3, #0]
 80a18aa:	681b      	ldr	r3, [r3, #0]
 80a18ac:	9301      	str	r3, [sp, #4]
 80a18ae:	bd08      	pop	{r3, pc}
 80a18b0:	080601a0 	.word	0x080601a0

080a18b4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a18b4:	b508      	push	{r3, lr}
 80a18b6:	4b02      	ldr	r3, [pc, #8]	; (80a18c0 <free+0xc>)
 80a18b8:	681b      	ldr	r3, [r3, #0]
 80a18ba:	685b      	ldr	r3, [r3, #4]
 80a18bc:	9301      	str	r3, [sp, #4]
 80a18be:	bd08      	pop	{r3, pc}
 80a18c0:	080601a0 	.word	0x080601a0

080a18c4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a18c4:	b508      	push	{r3, lr}
 80a18c6:	4b02      	ldr	r3, [pc, #8]	; (80a18d0 <realloc+0xc>)
 80a18c8:	681b      	ldr	r3, [r3, #0]
 80a18ca:	689b      	ldr	r3, [r3, #8]
 80a18cc:	9301      	str	r3, [sp, #4]
 80a18ce:	bd08      	pop	{r3, pc}
 80a18d0:	080601a0 	.word	0x080601a0

080a18d4 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a18d4:	b508      	push	{r3, lr}
 80a18d6:	4b02      	ldr	r3, [pc, #8]	; (80a18e0 <snprintf+0xc>)
 80a18d8:	681b      	ldr	r3, [r3, #0]
 80a18da:	69db      	ldr	r3, [r3, #28]
 80a18dc:	9301      	str	r3, [sp, #4]
 80a18de:	bd08      	pop	{r3, pc}
 80a18e0:	080601a0 	.word	0x080601a0

080a18e4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a18e4:	b508      	push	{r3, lr}
 80a18e6:	4b02      	ldr	r3, [pc, #8]	; (80a18f0 <abort+0xc>)
 80a18e8:	681b      	ldr	r3, [r3, #0]
 80a18ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a18ec:	9301      	str	r3, [sp, #4]
 80a18ee:	bd08      	pop	{r3, pc}
 80a18f0:	080601a0 	.word	0x080601a0

080a18f4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a18f4:	b508      	push	{r3, lr}
 80a18f6:	4b02      	ldr	r3, [pc, #8]	; (80a1900 <_malloc_r+0xc>)
 80a18f8:	681b      	ldr	r3, [r3, #0]
 80a18fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a18fc:	9301      	str	r3, [sp, #4]
 80a18fe:	bd08      	pop	{r3, pc}
 80a1900:	080601a0 	.word	0x080601a0

080a1904 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a1904:	b508      	push	{r3, lr}
 80a1906:	4b02      	ldr	r3, [pc, #8]	; (80a1910 <__errno+0xc>)
 80a1908:	681b      	ldr	r3, [r3, #0]
 80a190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a190c:	9301      	str	r3, [sp, #4]
 80a190e:	bd08      	pop	{r3, pc}
 80a1910:	080601a0 	.word	0x080601a0

080a1914 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1914:	4770      	bx	lr

080a1916 <_ZN8SPIClassD0Ev>:
 80a1916:	b510      	push	{r4, lr}
 80a1918:	4604      	mov	r4, r0
 80a191a:	2110      	movs	r1, #16
 80a191c:	f001 f9a4 	bl	80a2c68 <_ZdlPvj>
 80a1920:	4620      	mov	r0, r4
 80a1922:	bd10      	pop	{r4, pc}

080a1924 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1924:	b570      	push	{r4, r5, r6, lr}
 80a1926:	4604      	mov	r4, r0
 80a1928:	460e      	mov	r6, r1
 80a192a:	4b07      	ldr	r3, [pc, #28]	; (80a1948 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a192c:	2500      	movs	r5, #0
 80a192e:	6003      	str	r3, [r0, #0]
 80a1930:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1934:	f7ff fe30 	bl	80a1598 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1938:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a193a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a193c:	f7ff fdd4 	bl	80a14e8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a1940:	60a5      	str	r5, [r4, #8]
}
 80a1942:	4620      	mov	r0, r4
 80a1944:	bd70      	pop	{r4, r5, r6, pc}
 80a1946:	bf00      	nop
 80a1948:	080a4844 	.word	0x080a4844

080a194c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a194c:	7900      	ldrb	r0, [r0, #4]
 80a194e:	f7ff bdd3 	b.w	80a14f8 <HAL_SPI_Is_Enabled>

080a1952 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a1952:	4601      	mov	r1, r0
 80a1954:	2200      	movs	r2, #0
 80a1956:	208c      	movs	r0, #140	; 0x8c
 80a1958:	f7ff bdf6 	b.w	80a1548 <HAL_Core_System_Reset_Ex>

080a195c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a195c:	2000      	movs	r0, #0
 80a195e:	f7ff bff8 	b.w	80a1952 <_ZN11SystemClass5resetEm>
	...

080a1964 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1968:	4b03      	ldr	r3, [pc, #12]	; (80a1978 <_GLOBAL__sub_I_System+0x14>)
 80a196a:	2000      	movs	r0, #0
 80a196c:	7018      	strb	r0, [r3, #0]
 80a196e:	8058      	strh	r0, [r3, #2]
 80a1970:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1972:	f7ff bef3 	b.w	80a175c <set_system_mode>
 80a1976:	bf00      	nop
 80a1978:	200001b6 	.word	0x200001b6

080a197c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a197c:	b510      	push	{r4, lr}
 80a197e:	4604      	mov	r4, r0
{
	free(buffer);
 80a1980:	6800      	ldr	r0, [r0, #0]
 80a1982:	f7ff ff97 	bl	80a18b4 <free>
}
 80a1986:	4620      	mov	r0, r4
 80a1988:	bd10      	pop	{r4, pc}

080a198a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a198a:	b510      	push	{r4, lr}
 80a198c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a198e:	6800      	ldr	r0, [r0, #0]
 80a1990:	b108      	cbz	r0, 80a1996 <_ZN6String10invalidateEv+0xc>
 80a1992:	f7ff ff8f 	bl	80a18b4 <free>
	buffer = NULL;
 80a1996:	2300      	movs	r3, #0
 80a1998:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a199a:	60a3      	str	r3, [r4, #8]
 80a199c:	6063      	str	r3, [r4, #4]
 80a199e:	bd10      	pop	{r4, pc}

080a19a0 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a19a0:	b538      	push	{r3, r4, r5, lr}
 80a19a2:	4604      	mov	r4, r0
 80a19a4:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a19a6:	6800      	ldr	r0, [r0, #0]
 80a19a8:	3101      	adds	r1, #1
 80a19aa:	f7ff ff8b 	bl	80a18c4 <realloc>
	if (newbuffer) {
 80a19ae:	b110      	cbz	r0, 80a19b6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a19b0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a19b4:	2001      	movs	r0, #1
	}
	return 0;
}
 80a19b6:	bd38      	pop	{r3, r4, r5, pc}

080a19b8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a19b8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a19ba:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a19bc:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a19be:	b113      	cbz	r3, 80a19c6 <_ZN6String7reserveEj+0xe>
 80a19c0:	6843      	ldr	r3, [r0, #4]
 80a19c2:	428b      	cmp	r3, r1
 80a19c4:	d207      	bcs.n	80a19d6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a19c6:	4620      	mov	r0, r4
 80a19c8:	f7ff ffea 	bl	80a19a0 <_ZN6String12changeBufferEj>
 80a19cc:	b120      	cbz	r0, 80a19d8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a19ce:	68a3      	ldr	r3, [r4, #8]
 80a19d0:	b90b      	cbnz	r3, 80a19d6 <_ZN6String7reserveEj+0x1e>
 80a19d2:	6822      	ldr	r2, [r4, #0]
 80a19d4:	7013      	strb	r3, [r2, #0]
 80a19d6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a19d8:	bd10      	pop	{r4, pc}

080a19da <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a19da:	b570      	push	{r4, r5, r6, lr}
 80a19dc:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a19de:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a19e0:	4604      	mov	r4, r0
 80a19e2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a19e4:	f7ff ffe8 	bl	80a19b8 <_ZN6String7reserveEj>
 80a19e8:	b918      	cbnz	r0, 80a19f2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a19ea:	4620      	mov	r0, r4
 80a19ec:	f7ff ffcd 	bl	80a198a <_ZN6String10invalidateEv>
		return *this;
 80a19f0:	e009      	b.n	80a1a06 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a19f2:	462a      	mov	r2, r5
 80a19f4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a19f6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a19f8:	6820      	ldr	r0, [r4, #0]
 80a19fa:	f002 fd91 	bl	80a4520 <memcpy>
	buffer[len] = 0;
 80a19fe:	6822      	ldr	r2, [r4, #0]
 80a1a00:	68a3      	ldr	r3, [r4, #8]
 80a1a02:	2100      	movs	r1, #0
 80a1a04:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a1a06:	4620      	mov	r0, r4
 80a1a08:	bd70      	pop	{r4, r5, r6, pc}

080a1a0a <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1a0a:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1a0c:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a1a0e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1a10:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1a12:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1a14:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1a16:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1a18:	460d      	mov	r5, r1
 80a1a1a:	b139      	cbz	r1, 80a1a2c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1a1c:	4608      	mov	r0, r1
 80a1a1e:	f002 fdd6 	bl	80a45ce <strlen>
 80a1a22:	4629      	mov	r1, r5
 80a1a24:	4602      	mov	r2, r0
 80a1a26:	4620      	mov	r0, r4
 80a1a28:	f7ff ffd7 	bl	80a19da <_ZN6String4copyEPKcj>
}
 80a1a2c:	4620      	mov	r0, r4
 80a1a2e:	bd38      	pop	{r3, r4, r5, pc}

080a1a30 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1a30:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a1a32:	b510      	push	{r4, lr}
 80a1a34:	460b      	mov	r3, r1
 80a1a36:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1a38:	d007      	beq.n	80a1a4a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1a3a:	6809      	ldr	r1, [r1, #0]
 80a1a3c:	b119      	cbz	r1, 80a1a46 <_ZN6StringaSERKS_+0x16>
 80a1a3e:	689a      	ldr	r2, [r3, #8]
 80a1a40:	f7ff ffcb 	bl	80a19da <_ZN6String4copyEPKcj>
 80a1a44:	e001      	b.n	80a1a4a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a1a46:	f7ff ffa0 	bl	80a198a <_ZN6String10invalidateEv>

	return *this;
}
 80a1a4a:	4620      	mov	r0, r4
 80a1a4c:	bd10      	pop	{r4, pc}

080a1a4e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1a4e:	b510      	push	{r4, lr}
 80a1a50:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1a52:	2300      	movs	r3, #0
 80a1a54:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1a56:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1a58:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1a5a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1a5c:	f7ff ffe8 	bl	80a1a30 <_ZN6StringaSERKS_>
}
 80a1a60:	4620      	mov	r0, r4
 80a1a62:	bd10      	pop	{r4, pc}

080a1a64 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a1a64:	6800      	ldr	r0, [r0, #0]
 80a1a66:	b108      	cbz	r0, 80a1a6c <_ZNK6String5toIntEv+0x8>
 80a1a68:	f002 bd48 	b.w	80a44fc <atol>
	return 0;
}
 80a1a6c:	4770      	bx	lr

080a1a6e <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1a70:	4606      	mov	r6, r0
 80a1a72:	460d      	mov	r5, r1
 80a1a74:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1a76:	2400      	movs	r4, #0
  while (size--) {
 80a1a78:	42bd      	cmp	r5, r7
 80a1a7a:	d00c      	beq.n	80a1a96 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a1a7c:	6833      	ldr	r3, [r6, #0]
 80a1a7e:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1a82:	689b      	ldr	r3, [r3, #8]
 80a1a84:	4630      	mov	r0, r6
 80a1a86:	4798      	blx	r3
     if (chunk>=0)
 80a1a88:	2800      	cmp	r0, #0
 80a1a8a:	db01      	blt.n	80a1a90 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a1a8c:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1a8e:	e7f3      	b.n	80a1a78 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1a90:	2c00      	cmp	r4, #0
 80a1a92:	bf08      	it	eq
 80a1a94:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1a96:	4620      	mov	r0, r4
 80a1a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1a9a <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a1a9a:	b570      	push	{r4, r5, r6, lr}
 80a1a9c:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1a9e:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1aa0:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1aa2:	b149      	cbz	r1, 80a1ab8 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1aa4:	f002 fd93 	bl	80a45ce <strlen>
 80a1aa8:	682b      	ldr	r3, [r5, #0]
 80a1aaa:	4602      	mov	r2, r0
 80a1aac:	4621      	mov	r1, r4
 80a1aae:	4628      	mov	r0, r5
    }
 80a1ab0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a1ab4:	68db      	ldr	r3, [r3, #12]
 80a1ab6:	4718      	bx	r3
    }
 80a1ab8:	bd70      	pop	{r4, r5, r6, pc}

080a1aba <_ZN5Print5printEPKc>:
 80a1aba:	b508      	push	{r3, lr}
 80a1abc:	f7ff ffed 	bl	80a1a9a <_ZN5Print5writeEPKc>
 80a1ac0:	bd08      	pop	{r3, pc}

080a1ac2 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a1ac2:	6803      	ldr	r3, [r0, #0]
 80a1ac4:	689b      	ldr	r3, [r3, #8]
 80a1ac6:	4718      	bx	r3

080a1ac8 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1ac8:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a1aca:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a1acc:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a1ace:	f7ff fff8 	bl	80a1ac2 <_ZN5Print5printEc>
  n += print('\n');
 80a1ad2:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a1ad4:	4604      	mov	r4, r0
  n += print('\n');
 80a1ad6:	4628      	mov	r0, r5
 80a1ad8:	f7ff fff3 	bl	80a1ac2 <_ZN5Print5printEc>
  return n;
}
 80a1adc:	4420      	add	r0, r4
 80a1ade:	bd38      	pop	{r3, r4, r5, pc}

080a1ae0 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a1ae0:	2a01      	cmp	r2, #1
 80a1ae2:	bf98      	it	ls
 80a1ae4:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a1ae6:	b530      	push	{r4, r5, lr}
 80a1ae8:	460b      	mov	r3, r1
 80a1aea:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a1aec:	2100      	movs	r1, #0
 80a1aee:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a1af2:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a1af6:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a1afa:	fb05 3312 	mls	r3, r5, r2, r3
 80a1afe:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a1b00:	2b09      	cmp	r3, #9
 80a1b02:	bf94      	ite	ls
 80a1b04:	3330      	addls	r3, #48	; 0x30
 80a1b06:	3337      	addhi	r3, #55	; 0x37
 80a1b08:	b2db      	uxtb	r3, r3
 80a1b0a:	4621      	mov	r1, r4
 80a1b0c:	f804 3901 	strb.w	r3, [r4], #-1
 80a1b10:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1b12:	2d00      	cmp	r5, #0
 80a1b14:	d1ef      	bne.n	80a1af6 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1b16:	f7ff ffc0 	bl	80a1a9a <_ZN5Print5writeEPKc>
}
 80a1b1a:	b00b      	add	sp, #44	; 0x2c
 80a1b1c:	bd30      	pop	{r4, r5, pc}

080a1b1e <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a1b1e:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a1b20:	b922      	cbnz	r2, 80a1b2c <_ZN5Print5printEmi+0xe>
 80a1b22:	6803      	ldr	r3, [r0, #0]
 80a1b24:	b2c9      	uxtb	r1, r1
 80a1b26:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1b28:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1b2a:	4718      	bx	r3
  else return printNumber(n, base);
 80a1b2c:	b2d2      	uxtb	r2, r2
}
 80a1b2e:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1b30:	f7ff bfd6 	b.w	80a1ae0 <_ZN5Print11printNumberEmh>

080a1b34 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1b34:	f7ff bff3 	b.w	80a1b1e <_ZN5Print5printEmi>

080a1b38 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a1b38:	b538      	push	{r3, r4, r5, lr}
 80a1b3a:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1b3c:	f7ff ffef 	bl	80a1b1e <_ZN5Print5printEmi>
 80a1b40:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a1b42:	4628      	mov	r0, r5
 80a1b44:	f7ff ffc0 	bl	80a1ac8 <_ZN5Print7printlnEv>
  return n;
}
 80a1b48:	4420      	add	r0, r4
 80a1b4a:	bd38      	pop	{r3, r4, r5, pc}

080a1b4c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a1b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a1b50:	4607      	mov	r7, r0
 80a1b52:	460e      	mov	r6, r1
  if (base == 0) {
 80a1b54:	4615      	mov	r5, r2
 80a1b56:	b92a      	cbnz	r2, 80a1b64 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a1b5c:	6803      	ldr	r3, [r0, #0]
 80a1b5e:	b2c9      	uxtb	r1, r1
 80a1b60:	689b      	ldr	r3, [r3, #8]
 80a1b62:	4718      	bx	r3
  } else if (base == 10) {
 80a1b64:	2a0a      	cmp	r2, #10
 80a1b66:	d102      	bne.n	80a1b6e <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a1b68:	2900      	cmp	r1, #0
 80a1b6a:	da01      	bge.n	80a1b70 <_ZN5Print5printEli+0x24>
 80a1b6c:	e004      	b.n	80a1b78 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1b6e:	b2d2      	uxtb	r2, r2
  }
}
 80a1b70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a1b74:	f7ff bfb4 	b.w	80a1ae0 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1b78:	212d      	movs	r1, #45	; 0x2d
 80a1b7a:	f7ff ffa2 	bl	80a1ac2 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a1b7e:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a1b80:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a1b82:	4271      	negs	r1, r6
 80a1b84:	4638      	mov	r0, r7
 80a1b86:	f7ff ffab 	bl	80a1ae0 <_ZN5Print11printNumberEmh>
 80a1b8a:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a1b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1b90 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1b90:	f7ff bfdc 	b.w	80a1b4c <_ZN5Print5printEli>

080a1b94 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a1b94:	b538      	push	{r3, r4, r5, lr}
 80a1b96:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1b98:	f7ff ffd8 	bl	80a1b4c <_ZN5Print5printEli>
 80a1b9c:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a1b9e:	4628      	mov	r0, r5
 80a1ba0:	f7ff ff92 	bl	80a1ac8 <_ZN5Print7printlnEv>
  return n;
}
 80a1ba4:	4420      	add	r0, r4
 80a1ba6:	bd38      	pop	{r3, r4, r5, pc}

080a1ba8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1bac:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1bae:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1bb0:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a1bb2:	4617      	mov	r7, r2
 80a1bb4:	461e      	mov	r6, r3
 80a1bb6:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a1bba:	f002 f907 	bl	80a3dcc <__aeabi_dcmpun>
 80a1bbe:	b108      	cbz	r0, 80a1bc4 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1bc0:	4947      	ldr	r1, [pc, #284]	; (80a1ce0 <_ZN5Print10printFloatEdh+0x138>)
 80a1bc2:	e012      	b.n	80a1bea <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1bc4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a1bc8:	f04f 32ff 	mov.w	r2, #4294967295
 80a1bcc:	4b45      	ldr	r3, [pc, #276]	; (80a1ce4 <_ZN5Print10printFloatEdh+0x13c>)
 80a1bce:	4638      	mov	r0, r7
 80a1bd0:	4621      	mov	r1, r4
 80a1bd2:	f002 f8fb 	bl	80a3dcc <__aeabi_dcmpun>
 80a1bd6:	b968      	cbnz	r0, 80a1bf4 <_ZN5Print10printFloatEdh+0x4c>
 80a1bd8:	f04f 32ff 	mov.w	r2, #4294967295
 80a1bdc:	4b41      	ldr	r3, [pc, #260]	; (80a1ce4 <_ZN5Print10printFloatEdh+0x13c>)
 80a1bde:	4638      	mov	r0, r7
 80a1be0:	4621      	mov	r1, r4
 80a1be2:	f002 f8d5 	bl	80a3d90 <__aeabi_dcmple>
 80a1be6:	b928      	cbnz	r0, 80a1bf4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1be8:	493f      	ldr	r1, [pc, #252]	; (80a1ce8 <_ZN5Print10printFloatEdh+0x140>)
 80a1bea:	4640      	mov	r0, r8
 80a1bec:	f7ff ff55 	bl	80a1a9a <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a1bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a1bf4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1bf8:	4b3c      	ldr	r3, [pc, #240]	; (80a1cec <_ZN5Print10printFloatEdh+0x144>)
 80a1bfa:	4638      	mov	r0, r7
 80a1bfc:	4631      	mov	r1, r6
 80a1bfe:	f002 f8db 	bl	80a3db8 <__aeabi_dcmpgt>
 80a1c02:	b108      	cbz	r0, 80a1c08 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c04:	493a      	ldr	r1, [pc, #232]	; (80a1cf0 <_ZN5Print10printFloatEdh+0x148>)
 80a1c06:	e7f0      	b.n	80a1bea <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a1c08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a1c0c:	4b39      	ldr	r3, [pc, #228]	; (80a1cf4 <_ZN5Print10printFloatEdh+0x14c>)
 80a1c0e:	4638      	mov	r0, r7
 80a1c10:	4631      	mov	r1, r6
 80a1c12:	f002 f8b3 	bl	80a3d7c <__aeabi_dcmplt>
 80a1c16:	2800      	cmp	r0, #0
 80a1c18:	d1f4      	bne.n	80a1c04 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a1c1a:	2200      	movs	r2, #0
 80a1c1c:	2300      	movs	r3, #0
 80a1c1e:	4638      	mov	r0, r7
 80a1c20:	4631      	mov	r1, r6
 80a1c22:	f002 f8ab 	bl	80a3d7c <__aeabi_dcmplt>
 80a1c26:	b138      	cbz	r0, 80a1c38 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a1c28:	212d      	movs	r1, #45	; 0x2d
 80a1c2a:	4640      	mov	r0, r8
 80a1c2c:	f7ff ff49 	bl	80a1ac2 <_ZN5Print5printEc>
     number = -number;
 80a1c30:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a1c34:	4604      	mov	r4, r0
 80a1c36:	e000      	b.n	80a1c3a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1c38:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1c3a:	492f      	ldr	r1, [pc, #188]	; (80a1cf8 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a1c3c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a1c40:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a1c42:	fa5f f389 	uxtb.w	r3, r9
 80a1c46:	429d      	cmp	r5, r3
 80a1c48:	d906      	bls.n	80a1c58 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a1c4a:	2200      	movs	r2, #0
 80a1c4c:	4b2b      	ldr	r3, [pc, #172]	; (80a1cfc <_ZN5Print10printFloatEdh+0x154>)
 80a1c4e:	f001 ff4d 	bl	80a3aec <__aeabi_ddiv>
 80a1c52:	f109 0901 	add.w	r9, r9, #1
 80a1c56:	e7f4      	b.n	80a1c42 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a1c58:	463a      	mov	r2, r7
 80a1c5a:	4633      	mov	r3, r6
 80a1c5c:	f001 fc6a 	bl	80a3534 <__adddf3>
 80a1c60:	460f      	mov	r7, r1
 80a1c62:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1c64:	f002 f8f0 	bl	80a3e48 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1c68:	220a      	movs	r2, #10
 80a1c6a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a1c6c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a1c6e:	4640      	mov	r0, r8
 80a1c70:	f7ff ff36 	bl	80a1ae0 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1c74:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a1c76:	b37d      	cbz	r5, 80a1cd8 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a1c78:	4648      	mov	r0, r9
 80a1c7a:	f001 fd97 	bl	80a37ac <__aeabi_ui2d>
 80a1c7e:	4602      	mov	r2, r0
 80a1c80:	460b      	mov	r3, r1
 80a1c82:	4630      	mov	r0, r6
 80a1c84:	4639      	mov	r1, r7
 80a1c86:	f001 fc53 	bl	80a3530 <__aeabi_dsub>
 80a1c8a:	4606      	mov	r6, r0
 80a1c8c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a1c8e:	4640      	mov	r0, r8
 80a1c90:	491b      	ldr	r1, [pc, #108]	; (80a1d00 <_ZN5Print10printFloatEdh+0x158>)
 80a1c92:	f7ff ff02 	bl	80a1a9a <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a1c96:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a1c98:	4b18      	ldr	r3, [pc, #96]	; (80a1cfc <_ZN5Print10printFloatEdh+0x154>)
 80a1c9a:	2200      	movs	r2, #0
 80a1c9c:	4630      	mov	r0, r6
 80a1c9e:	4639      	mov	r1, r7
 80a1ca0:	f001 fdfa 	bl	80a3898 <__aeabi_dmul>
 80a1ca4:	460f      	mov	r7, r1
 80a1ca6:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a1ca8:	f002 f8a6 	bl	80a3df8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1cac:	220a      	movs	r2, #10
 80a1cae:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a1cb0:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a1cb2:	4640      	mov	r0, r8
 80a1cb4:	f7ff ff4a 	bl	80a1b4c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a1cb8:	4404      	add	r4, r0
    remainder -= toPrint;
 80a1cba:	4648      	mov	r0, r9
 80a1cbc:	f001 fd86 	bl	80a37cc <__aeabi_i2d>
 80a1cc0:	4602      	mov	r2, r0
 80a1cc2:	460b      	mov	r3, r1
 80a1cc4:	4630      	mov	r0, r6
 80a1cc6:	4639      	mov	r1, r7
 80a1cc8:	f001 fc32 	bl	80a3530 <__aeabi_dsub>
 80a1ccc:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1cce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a1cd2:	4606      	mov	r6, r0
 80a1cd4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a1cd6:	d1df      	bne.n	80a1c98 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a1cd8:	4620      	mov	r0, r4
 80a1cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a1cde:	bf00      	nop
 80a1ce0:	080a484c 	.word	0x080a484c
 80a1ce4:	7fefffff 	.word	0x7fefffff
 80a1ce8:	080a4856 	.word	0x080a4856
 80a1cec:	41efffff 	.word	0x41efffff
 80a1cf0:	080a4850 	.word	0x080a4850
 80a1cf4:	c1efffff 	.word	0xc1efffff
 80a1cf8:	3fe00000 	.word	0x3fe00000
 80a1cfc:	40240000 	.word	0x40240000
 80a1d00:	080a4854 	.word	0x080a4854

080a1d04 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a1d04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1d06:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a1d0a:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a1d0c:	9100      	str	r1, [sp, #0]
 80a1d0e:	f7ff ff4b 	bl	80a1ba8 <_ZN5Print10printFloatEdh>
 80a1d12:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a1d14:	4628      	mov	r0, r5
 80a1d16:	f7ff fed7 	bl	80a1ac8 <_ZN5Print7printlnEv>
  return n;
}
 80a1d1a:	4420      	add	r0, r4
 80a1d1c:	b003      	add	sp, #12
 80a1d1e:	bd30      	pop	{r4, r5, pc}

080a1d20 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a1d20:	2300      	movs	r3, #0
 80a1d22:	461a      	mov	r2, r3
 80a1d24:	4619      	mov	r1, r3
 80a1d26:	6840      	ldr	r0, [r0, #4]
 80a1d28:	f7ff bd6c 	b.w	80a1804 <network_on>

080a1d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a1d2c:	680b      	ldr	r3, [r1, #0]
 80a1d2e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a1d30:	b113      	cbz	r3, 80a1d38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a1d32:	685a      	ldr	r2, [r3, #4]
 80a1d34:	3201      	adds	r2, #1
 80a1d36:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a1d38:	4770      	bx	lr
	...

080a1d3c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1d3c:	4a01      	ldr	r2, [pc, #4]	; (80a1d44 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1d3e:	4b02      	ldr	r3, [pc, #8]	; (80a1d48 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1d40:	601a      	str	r2, [r3, #0]
 80a1d42:	4770      	bx	lr
 80a1d44:	080a48d0 	.word	0x080a48d0
 80a1d48:	200001bc 	.word	0x200001bc

080a1d4c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a1d4c:	4b02      	ldr	r3, [pc, #8]	; (80a1d58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a1d4e:	681a      	ldr	r2, [r3, #0]
 80a1d50:	4b02      	ldr	r3, [pc, #8]	; (80a1d5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a1d52:	601a      	str	r2, [r3, #0]
 80a1d54:	4770      	bx	lr
 80a1d56:	bf00      	nop
 80a1d58:	20000034 	.word	0x20000034
 80a1d5c:	200001c0 	.word	0x200001c0

080a1d60 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a1d60:	2100      	movs	r1, #0
 80a1d62:	f7ff bd03 	b.w	80a176c <system_delay_ms>

080a1d66 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1d66:	b510      	push	{r4, lr}
 80a1d68:	4604      	mov	r4, r0
 80a1d6a:	f7fe f9ee 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
 80a1d6e:	4620      	mov	r0, r4
 80a1d70:	bd10      	pop	{r4, pc}

080a1d72 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a1d72:	b513      	push	{r0, r1, r4, lr}
 80a1d74:	460b      	mov	r3, r1
 80a1d76:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1d78:	c803      	ldmia	r0, {r0, r1}
 80a1d7a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a1d7e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a1d82:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a1d86:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a1d8a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a1d8e:	b002      	add	sp, #8
 80a1d90:	bd10      	pop	{r4, pc}
	...

080a1d94 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1d94:	4803      	ldr	r0, [pc, #12]	; (80a1da4 <_GLOBAL__sub_I_RGB+0x10>)
 80a1d96:	2300      	movs	r3, #0
 80a1d98:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a1d9a:	4a03      	ldr	r2, [pc, #12]	; (80a1da8 <_GLOBAL__sub_I_RGB+0x14>)
 80a1d9c:	4903      	ldr	r1, [pc, #12]	; (80a1dac <_GLOBAL__sub_I_RGB+0x18>)
 80a1d9e:	f000 bf55 	b.w	80a2c4c <__aeabi_atexit>
 80a1da2:	bf00      	nop
 80a1da4:	200001c4 	.word	0x200001c4
 80a1da8:	200000a4 	.word	0x200000a4
 80a1dac:	080a1d67 	.word	0x080a1d67

080a1db0 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1db0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1db2:	4b14      	ldr	r3, [pc, #80]	; (80a1e04 <serialEventRun+0x54>)
 80a1db4:	b133      	cbz	r3, 80a1dc4 <serialEventRun+0x14>
 80a1db6:	f000 fc57 	bl	80a2668 <_Z16_fetch_usbserialv>
 80a1dba:	6803      	ldr	r3, [r0, #0]
 80a1dbc:	691b      	ldr	r3, [r3, #16]
 80a1dbe:	4798      	blx	r3
 80a1dc0:	2800      	cmp	r0, #0
 80a1dc2:	dc16      	bgt.n	80a1df2 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1dc4:	4b10      	ldr	r3, [pc, #64]	; (80a1e08 <serialEventRun+0x58>)
 80a1dc6:	b133      	cbz	r3, 80a1dd6 <serialEventRun+0x26>
 80a1dc8:	f000 fd10 	bl	80a27ec <_Z22__fetch_global_Serial1v>
 80a1dcc:	6803      	ldr	r3, [r0, #0]
 80a1dce:	691b      	ldr	r3, [r3, #16]
 80a1dd0:	4798      	blx	r3
 80a1dd2:	2800      	cmp	r0, #0
 80a1dd4:	dc10      	bgt.n	80a1df8 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1dd6:	4b0d      	ldr	r3, [pc, #52]	; (80a1e0c <serialEventRun+0x5c>)
 80a1dd8:	b10b      	cbz	r3, 80a1dde <serialEventRun+0x2e>
 80a1dda:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1dde:	4b0c      	ldr	r3, [pc, #48]	; (80a1e10 <serialEventRun+0x60>)
 80a1de0:	b17b      	cbz	r3, 80a1e02 <serialEventRun+0x52>
 80a1de2:	f000 fc7d 	bl	80a26e0 <_Z17_fetch_usbserial1v>
 80a1de6:	6803      	ldr	r3, [r0, #0]
 80a1de8:	691b      	ldr	r3, [r3, #16]
 80a1dea:	4798      	blx	r3
 80a1dec:	2800      	cmp	r0, #0
 80a1dee:	dc06      	bgt.n	80a1dfe <serialEventRun+0x4e>
 80a1df0:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1df2:	f3af 8000 	nop.w
 80a1df6:	e7e5      	b.n	80a1dc4 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1df8:	f3af 8000 	nop.w
 80a1dfc:	e7eb      	b.n	80a1dd6 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1dfe:	f3af 8000 	nop.w
 80a1e02:	bd08      	pop	{r3, pc}
	...

080a1e14 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1e14:	b508      	push	{r3, lr}
	serialEventRun();
 80a1e16:	f7ff ffcb 	bl	80a1db0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1e1a:	f7ff fb8d 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1e1e:	4b01      	ldr	r3, [pc, #4]	; (80a1e24 <_post_loop+0x10>)
 80a1e20:	6018      	str	r0, [r3, #0]
 80a1e22:	bd08      	pop	{r3, pc}
 80a1e24:	20000668 	.word	0x20000668

080a1e28 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1e28:	4802      	ldr	r0, [pc, #8]	; (80a1e34 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1e2a:	4a03      	ldr	r2, [pc, #12]	; (80a1e38 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1e2c:	4903      	ldr	r1, [pc, #12]	; (80a1e3c <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1e2e:	1a12      	subs	r2, r2, r0
 80a1e30:	f002 bb76 	b.w	80a4520 <memcpy>
 80a1e34:	40024000 	.word	0x40024000
 80a1e38:	40024064 	.word	0x40024064
 80a1e3c:	080a4c50 	.word	0x080a4c50

080a1e40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1e40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e42:	2300      	movs	r3, #0
 80a1e44:	9300      	str	r3, [sp, #0]
 80a1e46:	461a      	mov	r2, r3
 80a1e48:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e4c:	f7ff fcb0 	bl	80a17b0 <system_ctrl_set_result>
}
 80a1e50:	b003      	add	sp, #12
 80a1e52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1e58 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1e58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1e5a:	8843      	ldrh	r3, [r0, #2]
 80a1e5c:	2b0a      	cmp	r3, #10
 80a1e5e:	d008      	beq.n	80a1e72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1e60:	2b50      	cmp	r3, #80	; 0x50
 80a1e62:	d109      	bne.n	80a1e78 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1e64:	4b09      	ldr	r3, [pc, #36]	; (80a1e8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1e66:	681b      	ldr	r3, [r3, #0]
 80a1e68:	b13b      	cbz	r3, 80a1e7a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1e6a:	b003      	add	sp, #12
 80a1e6c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1e70:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1e72:	f7ff ffe5 	bl	80a1e40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1e76:	e006      	b.n	80a1e86 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1e78:	2300      	movs	r3, #0
 80a1e7a:	9300      	str	r3, [sp, #0]
 80a1e7c:	461a      	mov	r2, r3
 80a1e7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1e82:	f7ff fc95 	bl	80a17b0 <system_ctrl_set_result>
        break;
    }
}
 80a1e86:	b003      	add	sp, #12
 80a1e88:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1e8c:	200001d4 	.word	0x200001d4

080a1e90 <module_user_init_hook>:

void module_user_init_hook()
{
 80a1e90:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1e92:	4c10      	ldr	r4, [pc, #64]	; (80a1ed4 <module_user_init_hook+0x44>)
 80a1e94:	4d10      	ldr	r5, [pc, #64]	; (80a1ed8 <module_user_init_hook+0x48>)
 80a1e96:	6823      	ldr	r3, [r4, #0]
 80a1e98:	42ab      	cmp	r3, r5
 80a1e9a:	4b10      	ldr	r3, [pc, #64]	; (80a1edc <module_user_init_hook+0x4c>)
 80a1e9c:	bf0c      	ite	eq
 80a1e9e:	2201      	moveq	r2, #1
 80a1ea0:	2200      	movne	r2, #0
 80a1ea2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1ea4:	d002      	beq.n	80a1eac <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1ea6:	f7ff ffbf 	bl	80a1e28 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1eaa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1eac:	f7ff fb2c 	bl	80a1508 <HAL_RNG_GetRandomNumber>
 80a1eb0:	4604      	mov	r4, r0
    srand(seed);
 80a1eb2:	f002 fb49 	bl	80a4548 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1eb6:	4b0a      	ldr	r3, [pc, #40]	; (80a1ee0 <module_user_init_hook+0x50>)
 80a1eb8:	b113      	cbz	r3, 80a1ec0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a1eba:	4620      	mov	r0, r4
 80a1ebc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1ec0:	2100      	movs	r1, #0
 80a1ec2:	4807      	ldr	r0, [pc, #28]	; (80a1ee0 <module_user_init_hook+0x50>)
 80a1ec4:	f7ff fce6 	bl	80a1894 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1ec8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1ecc:	2100      	movs	r1, #0
 80a1ece:	4805      	ldr	r0, [pc, #20]	; (80a1ee4 <module_user_init_hook+0x54>)
 80a1ed0:	f7ff bc64 	b.w	80a179c <system_ctrl_set_app_request_handler>
 80a1ed4:	40024060 	.word	0x40024060
 80a1ed8:	9a271c1e 	.word	0x9a271c1e
 80a1edc:	200001d8 	.word	0x200001d8
 80a1ee0:	00000000 	.word	0x00000000
 80a1ee4:	080a1e59 	.word	0x080a1e59

080a1ee8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1ee8:	4770      	bx	lr

080a1eea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a1eea:	2000      	movs	r0, #0
 80a1eec:	4770      	bx	lr

080a1eee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a1eee:	b510      	push	{r4, lr}
 80a1ef0:	4604      	mov	r4, r0
 80a1ef2:	2110      	movs	r1, #16
 80a1ef4:	f000 feb8 	bl	80a2c68 <_ZdlPvj>
 80a1ef8:	4620      	mov	r0, r4
 80a1efa:	bd10      	pop	{r4, pc}

080a1efc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a1efc:	b508      	push	{r3, lr}
      { delete this; }
 80a1efe:	b108      	cbz	r0, 80a1f04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a1f00:	f7ff fff5 	bl	80a1eee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a1f04:	bd08      	pop	{r3, pc}

080a1f06 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a1f06:	2200      	movs	r2, #0
 80a1f08:	6002      	str	r2, [r0, #0]
 80a1f0a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a1f0e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a1f10:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a1f12:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a1f16:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f18:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a1f1a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a1f1c:	680c      	ldr	r4, [r1, #0]
 80a1f1e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a1f20:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a1f22:	bd10      	pop	{r4, pc}

080a1f24 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a1f24:	b510      	push	{r4, lr}
 80a1f26:	4604      	mov	r4, r0
    free((void*)msg_);
 80a1f28:	6800      	ldr	r0, [r0, #0]
 80a1f2a:	f7ff fcc3 	bl	80a18b4 <free>
}
 80a1f2e:	4620      	mov	r0, r4
 80a1f30:	bd10      	pop	{r4, pc}

080a1f32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a1f32:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a1f34:	68c4      	ldr	r4, [r0, #12]
 80a1f36:	b1f4      	cbz	r4, 80a1f76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a1f38:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a1f3a:	2b02      	cmp	r3, #2
 80a1f3c:	d103      	bne.n	80a1f46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a1f3e:	f104 000c 	add.w	r0, r4, #12
 80a1f42:	f7ff ffef 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a1f46:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a1f48:	b135      	cbz	r5, 80a1f58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1f4a:	4628      	mov	r0, r5
 80a1f4c:	f7fe f8fd 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
 80a1f50:	2110      	movs	r1, #16
 80a1f52:	4628      	mov	r0, r5
 80a1f54:	f000 fe88 	bl	80a2c68 <_ZdlPvj>
 80a1f58:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a1f5a:	b135      	cbz	r5, 80a1f6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a1f5c:	4628      	mov	r0, r5
 80a1f5e:	f7fe f8f4 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
 80a1f62:	2110      	movs	r1, #16
 80a1f64:	4628      	mov	r0, r5
 80a1f66:	f000 fe7f 	bl	80a2c68 <_ZdlPvj>
 80a1f6a:	4620      	mov	r0, r4
 80a1f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1f70:	2114      	movs	r1, #20
 80a1f72:	f000 be79 	b.w	80a2c68 <_ZdlPvj>
 80a1f76:	bd38      	pop	{r3, r4, r5, pc}

080a1f78 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a1f78:	b510      	push	{r4, lr}
 80a1f7a:	b088      	sub	sp, #32
 80a1f7c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1f7e:	4668      	mov	r0, sp
 80a1f80:	f7ff fd43 	bl	80a1a0a <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a1f84:	4669      	mov	r1, sp
 80a1f86:	a804      	add	r0, sp, #16
 80a1f88:	f7ff fd61 	bl	80a1a4e <_ZN6StringC1ERKS_>
 80a1f8c:	a804      	add	r0, sp, #16
 80a1f8e:	47a0      	blx	r4
 80a1f90:	4604      	mov	r4, r0
 80a1f92:	a804      	add	r0, sp, #16
 80a1f94:	f7ff fcf2 	bl	80a197c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a1f98:	4668      	mov	r0, sp
 80a1f9a:	f7ff fcef 	bl	80a197c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a1f9e:	4620      	mov	r0, r4
 80a1fa0:	b008      	add	sp, #32
 80a1fa2:	bd10      	pop	{r4, pc}

080a1fa4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a1fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1fa6:	4607      	mov	r7, r0
 80a1fa8:	460e      	mov	r6, r1
 80a1faa:	4615      	mov	r5, r2
 80a1fac:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a1fae:	2410      	movs	r4, #16
 80a1fb0:	4622      	mov	r2, r4
 80a1fb2:	2100      	movs	r1, #0
 80a1fb4:	4668      	mov	r0, sp
 80a1fb6:	f002 fabe 	bl	80a4536 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1fba:	2200      	movs	r2, #0
 80a1fbc:	4669      	mov	r1, sp
 80a1fbe:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a1fc0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a1fc4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a1fc6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a1fc8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a1fca:	f7ff fc4b 	bl	80a1864 <spark_function>
}
 80a1fce:	b005      	add	sp, #20
 80a1fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a1fd2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a1fd2:	b513      	push	{r0, r1, r4, lr}
 80a1fd4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a1fd6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a1fda:	2300      	movs	r3, #0
 80a1fdc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1fde:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a1fe0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a1fe2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1fe4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a1fe6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a1fe8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a1fea:	f7fe fb5f 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a1fee:	4620      	mov	r0, r4
 80a1ff0:	b002      	add	sp, #8
 80a1ff2:	bd10      	pop	{r4, pc}

080a1ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a1ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a1ff6:	460c      	mov	r4, r1
 80a1ff8:	4606      	mov	r6, r0
 80a1ffa:	460f      	mov	r7, r1
 80a1ffc:	f854 3b04 	ldr.w	r3, [r4], #4
 80a2000:	ad02      	add	r5, sp, #8
 80a2002:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a2006:	4621      	mov	r1, r4
 80a2008:	a801      	add	r0, sp, #4
 80a200a:	f7ff fe8f 	bl	80a1d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a200e:	4629      	mov	r1, r5
 80a2010:	4630      	mov	r0, r6
 80a2012:	f7ff ffde 	bl	80a1fd2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a2016:	a801      	add	r0, sp, #4
 80a2018:	f7fe fb48 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a201c:	4620      	mov	r0, r4
 80a201e:	f7fe fb45 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a2022:	4638      	mov	r0, r7
 80a2024:	2108      	movs	r1, #8
 80a2026:	f000 fe1f 	bl	80a2c68 <_ZdlPvj>
        return p;
    }
 80a202a:	4630      	mov	r0, r6
 80a202c:	b003      	add	sp, #12
 80a202e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a2030:	b538      	push	{r3, r4, r5, lr}
 80a2032:	2300      	movs	r3, #0
 80a2034:	4604      	mov	r4, r0
 80a2036:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a2038:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a203a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a203c:	f7fe f82f 	bl	80a009e <_Znwj>
 80a2040:	b128      	cbz	r0, 80a204e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a2042:	2301      	movs	r3, #1
 80a2044:	6043      	str	r3, [r0, #4]
 80a2046:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a2048:	4b02      	ldr	r3, [pc, #8]	; (80a2054 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a204a:	60c5      	str	r5, [r0, #12]
 80a204c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a204e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a2050:	4620      	mov	r0, r4
 80a2052:	bd38      	pop	{r3, r4, r5, pc}
 80a2054:	080a496c 	.word	0x080a496c

080a2058 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2058:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a205a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a205c:	b90a      	cbnz	r2, 80a2062 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a205e:	f000 fe14 	bl	80a2c8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2062:	68c3      	ldr	r3, [r0, #12]
    }
 80a2064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2068:	4718      	bx	r3

080a206a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a206a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a206c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a206e:	f100 0110 	add.w	r1, r0, #16
 80a2072:	f7ff fff1 	bl	80a2058 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2076:	bd08      	pop	{r3, pc}

080a2078 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a2078:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a207a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a207c:	b90a      	cbnz	r2, 80a2082 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a207e:	f000 fe04 	bl	80a2c8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2082:	68c3      	ldr	r3, [r0, #12]
    }
 80a2084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2088:	4718      	bx	r3

080a208a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a208a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a208c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a208e:	f100 0110 	add.w	r1, r0, #16
 80a2092:	f7ff fff1 	bl	80a2078 <_ZNKSt8functionIFvRKbEEclES1_>
 80a2096:	bd08      	pop	{r3, pc}

080a2098 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2098:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a209a:	2300      	movs	r3, #0
 80a209c:	6083      	str	r3, [r0, #8]
 80a209e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a20a0:	4604      	mov	r4, r0
 80a20a2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a20a4:	b12b      	cbz	r3, 80a20b2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a20a6:	2202      	movs	r2, #2
 80a20a8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a20aa:	68eb      	ldr	r3, [r5, #12]
 80a20ac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a20ae:	68ab      	ldr	r3, [r5, #8]
 80a20b0:	60a3      	str	r3, [r4, #8]
	}
    }
 80a20b2:	4620      	mov	r0, r4
 80a20b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080a20b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a20b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a20ba:	b089      	sub	sp, #36	; 0x24
 80a20bc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a20be:	4668      	mov	r0, sp
 80a20c0:	f7ff ff21 	bl	80a1f06 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a20c4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a20c8:	2300      	movs	r3, #0
 80a20ca:	f88d 3008 	strb.w	r3, [sp, #8]
 80a20ce:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a20d2:	2b00      	cmp	r3, #0
 80a20d4:	d103      	bne.n	80a20de <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a20d6:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a20da:	2900      	cmp	r1, #0
 80a20dc:	d1f7      	bne.n	80a20ce <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a20de:	d002      	beq.n	80a20e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a20e0:	f88d 3008 	strb.w	r3, [sp, #8]
 80a20e4:	e063      	b.n	80a21ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a20e6:	f114 050c 	adds.w	r5, r4, #12
 80a20ea:	d003      	beq.n	80a20f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a20ec:	4669      	mov	r1, sp
 80a20ee:	4628      	mov	r0, r5
 80a20f0:	f7ff ff09 	bl	80a1f06 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a20f4:	f3bf 8f5f 	dmb	sy
 80a20f8:	2301      	movs	r3, #1
 80a20fa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a20fc:	f3bf 8f5f 	dmb	sy
 80a2100:	f104 0308 	add.w	r3, r4, #8
 80a2104:	2000      	movs	r0, #0
 80a2106:	e853 6f00 	ldrex	r6, [r3]
 80a210a:	e843 0200 	strex	r2, r0, [r3]
 80a210e:	2a00      	cmp	r2, #0
 80a2110:	d1f9      	bne.n	80a2106 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a2112:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a2116:	2e00      	cmp	r6, #0
 80a2118:	d049      	beq.n	80a21ae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a211a:	f7ff fb2f 	bl	80a177c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a211e:	b120      	cbz	r0, 80a212a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a2120:	4629      	mov	r1, r5
 80a2122:	4630      	mov	r0, r6
 80a2124:	f7ff ff98 	bl	80a2058 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a2128:	e03a      	b.n	80a21a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a212a:	4631      	mov	r1, r6
 80a212c:	a802      	add	r0, sp, #8
 80a212e:	f7ff ffb3 	bl	80a2098 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2132:	68e0      	ldr	r0, [r4, #12]
 80a2134:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a2138:	b108      	cbz	r0, 80a213e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a213a:	f002 fa2d 	bl	80a4598 <strdup>
 80a213e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a2140:	2010      	movs	r0, #16
 80a2142:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a2146:	f7fd ffaa 	bl	80a009e <_Znwj>
 80a214a:	4605      	mov	r5, r0
 80a214c:	b1e8      	cbz	r0, 80a218a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a214e:	2700      	movs	r7, #0
 80a2150:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2152:	2018      	movs	r0, #24
 80a2154:	f7fd ffa3 	bl	80a009e <_Znwj>
 80a2158:	4604      	mov	r4, r0
 80a215a:	b188      	cbz	r0, 80a2180 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a215c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a215e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2160:	a802      	add	r0, sp, #8
 80a2162:	f7ff fe06 	bl	80a1d72 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2166:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a2168:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a216a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a216c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a216e:	9204      	str	r2, [sp, #16]
 80a2170:	68e2      	ldr	r2, [r4, #12]
 80a2172:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a2174:	60e3      	str	r3, [r4, #12]
 80a2176:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a217a:	9205      	str	r2, [sp, #20]
 80a217c:	f7ff fec3 	bl	80a1f06 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2180:	4b0d      	ldr	r3, [pc, #52]	; (80a21b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a2182:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2184:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a2186:	4b0d      	ldr	r3, [pc, #52]	; (80a21bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a2188:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a218a:	a806      	add	r0, sp, #24
 80a218c:	f7ff feca 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2190:	a802      	add	r0, sp, #8
 80a2192:	f7fd ffda 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2196:	2200      	movs	r2, #0
 80a2198:	4629      	mov	r1, r5
 80a219a:	4809      	ldr	r0, [pc, #36]	; (80a21c0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a219c:	f7ff faf6 	bl	80a178c <application_thread_invoke>
 80a21a0:	4630      	mov	r0, r6
 80a21a2:	f7fd ffd2 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a21a6:	2110      	movs	r1, #16
 80a21a8:	4630      	mov	r0, r6
 80a21aa:	f000 fd5d 	bl	80a2c68 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a21ae:	4668      	mov	r0, sp
 80a21b0:	f7ff feb8 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
    }
 80a21b4:	b009      	add	sp, #36	; 0x24
 80a21b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a21b8:	080a206b 	.word	0x080a206b
 80a21bc:	080a22e1 	.word	0x080a22e1
 80a21c0:	080a2839 	.word	0x080a2839

080a21c4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a21c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a21c8:	b08b      	sub	sp, #44	; 0x2c
 80a21ca:	4606      	mov	r6, r0
 80a21cc:	460f      	mov	r7, r1
 80a21ce:	4690      	mov	r8, r2
 80a21d0:	4699      	mov	r9, r3
 80a21d2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a21d6:	f7ff fb4d 	bl	80a1874 <spark_cloud_flag_connected>
 80a21da:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a21dc:	4683      	mov	fp, r0
 80a21de:	bb30      	cbnz	r0, 80a222e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a21e0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a21e4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a21e6:	a905      	add	r1, sp, #20
 80a21e8:	4628      	mov	r0, r5
 80a21ea:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a21ee:	f7ff fe8a 	bl	80a1f06 <_ZN8particle5ErrorC1EOS0_>
 80a21f2:	2014      	movs	r0, #20
 80a21f4:	f7fd ff53 	bl	80a009e <_Znwj>
 80a21f8:	4604      	mov	r4, r0
 80a21fa:	b158      	cbz	r0, 80a2214 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a21fc:	2302      	movs	r3, #2
 80a21fe:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2200:	2301      	movs	r3, #1
 80a2202:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2204:	f8c0 b004 	str.w	fp, [r0, #4]
 80a2208:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a220c:	4629      	mov	r1, r5
 80a220e:	300c      	adds	r0, #12
 80a2210:	f7ff fe79 	bl	80a1f06 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a2214:	4630      	mov	r0, r6
 80a2216:	4621      	mov	r1, r4
 80a2218:	f840 4b04 	str.w	r4, [r0], #4
 80a221c:	f7ff ff08 	bl	80a2030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a2220:	4628      	mov	r0, r5
 80a2222:	f7ff fe7f 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a2226:	a805      	add	r0, sp, #20
 80a2228:	f7ff fe7c 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
 80a222c:	e052      	b.n	80a22d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a222e:	2400      	movs	r4, #0
 80a2230:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a2232:	2014      	movs	r0, #20
 80a2234:	606c      	str	r4, [r5, #4]
 80a2236:	60ac      	str	r4, [r5, #8]
 80a2238:	9307      	str	r3, [sp, #28]
 80a223a:	f7fd ff30 	bl	80a009e <_Znwj>
 80a223e:	4601      	mov	r1, r0
 80a2240:	b118      	cbz	r0, 80a224a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a2242:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a2244:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a2246:	6044      	str	r4, [r0, #4]
 80a2248:	6084      	str	r4, [r0, #8]
 80a224a:	a804      	add	r0, sp, #16
 80a224c:	9103      	str	r1, [sp, #12]
 80a224e:	f7ff feef 	bl	80a2030 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a2252:	4b22      	ldr	r3, [pc, #136]	; (80a22dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a2254:	2008      	movs	r0, #8
 80a2256:	9308      	str	r3, [sp, #32]
 80a2258:	f7fd ff21 	bl	80a009e <_Znwj>
 80a225c:	4604      	mov	r4, r0
 80a225e:	b128      	cbz	r0, 80a226c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a2260:	9b03      	ldr	r3, [sp, #12]
 80a2262:	a904      	add	r1, sp, #16
 80a2264:	f840 3b04 	str.w	r3, [r0], #4
 80a2268:	f7ff fd60 	bl	80a1d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a226c:	9500      	str	r5, [sp, #0]
 80a226e:	fa5f f38a 	uxtb.w	r3, sl
 80a2272:	464a      	mov	r2, r9
 80a2274:	4641      	mov	r1, r8
 80a2276:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a2278:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a227a:	f7ff fb03 	bl	80a1884 <spark_send_event>
 80a227e:	b920      	cbnz	r0, 80a228a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a2280:	9b03      	ldr	r3, [sp, #12]
 80a2282:	785b      	ldrb	r3, [r3, #1]
 80a2284:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a2288:	b183      	cbz	r3, 80a22ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a228a:	9b03      	ldr	r3, [sp, #12]
 80a228c:	a904      	add	r1, sp, #16
 80a228e:	a806      	add	r0, sp, #24
 80a2290:	9305      	str	r3, [sp, #20]
 80a2292:	f7ff fd4b 	bl	80a1d2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a2296:	a905      	add	r1, sp, #20
 80a2298:	4630      	mov	r0, r6
 80a229a:	f7ff fe9a 	bl	80a1fd2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a229e:	a806      	add	r0, sp, #24
 80a22a0:	f7fe fa04 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a22a4:	a804      	add	r0, sp, #16
 80a22a6:	f7fe fa01 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a22aa:	e013      	b.n	80a22d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a22ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a22b0:	a905      	add	r1, sp, #20
 80a22b2:	a803      	add	r0, sp, #12
 80a22b4:	9205      	str	r2, [sp, #20]
 80a22b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a22ba:	f7ff fefd 	bl	80a20b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a22be:	a805      	add	r0, sp, #20
 80a22c0:	f7ff fe30 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a22c4:	a805      	add	r0, sp, #20
 80a22c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a22c8:	f7ff fe94 	bl	80a1ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a22cc:	a806      	add	r0, sp, #24
 80a22ce:	f7fe f9ed 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a22d2:	e7da      	b.n	80a228a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a22d4:	4630      	mov	r0, r6
 80a22d6:	b00b      	add	sp, #44	; 0x2c
 80a22d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a22dc:	080a2451 	.word	0x080a2451

080a22e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a22e0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a22e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a22e4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a22e6:	d006      	beq.n	80a22f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a22e8:	2a03      	cmp	r2, #3
 80a22ea:	d017      	beq.n	80a231c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a22ec:	2a01      	cmp	r2, #1
 80a22ee:	d122      	bne.n	80a2336 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a22f0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a22f2:	6003      	str	r3, [r0, #0]
	      break;
 80a22f4:	e01f      	b.n	80a2336 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a22f6:	2018      	movs	r0, #24
 80a22f8:	680e      	ldr	r6, [r1, #0]
 80a22fa:	f7fd fed0 	bl	80a009e <_Znwj>
 80a22fe:	4605      	mov	r5, r0
 80a2300:	b150      	cbz	r0, 80a2318 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a2302:	4631      	mov	r1, r6
 80a2304:	f7ff fec8 	bl	80a2098 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a2308:	6930      	ldr	r0, [r6, #16]
 80a230a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a230e:	b108      	cbz	r0, 80a2314 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a2310:	f002 f942 	bl	80a4598 <strdup>
 80a2314:	6128      	str	r0, [r5, #16]
 80a2316:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2318:	6025      	str	r5, [r4, #0]
 80a231a:	e00c      	b.n	80a2336 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a231c:	6804      	ldr	r4, [r0, #0]
 80a231e:	b154      	cbz	r4, 80a2336 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a2320:	f104 0010 	add.w	r0, r4, #16
 80a2324:	f7ff fdfe 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2328:	4620      	mov	r0, r4
 80a232a:	f7fd ff0e 	bl	80a014a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a232e:	2118      	movs	r1, #24
 80a2330:	4620      	mov	r0, r4
 80a2332:	f000 fc99 	bl	80a2c68 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a2336:	2000      	movs	r0, #0
 80a2338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a233a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a233a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a233c:	2300      	movs	r3, #0
 80a233e:	6083      	str	r3, [r0, #8]
 80a2340:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a2342:	4604      	mov	r4, r0
 80a2344:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a2346:	b12b      	cbz	r3, 80a2354 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a2348:	2202      	movs	r2, #2
 80a234a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a234c:	68eb      	ldr	r3, [r5, #12]
 80a234e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a2350:	68ab      	ldr	r3, [r5, #8]
 80a2352:	60a3      	str	r3, [r4, #8]
	}
    }
 80a2354:	4620      	mov	r0, r4
 80a2356:	bd38      	pop	{r3, r4, r5, pc}

080a2358 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a2358:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a235a:	b570      	push	{r4, r5, r6, lr}
 80a235c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a235e:	d006      	beq.n	80a236e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a2360:	2a03      	cmp	r2, #3
 80a2362:	d011      	beq.n	80a2388 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a2364:	2a01      	cmp	r2, #1
 80a2366:	d118      	bne.n	80a239a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a2368:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a236a:	6003      	str	r3, [r0, #0]
	      break;
 80a236c:	e015      	b.n	80a239a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a236e:	2014      	movs	r0, #20
 80a2370:	680e      	ldr	r6, [r1, #0]
 80a2372:	f7fd fe94 	bl	80a009e <_Znwj>
 80a2376:	4605      	mov	r5, r0
 80a2378:	b120      	cbz	r0, 80a2384 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a237a:	4631      	mov	r1, r6
 80a237c:	f7ff ffdd 	bl	80a233a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a2380:	7c33      	ldrb	r3, [r6, #16]
 80a2382:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a2384:	6025      	str	r5, [r4, #0]
 80a2386:	e008      	b.n	80a239a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2388:	6804      	ldr	r4, [r0, #0]
 80a238a:	b134      	cbz	r4, 80a239a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a238c:	4620      	mov	r0, r4
 80a238e:	f7fd fedc 	bl	80a014a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a2392:	2114      	movs	r1, #20
 80a2394:	4620      	mov	r0, r4
 80a2396:	f000 fc67 	bl	80a2c68 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a239a:	2000      	movs	r0, #0
 80a239c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a23a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a23a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a23a2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a23a4:	f3bf 8f5f 	dmb	sy
 80a23a8:	b087      	sub	sp, #28
 80a23aa:	2300      	movs	r3, #0
 80a23ac:	e850 6f00 	ldrex	r6, [r0]
 80a23b0:	e840 3200 	strex	r2, r3, [r0]
 80a23b4:	2a00      	cmp	r2, #0
 80a23b6:	d1f9      	bne.n	80a23ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a23b8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a23bc:	2e00      	cmp	r6, #0
 80a23be:	d03f      	beq.n	80a2440 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a23c0:	4618      	mov	r0, r3
 80a23c2:	f7ff f9db 	bl	80a177c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a23c6:	4607      	mov	r7, r0
 80a23c8:	b120      	cbz	r0, 80a23d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a23ca:	4621      	mov	r1, r4
 80a23cc:	4630      	mov	r0, r6
 80a23ce:	f7ff fe53 	bl	80a2078 <_ZNKSt8functionIFvRKbEEclES1_>
 80a23d2:	e02e      	b.n	80a2432 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a23d4:	4631      	mov	r1, r6
 80a23d6:	a801      	add	r0, sp, #4
 80a23d8:	f7ff ffaf 	bl	80a233a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a23dc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a23de:	2010      	movs	r0, #16
 80a23e0:	f88d 3014 	strb.w	r3, [sp, #20]
 80a23e4:	f7fd fe5b 	bl	80a009e <_Znwj>
 80a23e8:	4605      	mov	r5, r0
 80a23ea:	b1d0      	cbz	r0, 80a2422 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a23ec:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a23ee:	2014      	movs	r0, #20
 80a23f0:	f7fd fe55 	bl	80a009e <_Znwj>
 80a23f4:	4604      	mov	r4, r0
 80a23f6:	b178      	cbz	r0, 80a2418 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a23f8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a23fa:	4601      	mov	r1, r0
 80a23fc:	a801      	add	r0, sp, #4
 80a23fe:	f7ff fcb8 	bl	80a1d72 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2402:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2404:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2406:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2408:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a240a:	9203      	str	r2, [sp, #12]
 80a240c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a240e:	60e3      	str	r3, [r4, #12]
 80a2410:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2414:	9204      	str	r2, [sp, #16]
 80a2416:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a2418:	4b0a      	ldr	r3, [pc, #40]	; (80a2444 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a241a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a241c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a241e:	4b0a      	ldr	r3, [pc, #40]	; (80a2448 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a2420:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2422:	a801      	add	r0, sp, #4
 80a2424:	f7fd fe91 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a2428:	2200      	movs	r2, #0
 80a242a:	4629      	mov	r1, r5
 80a242c:	4807      	ldr	r0, [pc, #28]	; (80a244c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a242e:	f7ff f9ad 	bl	80a178c <application_thread_invoke>
 80a2432:	4630      	mov	r0, r6
 80a2434:	f7fd fe89 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a2438:	2110      	movs	r1, #16
 80a243a:	4630      	mov	r0, r6
 80a243c:	f000 fc14 	bl	80a2c68 <_ZdlPvj>
        }
    }
 80a2440:	b007      	add	sp, #28
 80a2442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a2444:	080a208b 	.word	0x080a208b
 80a2448:	080a2359 	.word	0x080a2359
 80a244c:	080a2839 	.word	0x080a2839

080a2450 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a2450:	b530      	push	{r4, r5, lr}
 80a2452:	4604      	mov	r4, r0
 80a2454:	b085      	sub	sp, #20
 80a2456:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a2458:	4668      	mov	r0, sp
 80a245a:	4611      	mov	r1, r2
 80a245c:	f7ff fdca 	bl	80a1ff4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a2460:	b17c      	cbz	r4, 80a2482 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a2462:	b224      	sxth	r4, r4
 80a2464:	4628      	mov	r0, r5
 80a2466:	b10d      	cbz	r5, 80a246c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a2468:	f002 f896 	bl	80a4598 <strdup>
 80a246c:	9002      	str	r0, [sp, #8]
 80a246e:	a902      	add	r1, sp, #8
 80a2470:	4668      	mov	r0, sp
 80a2472:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a2476:	f7ff fe1f 	bl	80a20b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a247a:	a802      	add	r0, sp, #8
 80a247c:	f7ff fd52 	bl	80a1f24 <_ZN8particle5ErrorD1Ev>
 80a2480:	e01d      	b.n	80a24be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a2482:	f04f 0201 	mov.w	r2, #1
 80a2486:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a2488:	f88d 4008 	strb.w	r4, [sp, #8]
 80a248c:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a2490:	42a3      	cmp	r3, r4
 80a2492:	d103      	bne.n	80a249c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a2494:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a2498:	2900      	cmp	r1, #0
 80a249a:	d1f7      	bne.n	80a248c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a249c:	d002      	beq.n	80a24a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a249e:	f88d 3008 	strb.w	r3, [sp, #8]
 80a24a2:	e00c      	b.n	80a24be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a24a4:	f110 010c 	adds.w	r1, r0, #12
 80a24a8:	f04f 0301 	mov.w	r3, #1
 80a24ac:	bf18      	it	ne
 80a24ae:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a24b0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a24b4:	3004      	adds	r0, #4
 80a24b6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a24ba:	f7ff ff71 	bl	80a23a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a24be:	a801      	add	r0, sp, #4
 80a24c0:	f7fe f8f4 	bl	80a06ac <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a24c4:	b005      	add	sp, #20
 80a24c6:	bd30      	pop	{r4, r5, pc}

080a24c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a24c8:	4770      	bx	lr

080a24ca <_ZN9IPAddressD0Ev>:
 80a24ca:	b510      	push	{r4, lr}
 80a24cc:	4604      	mov	r4, r0
 80a24ce:	2118      	movs	r1, #24
 80a24d0:	f000 fbca 	bl	80a2c68 <_ZdlPvj>
 80a24d4:	4620      	mov	r0, r4
 80a24d6:	bd10      	pop	{r4, pc}

080a24d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a24d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a24da:	460f      	mov	r7, r1
 80a24dc:	f100 0608 	add.w	r6, r0, #8
 80a24e0:	1d05      	adds	r5, r0, #4
 80a24e2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a24e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a24e8:	220a      	movs	r2, #10
 80a24ea:	4638      	mov	r0, r7
 80a24ec:	f7ff fb22 	bl	80a1b34 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a24f0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a24f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a24f4:	d007      	beq.n	80a2506 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a24f6:	2c00      	cmp	r4, #0
 80a24f8:	d0f4      	beq.n	80a24e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a24fa:	212e      	movs	r1, #46	; 0x2e
 80a24fc:	4638      	mov	r0, r7
 80a24fe:	f7ff fae0 	bl	80a1ac2 <_ZN5Print5printEc>
 80a2502:	4404      	add	r4, r0
 80a2504:	e7ee      	b.n	80a24e4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a2506:	4620      	mov	r0, r4
 80a2508:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a250c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a250c:	b510      	push	{r4, lr}
 80a250e:	4604      	mov	r4, r0
 80a2510:	4b04      	ldr	r3, [pc, #16]	; (80a2524 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2512:	2211      	movs	r2, #17
 80a2514:	f840 3b04 	str.w	r3, [r0], #4
 80a2518:	2100      	movs	r1, #0
 80a251a:	f002 f80c 	bl	80a4536 <memset>
{
    clear();
}
 80a251e:	4620      	mov	r0, r4
 80a2520:	bd10      	pop	{r4, pc}
 80a2522:	bf00      	nop
 80a2524:	080a4988 	.word	0x080a4988

080a2528 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a2528:	4603      	mov	r3, r0
 80a252a:	4a07      	ldr	r2, [pc, #28]	; (80a2548 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a252c:	b510      	push	{r4, lr}
 80a252e:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a2532:	f101 0210 	add.w	r2, r1, #16
 80a2536:	f851 4b04 	ldr.w	r4, [r1], #4
 80a253a:	4291      	cmp	r1, r2
 80a253c:	f843 4b04 	str.w	r4, [r3], #4
 80a2540:	d1f9      	bne.n	80a2536 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a2542:	780a      	ldrb	r2, [r1, #0]
 80a2544:	701a      	strb	r2, [r3, #0]
}
 80a2546:	bd10      	pop	{r4, pc}
 80a2548:	080a4988 	.word	0x080a4988

080a254c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a254c:	4a02      	ldr	r2, [pc, #8]	; (80a2558 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a254e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a2550:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a2552:	2204      	movs	r2, #4
 80a2554:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a2556:	4770      	bx	lr
 80a2558:	080a4988 	.word	0x080a4988

080a255c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a255c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a255e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a2562:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a2566:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a256a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a256e:	2304      	movs	r3, #4
 80a2570:	6041      	str	r1, [r0, #4]
 80a2572:	7503      	strb	r3, [r0, #20]
 80a2574:	bd10      	pop	{r4, pc}
	...

080a2578 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a2578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a257a:	4d04      	ldr	r5, [pc, #16]	; (80a258c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a257c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a257e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a2582:	9500      	str	r5, [sp, #0]
 80a2584:	f7ff ffea 	bl	80a255c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a2588:	b003      	add	sp, #12
 80a258a:	bd30      	pop	{r4, r5, pc}
 80a258c:	080a4988 	.word	0x080a4988

080a2590 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2590:	7441      	strb	r1, [r0, #17]
 80a2592:	4770      	bx	lr

080a2594 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a2594:	4770      	bx	lr

080a2596 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a2596:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a2598:	2100      	movs	r1, #0
 80a259a:	7c00      	ldrb	r0, [r0, #16]
 80a259c:	f7ff f8be 	bl	80a171c <HAL_USB_USART_Receive_Data>
}
 80a25a0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25a4:	bf28      	it	cs
 80a25a6:	f04f 30ff 	movcs.w	r0, #4294967295
 80a25aa:	bd08      	pop	{r3, pc}

080a25ac <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a25ac:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a25ae:	2101      	movs	r1, #1
 80a25b0:	7c00      	ldrb	r0, [r0, #16]
 80a25b2:	f7ff f8b3 	bl	80a171c <HAL_USB_USART_Receive_Data>
}
 80a25b6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a25ba:	bf28      	it	cs
 80a25bc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a25c0:	bd08      	pop	{r3, pc}

080a25c2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a25c2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a25c4:	7c00      	ldrb	r0, [r0, #16]
 80a25c6:	f7ff f8a1 	bl	80a170c <HAL_USB_USART_Available_Data_For_Write>
}
 80a25ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25ce:	bd08      	pop	{r3, pc}

080a25d0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a25d0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a25d2:	7c00      	ldrb	r0, [r0, #16]
 80a25d4:	f7ff f892 	bl	80a16fc <HAL_USB_USART_Available_Data>
}
 80a25d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a25dc:	bd08      	pop	{r3, pc}

080a25de <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a25de:	7c00      	ldrb	r0, [r0, #16]
 80a25e0:	f7ff b8ac 	b.w	80a173c <HAL_USB_USART_Flush_Data>

080a25e4 <_ZN9USBSerialD0Ev>:
 80a25e4:	b510      	push	{r4, lr}
 80a25e6:	4604      	mov	r4, r0
 80a25e8:	2114      	movs	r1, #20
 80a25ea:	f000 fb3d 	bl	80a2c68 <_ZdlPvj>
 80a25ee:	4620      	mov	r0, r4
 80a25f0:	bd10      	pop	{r4, pc}

080a25f2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a25f2:	b538      	push	{r3, r4, r5, lr}
 80a25f4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25f6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a25f8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a25fa:	f7ff f887 	bl	80a170c <HAL_USB_USART_Available_Data_For_Write>
 80a25fe:	2800      	cmp	r0, #0
 80a2600:	dc01      	bgt.n	80a2606 <_ZN9USBSerial5writeEh+0x14>
 80a2602:	7c60      	ldrb	r0, [r4, #17]
 80a2604:	b128      	cbz	r0, 80a2612 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a2606:	4629      	mov	r1, r5
 80a2608:	7c20      	ldrb	r0, [r4, #16]
 80a260a:	f7ff f88f 	bl	80a172c <HAL_USB_USART_Send_Data>
 80a260e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a2612:	bd38      	pop	{r3, r4, r5, pc}

080a2614 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a2614:	b510      	push	{r4, lr}
 80a2616:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a2618:	2300      	movs	r3, #0
 80a261a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a261c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2620:	60a3      	str	r3, [r4, #8]
 80a2622:	4b05      	ldr	r3, [pc, #20]	; (80a2638 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a2624:	4608      	mov	r0, r1
 80a2626:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a2628:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a262a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a262c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a262e:	4611      	mov	r1, r2
 80a2630:	f7ff f85c 	bl	80a16ec <HAL_USB_USART_Init>
}
 80a2634:	4620      	mov	r0, r4
 80a2636:	bd10      	pop	{r4, pc}
 80a2638:	080a499c 	.word	0x080a499c

080a263c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a263c:	b510      	push	{r4, lr}
 80a263e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a2640:	2214      	movs	r2, #20
 80a2642:	2100      	movs	r1, #0
 80a2644:	f001 ff77 	bl	80a4536 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a2648:	4b05      	ldr	r3, [pc, #20]	; (80a2660 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a264a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a264c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a264e:	4b05      	ldr	r3, [pc, #20]	; (80a2664 <_Z19acquireSerialBufferv+0x28>)
 80a2650:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a2652:	f240 1301 	movw	r3, #257	; 0x101
 80a2656:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a2658:	2381      	movs	r3, #129	; 0x81
 80a265a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a265c:	bd10      	pop	{r4, pc}
 80a265e:	bf00      	nop
 80a2660:	20000261 	.word	0x20000261
 80a2664:	200001e0 	.word	0x200001e0

080a2668 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a2668:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a266a:	4d0e      	ldr	r5, [pc, #56]	; (80a26a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a266c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a266e:	a801      	add	r0, sp, #4
 80a2670:	f7ff ffe4 	bl	80a263c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a2674:	6829      	ldr	r1, [r5, #0]
 80a2676:	f011 0401 	ands.w	r4, r1, #1
 80a267a:	d110      	bne.n	80a269e <_Z16_fetch_usbserialv+0x36>
 80a267c:	4628      	mov	r0, r5
 80a267e:	f7fd fd12 	bl	80a00a6 <__cxa_guard_acquire>
 80a2682:	b160      	cbz	r0, 80a269e <_Z16_fetch_usbserialv+0x36>
 80a2684:	aa01      	add	r2, sp, #4
 80a2686:	4621      	mov	r1, r4
 80a2688:	4807      	ldr	r0, [pc, #28]	; (80a26a8 <_Z16_fetch_usbserialv+0x40>)
 80a268a:	f7ff ffc3 	bl	80a2614 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a268e:	4628      	mov	r0, r5
 80a2690:	f7fd fd0e 	bl	80a00b0 <__cxa_guard_release>
 80a2694:	4a05      	ldr	r2, [pc, #20]	; (80a26ac <_Z16_fetch_usbserialv+0x44>)
 80a2696:	4906      	ldr	r1, [pc, #24]	; (80a26b0 <_Z16_fetch_usbserialv+0x48>)
 80a2698:	4803      	ldr	r0, [pc, #12]	; (80a26a8 <_Z16_fetch_usbserialv+0x40>)
 80a269a:	f000 fad7 	bl	80a2c4c <__aeabi_atexit>
	return _usbserial;
}
 80a269e:	4802      	ldr	r0, [pc, #8]	; (80a26a8 <_Z16_fetch_usbserialv+0x40>)
 80a26a0:	b007      	add	sp, #28
 80a26a2:	bd30      	pop	{r4, r5, pc}
 80a26a4:	200001dc 	.word	0x200001dc
 80a26a8:	20000364 	.word	0x20000364
 80a26ac:	200000a4 	.word	0x200000a4
 80a26b0:	080a2595 	.word	0x080a2595

080a26b4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a26b4:	b510      	push	{r4, lr}
 80a26b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a26b8:	2214      	movs	r2, #20
 80a26ba:	2100      	movs	r1, #0
 80a26bc:	f001 ff3b 	bl	80a4536 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a26c0:	4b05      	ldr	r3, [pc, #20]	; (80a26d8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a26c2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a26c4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a26c6:	4b05      	ldr	r3, [pc, #20]	; (80a26dc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a26c8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a26ca:	f240 1301 	movw	r3, #257	; 0x101
 80a26ce:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a26d0:	2381      	movs	r3, #129	; 0x81
 80a26d2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a26d4:	bd10      	pop	{r4, pc}
 80a26d6:	bf00      	nop
 80a26d8:	20000414 	.word	0x20000414
 80a26dc:	2000037c 	.word	0x2000037c

080a26e0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a26e0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a26e2:	4c0e      	ldr	r4, [pc, #56]	; (80a271c <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a26e4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a26e6:	a801      	add	r0, sp, #4
 80a26e8:	f7ff ffe4 	bl	80a26b4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a26ec:	6823      	ldr	r3, [r4, #0]
 80a26ee:	07db      	lsls	r3, r3, #31
 80a26f0:	d410      	bmi.n	80a2714 <_Z17_fetch_usbserial1v+0x34>
 80a26f2:	4620      	mov	r0, r4
 80a26f4:	f7fd fcd7 	bl	80a00a6 <__cxa_guard_acquire>
 80a26f8:	b160      	cbz	r0, 80a2714 <_Z17_fetch_usbserial1v+0x34>
 80a26fa:	aa01      	add	r2, sp, #4
 80a26fc:	2101      	movs	r1, #1
 80a26fe:	4808      	ldr	r0, [pc, #32]	; (80a2720 <_Z17_fetch_usbserial1v+0x40>)
 80a2700:	f7ff ff88 	bl	80a2614 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a2704:	4620      	mov	r0, r4
 80a2706:	f7fd fcd3 	bl	80a00b0 <__cxa_guard_release>
 80a270a:	4a06      	ldr	r2, [pc, #24]	; (80a2724 <_Z17_fetch_usbserial1v+0x44>)
 80a270c:	4906      	ldr	r1, [pc, #24]	; (80a2728 <_Z17_fetch_usbserial1v+0x48>)
 80a270e:	4804      	ldr	r0, [pc, #16]	; (80a2720 <_Z17_fetch_usbserial1v+0x40>)
 80a2710:	f000 fa9c 	bl	80a2c4c <__aeabi_atexit>
  return _usbserial1;
}
 80a2714:	4802      	ldr	r0, [pc, #8]	; (80a2720 <_Z17_fetch_usbserial1v+0x40>)
 80a2716:	b006      	add	sp, #24
 80a2718:	bd10      	pop	{r4, pc}
 80a271a:	bf00      	nop
 80a271c:	20000378 	.word	0x20000378
 80a2720:	20000400 	.word	0x20000400
 80a2724:	200000a4 	.word	0x200000a4
 80a2728:	080a2595 	.word	0x080a2595

080a272c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a272c:	f7fe bed4 	b.w	80a14d8 <HAL_Interrupts_Disable_All>

080a2730 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a2730:	f7fe beca 	b.w	80a14c8 <HAL_Interrupts_Enable_All>

080a2734 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a2734:	4770      	bx	lr

080a2736 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a2736:	7441      	strb	r1, [r0, #17]
 80a2738:	4770      	bx	lr

080a273a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a273a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a273c:	7c00      	ldrb	r0, [r0, #16]
 80a273e:	f7fe ff73 	bl	80a1628 <HAL_USART_Available_Data_For_Write>
}
 80a2742:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2746:	bd08      	pop	{r3, pc}

080a2748 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a2748:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a274a:	7c00      	ldrb	r0, [r0, #16]
 80a274c:	f7fe ff44 	bl	80a15d8 <HAL_USART_Available_Data>
}
 80a2750:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a2754:	bd08      	pop	{r3, pc}

080a2756 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a2756:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a2758:	7c00      	ldrb	r0, [r0, #16]
 80a275a:	f7fe ff4d 	bl	80a15f8 <HAL_USART_Peek_Data>
}
 80a275e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2762:	bf28      	it	cs
 80a2764:	f04f 30ff 	movcs.w	r0, #4294967295
 80a2768:	bd08      	pop	{r3, pc}

080a276a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a276a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a276c:	7c00      	ldrb	r0, [r0, #16]
 80a276e:	f7fe ff3b 	bl	80a15e8 <HAL_USART_Read_Data>
}
 80a2772:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a2776:	bf28      	it	cs
 80a2778:	f04f 30ff 	movcs.w	r0, #4294967295
 80a277c:	bd08      	pop	{r3, pc}

080a277e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a277e:	7c00      	ldrb	r0, [r0, #16]
 80a2780:	f7fe bf42 	b.w	80a1608 <HAL_USART_Flush_Data>

080a2784 <_ZN11USARTSerialD0Ev>:
 80a2784:	b510      	push	{r4, lr}
 80a2786:	4604      	mov	r4, r0
 80a2788:	2114      	movs	r1, #20
 80a278a:	f000 fa6d 	bl	80a2c68 <_ZdlPvj>
 80a278e:	4620      	mov	r0, r4
 80a2790:	bd10      	pop	{r4, pc}

080a2792 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a2792:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a2794:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a2796:	4604      	mov	r4, r0
 80a2798:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a279a:	b925      	cbnz	r5, 80a27a6 <_ZN11USARTSerial5writeEh+0x14>
 80a279c:	7c00      	ldrb	r0, [r0, #16]
 80a279e:	f7fe ff43 	bl	80a1628 <HAL_USART_Available_Data_For_Write>
 80a27a2:	2800      	cmp	r0, #0
 80a27a4:	dd05      	ble.n	80a27b2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a27a6:	4631      	mov	r1, r6
 80a27a8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a27aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a27ae:	f7fe bf0b 	b.w	80a15c8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a27b2:	4628      	mov	r0, r5
 80a27b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080a27b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a27b8:	b510      	push	{r4, lr}
 80a27ba:	4604      	mov	r4, r0
 80a27bc:	4608      	mov	r0, r1
 80a27be:	4611      	mov	r1, r2
 80a27c0:	2200      	movs	r2, #0
 80a27c2:	6062      	str	r2, [r4, #4]
 80a27c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a27c8:	60a2      	str	r2, [r4, #8]
 80a27ca:	4a05      	ldr	r2, [pc, #20]	; (80a27e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a27cc:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a27ce:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a27d0:	2201      	movs	r2, #1
 80a27d2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a27d4:	461a      	mov	r2, r3
 80a27d6:	f7fe feef 	bl	80a15b8 <HAL_USART_Init>
}
 80a27da:	4620      	mov	r0, r4
 80a27dc:	bd10      	pop	{r4, pc}
 80a27de:	bf00      	nop
 80a27e0:	080a49cc 	.word	0x080a49cc

080a27e4 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a27e4:	7c00      	ldrb	r0, [r0, #16]
 80a27e6:	f7fe bf17 	b.w	80a1618 <HAL_USART_Is_Enabled>
	...

080a27ec <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a27ec:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a27ee:	4d0c      	ldr	r5, [pc, #48]	; (80a2820 <_Z22__fetch_global_Serial1v+0x34>)
 80a27f0:	6829      	ldr	r1, [r5, #0]
 80a27f2:	f011 0401 	ands.w	r4, r1, #1
 80a27f6:	d111      	bne.n	80a281c <_Z22__fetch_global_Serial1v+0x30>
 80a27f8:	4628      	mov	r0, r5
 80a27fa:	f7fd fc54 	bl	80a00a6 <__cxa_guard_acquire>
 80a27fe:	b168      	cbz	r0, 80a281c <_Z22__fetch_global_Serial1v+0x30>
 80a2800:	4a08      	ldr	r2, [pc, #32]	; (80a2824 <_Z22__fetch_global_Serial1v+0x38>)
 80a2802:	4621      	mov	r1, r4
 80a2804:	4b08      	ldr	r3, [pc, #32]	; (80a2828 <_Z22__fetch_global_Serial1v+0x3c>)
 80a2806:	4809      	ldr	r0, [pc, #36]	; (80a282c <_Z22__fetch_global_Serial1v+0x40>)
 80a2808:	f7ff ffd6 	bl	80a27b8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a280c:	4628      	mov	r0, r5
 80a280e:	f7fd fc4f 	bl	80a00b0 <__cxa_guard_release>
 80a2812:	4a07      	ldr	r2, [pc, #28]	; (80a2830 <_Z22__fetch_global_Serial1v+0x44>)
 80a2814:	4907      	ldr	r1, [pc, #28]	; (80a2834 <_Z22__fetch_global_Serial1v+0x48>)
 80a2816:	4805      	ldr	r0, [pc, #20]	; (80a282c <_Z22__fetch_global_Serial1v+0x40>)
 80a2818:	f000 fa18 	bl	80a2c4c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a281c:	4803      	ldr	r0, [pc, #12]	; (80a282c <_Z22__fetch_global_Serial1v+0x40>)
 80a281e:	bd38      	pop	{r3, r4, r5, pc}
 80a2820:	200005b0 	.word	0x200005b0
 80a2824:	200005b4 	.word	0x200005b4
 80a2828:	2000052c 	.word	0x2000052c
 80a282c:	20000518 	.word	0x20000518
 80a2830:	200000a4 	.word	0x200000a4
 80a2834:	080a2735 	.word	0x080a2735

080a2838 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a2838:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a283a:	6883      	ldr	r3, [r0, #8]
 80a283c:	4604      	mov	r4, r0
 80a283e:	b90b      	cbnz	r3, 80a2844 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a2840:	f000 fa23 	bl	80a2c8a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2844:	68c3      	ldr	r3, [r0, #12]
 80a2846:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a2848:	68a3      	ldr	r3, [r4, #8]
 80a284a:	b11b      	cbz	r3, 80a2854 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a284c:	2203      	movs	r2, #3
 80a284e:	4621      	mov	r1, r4
 80a2850:	4620      	mov	r0, r4
 80a2852:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a2854:	4620      	mov	r0, r4
}
 80a2856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a285a:	2110      	movs	r1, #16
 80a285c:	f000 ba04 	b.w	80a2c68 <_ZdlPvj>

080a2860 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a2860:	4770      	bx	lr

080a2862 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a2862:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2864:	4606      	mov	r6, r0
 80a2866:	4615      	mov	r5, r2
 80a2868:	460c      	mov	r4, r1
 80a286a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a286c:	42bc      	cmp	r4, r7
 80a286e:	d006      	beq.n	80a287e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a2870:	6833      	ldr	r3, [r6, #0]
 80a2872:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a2876:	689b      	ldr	r3, [r3, #8]
 80a2878:	4630      	mov	r0, r6
 80a287a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a287c:	e7f6      	b.n	80a286c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a287e:	4628      	mov	r0, r5
 80a2880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2882 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a2882:	2200      	movs	r2, #0
 80a2884:	7c00      	ldrb	r0, [r0, #16]
 80a2886:	f7fe bef7 	b.w	80a1678 <HAL_I2C_Write_Data>

080a288a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a288a:	2100      	movs	r1, #0
 80a288c:	7c00      	ldrb	r0, [r0, #16]
 80a288e:	f7fe befb 	b.w	80a1688 <HAL_I2C_Available_Data>

080a2892 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a2892:	2100      	movs	r1, #0
 80a2894:	7c00      	ldrb	r0, [r0, #16]
 80a2896:	f7fe beff 	b.w	80a1698 <HAL_I2C_Read_Data>

080a289a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a289a:	2100      	movs	r1, #0
 80a289c:	7c00      	ldrb	r0, [r0, #16]
 80a289e:	f7fe bf03 	b.w	80a16a8 <HAL_I2C_Peek_Data>

080a28a2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a28a2:	2100      	movs	r1, #0
 80a28a4:	7c00      	ldrb	r0, [r0, #16]
 80a28a6:	f7fe bf07 	b.w	80a16b8 <HAL_I2C_Flush_Data>

080a28aa <_ZN7TwoWireD0Ev>:
 80a28aa:	b510      	push	{r4, lr}
 80a28ac:	4604      	mov	r4, r0
 80a28ae:	2114      	movs	r1, #20
 80a28b0:	f000 f9da 	bl	80a2c68 <_ZdlPvj>
 80a28b4:	4620      	mov	r0, r4
 80a28b6:	bd10      	pop	{r4, pc}

080a28b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a28b8:	b510      	push	{r4, lr}
 80a28ba:	4604      	mov	r4, r0
 80a28bc:	4608      	mov	r0, r1
 80a28be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a28c2:	60a3      	str	r3, [r4, #8]
 80a28c4:	4b04      	ldr	r3, [pc, #16]	; (80a28d8 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a28c6:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a28c8:	7420      	strb	r0, [r4, #16]
 80a28ca:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a28cc:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a28ce:	f7fe ff03 	bl	80a16d8 <HAL_I2C_Init>

}
 80a28d2:	4620      	mov	r0, r4
 80a28d4:	bd10      	pop	{r4, pc}
 80a28d6:	bf00      	nop
 80a28d8:	080a49fc 	.word	0x080a49fc

080a28dc <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a28dc:	2300      	movs	r3, #0
 80a28de:	461a      	mov	r2, r3
 80a28e0:	4619      	mov	r1, r3
 80a28e2:	7c00      	ldrb	r0, [r0, #16]
 80a28e4:	f7fe bea8 	b.w	80a1638 <HAL_I2C_Begin>

080a28e8 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a28e8:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a28ea:	2400      	movs	r4, #0
 80a28ec:	7c00      	ldrb	r0, [r0, #16]
 80a28ee:	9400      	str	r4, [sp, #0]
 80a28f0:	f7fe feaa 	bl	80a1648 <HAL_I2C_Request_Data>
  return result;
}
 80a28f4:	b2c0      	uxtb	r0, r0
 80a28f6:	b002      	add	sp, #8
 80a28f8:	bd10      	pop	{r4, pc}

080a28fa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a28fa:	2301      	movs	r3, #1
 80a28fc:	f7ff bff4 	b.w	80a28e8 <_ZN7TwoWire11requestFromEhhh>

080a2900 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a2900:	2200      	movs	r2, #0
 80a2902:	7c00      	ldrb	r0, [r0, #16]
 80a2904:	f7fe bea8 	b.w	80a1658 <HAL_I2C_Begin_Transmission>

080a2908 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a2908:	b2c9      	uxtb	r1, r1
 80a290a:	f7ff bff9 	b.w	80a2900 <_ZN7TwoWire17beginTransmissionEh>

080a290e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a290e:	2200      	movs	r2, #0
 80a2910:	7c00      	ldrb	r0, [r0, #16]
 80a2912:	f7fe bea9 	b.w	80a1668 <HAL_I2C_End_Transmission>

080a2916 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a2916:	2101      	movs	r1, #1
 80a2918:	f7ff bff9 	b.w	80a290e <_ZN7TwoWire15endTransmissionEh>

080a291c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a291c:	2100      	movs	r1, #0
 80a291e:	7c00      	ldrb	r0, [r0, #16]
 80a2920:	f7fe bed2 	b.w	80a16c8 <HAL_I2C_Is_Enabled>

080a2924 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a2924:	2200      	movs	r2, #0
 80a2926:	4611      	mov	r1, r2
 80a2928:	6840      	ldr	r0, [r0, #4]
 80a292a:	f7fe bf63 	b.w	80a17f4 <network_ready>

080a292e <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a292e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a2930:	4616      	mov	r6, r2
 80a2932:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a2934:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a2936:	460f      	mov	r7, r1
 80a2938:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a293a:	2100      	movs	r1, #0
 80a293c:	a803      	add	r0, sp, #12
 80a293e:	f001 fdfa 	bl	80a4536 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2942:	4630      	mov	r0, r6
 80a2944:	f001 fe43 	bl	80a45ce <strlen>
 80a2948:	2500      	movs	r5, #0
 80a294a:	9500      	str	r5, [sp, #0]
 80a294c:	b281      	uxth	r1, r0
 80a294e:	687b      	ldr	r3, [r7, #4]
 80a2950:	aa03      	add	r2, sp, #12
 80a2952:	4630      	mov	r0, r6
 80a2954:	f7fe fefa 	bl	80a174c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2958:	b120      	cbz	r0, 80a2964 <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a295a:	4629      	mov	r1, r5
 80a295c:	4620      	mov	r0, r4
 80a295e:	f7ff fdf5 	bl	80a254c <_ZN9IPAddressC1Em>
 80a2962:	e003      	b.n	80a296c <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a2964:	a903      	add	r1, sp, #12
 80a2966:	4620      	mov	r0, r4
 80a2968:	f7ff fdde 	bl	80a2528 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a296c:	4620      	mov	r0, r4
 80a296e:	b009      	add	sp, #36	; 0x24
 80a2970:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2972 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a2972:	2200      	movs	r2, #0
 80a2974:	4611      	mov	r1, r2
 80a2976:	6840      	ldr	r0, [r0, #4]
 80a2978:	f7fe bf5c 	b.w	80a1834 <network_listening>

080a297c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a297c:	2200      	movs	r2, #0
 80a297e:	4611      	mov	r1, r2
 80a2980:	6840      	ldr	r0, [r0, #4]
 80a2982:	f7fe bf67 	b.w	80a1854 <network_get_listen_timeout>

080a2986 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a2986:	2200      	movs	r2, #0
 80a2988:	6840      	ldr	r0, [r0, #4]
 80a298a:	f7fe bf5b 	b.w	80a1844 <network_set_listen_timeout>

080a298e <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a298e:	2200      	movs	r2, #0
 80a2990:	f081 0101 	eor.w	r1, r1, #1
 80a2994:	6840      	ldr	r0, [r0, #4]
 80a2996:	f7fe bf45 	b.w	80a1824 <network_listen>

080a299a <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a299a:	2300      	movs	r3, #0
 80a299c:	461a      	mov	r2, r3
 80a299e:	4619      	mov	r1, r3
 80a29a0:	6840      	ldr	r0, [r0, #4]
 80a29a2:	f7fe bf37 	b.w	80a1814 <network_off>

080a29a6 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a29a6:	2200      	movs	r2, #0
 80a29a8:	4611      	mov	r1, r2
 80a29aa:	6840      	ldr	r0, [r0, #4]
 80a29ac:	f7fe bf12 	b.w	80a17d4 <network_connecting>

080a29b0 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a29b0:	2200      	movs	r2, #0
 80a29b2:	2102      	movs	r1, #2
 80a29b4:	6840      	ldr	r0, [r0, #4]
 80a29b6:	f7fe bf15 	b.w	80a17e4 <network_disconnect>

080a29ba <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a29ba:	2300      	movs	r3, #0
 80a29bc:	461a      	mov	r2, r3
 80a29be:	6840      	ldr	r0, [r0, #4]
 80a29c0:	f7fe bf00 	b.w	80a17c4 <network_connect>

080a29c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a29c4:	4b02      	ldr	r3, [pc, #8]	; (80a29d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a29c6:	2204      	movs	r2, #4
 80a29c8:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a29ca:	4a02      	ldr	r2, [pc, #8]	; (80a29d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a29cc:	601a      	str	r2, [r3, #0]
 80a29ce:	4770      	bx	lr
 80a29d0:	20000638 	.word	0x20000638
 80a29d4:	080a4a24 	.word	0x080a4a24

080a29d8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a29d8:	2300      	movs	r3, #0
 80a29da:	461a      	mov	r2, r3
 80a29dc:	6840      	ldr	r0, [r0, #4]
 80a29de:	f7fe bef1 	b.w	80a17c4 <network_connect>

080a29e2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a29e2:	2200      	movs	r2, #0
 80a29e4:	2102      	movs	r1, #2
 80a29e6:	6840      	ldr	r0, [r0, #4]
 80a29e8:	f7fe befc 	b.w	80a17e4 <network_disconnect>

080a29ec <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a29ec:	2200      	movs	r2, #0
 80a29ee:	4611      	mov	r1, r2
 80a29f0:	6840      	ldr	r0, [r0, #4]
 80a29f2:	f7fe beef 	b.w	80a17d4 <network_connecting>

080a29f6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a29f6:	2200      	movs	r2, #0
 80a29f8:	4611      	mov	r1, r2
 80a29fa:	6840      	ldr	r0, [r0, #4]
 80a29fc:	f7fe befa 	b.w	80a17f4 <network_ready>

080a2a00 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a2a00:	2300      	movs	r3, #0
 80a2a02:	461a      	mov	r2, r3
 80a2a04:	4619      	mov	r1, r3
 80a2a06:	6840      	ldr	r0, [r0, #4]
 80a2a08:	f7fe befc 	b.w	80a1804 <network_on>

080a2a0c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a2a0c:	2300      	movs	r3, #0
 80a2a0e:	461a      	mov	r2, r3
 80a2a10:	4619      	mov	r1, r3
 80a2a12:	6840      	ldr	r0, [r0, #4]
 80a2a14:	f7fe befe 	b.w	80a1814 <network_off>

080a2a18 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a2a18:	2200      	movs	r2, #0
 80a2a1a:	f081 0101 	eor.w	r1, r1, #1
 80a2a1e:	6840      	ldr	r0, [r0, #4]
 80a2a20:	f7fe bf00 	b.w	80a1824 <network_listen>

080a2a24 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a2a24:	2200      	movs	r2, #0
 80a2a26:	6840      	ldr	r0, [r0, #4]
 80a2a28:	f7fe bf0c 	b.w	80a1844 <network_set_listen_timeout>

080a2a2c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a2a2c:	2200      	movs	r2, #0
 80a2a2e:	4611      	mov	r1, r2
 80a2a30:	6840      	ldr	r0, [r0, #4]
 80a2a32:	f7fe bf0f 	b.w	80a1854 <network_get_listen_timeout>

080a2a36 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a2a36:	2200      	movs	r2, #0
 80a2a38:	4611      	mov	r1, r2
 80a2a3a:	6840      	ldr	r0, [r0, #4]
 80a2a3c:	f7fe befa 	b.w	80a1834 <network_listening>

080a2a40 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a2a40:	b570      	push	{r4, r5, r6, lr}
 80a2a42:	4616      	mov	r6, r2
 80a2a44:	b08e      	sub	sp, #56	; 0x38
 80a2a46:	4604      	mov	r4, r0
    IPAddress addr;
 80a2a48:	a808      	add	r0, sp, #32
 80a2a4a:	f7ff fd5f 	bl	80a250c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a2a4e:	2211      	movs	r2, #17
 80a2a50:	2100      	movs	r1, #0
 80a2a52:	a803      	add	r0, sp, #12
 80a2a54:	f001 fd6f 	bl	80a4536 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a2a58:	4630      	mov	r0, r6
 80a2a5a:	f001 fdb8 	bl	80a45ce <strlen>
 80a2a5e:	2500      	movs	r5, #0
 80a2a60:	4b0a      	ldr	r3, [pc, #40]	; (80a2a8c <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a2a62:	9500      	str	r5, [sp, #0]
 80a2a64:	b281      	uxth	r1, r0
 80a2a66:	685b      	ldr	r3, [r3, #4]
 80a2a68:	aa03      	add	r2, sp, #12
 80a2a6a:	4630      	mov	r0, r6
 80a2a6c:	f7fe fe6e 	bl	80a174c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a2a70:	b120      	cbz	r0, 80a2a7c <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a2a72:	4629      	mov	r1, r5
 80a2a74:	4620      	mov	r0, r4
 80a2a76:	f7ff fd69 	bl	80a254c <_ZN9IPAddressC1Em>
 80a2a7a:	e003      	b.n	80a2a84 <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a2a7c:	a903      	add	r1, sp, #12
 80a2a7e:	4620      	mov	r0, r4
 80a2a80:	f7ff fd52 	bl	80a2528 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a2a84:	4620      	mov	r0, r4
 80a2a86:	b00e      	add	sp, #56	; 0x38
 80a2a88:	bd70      	pop	{r4, r5, r6, pc}
 80a2a8a:	bf00      	nop
 80a2a8c:	20000638 	.word	0x20000638

080a2a90 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a2a90:	4b02      	ldr	r3, [pc, #8]	; (80a2a9c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a2a92:	4a03      	ldr	r2, [pc, #12]	; (80a2aa0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a2a94:	601a      	str	r2, [r3, #0]
 80a2a96:	2200      	movs	r2, #0
 80a2a98:	605a      	str	r2, [r3, #4]
 80a2a9a:	4770      	bx	lr
 80a2a9c:	20000640 	.word	0x20000640
 80a2aa0:	080a4a58 	.word	0x080a4a58

080a2aa4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a2aa4:	b510      	push	{r4, lr}
 80a2aa6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a2aa8:	480f      	ldr	r0, [pc, #60]	; (80a2ae8 <pinAvailable+0x44>)
 80a2aaa:	f7fe ff4f 	bl	80a194c <_ZN8SPIClass9isEnabledEv>
 80a2aae:	b128      	cbz	r0, 80a2abc <pinAvailable+0x18>
 80a2ab0:	f1a4 030d 	sub.w	r3, r4, #13
 80a2ab4:	2b02      	cmp	r3, #2
 80a2ab6:	d801      	bhi.n	80a2abc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a2ab8:	2000      	movs	r0, #0
 80a2aba:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a2abc:	f000 f8a6 	bl	80a2c0c <_Z19__fetch_global_Wirev>
 80a2ac0:	f7ff ff2c 	bl	80a291c <_ZN7TwoWire9isEnabledEv>
 80a2ac4:	b108      	cbz	r0, 80a2aca <pinAvailable+0x26>
 80a2ac6:	2c01      	cmp	r4, #1
 80a2ac8:	d9f6      	bls.n	80a2ab8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a2aca:	f7ff fe8f 	bl	80a27ec <_Z22__fetch_global_Serial1v>
 80a2ace:	f7ff fe89 	bl	80a27e4 <_ZN11USARTSerial9isEnabledEv>
 80a2ad2:	b118      	cbz	r0, 80a2adc <pinAvailable+0x38>
 80a2ad4:	f1a4 0312 	sub.w	r3, r4, #18
 80a2ad8:	2b01      	cmp	r3, #1
 80a2ada:	d9ed      	bls.n	80a2ab8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a2adc:	2c17      	cmp	r4, #23
 80a2ade:	bf8c      	ite	hi
 80a2ae0:	2000      	movhi	r0, #0
 80a2ae2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a2ae4:	bd10      	pop	{r4, pc}
 80a2ae6:	bf00      	nop
 80a2ae8:	20000648 	.word	0x20000648

080a2aec <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2aec:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a2aee:	b538      	push	{r3, r4, r5, lr}
 80a2af0:	4604      	mov	r4, r0
 80a2af2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a2af4:	d80a      	bhi.n	80a2b0c <pinMode+0x20>
 80a2af6:	29ff      	cmp	r1, #255	; 0xff
 80a2af8:	d008      	beq.n	80a2b0c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a2afa:	f7ff ffd3 	bl	80a2aa4 <pinAvailable>
 80a2afe:	b128      	cbz	r0, 80a2b0c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2b00:	4629      	mov	r1, r5
 80a2b02:	4620      	mov	r0, r4
}
 80a2b04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a2b08:	f7fe bcce 	b.w	80a14a8 <HAL_Pin_Mode>
 80a2b0c:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2b10 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2b10:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2b12:	4c0c      	ldr	r4, [pc, #48]	; (80a2b44 <_GLOBAL__sub_I_SPI+0x34>)
 80a2b14:	4e0c      	ldr	r6, [pc, #48]	; (80a2b48 <_GLOBAL__sub_I_SPI+0x38>)
 80a2b16:	4d0d      	ldr	r5, [pc, #52]	; (80a2b4c <_GLOBAL__sub_I_SPI+0x3c>)
 80a2b18:	2100      	movs	r1, #0
 80a2b1a:	4620      	mov	r0, r4
 80a2b1c:	f7fe ff02 	bl	80a1924 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2b20:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2b22:	4c0b      	ldr	r4, [pc, #44]	; (80a2b50 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a2b24:	4632      	mov	r2, r6
 80a2b26:	4629      	mov	r1, r5
 80a2b28:	f000 f890 	bl	80a2c4c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a2b2c:	2101      	movs	r1, #1
 80a2b2e:	4620      	mov	r0, r4
 80a2b30:	f7fe fef8 	bl	80a1924 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a2b34:	4632      	mov	r2, r6
 80a2b36:	4629      	mov	r1, r5
 80a2b38:	4620      	mov	r0, r4
 80a2b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a2b3e:	f000 b885 	b.w	80a2c4c <__aeabi_atexit>
 80a2b42:	bf00      	nop
 80a2b44:	20000648 	.word	0x20000648
 80a2b48:	200000a4 	.word	0x200000a4
 80a2b4c:	080a1915 	.word	0x080a1915
 80a2b50:	20000658 	.word	0x20000658

080a2b54 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a2b54:	b530      	push	{r4, r5, lr}
 80a2b56:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a2b58:	4d1b      	ldr	r5, [pc, #108]	; (80a2bc8 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a2b5a:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 80a2b5c:	6820      	ldr	r0, [r4, #0]
 80a2b5e:	f7fe fcdb 	bl	80a1518 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a2b62:	f7fe fce9 	bl	80a1538 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a2b66:	682b      	ldr	r3, [r5, #0]
 80a2b68:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 80a2b6a:	1ac0      	subs	r0, r0, r3
 80a2b6c:	4290      	cmp	r0, r2
 80a2b6e:	d3f5      	bcc.n	80a2b5c <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 80a2b70:	6823      	ldr	r3, [r4, #0]
 80a2b72:	b333      	cbz	r3, 80a2bc2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 80a2b74:	68e3      	ldr	r3, [r4, #12]
 80a2b76:	b323      	cbz	r3, 80a2bc2 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a2b78:	1d25      	adds	r5, r4, #4
 80a2b7a:	6923      	ldr	r3, [r4, #16]
 80a2b7c:	4628      	mov	r0, r5
 80a2b7e:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2b80:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2b82:	a904      	add	r1, sp, #16
 80a2b84:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a2b86:	9302      	str	r3, [sp, #8]
 80a2b88:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a2b8a:	f7ff f8f2 	bl	80a1d72 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2b8e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a2b90:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2b92:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2b94:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2b96:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a2b98:	9a07      	ldr	r2, [sp, #28]
 80a2b9a:	4629      	mov	r1, r5
 80a2b9c:	a804      	add	r0, sp, #16
 80a2b9e:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2ba0:	9307      	str	r3, [sp, #28]
 80a2ba2:	f7ff f8e6 	bl	80a1d72 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2ba6:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a2ba8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a2baa:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a2bac:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a2bae:	9206      	str	r2, [sp, #24]
 80a2bb0:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a2bb2:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80a2bb4:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a2bb6:	9207      	str	r2, [sp, #28]
 80a2bb8:	f7fd fac7 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
 80a2bbc:	4668      	mov	r0, sp
 80a2bbe:	f7fd fac4 	bl	80a014a <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80a2bc2:	b009      	add	sp, #36	; 0x24
 80a2bc4:	bd30      	pop	{r4, r5, pc}
 80a2bc6:	bf00      	nop
 80a2bc8:	20000668 	.word	0x20000668

080a2bcc <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80a2bcc:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80a2bce:	f7ff ffc1 	bl	80a2b54 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80a2bd2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80a2bd6:	2000      	movs	r0, #0
 80a2bd8:	f7fe bcd6 	b.w	80a1588 <os_thread_cleanup>

080a2bdc <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a2bdc:	b513      	push	{r0, r1, r4, lr}
 80a2bde:	4c08      	ldr	r4, [pc, #32]	; (80a2c00 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a2be0:	2300      	movs	r3, #0
 80a2be2:	461a      	mov	r2, r3
 80a2be4:	4619      	mov	r1, r3
 80a2be6:	9300      	str	r3, [sp, #0]
 80a2be8:	4620      	mov	r0, r4
 80a2bea:	f7ff fcc5 	bl	80a2578 <_ZN9IPAddressC1Ehhhh>
 80a2bee:	4620      	mov	r0, r4
 80a2bf0:	4a04      	ldr	r2, [pc, #16]	; (80a2c04 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a2bf2:	4905      	ldr	r1, [pc, #20]	; (80a2c08 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a2bf4:	b002      	add	sp, #8
 80a2bf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a2bfa:	f000 b827 	b.w	80a2c4c <__aeabi_atexit>
 80a2bfe:	bf00      	nop
 80a2c00:	2000066c 	.word	0x2000066c
 80a2c04:	200000a4 	.word	0x200000a4
 80a2c08:	080a24c9 	.word	0x080a24c9

080a2c0c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a2c0c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a2c0e:	4d0b      	ldr	r5, [pc, #44]	; (80a2c3c <_Z19__fetch_global_Wirev+0x30>)
 80a2c10:	6829      	ldr	r1, [r5, #0]
 80a2c12:	f011 0401 	ands.w	r4, r1, #1
 80a2c16:	d10f      	bne.n	80a2c38 <_Z19__fetch_global_Wirev+0x2c>
 80a2c18:	4628      	mov	r0, r5
 80a2c1a:	f7fd fa44 	bl	80a00a6 <__cxa_guard_acquire>
 80a2c1e:	b158      	cbz	r0, 80a2c38 <_Z19__fetch_global_Wirev+0x2c>
 80a2c20:	4621      	mov	r1, r4
 80a2c22:	4807      	ldr	r0, [pc, #28]	; (80a2c40 <_Z19__fetch_global_Wirev+0x34>)
 80a2c24:	f7ff fe48 	bl	80a28b8 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a2c28:	4628      	mov	r0, r5
 80a2c2a:	f7fd fa41 	bl	80a00b0 <__cxa_guard_release>
 80a2c2e:	4a05      	ldr	r2, [pc, #20]	; (80a2c44 <_Z19__fetch_global_Wirev+0x38>)
 80a2c30:	4905      	ldr	r1, [pc, #20]	; (80a2c48 <_Z19__fetch_global_Wirev+0x3c>)
 80a2c32:	4803      	ldr	r0, [pc, #12]	; (80a2c40 <_Z19__fetch_global_Wirev+0x34>)
 80a2c34:	f000 f80a 	bl	80a2c4c <__aeabi_atexit>
	return wire;
}
 80a2c38:	4801      	ldr	r0, [pc, #4]	; (80a2c40 <_Z19__fetch_global_Wirev+0x34>)
 80a2c3a:	bd38      	pop	{r3, r4, r5, pc}
 80a2c3c:	20000684 	.word	0x20000684
 80a2c40:	20000688 	.word	0x20000688
 80a2c44:	200000a4 	.word	0x200000a4
 80a2c48:	080a2861 	.word	0x080a2861

080a2c4c <__aeabi_atexit>:
 80a2c4c:	460b      	mov	r3, r1
 80a2c4e:	4601      	mov	r1, r0
 80a2c50:	4618      	mov	r0, r3
 80a2c52:	f001 bc57 	b.w	80a4504 <__cxa_atexit>
	...

080a2c58 <_ZSt15get_new_handlerv>:
 80a2c58:	4b02      	ldr	r3, [pc, #8]	; (80a2c64 <_ZSt15get_new_handlerv+0xc>)
 80a2c5a:	6818      	ldr	r0, [r3, #0]
 80a2c5c:	f3bf 8f5f 	dmb	sy
 80a2c60:	4770      	bx	lr
 80a2c62:	bf00      	nop
 80a2c64:	2000069c 	.word	0x2000069c

080a2c68 <_ZdlPvj>:
 80a2c68:	f7fd ba1b 	b.w	80a00a2 <_ZdlPv>

080a2c6c <_ZnwjRKSt9nothrow_t>:
 80a2c6c:	b510      	push	{r4, lr}
 80a2c6e:	2800      	cmp	r0, #0
 80a2c70:	bf14      	ite	ne
 80a2c72:	4604      	movne	r4, r0
 80a2c74:	2401      	moveq	r4, #1
 80a2c76:	4620      	mov	r0, r4
 80a2c78:	f7fe fe14 	bl	80a18a4 <malloc>
 80a2c7c:	b920      	cbnz	r0, 80a2c88 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2c7e:	f7ff ffeb 	bl	80a2c58 <_ZSt15get_new_handlerv>
 80a2c82:	b108      	cbz	r0, 80a2c88 <_ZnwjRKSt9nothrow_t+0x1c>
 80a2c84:	4780      	blx	r0
 80a2c86:	e7f6      	b.n	80a2c76 <_ZnwjRKSt9nothrow_t+0xa>
 80a2c88:	bd10      	pop	{r4, pc}

080a2c8a <_ZSt25__throw_bad_function_callv>:
 80a2c8a:	b508      	push	{r3, lr}
 80a2c8c:	f7fe fe2a 	bl	80a18e4 <abort>

080a2c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2c90:	4b18      	ldr	r3, [pc, #96]	; (80a2cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2c92:	681a      	ldr	r2, [r3, #0]
 80a2c94:	07d1      	lsls	r1, r2, #31
 80a2c96:	bf5c      	itt	pl
 80a2c98:	2201      	movpl	r2, #1
 80a2c9a:	601a      	strpl	r2, [r3, #0]
 80a2c9c:	4b16      	ldr	r3, [pc, #88]	; (80a2cf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2c9e:	681a      	ldr	r2, [r3, #0]
 80a2ca0:	07d2      	lsls	r2, r2, #31
 80a2ca2:	bf5c      	itt	pl
 80a2ca4:	2201      	movpl	r2, #1
 80a2ca6:	601a      	strpl	r2, [r3, #0]
 80a2ca8:	4b14      	ldr	r3, [pc, #80]	; (80a2cfc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2caa:	681a      	ldr	r2, [r3, #0]
 80a2cac:	07d0      	lsls	r0, r2, #31
 80a2cae:	bf5c      	itt	pl
 80a2cb0:	2201      	movpl	r2, #1
 80a2cb2:	601a      	strpl	r2, [r3, #0]
 80a2cb4:	4b12      	ldr	r3, [pc, #72]	; (80a2d00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2cb6:	681a      	ldr	r2, [r3, #0]
 80a2cb8:	07d1      	lsls	r1, r2, #31
 80a2cba:	bf5c      	itt	pl
 80a2cbc:	2201      	movpl	r2, #1
 80a2cbe:	601a      	strpl	r2, [r3, #0]
 80a2cc0:	4b10      	ldr	r3, [pc, #64]	; (80a2d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2cc2:	681a      	ldr	r2, [r3, #0]
 80a2cc4:	07d2      	lsls	r2, r2, #31
 80a2cc6:	bf5c      	itt	pl
 80a2cc8:	2201      	movpl	r2, #1
 80a2cca:	601a      	strpl	r2, [r3, #0]
 80a2ccc:	4b0e      	ldr	r3, [pc, #56]	; (80a2d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2cce:	681a      	ldr	r2, [r3, #0]
 80a2cd0:	07d0      	lsls	r0, r2, #31
 80a2cd2:	bf5c      	itt	pl
 80a2cd4:	2201      	movpl	r2, #1
 80a2cd6:	601a      	strpl	r2, [r3, #0]
 80a2cd8:	4b0c      	ldr	r3, [pc, #48]	; (80a2d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2cda:	681a      	ldr	r2, [r3, #0]
 80a2cdc:	07d1      	lsls	r1, r2, #31
 80a2cde:	bf5c      	itt	pl
 80a2ce0:	2201      	movpl	r2, #1
 80a2ce2:	601a      	strpl	r2, [r3, #0]
 80a2ce4:	4b0a      	ldr	r3, [pc, #40]	; (80a2d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ce6:	681a      	ldr	r2, [r3, #0]
 80a2ce8:	07d2      	lsls	r2, r2, #31
 80a2cea:	bf5c      	itt	pl
 80a2cec:	2201      	movpl	r2, #1
 80a2cee:	601a      	strpl	r2, [r3, #0]
 80a2cf0:	4770      	bx	lr
 80a2cf2:	bf00      	nop
 80a2cf4:	200006bc 	.word	0x200006bc
 80a2cf8:	200006b8 	.word	0x200006b8
 80a2cfc:	200006b4 	.word	0x200006b4
 80a2d00:	200006b0 	.word	0x200006b0
 80a2d04:	200006ac 	.word	0x200006ac
 80a2d08:	200006a8 	.word	0x200006a8
 80a2d0c:	200006a4 	.word	0x200006a4
 80a2d10:	200006a0 	.word	0x200006a0

080a2d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a2d14:	4b24      	ldr	r3, [pc, #144]	; (80a2da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a2d16:	681a      	ldr	r2, [r3, #0]
 80a2d18:	07d0      	lsls	r0, r2, #31
 80a2d1a:	bf5c      	itt	pl
 80a2d1c:	2201      	movpl	r2, #1
 80a2d1e:	601a      	strpl	r2, [r3, #0]
 80a2d20:	4b22      	ldr	r3, [pc, #136]	; (80a2dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a2d22:	681a      	ldr	r2, [r3, #0]
 80a2d24:	07d1      	lsls	r1, r2, #31
 80a2d26:	bf5c      	itt	pl
 80a2d28:	2201      	movpl	r2, #1
 80a2d2a:	601a      	strpl	r2, [r3, #0]
 80a2d2c:	4b20      	ldr	r3, [pc, #128]	; (80a2db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a2d2e:	681a      	ldr	r2, [r3, #0]
 80a2d30:	07d2      	lsls	r2, r2, #31
 80a2d32:	bf5c      	itt	pl
 80a2d34:	2201      	movpl	r2, #1
 80a2d36:	601a      	strpl	r2, [r3, #0]
 80a2d38:	4b1e      	ldr	r3, [pc, #120]	; (80a2db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a2d3a:	681a      	ldr	r2, [r3, #0]
 80a2d3c:	07d0      	lsls	r0, r2, #31
 80a2d3e:	bf5c      	itt	pl
 80a2d40:	2201      	movpl	r2, #1
 80a2d42:	601a      	strpl	r2, [r3, #0]
 80a2d44:	4b1c      	ldr	r3, [pc, #112]	; (80a2db8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a2d46:	681a      	ldr	r2, [r3, #0]
 80a2d48:	07d1      	lsls	r1, r2, #31
 80a2d4a:	bf5c      	itt	pl
 80a2d4c:	2201      	movpl	r2, #1
 80a2d4e:	601a      	strpl	r2, [r3, #0]
 80a2d50:	4b1a      	ldr	r3, [pc, #104]	; (80a2dbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a2d52:	681a      	ldr	r2, [r3, #0]
 80a2d54:	07d2      	lsls	r2, r2, #31
 80a2d56:	bf5c      	itt	pl
 80a2d58:	2201      	movpl	r2, #1
 80a2d5a:	601a      	strpl	r2, [r3, #0]
 80a2d5c:	4b18      	ldr	r3, [pc, #96]	; (80a2dc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a2d5e:	681a      	ldr	r2, [r3, #0]
 80a2d60:	07d0      	lsls	r0, r2, #31
 80a2d62:	bf5c      	itt	pl
 80a2d64:	2201      	movpl	r2, #1
 80a2d66:	601a      	strpl	r2, [r3, #0]
 80a2d68:	4b16      	ldr	r3, [pc, #88]	; (80a2dc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a2d6a:	681a      	ldr	r2, [r3, #0]
 80a2d6c:	07d1      	lsls	r1, r2, #31
 80a2d6e:	bf5c      	itt	pl
 80a2d70:	2201      	movpl	r2, #1
 80a2d72:	601a      	strpl	r2, [r3, #0]
 80a2d74:	4b14      	ldr	r3, [pc, #80]	; (80a2dc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a2d76:	681a      	ldr	r2, [r3, #0]
 80a2d78:	07d2      	lsls	r2, r2, #31
 80a2d7a:	bf5c      	itt	pl
 80a2d7c:	2201      	movpl	r2, #1
 80a2d7e:	601a      	strpl	r2, [r3, #0]
 80a2d80:	4b12      	ldr	r3, [pc, #72]	; (80a2dcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a2d82:	681a      	ldr	r2, [r3, #0]
 80a2d84:	07d0      	lsls	r0, r2, #31
 80a2d86:	bf5c      	itt	pl
 80a2d88:	2201      	movpl	r2, #1
 80a2d8a:	601a      	strpl	r2, [r3, #0]
 80a2d8c:	4b10      	ldr	r3, [pc, #64]	; (80a2dd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a2d8e:	681a      	ldr	r2, [r3, #0]
 80a2d90:	07d1      	lsls	r1, r2, #31
 80a2d92:	bf5c      	itt	pl
 80a2d94:	2201      	movpl	r2, #1
 80a2d96:	601a      	strpl	r2, [r3, #0]
 80a2d98:	4b0e      	ldr	r3, [pc, #56]	; (80a2dd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a2d9a:	681a      	ldr	r2, [r3, #0]
 80a2d9c:	07d2      	lsls	r2, r2, #31
 80a2d9e:	bf5c      	itt	pl
 80a2da0:	2201      	movpl	r2, #1
 80a2da2:	601a      	strpl	r2, [r3, #0]
 80a2da4:	4770      	bx	lr
 80a2da6:	bf00      	nop
 80a2da8:	200006ec 	.word	0x200006ec
 80a2dac:	200006e8 	.word	0x200006e8
 80a2db0:	200006e4 	.word	0x200006e4
 80a2db4:	200006e0 	.word	0x200006e0
 80a2db8:	200006dc 	.word	0x200006dc
 80a2dbc:	200006d8 	.word	0x200006d8
 80a2dc0:	200006d4 	.word	0x200006d4
 80a2dc4:	200006d0 	.word	0x200006d0
 80a2dc8:	200006cc 	.word	0x200006cc
 80a2dcc:	200006c8 	.word	0x200006c8
 80a2dd0:	200006c4 	.word	0x200006c4
 80a2dd4:	200006c0 	.word	0x200006c0

080a2dd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a2dd8:	4b24      	ldr	r3, [pc, #144]	; (80a2e6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a2dda:	681a      	ldr	r2, [r3, #0]
 80a2ddc:	07d0      	lsls	r0, r2, #31
 80a2dde:	bf5c      	itt	pl
 80a2de0:	2201      	movpl	r2, #1
 80a2de2:	601a      	strpl	r2, [r3, #0]
 80a2de4:	4b22      	ldr	r3, [pc, #136]	; (80a2e70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a2de6:	681a      	ldr	r2, [r3, #0]
 80a2de8:	07d1      	lsls	r1, r2, #31
 80a2dea:	bf5c      	itt	pl
 80a2dec:	2201      	movpl	r2, #1
 80a2dee:	601a      	strpl	r2, [r3, #0]
 80a2df0:	4b20      	ldr	r3, [pc, #128]	; (80a2e74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a2df2:	681a      	ldr	r2, [r3, #0]
 80a2df4:	07d2      	lsls	r2, r2, #31
 80a2df6:	bf5c      	itt	pl
 80a2df8:	2201      	movpl	r2, #1
 80a2dfa:	601a      	strpl	r2, [r3, #0]
 80a2dfc:	4b1e      	ldr	r3, [pc, #120]	; (80a2e78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a2dfe:	681a      	ldr	r2, [r3, #0]
 80a2e00:	07d0      	lsls	r0, r2, #31
 80a2e02:	bf5c      	itt	pl
 80a2e04:	2201      	movpl	r2, #1
 80a2e06:	601a      	strpl	r2, [r3, #0]
 80a2e08:	4b1c      	ldr	r3, [pc, #112]	; (80a2e7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a2e0a:	681a      	ldr	r2, [r3, #0]
 80a2e0c:	07d1      	lsls	r1, r2, #31
 80a2e0e:	bf5c      	itt	pl
 80a2e10:	2201      	movpl	r2, #1
 80a2e12:	601a      	strpl	r2, [r3, #0]
 80a2e14:	4b1a      	ldr	r3, [pc, #104]	; (80a2e80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a2e16:	681a      	ldr	r2, [r3, #0]
 80a2e18:	07d2      	lsls	r2, r2, #31
 80a2e1a:	bf5c      	itt	pl
 80a2e1c:	2201      	movpl	r2, #1
 80a2e1e:	601a      	strpl	r2, [r3, #0]
 80a2e20:	4b18      	ldr	r3, [pc, #96]	; (80a2e84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a2e22:	681a      	ldr	r2, [r3, #0]
 80a2e24:	07d0      	lsls	r0, r2, #31
 80a2e26:	bf5c      	itt	pl
 80a2e28:	2201      	movpl	r2, #1
 80a2e2a:	601a      	strpl	r2, [r3, #0]
 80a2e2c:	4b16      	ldr	r3, [pc, #88]	; (80a2e88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a2e2e:	681a      	ldr	r2, [r3, #0]
 80a2e30:	07d1      	lsls	r1, r2, #31
 80a2e32:	bf5c      	itt	pl
 80a2e34:	2201      	movpl	r2, #1
 80a2e36:	601a      	strpl	r2, [r3, #0]
 80a2e38:	4b14      	ldr	r3, [pc, #80]	; (80a2e8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a2e3a:	681a      	ldr	r2, [r3, #0]
 80a2e3c:	07d2      	lsls	r2, r2, #31
 80a2e3e:	bf5c      	itt	pl
 80a2e40:	2201      	movpl	r2, #1
 80a2e42:	601a      	strpl	r2, [r3, #0]
 80a2e44:	4b12      	ldr	r3, [pc, #72]	; (80a2e90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a2e46:	681a      	ldr	r2, [r3, #0]
 80a2e48:	07d0      	lsls	r0, r2, #31
 80a2e4a:	bf5c      	itt	pl
 80a2e4c:	2201      	movpl	r2, #1
 80a2e4e:	601a      	strpl	r2, [r3, #0]
 80a2e50:	4b10      	ldr	r3, [pc, #64]	; (80a2e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a2e52:	681a      	ldr	r2, [r3, #0]
 80a2e54:	07d1      	lsls	r1, r2, #31
 80a2e56:	bf5c      	itt	pl
 80a2e58:	2201      	movpl	r2, #1
 80a2e5a:	601a      	strpl	r2, [r3, #0]
 80a2e5c:	4b0e      	ldr	r3, [pc, #56]	; (80a2e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a2e5e:	681a      	ldr	r2, [r3, #0]
 80a2e60:	07d2      	lsls	r2, r2, #31
 80a2e62:	bf5c      	itt	pl
 80a2e64:	2201      	movpl	r2, #1
 80a2e66:	601a      	strpl	r2, [r3, #0]
 80a2e68:	4770      	bx	lr
 80a2e6a:	bf00      	nop
 80a2e6c:	2000071c 	.word	0x2000071c
 80a2e70:	20000718 	.word	0x20000718
 80a2e74:	20000714 	.word	0x20000714
 80a2e78:	20000710 	.word	0x20000710
 80a2e7c:	2000070c 	.word	0x2000070c
 80a2e80:	20000708 	.word	0x20000708
 80a2e84:	20000704 	.word	0x20000704
 80a2e88:	20000700 	.word	0x20000700
 80a2e8c:	200006fc 	.word	0x200006fc
 80a2e90:	200006f8 	.word	0x200006f8
 80a2e94:	200006f4 	.word	0x200006f4
 80a2e98:	200006f0 	.word	0x200006f0

080a2e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a2e9c:	4b18      	ldr	r3, [pc, #96]	; (80a2f00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a2e9e:	681a      	ldr	r2, [r3, #0]
 80a2ea0:	07d1      	lsls	r1, r2, #31
 80a2ea2:	bf5c      	itt	pl
 80a2ea4:	2201      	movpl	r2, #1
 80a2ea6:	601a      	strpl	r2, [r3, #0]
 80a2ea8:	4b16      	ldr	r3, [pc, #88]	; (80a2f04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a2eaa:	681a      	ldr	r2, [r3, #0]
 80a2eac:	07d2      	lsls	r2, r2, #31
 80a2eae:	bf5c      	itt	pl
 80a2eb0:	2201      	movpl	r2, #1
 80a2eb2:	601a      	strpl	r2, [r3, #0]
 80a2eb4:	4b14      	ldr	r3, [pc, #80]	; (80a2f08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a2eb6:	681a      	ldr	r2, [r3, #0]
 80a2eb8:	07d0      	lsls	r0, r2, #31
 80a2eba:	bf5c      	itt	pl
 80a2ebc:	2201      	movpl	r2, #1
 80a2ebe:	601a      	strpl	r2, [r3, #0]
 80a2ec0:	4b12      	ldr	r3, [pc, #72]	; (80a2f0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a2ec2:	681a      	ldr	r2, [r3, #0]
 80a2ec4:	07d1      	lsls	r1, r2, #31
 80a2ec6:	bf5c      	itt	pl
 80a2ec8:	2201      	movpl	r2, #1
 80a2eca:	601a      	strpl	r2, [r3, #0]
 80a2ecc:	4b10      	ldr	r3, [pc, #64]	; (80a2f10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a2ece:	681a      	ldr	r2, [r3, #0]
 80a2ed0:	07d2      	lsls	r2, r2, #31
 80a2ed2:	bf5c      	itt	pl
 80a2ed4:	2201      	movpl	r2, #1
 80a2ed6:	601a      	strpl	r2, [r3, #0]
 80a2ed8:	4b0e      	ldr	r3, [pc, #56]	; (80a2f14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a2eda:	681a      	ldr	r2, [r3, #0]
 80a2edc:	07d0      	lsls	r0, r2, #31
 80a2ede:	bf5c      	itt	pl
 80a2ee0:	2201      	movpl	r2, #1
 80a2ee2:	601a      	strpl	r2, [r3, #0]
 80a2ee4:	4b0c      	ldr	r3, [pc, #48]	; (80a2f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a2ee6:	681a      	ldr	r2, [r3, #0]
 80a2ee8:	07d1      	lsls	r1, r2, #31
 80a2eea:	bf5c      	itt	pl
 80a2eec:	2201      	movpl	r2, #1
 80a2eee:	601a      	strpl	r2, [r3, #0]
 80a2ef0:	4b0a      	ldr	r3, [pc, #40]	; (80a2f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a2ef2:	681a      	ldr	r2, [r3, #0]
 80a2ef4:	07d2      	lsls	r2, r2, #31
 80a2ef6:	bf5c      	itt	pl
 80a2ef8:	2201      	movpl	r2, #1
 80a2efa:	601a      	strpl	r2, [r3, #0]
 80a2efc:	4770      	bx	lr
 80a2efe:	bf00      	nop
 80a2f00:	2000073c 	.word	0x2000073c
 80a2f04:	20000738 	.word	0x20000738
 80a2f08:	20000734 	.word	0x20000734
 80a2f0c:	20000730 	.word	0x20000730
 80a2f10:	2000072c 	.word	0x2000072c
 80a2f14:	20000728 	.word	0x20000728
 80a2f18:	20000724 	.word	0x20000724
 80a2f1c:	20000720 	.word	0x20000720

080a2f20 <floor>:
 80a2f20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a2f24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a2f28:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a2f2c:	2e13      	cmp	r6, #19
 80a2f2e:	460b      	mov	r3, r1
 80a2f30:	4604      	mov	r4, r0
 80a2f32:	460d      	mov	r5, r1
 80a2f34:	4688      	mov	r8, r1
 80a2f36:	4607      	mov	r7, r0
 80a2f38:	dc1c      	bgt.n	80a2f74 <floor+0x54>
 80a2f3a:	2e00      	cmp	r6, #0
 80a2f3c:	db3f      	blt.n	80a2fbe <floor+0x9e>
 80a2f3e:	4a3a      	ldr	r2, [pc, #232]	; (80a3028 <floor+0x108>)
 80a2f40:	4686      	mov	lr, r0
 80a2f42:	fa42 f906 	asr.w	r9, r2, r6
 80a2f46:	ea01 0209 	and.w	r2, r1, r9
 80a2f4a:	4302      	orrs	r2, r0
 80a2f4c:	d017      	beq.n	80a2f7e <floor+0x5e>
 80a2f4e:	a334      	add	r3, pc, #208	; (adr r3, 80a3020 <floor+0x100>)
 80a2f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2f54:	f000 faee 	bl	80a3534 <__adddf3>
 80a2f58:	2200      	movs	r2, #0
 80a2f5a:	2300      	movs	r3, #0
 80a2f5c:	f000 ff2c 	bl	80a3db8 <__aeabi_dcmpgt>
 80a2f60:	b120      	cbz	r0, 80a2f6c <floor+0x4c>
 80a2f62:	2d00      	cmp	r5, #0
 80a2f64:	db40      	blt.n	80a2fe8 <floor+0xc8>
 80a2f66:	ea28 0509 	bic.w	r5, r8, r9
 80a2f6a:	2700      	movs	r7, #0
 80a2f6c:	4638      	mov	r0, r7
 80a2f6e:	4629      	mov	r1, r5
 80a2f70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2f74:	2e33      	cmp	r6, #51	; 0x33
 80a2f76:	dd06      	ble.n	80a2f86 <floor+0x66>
 80a2f78:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a2f7c:	d02f      	beq.n	80a2fde <floor+0xbe>
 80a2f7e:	4620      	mov	r0, r4
 80a2f80:	4619      	mov	r1, r3
 80a2f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a2f86:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a2f8a:	f04f 39ff 	mov.w	r9, #4294967295
 80a2f8e:	fa29 f902 	lsr.w	r9, r9, r2
 80a2f92:	ea10 0f09 	tst.w	r0, r9
 80a2f96:	d0f2      	beq.n	80a2f7e <floor+0x5e>
 80a2f98:	a321      	add	r3, pc, #132	; (adr r3, 80a3020 <floor+0x100>)
 80a2f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2f9e:	f000 fac9 	bl	80a3534 <__adddf3>
 80a2fa2:	2200      	movs	r2, #0
 80a2fa4:	2300      	movs	r3, #0
 80a2fa6:	f000 ff07 	bl	80a3db8 <__aeabi_dcmpgt>
 80a2faa:	2800      	cmp	r0, #0
 80a2fac:	d0de      	beq.n	80a2f6c <floor+0x4c>
 80a2fae:	2d00      	cmp	r5, #0
 80a2fb0:	db20      	blt.n	80a2ff4 <floor+0xd4>
 80a2fb2:	4645      	mov	r5, r8
 80a2fb4:	ea27 0709 	bic.w	r7, r7, r9
 80a2fb8:	4638      	mov	r0, r7
 80a2fba:	4629      	mov	r1, r5
 80a2fbc:	e7d8      	b.n	80a2f70 <floor+0x50>
 80a2fbe:	a318      	add	r3, pc, #96	; (adr r3, 80a3020 <floor+0x100>)
 80a2fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a2fc4:	f000 fab6 	bl	80a3534 <__adddf3>
 80a2fc8:	2200      	movs	r2, #0
 80a2fca:	2300      	movs	r3, #0
 80a2fcc:	f000 fef4 	bl	80a3db8 <__aeabi_dcmpgt>
 80a2fd0:	2800      	cmp	r0, #0
 80a2fd2:	d0cb      	beq.n	80a2f6c <floor+0x4c>
 80a2fd4:	2d00      	cmp	r5, #0
 80a2fd6:	db18      	blt.n	80a300a <floor+0xea>
 80a2fd8:	2700      	movs	r7, #0
 80a2fda:	463d      	mov	r5, r7
 80a2fdc:	e7c6      	b.n	80a2f6c <floor+0x4c>
 80a2fde:	4602      	mov	r2, r0
 80a2fe0:	460b      	mov	r3, r1
 80a2fe2:	f000 faa7 	bl	80a3534 <__adddf3>
 80a2fe6:	e7cc      	b.n	80a2f82 <floor+0x62>
 80a2fe8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a2fec:	fa43 f606 	asr.w	r6, r3, r6
 80a2ff0:	44b0      	add	r8, r6
 80a2ff2:	e7b8      	b.n	80a2f66 <floor+0x46>
 80a2ff4:	2e14      	cmp	r6, #20
 80a2ff6:	d010      	beq.n	80a301a <floor+0xfa>
 80a2ff8:	2301      	movs	r3, #1
 80a2ffa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a2ffe:	fa03 f606 	lsl.w	r6, r3, r6
 80a3002:	1937      	adds	r7, r6, r4
 80a3004:	bf28      	it	cs
 80a3006:	4498      	addcs	r8, r3
 80a3008:	e7d3      	b.n	80a2fb2 <floor+0x92>
 80a300a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a300e:	4b07      	ldr	r3, [pc, #28]	; (80a302c <floor+0x10c>)
 80a3010:	4322      	orrs	r2, r4
 80a3012:	bf18      	it	ne
 80a3014:	461d      	movne	r5, r3
 80a3016:	2700      	movs	r7, #0
 80a3018:	e7a8      	b.n	80a2f6c <floor+0x4c>
 80a301a:	f105 0801 	add.w	r8, r5, #1
 80a301e:	e7c8      	b.n	80a2fb2 <floor+0x92>
 80a3020:	8800759c 	.word	0x8800759c
 80a3024:	7e37e43c 	.word	0x7e37e43c
 80a3028:	000fffff 	.word	0x000fffff
 80a302c:	bff00000 	.word	0xbff00000

080a3030 <log>:
 80a3030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a3034:	b08a      	sub	sp, #40	; 0x28
 80a3036:	4604      	mov	r4, r0
 80a3038:	460d      	mov	r5, r1
 80a303a:	f000 f879 	bl	80a3130 <__ieee754_log>
 80a303e:	4b37      	ldr	r3, [pc, #220]	; (80a311c <log+0xec>)
 80a3040:	4606      	mov	r6, r0
 80a3042:	f993 8000 	ldrsb.w	r8, [r3]
 80a3046:	460f      	mov	r7, r1
 80a3048:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a304c:	d00d      	beq.n	80a306a <log+0x3a>
 80a304e:	4622      	mov	r2, r4
 80a3050:	462b      	mov	r3, r5
 80a3052:	4620      	mov	r0, r4
 80a3054:	4629      	mov	r1, r5
 80a3056:	f000 feb9 	bl	80a3dcc <__aeabi_dcmpun>
 80a305a:	b930      	cbnz	r0, 80a306a <log+0x3a>
 80a305c:	2200      	movs	r2, #0
 80a305e:	2300      	movs	r3, #0
 80a3060:	4620      	mov	r0, r4
 80a3062:	4629      	mov	r1, r5
 80a3064:	f000 fea8 	bl	80a3db8 <__aeabi_dcmpgt>
 80a3068:	b120      	cbz	r0, 80a3074 <log+0x44>
 80a306a:	4630      	mov	r0, r6
 80a306c:	4639      	mov	r1, r7
 80a306e:	b00a      	add	sp, #40	; 0x28
 80a3070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a3074:	4b2a      	ldr	r3, [pc, #168]	; (80a3120 <log+0xf0>)
 80a3076:	9008      	str	r0, [sp, #32]
 80a3078:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a307c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a3080:	9301      	str	r3, [sp, #4]
 80a3082:	f1b8 0f00 	cmp.w	r8, #0
 80a3086:	d119      	bne.n	80a30bc <log+0x8c>
 80a3088:	4f26      	ldr	r7, [pc, #152]	; (80a3124 <log+0xf4>)
 80a308a:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a308e:	4620      	mov	r0, r4
 80a3090:	4629      	mov	r1, r5
 80a3092:	2200      	movs	r2, #0
 80a3094:	2300      	movs	r3, #0
 80a3096:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a309a:	f000 fe65 	bl	80a3d68 <__aeabi_dcmpeq>
 80a309e:	2800      	cmp	r0, #0
 80a30a0:	d034      	beq.n	80a310c <log+0xdc>
 80a30a2:	2302      	movs	r3, #2
 80a30a4:	9300      	str	r3, [sp, #0]
 80a30a6:	4668      	mov	r0, sp
 80a30a8:	f000 fa36 	bl	80a3518 <matherr>
 80a30ac:	b1a8      	cbz	r0, 80a30da <log+0xaa>
 80a30ae:	9b08      	ldr	r3, [sp, #32]
 80a30b0:	b9c3      	cbnz	r3, 80a30e4 <log+0xb4>
 80a30b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a30b6:	b00a      	add	sp, #40	; 0x28
 80a30b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a30bc:	4f1a      	ldr	r7, [pc, #104]	; (80a3128 <log+0xf8>)
 80a30be:	2600      	movs	r6, #0
 80a30c0:	4620      	mov	r0, r4
 80a30c2:	4629      	mov	r1, r5
 80a30c4:	2200      	movs	r2, #0
 80a30c6:	2300      	movs	r3, #0
 80a30c8:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a30cc:	f000 fe4c 	bl	80a3d68 <__aeabi_dcmpeq>
 80a30d0:	b168      	cbz	r0, 80a30ee <log+0xbe>
 80a30d2:	2302      	movs	r3, #2
 80a30d4:	4598      	cmp	r8, r3
 80a30d6:	9300      	str	r3, [sp, #0]
 80a30d8:	d1e5      	bne.n	80a30a6 <log+0x76>
 80a30da:	f7fe fc13 	bl	80a1904 <__errno>
 80a30de:	2322      	movs	r3, #34	; 0x22
 80a30e0:	6003      	str	r3, [r0, #0]
 80a30e2:	e7e4      	b.n	80a30ae <log+0x7e>
 80a30e4:	f7fe fc0e 	bl	80a1904 <__errno>
 80a30e8:	9b08      	ldr	r3, [sp, #32]
 80a30ea:	6003      	str	r3, [r0, #0]
 80a30ec:	e7e1      	b.n	80a30b2 <log+0x82>
 80a30ee:	2301      	movs	r3, #1
 80a30f0:	f1b8 0f02 	cmp.w	r8, #2
 80a30f4:	9300      	str	r3, [sp, #0]
 80a30f6:	d10b      	bne.n	80a3110 <log+0xe0>
 80a30f8:	f7fe fc04 	bl	80a1904 <__errno>
 80a30fc:	2321      	movs	r3, #33	; 0x21
 80a30fe:	6003      	str	r3, [r0, #0]
 80a3100:	480a      	ldr	r0, [pc, #40]	; (80a312c <log+0xfc>)
 80a3102:	f000 fa0b 	bl	80a351c <nan>
 80a3106:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a310a:	e7d0      	b.n	80a30ae <log+0x7e>
 80a310c:	2301      	movs	r3, #1
 80a310e:	9300      	str	r3, [sp, #0]
 80a3110:	4668      	mov	r0, sp
 80a3112:	f000 fa01 	bl	80a3518 <matherr>
 80a3116:	2800      	cmp	r0, #0
 80a3118:	d1f2      	bne.n	80a3100 <log+0xd0>
 80a311a:	e7ed      	b.n	80a30f8 <log+0xc8>
 80a311c:	20000038 	.word	0x20000038
 80a3120:	080a4a88 	.word	0x080a4a88
 80a3124:	c7efffff 	.word	0xc7efffff
 80a3128:	fff00000 	.word	0xfff00000
 80a312c:	080a4a8c 	.word	0x080a4a8c

080a3130 <__ieee754_log>:
 80a3130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3134:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a3138:	b085      	sub	sp, #20
 80a313a:	4606      	mov	r6, r0
 80a313c:	460f      	mov	r7, r1
 80a313e:	460b      	mov	r3, r1
 80a3140:	da5a      	bge.n	80a31f8 <__ieee754_log+0xc8>
 80a3142:	4602      	mov	r2, r0
 80a3144:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a3148:	4322      	orrs	r2, r4
 80a314a:	f000 80f7 	beq.w	80a333c <__ieee754_log+0x20c>
 80a314e:	2900      	cmp	r1, #0
 80a3150:	f2c0 8179 	blt.w	80a3446 <__ieee754_log+0x316>
 80a3154:	2200      	movs	r2, #0
 80a3156:	4bd6      	ldr	r3, [pc, #856]	; (80a34b0 <__ieee754_log+0x380>)
 80a3158:	f000 fb9e 	bl	80a3898 <__aeabi_dmul>
 80a315c:	460b      	mov	r3, r1
 80a315e:	460f      	mov	r7, r1
 80a3160:	49d4      	ldr	r1, [pc, #848]	; (80a34b4 <__ieee754_log+0x384>)
 80a3162:	4606      	mov	r6, r0
 80a3164:	428b      	cmp	r3, r1
 80a3166:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a316a:	dc49      	bgt.n	80a3200 <__ieee754_log+0xd0>
 80a316c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a3170:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a3174:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a3178:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a317c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a3180:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a3184:	151b      	asrs	r3, r3, #20
 80a3186:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a318a:	ea41 0705 	orr.w	r7, r1, r5
 80a318e:	189c      	adds	r4, r3, r2
 80a3190:	4630      	mov	r0, r6
 80a3192:	2200      	movs	r2, #0
 80a3194:	4bc8      	ldr	r3, [pc, #800]	; (80a34b8 <__ieee754_log+0x388>)
 80a3196:	4639      	mov	r1, r7
 80a3198:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a319c:	f000 f9c8 	bl	80a3530 <__aeabi_dsub>
 80a31a0:	1cab      	adds	r3, r5, #2
 80a31a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a31a6:	2b02      	cmp	r3, #2
 80a31a8:	4682      	mov	sl, r0
 80a31aa:	468b      	mov	fp, r1
 80a31ac:	f04f 0200 	mov.w	r2, #0
 80a31b0:	dc2f      	bgt.n	80a3212 <__ieee754_log+0xe2>
 80a31b2:	2300      	movs	r3, #0
 80a31b4:	f000 fdd8 	bl	80a3d68 <__aeabi_dcmpeq>
 80a31b8:	2800      	cmp	r0, #0
 80a31ba:	f000 80c8 	beq.w	80a334e <__ieee754_log+0x21e>
 80a31be:	2c00      	cmp	r4, #0
 80a31c0:	f000 814a 	beq.w	80a3458 <__ieee754_log+0x328>
 80a31c4:	4620      	mov	r0, r4
 80a31c6:	f000 fb01 	bl	80a37cc <__aeabi_i2d>
 80a31ca:	a3a5      	add	r3, pc, #660	; (adr r3, 80a3460 <__ieee754_log+0x330>)
 80a31cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a31d0:	4606      	mov	r6, r0
 80a31d2:	460f      	mov	r7, r1
 80a31d4:	f000 fb60 	bl	80a3898 <__aeabi_dmul>
 80a31d8:	a3a3      	add	r3, pc, #652	; (adr r3, 80a3468 <__ieee754_log+0x338>)
 80a31da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a31de:	4604      	mov	r4, r0
 80a31e0:	460d      	mov	r5, r1
 80a31e2:	4630      	mov	r0, r6
 80a31e4:	4639      	mov	r1, r7
 80a31e6:	f000 fb57 	bl	80a3898 <__aeabi_dmul>
 80a31ea:	4602      	mov	r2, r0
 80a31ec:	460b      	mov	r3, r1
 80a31ee:	4620      	mov	r0, r4
 80a31f0:	4629      	mov	r1, r5
 80a31f2:	f000 f99f 	bl	80a3534 <__adddf3>
 80a31f6:	e009      	b.n	80a320c <__ieee754_log+0xdc>
 80a31f8:	49ae      	ldr	r1, [pc, #696]	; (80a34b4 <__ieee754_log+0x384>)
 80a31fa:	2200      	movs	r2, #0
 80a31fc:	428b      	cmp	r3, r1
 80a31fe:	ddb5      	ble.n	80a316c <__ieee754_log+0x3c>
 80a3200:	4632      	mov	r2, r6
 80a3202:	463b      	mov	r3, r7
 80a3204:	4630      	mov	r0, r6
 80a3206:	4639      	mov	r1, r7
 80a3208:	f000 f994 	bl	80a3534 <__adddf3>
 80a320c:	b005      	add	sp, #20
 80a320e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a3216:	f000 f98d 	bl	80a3534 <__adddf3>
 80a321a:	4602      	mov	r2, r0
 80a321c:	460b      	mov	r3, r1
 80a321e:	4650      	mov	r0, sl
 80a3220:	4659      	mov	r1, fp
 80a3222:	f000 fc63 	bl	80a3aec <__aeabi_ddiv>
 80a3226:	4606      	mov	r6, r0
 80a3228:	4620      	mov	r0, r4
 80a322a:	460f      	mov	r7, r1
 80a322c:	f000 face 	bl	80a37cc <__aeabi_i2d>
 80a3230:	4632      	mov	r2, r6
 80a3232:	e9cd 0100 	strd	r0, r1, [sp]
 80a3236:	463b      	mov	r3, r7
 80a3238:	4630      	mov	r0, r6
 80a323a:	4639      	mov	r1, r7
 80a323c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a3240:	f000 fb2a 	bl	80a3898 <__aeabi_dmul>
 80a3244:	4602      	mov	r2, r0
 80a3246:	460b      	mov	r3, r1
 80a3248:	4680      	mov	r8, r0
 80a324a:	4689      	mov	r9, r1
 80a324c:	f000 fb24 	bl	80a3898 <__aeabi_dmul>
 80a3250:	a387      	add	r3, pc, #540	; (adr r3, 80a3470 <__ieee754_log+0x340>)
 80a3252:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3256:	4606      	mov	r6, r0
 80a3258:	460f      	mov	r7, r1
 80a325a:	f000 fb1d 	bl	80a3898 <__aeabi_dmul>
 80a325e:	a386      	add	r3, pc, #536	; (adr r3, 80a3478 <__ieee754_log+0x348>)
 80a3260:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3264:	f000 f966 	bl	80a3534 <__adddf3>
 80a3268:	4632      	mov	r2, r6
 80a326a:	463b      	mov	r3, r7
 80a326c:	f000 fb14 	bl	80a3898 <__aeabi_dmul>
 80a3270:	a383      	add	r3, pc, #524	; (adr r3, 80a3480 <__ieee754_log+0x350>)
 80a3272:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3276:	f000 f95d 	bl	80a3534 <__adddf3>
 80a327a:	4632      	mov	r2, r6
 80a327c:	463b      	mov	r3, r7
 80a327e:	f000 fb0b 	bl	80a3898 <__aeabi_dmul>
 80a3282:	a381      	add	r3, pc, #516	; (adr r3, 80a3488 <__ieee754_log+0x358>)
 80a3284:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3288:	f000 f954 	bl	80a3534 <__adddf3>
 80a328c:	4642      	mov	r2, r8
 80a328e:	464b      	mov	r3, r9
 80a3290:	f000 fb02 	bl	80a3898 <__aeabi_dmul>
 80a3294:	a37e      	add	r3, pc, #504	; (adr r3, 80a3490 <__ieee754_log+0x360>)
 80a3296:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a329a:	4680      	mov	r8, r0
 80a329c:	4689      	mov	r9, r1
 80a329e:	4630      	mov	r0, r6
 80a32a0:	4639      	mov	r1, r7
 80a32a2:	f000 faf9 	bl	80a3898 <__aeabi_dmul>
 80a32a6:	a37c      	add	r3, pc, #496	; (adr r3, 80a3498 <__ieee754_log+0x368>)
 80a32a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32ac:	f000 f942 	bl	80a3534 <__adddf3>
 80a32b0:	4632      	mov	r2, r6
 80a32b2:	463b      	mov	r3, r7
 80a32b4:	f000 faf0 	bl	80a3898 <__aeabi_dmul>
 80a32b8:	a379      	add	r3, pc, #484	; (adr r3, 80a34a0 <__ieee754_log+0x370>)
 80a32ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a32be:	f000 f939 	bl	80a3534 <__adddf3>
 80a32c2:	4632      	mov	r2, r6
 80a32c4:	463b      	mov	r3, r7
 80a32c6:	f000 fae7 	bl	80a3898 <__aeabi_dmul>
 80a32ca:	460b      	mov	r3, r1
 80a32cc:	4602      	mov	r2, r0
 80a32ce:	4649      	mov	r1, r9
 80a32d0:	4640      	mov	r0, r8
 80a32d2:	f000 f92f 	bl	80a3534 <__adddf3>
 80a32d6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a32da:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a32de:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a32e2:	3551      	adds	r5, #81	; 0x51
 80a32e4:	431d      	orrs	r5, r3
 80a32e6:	2d00      	cmp	r5, #0
 80a32e8:	4680      	mov	r8, r0
 80a32ea:	4689      	mov	r9, r1
 80a32ec:	dd56      	ble.n	80a339c <__ieee754_log+0x26c>
 80a32ee:	2200      	movs	r2, #0
 80a32f0:	4b72      	ldr	r3, [pc, #456]	; (80a34bc <__ieee754_log+0x38c>)
 80a32f2:	4650      	mov	r0, sl
 80a32f4:	4659      	mov	r1, fp
 80a32f6:	f000 facf 	bl	80a3898 <__aeabi_dmul>
 80a32fa:	4652      	mov	r2, sl
 80a32fc:	465b      	mov	r3, fp
 80a32fe:	f000 facb 	bl	80a3898 <__aeabi_dmul>
 80a3302:	4606      	mov	r6, r0
 80a3304:	460f      	mov	r7, r1
 80a3306:	2c00      	cmp	r4, #0
 80a3308:	d168      	bne.n	80a33dc <__ieee754_log+0x2ac>
 80a330a:	4632      	mov	r2, r6
 80a330c:	463b      	mov	r3, r7
 80a330e:	4640      	mov	r0, r8
 80a3310:	4649      	mov	r1, r9
 80a3312:	f000 f90f 	bl	80a3534 <__adddf3>
 80a3316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a331a:	f000 fabd 	bl	80a3898 <__aeabi_dmul>
 80a331e:	4602      	mov	r2, r0
 80a3320:	460b      	mov	r3, r1
 80a3322:	4630      	mov	r0, r6
 80a3324:	4639      	mov	r1, r7
 80a3326:	f000 f903 	bl	80a3530 <__aeabi_dsub>
 80a332a:	4602      	mov	r2, r0
 80a332c:	460b      	mov	r3, r1
 80a332e:	4650      	mov	r0, sl
 80a3330:	4659      	mov	r1, fp
 80a3332:	f000 f8fd 	bl	80a3530 <__aeabi_dsub>
 80a3336:	b005      	add	sp, #20
 80a3338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a333c:	2200      	movs	r2, #0
 80a333e:	2300      	movs	r3, #0
 80a3340:	2000      	movs	r0, #0
 80a3342:	495f      	ldr	r1, [pc, #380]	; (80a34c0 <__ieee754_log+0x390>)
 80a3344:	f000 fbd2 	bl	80a3aec <__aeabi_ddiv>
 80a3348:	b005      	add	sp, #20
 80a334a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a334e:	a356      	add	r3, pc, #344	; (adr r3, 80a34a8 <__ieee754_log+0x378>)
 80a3350:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3354:	4650      	mov	r0, sl
 80a3356:	4659      	mov	r1, fp
 80a3358:	f000 fa9e 	bl	80a3898 <__aeabi_dmul>
 80a335c:	4602      	mov	r2, r0
 80a335e:	460b      	mov	r3, r1
 80a3360:	2000      	movs	r0, #0
 80a3362:	4956      	ldr	r1, [pc, #344]	; (80a34bc <__ieee754_log+0x38c>)
 80a3364:	f000 f8e4 	bl	80a3530 <__aeabi_dsub>
 80a3368:	4652      	mov	r2, sl
 80a336a:	4606      	mov	r6, r0
 80a336c:	460f      	mov	r7, r1
 80a336e:	465b      	mov	r3, fp
 80a3370:	4650      	mov	r0, sl
 80a3372:	4659      	mov	r1, fp
 80a3374:	f000 fa90 	bl	80a3898 <__aeabi_dmul>
 80a3378:	4602      	mov	r2, r0
 80a337a:	460b      	mov	r3, r1
 80a337c:	4630      	mov	r0, r6
 80a337e:	4639      	mov	r1, r7
 80a3380:	f000 fa8a 	bl	80a3898 <__aeabi_dmul>
 80a3384:	4606      	mov	r6, r0
 80a3386:	460f      	mov	r7, r1
 80a3388:	2c00      	cmp	r4, #0
 80a338a:	f040 809b 	bne.w	80a34c4 <__ieee754_log+0x394>
 80a338e:	4602      	mov	r2, r0
 80a3390:	460b      	mov	r3, r1
 80a3392:	4650      	mov	r0, sl
 80a3394:	4659      	mov	r1, fp
 80a3396:	f000 f8cb 	bl	80a3530 <__aeabi_dsub>
 80a339a:	e737      	b.n	80a320c <__ieee754_log+0xdc>
 80a339c:	2c00      	cmp	r4, #0
 80a339e:	f000 80a5 	beq.w	80a34ec <__ieee754_log+0x3bc>
 80a33a2:	a32f      	add	r3, pc, #188	; (adr r3, 80a3460 <__ieee754_log+0x330>)
 80a33a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a33ac:	f000 fa74 	bl	80a3898 <__aeabi_dmul>
 80a33b0:	4642      	mov	r2, r8
 80a33b2:	464b      	mov	r3, r9
 80a33b4:	4604      	mov	r4, r0
 80a33b6:	460d      	mov	r5, r1
 80a33b8:	4650      	mov	r0, sl
 80a33ba:	4659      	mov	r1, fp
 80a33bc:	f000 f8b8 	bl	80a3530 <__aeabi_dsub>
 80a33c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a33c4:	f000 fa68 	bl	80a3898 <__aeabi_dmul>
 80a33c8:	a327      	add	r3, pc, #156	; (adr r3, 80a3468 <__ieee754_log+0x338>)
 80a33ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33ce:	4606      	mov	r6, r0
 80a33d0:	460f      	mov	r7, r1
 80a33d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a33d6:	f000 fa5f 	bl	80a3898 <__aeabi_dmul>
 80a33da:	e021      	b.n	80a3420 <__ieee754_log+0x2f0>
 80a33dc:	a320      	add	r3, pc, #128	; (adr r3, 80a3460 <__ieee754_log+0x330>)
 80a33de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a33e2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a33e6:	f000 fa57 	bl	80a3898 <__aeabi_dmul>
 80a33ea:	4632      	mov	r2, r6
 80a33ec:	463b      	mov	r3, r7
 80a33ee:	4604      	mov	r4, r0
 80a33f0:	460d      	mov	r5, r1
 80a33f2:	4640      	mov	r0, r8
 80a33f4:	4649      	mov	r1, r9
 80a33f6:	f000 f89d 	bl	80a3534 <__adddf3>
 80a33fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a33fe:	f000 fa4b 	bl	80a3898 <__aeabi_dmul>
 80a3402:	a319      	add	r3, pc, #100	; (adr r3, 80a3468 <__ieee754_log+0x338>)
 80a3404:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a3408:	4680      	mov	r8, r0
 80a340a:	4689      	mov	r9, r1
 80a340c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a3410:	f000 fa42 	bl	80a3898 <__aeabi_dmul>
 80a3414:	4602      	mov	r2, r0
 80a3416:	460b      	mov	r3, r1
 80a3418:	4640      	mov	r0, r8
 80a341a:	4649      	mov	r1, r9
 80a341c:	f000 f88a 	bl	80a3534 <__adddf3>
 80a3420:	4602      	mov	r2, r0
 80a3422:	460b      	mov	r3, r1
 80a3424:	4630      	mov	r0, r6
 80a3426:	4639      	mov	r1, r7
 80a3428:	f000 f882 	bl	80a3530 <__aeabi_dsub>
 80a342c:	4652      	mov	r2, sl
 80a342e:	465b      	mov	r3, fp
 80a3430:	f000 f87e 	bl	80a3530 <__aeabi_dsub>
 80a3434:	4602      	mov	r2, r0
 80a3436:	460b      	mov	r3, r1
 80a3438:	4620      	mov	r0, r4
 80a343a:	4629      	mov	r1, r5
 80a343c:	f000 f878 	bl	80a3530 <__aeabi_dsub>
 80a3440:	b005      	add	sp, #20
 80a3442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3446:	4602      	mov	r2, r0
 80a3448:	460b      	mov	r3, r1
 80a344a:	f000 f871 	bl	80a3530 <__aeabi_dsub>
 80a344e:	2200      	movs	r2, #0
 80a3450:	2300      	movs	r3, #0
 80a3452:	f000 fb4b 	bl	80a3aec <__aeabi_ddiv>
 80a3456:	e6d9      	b.n	80a320c <__ieee754_log+0xdc>
 80a3458:	2000      	movs	r0, #0
 80a345a:	2100      	movs	r1, #0
 80a345c:	e6d6      	b.n	80a320c <__ieee754_log+0xdc>
 80a345e:	bf00      	nop
 80a3460:	fee00000 	.word	0xfee00000
 80a3464:	3fe62e42 	.word	0x3fe62e42
 80a3468:	35793c76 	.word	0x35793c76
 80a346c:	3dea39ef 	.word	0x3dea39ef
 80a3470:	df3e5244 	.word	0xdf3e5244
 80a3474:	3fc2f112 	.word	0x3fc2f112
 80a3478:	96cb03de 	.word	0x96cb03de
 80a347c:	3fc74664 	.word	0x3fc74664
 80a3480:	94229359 	.word	0x94229359
 80a3484:	3fd24924 	.word	0x3fd24924
 80a3488:	55555593 	.word	0x55555593
 80a348c:	3fe55555 	.word	0x3fe55555
 80a3490:	d078c69f 	.word	0xd078c69f
 80a3494:	3fc39a09 	.word	0x3fc39a09
 80a3498:	1d8e78af 	.word	0x1d8e78af
 80a349c:	3fcc71c5 	.word	0x3fcc71c5
 80a34a0:	9997fa04 	.word	0x9997fa04
 80a34a4:	3fd99999 	.word	0x3fd99999
 80a34a8:	55555555 	.word	0x55555555
 80a34ac:	3fd55555 	.word	0x3fd55555
 80a34b0:	43500000 	.word	0x43500000
 80a34b4:	7fefffff 	.word	0x7fefffff
 80a34b8:	3ff00000 	.word	0x3ff00000
 80a34bc:	3fe00000 	.word	0x3fe00000
 80a34c0:	c3500000 	.word	0xc3500000
 80a34c4:	4620      	mov	r0, r4
 80a34c6:	f000 f981 	bl	80a37cc <__aeabi_i2d>
 80a34ca:	a30f      	add	r3, pc, #60	; (adr r3, 80a3508 <__ieee754_log+0x3d8>)
 80a34cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34d0:	4680      	mov	r8, r0
 80a34d2:	4689      	mov	r9, r1
 80a34d4:	f000 f9e0 	bl	80a3898 <__aeabi_dmul>
 80a34d8:	a30d      	add	r3, pc, #52	; (adr r3, 80a3510 <__ieee754_log+0x3e0>)
 80a34da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a34de:	4604      	mov	r4, r0
 80a34e0:	460d      	mov	r5, r1
 80a34e2:	4640      	mov	r0, r8
 80a34e4:	4649      	mov	r1, r9
 80a34e6:	f000 f9d7 	bl	80a3898 <__aeabi_dmul>
 80a34ea:	e799      	b.n	80a3420 <__ieee754_log+0x2f0>
 80a34ec:	4602      	mov	r2, r0
 80a34ee:	460b      	mov	r3, r1
 80a34f0:	4650      	mov	r0, sl
 80a34f2:	4659      	mov	r1, fp
 80a34f4:	f000 f81c 	bl	80a3530 <__aeabi_dsub>
 80a34f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a34fc:	f000 f9cc 	bl	80a3898 <__aeabi_dmul>
 80a3500:	e713      	b.n	80a332a <__ieee754_log+0x1fa>
 80a3502:	bf00      	nop
 80a3504:	f3af 8000 	nop.w
 80a3508:	fee00000 	.word	0xfee00000
 80a350c:	3fe62e42 	.word	0x3fe62e42
 80a3510:	35793c76 	.word	0x35793c76
 80a3514:	3dea39ef 	.word	0x3dea39ef

080a3518 <matherr>:
 80a3518:	2000      	movs	r0, #0
 80a351a:	4770      	bx	lr

080a351c <nan>:
 80a351c:	2000      	movs	r0, #0
 80a351e:	4901      	ldr	r1, [pc, #4]	; (80a3524 <nan+0x8>)
 80a3520:	4770      	bx	lr
 80a3522:	bf00      	nop
 80a3524:	7ff80000 	.word	0x7ff80000

080a3528 <__aeabi_drsub>:
 80a3528:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a352c:	e002      	b.n	80a3534 <__adddf3>
 80a352e:	bf00      	nop

080a3530 <__aeabi_dsub>:
 80a3530:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a3534 <__adddf3>:
 80a3534:	b530      	push	{r4, r5, lr}
 80a3536:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a353a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a353e:	ea94 0f05 	teq	r4, r5
 80a3542:	bf08      	it	eq
 80a3544:	ea90 0f02 	teqeq	r0, r2
 80a3548:	bf1f      	itttt	ne
 80a354a:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a354e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a3552:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a3556:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a355a:	f000 80e2 	beq.w	80a3722 <__adddf3+0x1ee>
 80a355e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a3562:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a3566:	bfb8      	it	lt
 80a3568:	426d      	neglt	r5, r5
 80a356a:	dd0c      	ble.n	80a3586 <__adddf3+0x52>
 80a356c:	442c      	add	r4, r5
 80a356e:	ea80 0202 	eor.w	r2, r0, r2
 80a3572:	ea81 0303 	eor.w	r3, r1, r3
 80a3576:	ea82 0000 	eor.w	r0, r2, r0
 80a357a:	ea83 0101 	eor.w	r1, r3, r1
 80a357e:	ea80 0202 	eor.w	r2, r0, r2
 80a3582:	ea81 0303 	eor.w	r3, r1, r3
 80a3586:	2d36      	cmp	r5, #54	; 0x36
 80a3588:	bf88      	it	hi
 80a358a:	bd30      	pophi	{r4, r5, pc}
 80a358c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3590:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3594:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a3598:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a359c:	d002      	beq.n	80a35a4 <__adddf3+0x70>
 80a359e:	4240      	negs	r0, r0
 80a35a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a35a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a35a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a35ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a35b0:	d002      	beq.n	80a35b8 <__adddf3+0x84>
 80a35b2:	4252      	negs	r2, r2
 80a35b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a35b8:	ea94 0f05 	teq	r4, r5
 80a35bc:	f000 80a7 	beq.w	80a370e <__adddf3+0x1da>
 80a35c0:	f1a4 0401 	sub.w	r4, r4, #1
 80a35c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80a35c8:	db0d      	blt.n	80a35e6 <__adddf3+0xb2>
 80a35ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a35ce:	fa22 f205 	lsr.w	r2, r2, r5
 80a35d2:	1880      	adds	r0, r0, r2
 80a35d4:	f141 0100 	adc.w	r1, r1, #0
 80a35d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80a35dc:	1880      	adds	r0, r0, r2
 80a35de:	fa43 f305 	asr.w	r3, r3, r5
 80a35e2:	4159      	adcs	r1, r3
 80a35e4:	e00e      	b.n	80a3604 <__adddf3+0xd0>
 80a35e6:	f1a5 0520 	sub.w	r5, r5, #32
 80a35ea:	f10e 0e20 	add.w	lr, lr, #32
 80a35ee:	2a01      	cmp	r2, #1
 80a35f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a35f4:	bf28      	it	cs
 80a35f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a35fa:	fa43 f305 	asr.w	r3, r3, r5
 80a35fe:	18c0      	adds	r0, r0, r3
 80a3600:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a3604:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3608:	d507      	bpl.n	80a361a <__adddf3+0xe6>
 80a360a:	f04f 0e00 	mov.w	lr, #0
 80a360e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a3612:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a3616:	eb6e 0101 	sbc.w	r1, lr, r1
 80a361a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a361e:	d31b      	bcc.n	80a3658 <__adddf3+0x124>
 80a3620:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a3624:	d30c      	bcc.n	80a3640 <__adddf3+0x10c>
 80a3626:	0849      	lsrs	r1, r1, #1
 80a3628:	ea5f 0030 	movs.w	r0, r0, rrx
 80a362c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a3630:	f104 0401 	add.w	r4, r4, #1
 80a3634:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a3638:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a363c:	f080 809a 	bcs.w	80a3774 <__adddf3+0x240>
 80a3640:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a3644:	bf08      	it	eq
 80a3646:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a364a:	f150 0000 	adcs.w	r0, r0, #0
 80a364e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3652:	ea41 0105 	orr.w	r1, r1, r5
 80a3656:	bd30      	pop	{r4, r5, pc}
 80a3658:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a365c:	4140      	adcs	r0, r0
 80a365e:	eb41 0101 	adc.w	r1, r1, r1
 80a3662:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3666:	f1a4 0401 	sub.w	r4, r4, #1
 80a366a:	d1e9      	bne.n	80a3640 <__adddf3+0x10c>
 80a366c:	f091 0f00 	teq	r1, #0
 80a3670:	bf04      	itt	eq
 80a3672:	4601      	moveq	r1, r0
 80a3674:	2000      	moveq	r0, #0
 80a3676:	fab1 f381 	clz	r3, r1
 80a367a:	bf08      	it	eq
 80a367c:	3320      	addeq	r3, #32
 80a367e:	f1a3 030b 	sub.w	r3, r3, #11
 80a3682:	f1b3 0220 	subs.w	r2, r3, #32
 80a3686:	da0c      	bge.n	80a36a2 <__adddf3+0x16e>
 80a3688:	320c      	adds	r2, #12
 80a368a:	dd08      	ble.n	80a369e <__adddf3+0x16a>
 80a368c:	f102 0c14 	add.w	ip, r2, #20
 80a3690:	f1c2 020c 	rsb	r2, r2, #12
 80a3694:	fa01 f00c 	lsl.w	r0, r1, ip
 80a3698:	fa21 f102 	lsr.w	r1, r1, r2
 80a369c:	e00c      	b.n	80a36b8 <__adddf3+0x184>
 80a369e:	f102 0214 	add.w	r2, r2, #20
 80a36a2:	bfd8      	it	le
 80a36a4:	f1c2 0c20 	rsble	ip, r2, #32
 80a36a8:	fa01 f102 	lsl.w	r1, r1, r2
 80a36ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a36b0:	bfdc      	itt	le
 80a36b2:	ea41 010c 	orrle.w	r1, r1, ip
 80a36b6:	4090      	lslle	r0, r2
 80a36b8:	1ae4      	subs	r4, r4, r3
 80a36ba:	bfa2      	ittt	ge
 80a36bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a36c0:	4329      	orrge	r1, r5
 80a36c2:	bd30      	popge	{r4, r5, pc}
 80a36c4:	ea6f 0404 	mvn.w	r4, r4
 80a36c8:	3c1f      	subs	r4, #31
 80a36ca:	da1c      	bge.n	80a3706 <__adddf3+0x1d2>
 80a36cc:	340c      	adds	r4, #12
 80a36ce:	dc0e      	bgt.n	80a36ee <__adddf3+0x1ba>
 80a36d0:	f104 0414 	add.w	r4, r4, #20
 80a36d4:	f1c4 0220 	rsb	r2, r4, #32
 80a36d8:	fa20 f004 	lsr.w	r0, r0, r4
 80a36dc:	fa01 f302 	lsl.w	r3, r1, r2
 80a36e0:	ea40 0003 	orr.w	r0, r0, r3
 80a36e4:	fa21 f304 	lsr.w	r3, r1, r4
 80a36e8:	ea45 0103 	orr.w	r1, r5, r3
 80a36ec:	bd30      	pop	{r4, r5, pc}
 80a36ee:	f1c4 040c 	rsb	r4, r4, #12
 80a36f2:	f1c4 0220 	rsb	r2, r4, #32
 80a36f6:	fa20 f002 	lsr.w	r0, r0, r2
 80a36fa:	fa01 f304 	lsl.w	r3, r1, r4
 80a36fe:	ea40 0003 	orr.w	r0, r0, r3
 80a3702:	4629      	mov	r1, r5
 80a3704:	bd30      	pop	{r4, r5, pc}
 80a3706:	fa21 f004 	lsr.w	r0, r1, r4
 80a370a:	4629      	mov	r1, r5
 80a370c:	bd30      	pop	{r4, r5, pc}
 80a370e:	f094 0f00 	teq	r4, #0
 80a3712:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a3716:	bf06      	itte	eq
 80a3718:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a371c:	3401      	addeq	r4, #1
 80a371e:	3d01      	subne	r5, #1
 80a3720:	e74e      	b.n	80a35c0 <__adddf3+0x8c>
 80a3722:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3726:	bf18      	it	ne
 80a3728:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a372c:	d029      	beq.n	80a3782 <__adddf3+0x24e>
 80a372e:	ea94 0f05 	teq	r4, r5
 80a3732:	bf08      	it	eq
 80a3734:	ea90 0f02 	teqeq	r0, r2
 80a3738:	d005      	beq.n	80a3746 <__adddf3+0x212>
 80a373a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a373e:	bf04      	itt	eq
 80a3740:	4619      	moveq	r1, r3
 80a3742:	4610      	moveq	r0, r2
 80a3744:	bd30      	pop	{r4, r5, pc}
 80a3746:	ea91 0f03 	teq	r1, r3
 80a374a:	bf1e      	ittt	ne
 80a374c:	2100      	movne	r1, #0
 80a374e:	2000      	movne	r0, #0
 80a3750:	bd30      	popne	{r4, r5, pc}
 80a3752:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a3756:	d105      	bne.n	80a3764 <__adddf3+0x230>
 80a3758:	0040      	lsls	r0, r0, #1
 80a375a:	4149      	adcs	r1, r1
 80a375c:	bf28      	it	cs
 80a375e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a3762:	bd30      	pop	{r4, r5, pc}
 80a3764:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a3768:	bf3c      	itt	cc
 80a376a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a376e:	bd30      	popcc	{r4, r5, pc}
 80a3770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3774:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a3778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a377c:	f04f 0000 	mov.w	r0, #0
 80a3780:	bd30      	pop	{r4, r5, pc}
 80a3782:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a3786:	bf1a      	itte	ne
 80a3788:	4619      	movne	r1, r3
 80a378a:	4610      	movne	r0, r2
 80a378c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a3790:	bf1c      	itt	ne
 80a3792:	460b      	movne	r3, r1
 80a3794:	4602      	movne	r2, r0
 80a3796:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a379a:	bf06      	itte	eq
 80a379c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a37a0:	ea91 0f03 	teqeq	r1, r3
 80a37a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a37a8:	bd30      	pop	{r4, r5, pc}
 80a37aa:	bf00      	nop

080a37ac <__aeabi_ui2d>:
 80a37ac:	f090 0f00 	teq	r0, #0
 80a37b0:	bf04      	itt	eq
 80a37b2:	2100      	moveq	r1, #0
 80a37b4:	4770      	bxeq	lr
 80a37b6:	b530      	push	{r4, r5, lr}
 80a37b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a37bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a37c0:	f04f 0500 	mov.w	r5, #0
 80a37c4:	f04f 0100 	mov.w	r1, #0
 80a37c8:	e750      	b.n	80a366c <__adddf3+0x138>
 80a37ca:	bf00      	nop

080a37cc <__aeabi_i2d>:
 80a37cc:	f090 0f00 	teq	r0, #0
 80a37d0:	bf04      	itt	eq
 80a37d2:	2100      	moveq	r1, #0
 80a37d4:	4770      	bxeq	lr
 80a37d6:	b530      	push	{r4, r5, lr}
 80a37d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a37dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a37e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a37e4:	bf48      	it	mi
 80a37e6:	4240      	negmi	r0, r0
 80a37e8:	f04f 0100 	mov.w	r1, #0
 80a37ec:	e73e      	b.n	80a366c <__adddf3+0x138>
 80a37ee:	bf00      	nop

080a37f0 <__aeabi_f2d>:
 80a37f0:	0042      	lsls	r2, r0, #1
 80a37f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a37f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a37fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a37fe:	bf1f      	itttt	ne
 80a3800:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a3804:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3808:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a380c:	4770      	bxne	lr
 80a380e:	f092 0f00 	teq	r2, #0
 80a3812:	bf14      	ite	ne
 80a3814:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a3818:	4770      	bxeq	lr
 80a381a:	b530      	push	{r4, r5, lr}
 80a381c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a3820:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a3824:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a3828:	e720      	b.n	80a366c <__adddf3+0x138>
 80a382a:	bf00      	nop

080a382c <__aeabi_ul2d>:
 80a382c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3830:	bf08      	it	eq
 80a3832:	4770      	bxeq	lr
 80a3834:	b530      	push	{r4, r5, lr}
 80a3836:	f04f 0500 	mov.w	r5, #0
 80a383a:	e00a      	b.n	80a3852 <__aeabi_l2d+0x16>

080a383c <__aeabi_l2d>:
 80a383c:	ea50 0201 	orrs.w	r2, r0, r1
 80a3840:	bf08      	it	eq
 80a3842:	4770      	bxeq	lr
 80a3844:	b530      	push	{r4, r5, lr}
 80a3846:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a384a:	d502      	bpl.n	80a3852 <__aeabi_l2d+0x16>
 80a384c:	4240      	negs	r0, r0
 80a384e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a3852:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a3856:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a385a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a385e:	f43f aedc 	beq.w	80a361a <__adddf3+0xe6>
 80a3862:	f04f 0203 	mov.w	r2, #3
 80a3866:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a386a:	bf18      	it	ne
 80a386c:	3203      	addne	r2, #3
 80a386e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a3872:	bf18      	it	ne
 80a3874:	3203      	addne	r2, #3
 80a3876:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a387a:	f1c2 0320 	rsb	r3, r2, #32
 80a387e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a3882:	fa20 f002 	lsr.w	r0, r0, r2
 80a3886:	fa01 fe03 	lsl.w	lr, r1, r3
 80a388a:	ea40 000e 	orr.w	r0, r0, lr
 80a388e:	fa21 f102 	lsr.w	r1, r1, r2
 80a3892:	4414      	add	r4, r2
 80a3894:	e6c1      	b.n	80a361a <__adddf3+0xe6>
 80a3896:	bf00      	nop

080a3898 <__aeabi_dmul>:
 80a3898:	b570      	push	{r4, r5, r6, lr}
 80a389a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a389e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a38a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a38a6:	bf1d      	ittte	ne
 80a38a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a38ac:	ea94 0f0c 	teqne	r4, ip
 80a38b0:	ea95 0f0c 	teqne	r5, ip
 80a38b4:	f000 f8de 	bleq	80a3a74 <__aeabi_dmul+0x1dc>
 80a38b8:	442c      	add	r4, r5
 80a38ba:	ea81 0603 	eor.w	r6, r1, r3
 80a38be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a38c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a38c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a38ca:	bf18      	it	ne
 80a38cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a38d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a38d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a38d8:	d038      	beq.n	80a394c <__aeabi_dmul+0xb4>
 80a38da:	fba0 ce02 	umull	ip, lr, r0, r2
 80a38de:	f04f 0500 	mov.w	r5, #0
 80a38e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a38e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a38ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a38ee:	f04f 0600 	mov.w	r6, #0
 80a38f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a38f6:	f09c 0f00 	teq	ip, #0
 80a38fa:	bf18      	it	ne
 80a38fc:	f04e 0e01 	orrne.w	lr, lr, #1
 80a3900:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a3904:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a3908:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a390c:	d204      	bcs.n	80a3918 <__aeabi_dmul+0x80>
 80a390e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a3912:	416d      	adcs	r5, r5
 80a3914:	eb46 0606 	adc.w	r6, r6, r6
 80a3918:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a391c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a3920:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a3924:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a3928:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a392c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3930:	bf88      	it	hi
 80a3932:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3936:	d81e      	bhi.n	80a3976 <__aeabi_dmul+0xde>
 80a3938:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a393c:	bf08      	it	eq
 80a393e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a3942:	f150 0000 	adcs.w	r0, r0, #0
 80a3946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a394a:	bd70      	pop	{r4, r5, r6, pc}
 80a394c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a3950:	ea46 0101 	orr.w	r1, r6, r1
 80a3954:	ea40 0002 	orr.w	r0, r0, r2
 80a3958:	ea81 0103 	eor.w	r1, r1, r3
 80a395c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a3960:	bfc2      	ittt	gt
 80a3962:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a396a:	bd70      	popgt	{r4, r5, r6, pc}
 80a396c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3970:	f04f 0e00 	mov.w	lr, #0
 80a3974:	3c01      	subs	r4, #1
 80a3976:	f300 80ab 	bgt.w	80a3ad0 <__aeabi_dmul+0x238>
 80a397a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a397e:	bfde      	ittt	le
 80a3980:	2000      	movle	r0, #0
 80a3982:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a3986:	bd70      	pople	{r4, r5, r6, pc}
 80a3988:	f1c4 0400 	rsb	r4, r4, #0
 80a398c:	3c20      	subs	r4, #32
 80a398e:	da35      	bge.n	80a39fc <__aeabi_dmul+0x164>
 80a3990:	340c      	adds	r4, #12
 80a3992:	dc1b      	bgt.n	80a39cc <__aeabi_dmul+0x134>
 80a3994:	f104 0414 	add.w	r4, r4, #20
 80a3998:	f1c4 0520 	rsb	r5, r4, #32
 80a399c:	fa00 f305 	lsl.w	r3, r0, r5
 80a39a0:	fa20 f004 	lsr.w	r0, r0, r4
 80a39a4:	fa01 f205 	lsl.w	r2, r1, r5
 80a39a8:	ea40 0002 	orr.w	r0, r0, r2
 80a39ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a39b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a39b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a39b8:	fa21 f604 	lsr.w	r6, r1, r4
 80a39bc:	eb42 0106 	adc.w	r1, r2, r6
 80a39c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a39c4:	bf08      	it	eq
 80a39c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a39ca:	bd70      	pop	{r4, r5, r6, pc}
 80a39cc:	f1c4 040c 	rsb	r4, r4, #12
 80a39d0:	f1c4 0520 	rsb	r5, r4, #32
 80a39d4:	fa00 f304 	lsl.w	r3, r0, r4
 80a39d8:	fa20 f005 	lsr.w	r0, r0, r5
 80a39dc:	fa01 f204 	lsl.w	r2, r1, r4
 80a39e0:	ea40 0002 	orr.w	r0, r0, r2
 80a39e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a39e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a39ec:	f141 0100 	adc.w	r1, r1, #0
 80a39f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a39f4:	bf08      	it	eq
 80a39f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a39fa:	bd70      	pop	{r4, r5, r6, pc}
 80a39fc:	f1c4 0520 	rsb	r5, r4, #32
 80a3a00:	fa00 f205 	lsl.w	r2, r0, r5
 80a3a04:	ea4e 0e02 	orr.w	lr, lr, r2
 80a3a08:	fa20 f304 	lsr.w	r3, r0, r4
 80a3a0c:	fa01 f205 	lsl.w	r2, r1, r5
 80a3a10:	ea43 0302 	orr.w	r3, r3, r2
 80a3a14:	fa21 f004 	lsr.w	r0, r1, r4
 80a3a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3a1c:	fa21 f204 	lsr.w	r2, r1, r4
 80a3a20:	ea20 0002 	bic.w	r0, r0, r2
 80a3a24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a3a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a3a2c:	bf08      	it	eq
 80a3a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a3a32:	bd70      	pop	{r4, r5, r6, pc}
 80a3a34:	f094 0f00 	teq	r4, #0
 80a3a38:	d10f      	bne.n	80a3a5a <__aeabi_dmul+0x1c2>
 80a3a3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a3a3e:	0040      	lsls	r0, r0, #1
 80a3a40:	eb41 0101 	adc.w	r1, r1, r1
 80a3a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3a48:	bf08      	it	eq
 80a3a4a:	3c01      	subeq	r4, #1
 80a3a4c:	d0f7      	beq.n	80a3a3e <__aeabi_dmul+0x1a6>
 80a3a4e:	ea41 0106 	orr.w	r1, r1, r6
 80a3a52:	f095 0f00 	teq	r5, #0
 80a3a56:	bf18      	it	ne
 80a3a58:	4770      	bxne	lr
 80a3a5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a3a5e:	0052      	lsls	r2, r2, #1
 80a3a60:	eb43 0303 	adc.w	r3, r3, r3
 80a3a64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a3a68:	bf08      	it	eq
 80a3a6a:	3d01      	subeq	r5, #1
 80a3a6c:	d0f7      	beq.n	80a3a5e <__aeabi_dmul+0x1c6>
 80a3a6e:	ea43 0306 	orr.w	r3, r3, r6
 80a3a72:	4770      	bx	lr
 80a3a74:	ea94 0f0c 	teq	r4, ip
 80a3a78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3a7c:	bf18      	it	ne
 80a3a7e:	ea95 0f0c 	teqne	r5, ip
 80a3a82:	d00c      	beq.n	80a3a9e <__aeabi_dmul+0x206>
 80a3a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3a88:	bf18      	it	ne
 80a3a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3a8e:	d1d1      	bne.n	80a3a34 <__aeabi_dmul+0x19c>
 80a3a90:	ea81 0103 	eor.w	r1, r1, r3
 80a3a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3a98:	f04f 0000 	mov.w	r0, #0
 80a3a9c:	bd70      	pop	{r4, r5, r6, pc}
 80a3a9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3aa2:	bf06      	itte	eq
 80a3aa4:	4610      	moveq	r0, r2
 80a3aa6:	4619      	moveq	r1, r3
 80a3aa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3aac:	d019      	beq.n	80a3ae2 <__aeabi_dmul+0x24a>
 80a3aae:	ea94 0f0c 	teq	r4, ip
 80a3ab2:	d102      	bne.n	80a3aba <__aeabi_dmul+0x222>
 80a3ab4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a3ab8:	d113      	bne.n	80a3ae2 <__aeabi_dmul+0x24a>
 80a3aba:	ea95 0f0c 	teq	r5, ip
 80a3abe:	d105      	bne.n	80a3acc <__aeabi_dmul+0x234>
 80a3ac0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a3ac4:	bf1c      	itt	ne
 80a3ac6:	4610      	movne	r0, r2
 80a3ac8:	4619      	movne	r1, r3
 80a3aca:	d10a      	bne.n	80a3ae2 <__aeabi_dmul+0x24a>
 80a3acc:	ea81 0103 	eor.w	r1, r1, r3
 80a3ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a3ad4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3ad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a3adc:	f04f 0000 	mov.w	r0, #0
 80a3ae0:	bd70      	pop	{r4, r5, r6, pc}
 80a3ae2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a3ae6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a3aea:	bd70      	pop	{r4, r5, r6, pc}

080a3aec <__aeabi_ddiv>:
 80a3aec:	b570      	push	{r4, r5, r6, lr}
 80a3aee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a3af2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a3af6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a3afa:	bf1d      	ittte	ne
 80a3afc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a3b00:	ea94 0f0c 	teqne	r4, ip
 80a3b04:	ea95 0f0c 	teqne	r5, ip
 80a3b08:	f000 f8a7 	bleq	80a3c5a <__aeabi_ddiv+0x16e>
 80a3b0c:	eba4 0405 	sub.w	r4, r4, r5
 80a3b10:	ea81 0e03 	eor.w	lr, r1, r3
 80a3b14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a3b1c:	f000 8088 	beq.w	80a3c30 <__aeabi_ddiv+0x144>
 80a3b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a3b24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a3b28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a3b2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a3b30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a3b34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a3b38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a3b3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a3b40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a3b44:	429d      	cmp	r5, r3
 80a3b46:	bf08      	it	eq
 80a3b48:	4296      	cmpeq	r6, r2
 80a3b4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a3b4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a3b52:	d202      	bcs.n	80a3b5a <__aeabi_ddiv+0x6e>
 80a3b54:	085b      	lsrs	r3, r3, #1
 80a3b56:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b5a:	1ab6      	subs	r6, r6, r2
 80a3b5c:	eb65 0503 	sbc.w	r5, r5, r3
 80a3b60:	085b      	lsrs	r3, r3, #1
 80a3b62:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a3b6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a3b6e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3b72:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3b76:	bf22      	ittt	cs
 80a3b78:	1ab6      	subcs	r6, r6, r2
 80a3b7a:	4675      	movcs	r5, lr
 80a3b7c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a3b80:	085b      	lsrs	r3, r3, #1
 80a3b82:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b86:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3b8e:	bf22      	ittt	cs
 80a3b90:	1ab6      	subcs	r6, r6, r2
 80a3b92:	4675      	movcs	r5, lr
 80a3b94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a3b98:	085b      	lsrs	r3, r3, #1
 80a3b9a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3b9e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3ba6:	bf22      	ittt	cs
 80a3ba8:	1ab6      	subcs	r6, r6, r2
 80a3baa:	4675      	movcs	r5, lr
 80a3bac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a3bb0:	085b      	lsrs	r3, r3, #1
 80a3bb2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a3bb6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a3bba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a3bbe:	bf22      	ittt	cs
 80a3bc0:	1ab6      	subcs	r6, r6, r2
 80a3bc2:	4675      	movcs	r5, lr
 80a3bc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a3bc8:	ea55 0e06 	orrs.w	lr, r5, r6
 80a3bcc:	d018      	beq.n	80a3c00 <__aeabi_ddiv+0x114>
 80a3bce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a3bd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a3bd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a3bda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a3bde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a3be2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a3be6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a3bea:	d1c0      	bne.n	80a3b6e <__aeabi_ddiv+0x82>
 80a3bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3bf0:	d10b      	bne.n	80a3c0a <__aeabi_ddiv+0x11e>
 80a3bf2:	ea41 0100 	orr.w	r1, r1, r0
 80a3bf6:	f04f 0000 	mov.w	r0, #0
 80a3bfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a3bfe:	e7b6      	b.n	80a3b6e <__aeabi_ddiv+0x82>
 80a3c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a3c04:	bf04      	itt	eq
 80a3c06:	4301      	orreq	r1, r0
 80a3c08:	2000      	moveq	r0, #0
 80a3c0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a3c0e:	bf88      	it	hi
 80a3c10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a3c14:	f63f aeaf 	bhi.w	80a3976 <__aeabi_dmul+0xde>
 80a3c18:	ebb5 0c03 	subs.w	ip, r5, r3
 80a3c1c:	bf04      	itt	eq
 80a3c1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a3c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a3c26:	f150 0000 	adcs.w	r0, r0, #0
 80a3c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a3c2e:	bd70      	pop	{r4, r5, r6, pc}
 80a3c30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a3c34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a3c38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a3c3c:	bfc2      	ittt	gt
 80a3c3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a3c42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a3c46:	bd70      	popgt	{r4, r5, r6, pc}
 80a3c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3c4c:	f04f 0e00 	mov.w	lr, #0
 80a3c50:	3c01      	subs	r4, #1
 80a3c52:	e690      	b.n	80a3976 <__aeabi_dmul+0xde>
 80a3c54:	ea45 0e06 	orr.w	lr, r5, r6
 80a3c58:	e68d      	b.n	80a3976 <__aeabi_dmul+0xde>
 80a3c5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a3c5e:	ea94 0f0c 	teq	r4, ip
 80a3c62:	bf08      	it	eq
 80a3c64:	ea95 0f0c 	teqeq	r5, ip
 80a3c68:	f43f af3b 	beq.w	80a3ae2 <__aeabi_dmul+0x24a>
 80a3c6c:	ea94 0f0c 	teq	r4, ip
 80a3c70:	d10a      	bne.n	80a3c88 <__aeabi_ddiv+0x19c>
 80a3c72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a3c76:	f47f af34 	bne.w	80a3ae2 <__aeabi_dmul+0x24a>
 80a3c7a:	ea95 0f0c 	teq	r5, ip
 80a3c7e:	f47f af25 	bne.w	80a3acc <__aeabi_dmul+0x234>
 80a3c82:	4610      	mov	r0, r2
 80a3c84:	4619      	mov	r1, r3
 80a3c86:	e72c      	b.n	80a3ae2 <__aeabi_dmul+0x24a>
 80a3c88:	ea95 0f0c 	teq	r5, ip
 80a3c8c:	d106      	bne.n	80a3c9c <__aeabi_ddiv+0x1b0>
 80a3c8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a3c92:	f43f aefd 	beq.w	80a3a90 <__aeabi_dmul+0x1f8>
 80a3c96:	4610      	mov	r0, r2
 80a3c98:	4619      	mov	r1, r3
 80a3c9a:	e722      	b.n	80a3ae2 <__aeabi_dmul+0x24a>
 80a3c9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a3ca0:	bf18      	it	ne
 80a3ca2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a3ca6:	f47f aec5 	bne.w	80a3a34 <__aeabi_dmul+0x19c>
 80a3caa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a3cae:	f47f af0d 	bne.w	80a3acc <__aeabi_dmul+0x234>
 80a3cb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a3cb6:	f47f aeeb 	bne.w	80a3a90 <__aeabi_dmul+0x1f8>
 80a3cba:	e712      	b.n	80a3ae2 <__aeabi_dmul+0x24a>

080a3cbc <__gedf2>:
 80a3cbc:	f04f 3cff 	mov.w	ip, #4294967295
 80a3cc0:	e006      	b.n	80a3cd0 <__cmpdf2+0x4>
 80a3cc2:	bf00      	nop

080a3cc4 <__ledf2>:
 80a3cc4:	f04f 0c01 	mov.w	ip, #1
 80a3cc8:	e002      	b.n	80a3cd0 <__cmpdf2+0x4>
 80a3cca:	bf00      	nop

080a3ccc <__cmpdf2>:
 80a3ccc:	f04f 0c01 	mov.w	ip, #1
 80a3cd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a3cd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3cdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3ce0:	bf18      	it	ne
 80a3ce2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a3ce6:	d01b      	beq.n	80a3d20 <__cmpdf2+0x54>
 80a3ce8:	b001      	add	sp, #4
 80a3cea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a3cee:	bf0c      	ite	eq
 80a3cf0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a3cf4:	ea91 0f03 	teqne	r1, r3
 80a3cf8:	bf02      	ittt	eq
 80a3cfa:	ea90 0f02 	teqeq	r0, r2
 80a3cfe:	2000      	moveq	r0, #0
 80a3d00:	4770      	bxeq	lr
 80a3d02:	f110 0f00 	cmn.w	r0, #0
 80a3d06:	ea91 0f03 	teq	r1, r3
 80a3d0a:	bf58      	it	pl
 80a3d0c:	4299      	cmppl	r1, r3
 80a3d0e:	bf08      	it	eq
 80a3d10:	4290      	cmpeq	r0, r2
 80a3d12:	bf2c      	ite	cs
 80a3d14:	17d8      	asrcs	r0, r3, #31
 80a3d16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a3d1a:	f040 0001 	orr.w	r0, r0, #1
 80a3d1e:	4770      	bx	lr
 80a3d20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3d24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3d28:	d102      	bne.n	80a3d30 <__cmpdf2+0x64>
 80a3d2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3d2e:	d107      	bne.n	80a3d40 <__cmpdf2+0x74>
 80a3d30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3d34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3d38:	d1d6      	bne.n	80a3ce8 <__cmpdf2+0x1c>
 80a3d3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3d3e:	d0d3      	beq.n	80a3ce8 <__cmpdf2+0x1c>
 80a3d40:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a3d44:	4770      	bx	lr
 80a3d46:	bf00      	nop

080a3d48 <__aeabi_cdrcmple>:
 80a3d48:	4684      	mov	ip, r0
 80a3d4a:	4610      	mov	r0, r2
 80a3d4c:	4662      	mov	r2, ip
 80a3d4e:	468c      	mov	ip, r1
 80a3d50:	4619      	mov	r1, r3
 80a3d52:	4663      	mov	r3, ip
 80a3d54:	e000      	b.n	80a3d58 <__aeabi_cdcmpeq>
 80a3d56:	bf00      	nop

080a3d58 <__aeabi_cdcmpeq>:
 80a3d58:	b501      	push	{r0, lr}
 80a3d5a:	f7ff ffb7 	bl	80a3ccc <__cmpdf2>
 80a3d5e:	2800      	cmp	r0, #0
 80a3d60:	bf48      	it	mi
 80a3d62:	f110 0f00 	cmnmi.w	r0, #0
 80a3d66:	bd01      	pop	{r0, pc}

080a3d68 <__aeabi_dcmpeq>:
 80a3d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d6c:	f7ff fff4 	bl	80a3d58 <__aeabi_cdcmpeq>
 80a3d70:	bf0c      	ite	eq
 80a3d72:	2001      	moveq	r0, #1
 80a3d74:	2000      	movne	r0, #0
 80a3d76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d7a:	bf00      	nop

080a3d7c <__aeabi_dcmplt>:
 80a3d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d80:	f7ff ffea 	bl	80a3d58 <__aeabi_cdcmpeq>
 80a3d84:	bf34      	ite	cc
 80a3d86:	2001      	movcc	r0, #1
 80a3d88:	2000      	movcs	r0, #0
 80a3d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3d8e:	bf00      	nop

080a3d90 <__aeabi_dcmple>:
 80a3d90:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3d94:	f7ff ffe0 	bl	80a3d58 <__aeabi_cdcmpeq>
 80a3d98:	bf94      	ite	ls
 80a3d9a:	2001      	movls	r0, #1
 80a3d9c:	2000      	movhi	r0, #0
 80a3d9e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3da2:	bf00      	nop

080a3da4 <__aeabi_dcmpge>:
 80a3da4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3da8:	f7ff ffce 	bl	80a3d48 <__aeabi_cdrcmple>
 80a3dac:	bf94      	ite	ls
 80a3dae:	2001      	movls	r0, #1
 80a3db0:	2000      	movhi	r0, #0
 80a3db2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3db6:	bf00      	nop

080a3db8 <__aeabi_dcmpgt>:
 80a3db8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a3dbc:	f7ff ffc4 	bl	80a3d48 <__aeabi_cdrcmple>
 80a3dc0:	bf34      	ite	cc
 80a3dc2:	2001      	movcc	r0, #1
 80a3dc4:	2000      	movcs	r0, #0
 80a3dc6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a3dca:	bf00      	nop

080a3dcc <__aeabi_dcmpun>:
 80a3dcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a3dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3dd4:	d102      	bne.n	80a3ddc <__aeabi_dcmpun+0x10>
 80a3dd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a3dda:	d10a      	bne.n	80a3df2 <__aeabi_dcmpun+0x26>
 80a3ddc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a3de0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a3de4:	d102      	bne.n	80a3dec <__aeabi_dcmpun+0x20>
 80a3de6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a3dea:	d102      	bne.n	80a3df2 <__aeabi_dcmpun+0x26>
 80a3dec:	f04f 0000 	mov.w	r0, #0
 80a3df0:	4770      	bx	lr
 80a3df2:	f04f 0001 	mov.w	r0, #1
 80a3df6:	4770      	bx	lr

080a3df8 <__aeabi_d2iz>:
 80a3df8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3dfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3e00:	d215      	bcs.n	80a3e2e <__aeabi_d2iz+0x36>
 80a3e02:	d511      	bpl.n	80a3e28 <__aeabi_d2iz+0x30>
 80a3e04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3e08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3e0c:	d912      	bls.n	80a3e34 <__aeabi_d2iz+0x3c>
 80a3e0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3e12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3e16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3e1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3e1e:	fa23 f002 	lsr.w	r0, r3, r2
 80a3e22:	bf18      	it	ne
 80a3e24:	4240      	negne	r0, r0
 80a3e26:	4770      	bx	lr
 80a3e28:	f04f 0000 	mov.w	r0, #0
 80a3e2c:	4770      	bx	lr
 80a3e2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3e32:	d105      	bne.n	80a3e40 <__aeabi_d2iz+0x48>
 80a3e34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a3e38:	bf08      	it	eq
 80a3e3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a3e3e:	4770      	bx	lr
 80a3e40:	f04f 0000 	mov.w	r0, #0
 80a3e44:	4770      	bx	lr
 80a3e46:	bf00      	nop

080a3e48 <__aeabi_d2uiz>:
 80a3e48:	004a      	lsls	r2, r1, #1
 80a3e4a:	d211      	bcs.n	80a3e70 <__aeabi_d2uiz+0x28>
 80a3e4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a3e50:	d211      	bcs.n	80a3e76 <__aeabi_d2uiz+0x2e>
 80a3e52:	d50d      	bpl.n	80a3e70 <__aeabi_d2uiz+0x28>
 80a3e54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a3e58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a3e5c:	d40e      	bmi.n	80a3e7c <__aeabi_d2uiz+0x34>
 80a3e5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3e62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a3e66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a3e6a:	fa23 f002 	lsr.w	r0, r3, r2
 80a3e6e:	4770      	bx	lr
 80a3e70:	f04f 0000 	mov.w	r0, #0
 80a3e74:	4770      	bx	lr
 80a3e76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a3e7a:	d102      	bne.n	80a3e82 <__aeabi_d2uiz+0x3a>
 80a3e7c:	f04f 30ff 	mov.w	r0, #4294967295
 80a3e80:	4770      	bx	lr
 80a3e82:	f04f 0000 	mov.w	r0, #0
 80a3e86:	4770      	bx	lr

080a3e88 <__aeabi_d2f>:
 80a3e88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a3e8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a3e90:	bf24      	itt	cs
 80a3e92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a3e96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a3e9a:	d90d      	bls.n	80a3eb8 <__aeabi_d2f+0x30>
 80a3e9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a3ea0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a3ea4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a3ea8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a3eac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a3eb0:	bf08      	it	eq
 80a3eb2:	f020 0001 	biceq.w	r0, r0, #1
 80a3eb6:	4770      	bx	lr
 80a3eb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a3ebc:	d121      	bne.n	80a3f02 <__aeabi_d2f+0x7a>
 80a3ebe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a3ec2:	bfbc      	itt	lt
 80a3ec4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a3ec8:	4770      	bxlt	lr
 80a3eca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a3ece:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a3ed2:	f1c2 0218 	rsb	r2, r2, #24
 80a3ed6:	f1c2 0c20 	rsb	ip, r2, #32
 80a3eda:	fa10 f30c 	lsls.w	r3, r0, ip
 80a3ede:	fa20 f002 	lsr.w	r0, r0, r2
 80a3ee2:	bf18      	it	ne
 80a3ee4:	f040 0001 	orrne.w	r0, r0, #1
 80a3ee8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a3eec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a3ef0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a3ef4:	ea40 000c 	orr.w	r0, r0, ip
 80a3ef8:	fa23 f302 	lsr.w	r3, r3, r2
 80a3efc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a3f00:	e7cc      	b.n	80a3e9c <__aeabi_d2f+0x14>
 80a3f02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a3f06:	d107      	bne.n	80a3f18 <__aeabi_d2f+0x90>
 80a3f08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a3f0c:	bf1e      	ittt	ne
 80a3f0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a3f12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a3f16:	4770      	bxne	lr
 80a3f18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a3f1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a3f20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3f24:	4770      	bx	lr
 80a3f26:	bf00      	nop

080a3f28 <__aeabi_frsub>:
 80a3f28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a3f2c:	e002      	b.n	80a3f34 <__addsf3>
 80a3f2e:	bf00      	nop

080a3f30 <__aeabi_fsub>:
 80a3f30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a3f34 <__addsf3>:
 80a3f34:	0042      	lsls	r2, r0, #1
 80a3f36:	bf1f      	itttt	ne
 80a3f38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a3f3c:	ea92 0f03 	teqne	r2, r3
 80a3f40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a3f44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a3f48:	d06a      	beq.n	80a4020 <__addsf3+0xec>
 80a3f4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a3f4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a3f52:	bfc1      	itttt	gt
 80a3f54:	18d2      	addgt	r2, r2, r3
 80a3f56:	4041      	eorgt	r1, r0
 80a3f58:	4048      	eorgt	r0, r1
 80a3f5a:	4041      	eorgt	r1, r0
 80a3f5c:	bfb8      	it	lt
 80a3f5e:	425b      	neglt	r3, r3
 80a3f60:	2b19      	cmp	r3, #25
 80a3f62:	bf88      	it	hi
 80a3f64:	4770      	bxhi	lr
 80a3f66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a3f6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a3f6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a3f72:	bf18      	it	ne
 80a3f74:	4240      	negne	r0, r0
 80a3f76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a3f7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a3f7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a3f82:	bf18      	it	ne
 80a3f84:	4249      	negne	r1, r1
 80a3f86:	ea92 0f03 	teq	r2, r3
 80a3f8a:	d03f      	beq.n	80a400c <__addsf3+0xd8>
 80a3f8c:	f1a2 0201 	sub.w	r2, r2, #1
 80a3f90:	fa41 fc03 	asr.w	ip, r1, r3
 80a3f94:	eb10 000c 	adds.w	r0, r0, ip
 80a3f98:	f1c3 0320 	rsb	r3, r3, #32
 80a3f9c:	fa01 f103 	lsl.w	r1, r1, r3
 80a3fa0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a3fa4:	d502      	bpl.n	80a3fac <__addsf3+0x78>
 80a3fa6:	4249      	negs	r1, r1
 80a3fa8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a3fac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a3fb0:	d313      	bcc.n	80a3fda <__addsf3+0xa6>
 80a3fb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a3fb6:	d306      	bcc.n	80a3fc6 <__addsf3+0x92>
 80a3fb8:	0840      	lsrs	r0, r0, #1
 80a3fba:	ea4f 0131 	mov.w	r1, r1, rrx
 80a3fbe:	f102 0201 	add.w	r2, r2, #1
 80a3fc2:	2afe      	cmp	r2, #254	; 0xfe
 80a3fc4:	d251      	bcs.n	80a406a <__addsf3+0x136>
 80a3fc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a3fca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a3fce:	bf08      	it	eq
 80a3fd0:	f020 0001 	biceq.w	r0, r0, #1
 80a3fd4:	ea40 0003 	orr.w	r0, r0, r3
 80a3fd8:	4770      	bx	lr
 80a3fda:	0049      	lsls	r1, r1, #1
 80a3fdc:	eb40 0000 	adc.w	r0, r0, r0
 80a3fe0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a3fe4:	f1a2 0201 	sub.w	r2, r2, #1
 80a3fe8:	d1ed      	bne.n	80a3fc6 <__addsf3+0x92>
 80a3fea:	fab0 fc80 	clz	ip, r0
 80a3fee:	f1ac 0c08 	sub.w	ip, ip, #8
 80a3ff2:	ebb2 020c 	subs.w	r2, r2, ip
 80a3ff6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a3ffa:	bfaa      	itet	ge
 80a3ffc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a4000:	4252      	neglt	r2, r2
 80a4002:	4318      	orrge	r0, r3
 80a4004:	bfbc      	itt	lt
 80a4006:	40d0      	lsrlt	r0, r2
 80a4008:	4318      	orrlt	r0, r3
 80a400a:	4770      	bx	lr
 80a400c:	f092 0f00 	teq	r2, #0
 80a4010:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a4014:	bf06      	itte	eq
 80a4016:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a401a:	3201      	addeq	r2, #1
 80a401c:	3b01      	subne	r3, #1
 80a401e:	e7b5      	b.n	80a3f8c <__addsf3+0x58>
 80a4020:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4028:	bf18      	it	ne
 80a402a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a402e:	d021      	beq.n	80a4074 <__addsf3+0x140>
 80a4030:	ea92 0f03 	teq	r2, r3
 80a4034:	d004      	beq.n	80a4040 <__addsf3+0x10c>
 80a4036:	f092 0f00 	teq	r2, #0
 80a403a:	bf08      	it	eq
 80a403c:	4608      	moveq	r0, r1
 80a403e:	4770      	bx	lr
 80a4040:	ea90 0f01 	teq	r0, r1
 80a4044:	bf1c      	itt	ne
 80a4046:	2000      	movne	r0, #0
 80a4048:	4770      	bxne	lr
 80a404a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a404e:	d104      	bne.n	80a405a <__addsf3+0x126>
 80a4050:	0040      	lsls	r0, r0, #1
 80a4052:	bf28      	it	cs
 80a4054:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a4058:	4770      	bx	lr
 80a405a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a405e:	bf3c      	itt	cc
 80a4060:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a4064:	4770      	bxcc	lr
 80a4066:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a406a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a406e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a4072:	4770      	bx	lr
 80a4074:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a4078:	bf16      	itet	ne
 80a407a:	4608      	movne	r0, r1
 80a407c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a4080:	4601      	movne	r1, r0
 80a4082:	0242      	lsls	r2, r0, #9
 80a4084:	bf06      	itte	eq
 80a4086:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a408a:	ea90 0f01 	teqeq	r0, r1
 80a408e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a4092:	4770      	bx	lr

080a4094 <__aeabi_ui2f>:
 80a4094:	f04f 0300 	mov.w	r3, #0
 80a4098:	e004      	b.n	80a40a4 <__aeabi_i2f+0x8>
 80a409a:	bf00      	nop

080a409c <__aeabi_i2f>:
 80a409c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a40a0:	bf48      	it	mi
 80a40a2:	4240      	negmi	r0, r0
 80a40a4:	ea5f 0c00 	movs.w	ip, r0
 80a40a8:	bf08      	it	eq
 80a40aa:	4770      	bxeq	lr
 80a40ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a40b0:	4601      	mov	r1, r0
 80a40b2:	f04f 0000 	mov.w	r0, #0
 80a40b6:	e01c      	b.n	80a40f2 <__aeabi_l2f+0x2a>

080a40b8 <__aeabi_ul2f>:
 80a40b8:	ea50 0201 	orrs.w	r2, r0, r1
 80a40bc:	bf08      	it	eq
 80a40be:	4770      	bxeq	lr
 80a40c0:	f04f 0300 	mov.w	r3, #0
 80a40c4:	e00a      	b.n	80a40dc <__aeabi_l2f+0x14>
 80a40c6:	bf00      	nop

080a40c8 <__aeabi_l2f>:
 80a40c8:	ea50 0201 	orrs.w	r2, r0, r1
 80a40cc:	bf08      	it	eq
 80a40ce:	4770      	bxeq	lr
 80a40d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a40d4:	d502      	bpl.n	80a40dc <__aeabi_l2f+0x14>
 80a40d6:	4240      	negs	r0, r0
 80a40d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a40dc:	ea5f 0c01 	movs.w	ip, r1
 80a40e0:	bf02      	ittt	eq
 80a40e2:	4684      	moveq	ip, r0
 80a40e4:	4601      	moveq	r1, r0
 80a40e6:	2000      	moveq	r0, #0
 80a40e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a40ec:	bf08      	it	eq
 80a40ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a40f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a40f6:	fabc f28c 	clz	r2, ip
 80a40fa:	3a08      	subs	r2, #8
 80a40fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a4100:	db10      	blt.n	80a4124 <__aeabi_l2f+0x5c>
 80a4102:	fa01 fc02 	lsl.w	ip, r1, r2
 80a4106:	4463      	add	r3, ip
 80a4108:	fa00 fc02 	lsl.w	ip, r0, r2
 80a410c:	f1c2 0220 	rsb	r2, r2, #32
 80a4110:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4114:	fa20 f202 	lsr.w	r2, r0, r2
 80a4118:	eb43 0002 	adc.w	r0, r3, r2
 80a411c:	bf08      	it	eq
 80a411e:	f020 0001 	biceq.w	r0, r0, #1
 80a4122:	4770      	bx	lr
 80a4124:	f102 0220 	add.w	r2, r2, #32
 80a4128:	fa01 fc02 	lsl.w	ip, r1, r2
 80a412c:	f1c2 0220 	rsb	r2, r2, #32
 80a4130:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a4134:	fa21 f202 	lsr.w	r2, r1, r2
 80a4138:	eb43 0002 	adc.w	r0, r3, r2
 80a413c:	bf08      	it	eq
 80a413e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4142:	4770      	bx	lr

080a4144 <__aeabi_fmul>:
 80a4144:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a4148:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a414c:	bf1e      	ittt	ne
 80a414e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a4152:	ea92 0f0c 	teqne	r2, ip
 80a4156:	ea93 0f0c 	teqne	r3, ip
 80a415a:	d06f      	beq.n	80a423c <__aeabi_fmul+0xf8>
 80a415c:	441a      	add	r2, r3
 80a415e:	ea80 0c01 	eor.w	ip, r0, r1
 80a4162:	0240      	lsls	r0, r0, #9
 80a4164:	bf18      	it	ne
 80a4166:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a416a:	d01e      	beq.n	80a41aa <__aeabi_fmul+0x66>
 80a416c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a4170:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a4174:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a4178:	fba0 3101 	umull	r3, r1, r0, r1
 80a417c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a4180:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a4184:	bf3e      	ittt	cc
 80a4186:	0049      	lslcc	r1, r1, #1
 80a4188:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a418c:	005b      	lslcc	r3, r3, #1
 80a418e:	ea40 0001 	orr.w	r0, r0, r1
 80a4192:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a4196:	2afd      	cmp	r2, #253	; 0xfd
 80a4198:	d81d      	bhi.n	80a41d6 <__aeabi_fmul+0x92>
 80a419a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a419e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a41a2:	bf08      	it	eq
 80a41a4:	f020 0001 	biceq.w	r0, r0, #1
 80a41a8:	4770      	bx	lr
 80a41aa:	f090 0f00 	teq	r0, #0
 80a41ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a41b2:	bf08      	it	eq
 80a41b4:	0249      	lsleq	r1, r1, #9
 80a41b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a41ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a41be:	3a7f      	subs	r2, #127	; 0x7f
 80a41c0:	bfc2      	ittt	gt
 80a41c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a41c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a41ca:	4770      	bxgt	lr
 80a41cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a41d0:	f04f 0300 	mov.w	r3, #0
 80a41d4:	3a01      	subs	r2, #1
 80a41d6:	dc5d      	bgt.n	80a4294 <__aeabi_fmul+0x150>
 80a41d8:	f112 0f19 	cmn.w	r2, #25
 80a41dc:	bfdc      	itt	le
 80a41de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a41e2:	4770      	bxle	lr
 80a41e4:	f1c2 0200 	rsb	r2, r2, #0
 80a41e8:	0041      	lsls	r1, r0, #1
 80a41ea:	fa21 f102 	lsr.w	r1, r1, r2
 80a41ee:	f1c2 0220 	rsb	r2, r2, #32
 80a41f2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a41f6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a41fa:	f140 0000 	adc.w	r0, r0, #0
 80a41fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a4202:	bf08      	it	eq
 80a4204:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a4208:	4770      	bx	lr
 80a420a:	f092 0f00 	teq	r2, #0
 80a420e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a4212:	bf02      	ittt	eq
 80a4214:	0040      	lsleq	r0, r0, #1
 80a4216:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a421a:	3a01      	subeq	r2, #1
 80a421c:	d0f9      	beq.n	80a4212 <__aeabi_fmul+0xce>
 80a421e:	ea40 000c 	orr.w	r0, r0, ip
 80a4222:	f093 0f00 	teq	r3, #0
 80a4226:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a422a:	bf02      	ittt	eq
 80a422c:	0049      	lsleq	r1, r1, #1
 80a422e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a4232:	3b01      	subeq	r3, #1
 80a4234:	d0f9      	beq.n	80a422a <__aeabi_fmul+0xe6>
 80a4236:	ea41 010c 	orr.w	r1, r1, ip
 80a423a:	e78f      	b.n	80a415c <__aeabi_fmul+0x18>
 80a423c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a4240:	ea92 0f0c 	teq	r2, ip
 80a4244:	bf18      	it	ne
 80a4246:	ea93 0f0c 	teqne	r3, ip
 80a424a:	d00a      	beq.n	80a4262 <__aeabi_fmul+0x11e>
 80a424c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a4250:	bf18      	it	ne
 80a4252:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a4256:	d1d8      	bne.n	80a420a <__aeabi_fmul+0xc6>
 80a4258:	ea80 0001 	eor.w	r0, r0, r1
 80a425c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4260:	4770      	bx	lr
 80a4262:	f090 0f00 	teq	r0, #0
 80a4266:	bf17      	itett	ne
 80a4268:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a426c:	4608      	moveq	r0, r1
 80a426e:	f091 0f00 	teqne	r1, #0
 80a4272:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a4276:	d014      	beq.n	80a42a2 <__aeabi_fmul+0x15e>
 80a4278:	ea92 0f0c 	teq	r2, ip
 80a427c:	d101      	bne.n	80a4282 <__aeabi_fmul+0x13e>
 80a427e:	0242      	lsls	r2, r0, #9
 80a4280:	d10f      	bne.n	80a42a2 <__aeabi_fmul+0x15e>
 80a4282:	ea93 0f0c 	teq	r3, ip
 80a4286:	d103      	bne.n	80a4290 <__aeabi_fmul+0x14c>
 80a4288:	024b      	lsls	r3, r1, #9
 80a428a:	bf18      	it	ne
 80a428c:	4608      	movne	r0, r1
 80a428e:	d108      	bne.n	80a42a2 <__aeabi_fmul+0x15e>
 80a4290:	ea80 0001 	eor.w	r0, r0, r1
 80a4294:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a4298:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a429c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a42a0:	4770      	bx	lr
 80a42a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a42a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a42aa:	4770      	bx	lr

080a42ac <__aeabi_fdiv>:
 80a42ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a42b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a42b4:	bf1e      	ittt	ne
 80a42b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a42ba:	ea92 0f0c 	teqne	r2, ip
 80a42be:	ea93 0f0c 	teqne	r3, ip
 80a42c2:	d069      	beq.n	80a4398 <__aeabi_fdiv+0xec>
 80a42c4:	eba2 0203 	sub.w	r2, r2, r3
 80a42c8:	ea80 0c01 	eor.w	ip, r0, r1
 80a42cc:	0249      	lsls	r1, r1, #9
 80a42ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a42d2:	d037      	beq.n	80a4344 <__aeabi_fdiv+0x98>
 80a42d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a42d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a42dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a42e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a42e4:	428b      	cmp	r3, r1
 80a42e6:	bf38      	it	cc
 80a42e8:	005b      	lslcc	r3, r3, #1
 80a42ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a42ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a42f2:	428b      	cmp	r3, r1
 80a42f4:	bf24      	itt	cs
 80a42f6:	1a5b      	subcs	r3, r3, r1
 80a42f8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a42fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a4300:	bf24      	itt	cs
 80a4302:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a4306:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a430a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a430e:	bf24      	itt	cs
 80a4310:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a4314:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a4318:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a431c:	bf24      	itt	cs
 80a431e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a4322:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a4326:	011b      	lsls	r3, r3, #4
 80a4328:	bf18      	it	ne
 80a432a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a432e:	d1e0      	bne.n	80a42f2 <__aeabi_fdiv+0x46>
 80a4330:	2afd      	cmp	r2, #253	; 0xfd
 80a4332:	f63f af50 	bhi.w	80a41d6 <__aeabi_fmul+0x92>
 80a4336:	428b      	cmp	r3, r1
 80a4338:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a433c:	bf08      	it	eq
 80a433e:	f020 0001 	biceq.w	r0, r0, #1
 80a4342:	4770      	bx	lr
 80a4344:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a4348:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a434c:	327f      	adds	r2, #127	; 0x7f
 80a434e:	bfc2      	ittt	gt
 80a4350:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a4354:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a4358:	4770      	bxgt	lr
 80a435a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a435e:	f04f 0300 	mov.w	r3, #0
 80a4362:	3a01      	subs	r2, #1
 80a4364:	e737      	b.n	80a41d6 <__aeabi_fmul+0x92>
 80a4366:	f092 0f00 	teq	r2, #0
 80a436a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a436e:	bf02      	ittt	eq
 80a4370:	0040      	lsleq	r0, r0, #1
 80a4372:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a4376:	3a01      	subeq	r2, #1
 80a4378:	d0f9      	beq.n	80a436e <__aeabi_fdiv+0xc2>
 80a437a:	ea40 000c 	orr.w	r0, r0, ip
 80a437e:	f093 0f00 	teq	r3, #0
 80a4382:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a4386:	bf02      	ittt	eq
 80a4388:	0049      	lsleq	r1, r1, #1
 80a438a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a438e:	3b01      	subeq	r3, #1
 80a4390:	d0f9      	beq.n	80a4386 <__aeabi_fdiv+0xda>
 80a4392:	ea41 010c 	orr.w	r1, r1, ip
 80a4396:	e795      	b.n	80a42c4 <__aeabi_fdiv+0x18>
 80a4398:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a439c:	ea92 0f0c 	teq	r2, ip
 80a43a0:	d108      	bne.n	80a43b4 <__aeabi_fdiv+0x108>
 80a43a2:	0242      	lsls	r2, r0, #9
 80a43a4:	f47f af7d 	bne.w	80a42a2 <__aeabi_fmul+0x15e>
 80a43a8:	ea93 0f0c 	teq	r3, ip
 80a43ac:	f47f af70 	bne.w	80a4290 <__aeabi_fmul+0x14c>
 80a43b0:	4608      	mov	r0, r1
 80a43b2:	e776      	b.n	80a42a2 <__aeabi_fmul+0x15e>
 80a43b4:	ea93 0f0c 	teq	r3, ip
 80a43b8:	d104      	bne.n	80a43c4 <__aeabi_fdiv+0x118>
 80a43ba:	024b      	lsls	r3, r1, #9
 80a43bc:	f43f af4c 	beq.w	80a4258 <__aeabi_fmul+0x114>
 80a43c0:	4608      	mov	r0, r1
 80a43c2:	e76e      	b.n	80a42a2 <__aeabi_fmul+0x15e>
 80a43c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a43c8:	bf18      	it	ne
 80a43ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a43ce:	d1ca      	bne.n	80a4366 <__aeabi_fdiv+0xba>
 80a43d0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a43d4:	f47f af5c 	bne.w	80a4290 <__aeabi_fmul+0x14c>
 80a43d8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a43dc:	f47f af3c 	bne.w	80a4258 <__aeabi_fmul+0x114>
 80a43e0:	e75f      	b.n	80a42a2 <__aeabi_fmul+0x15e>
 80a43e2:	bf00      	nop

080a43e4 <__gesf2>:
 80a43e4:	f04f 3cff 	mov.w	ip, #4294967295
 80a43e8:	e006      	b.n	80a43f8 <__cmpsf2+0x4>
 80a43ea:	bf00      	nop

080a43ec <__lesf2>:
 80a43ec:	f04f 0c01 	mov.w	ip, #1
 80a43f0:	e002      	b.n	80a43f8 <__cmpsf2+0x4>
 80a43f2:	bf00      	nop

080a43f4 <__cmpsf2>:
 80a43f4:	f04f 0c01 	mov.w	ip, #1
 80a43f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a43fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a4400:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a4404:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4408:	bf18      	it	ne
 80a440a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a440e:	d011      	beq.n	80a4434 <__cmpsf2+0x40>
 80a4410:	b001      	add	sp, #4
 80a4412:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a4416:	bf18      	it	ne
 80a4418:	ea90 0f01 	teqne	r0, r1
 80a441c:	bf58      	it	pl
 80a441e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a4422:	bf88      	it	hi
 80a4424:	17c8      	asrhi	r0, r1, #31
 80a4426:	bf38      	it	cc
 80a4428:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a442c:	bf18      	it	ne
 80a442e:	f040 0001 	orrne.w	r0, r0, #1
 80a4432:	4770      	bx	lr
 80a4434:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a4438:	d102      	bne.n	80a4440 <__cmpsf2+0x4c>
 80a443a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a443e:	d105      	bne.n	80a444c <__cmpsf2+0x58>
 80a4440:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a4444:	d1e4      	bne.n	80a4410 <__cmpsf2+0x1c>
 80a4446:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a444a:	d0e1      	beq.n	80a4410 <__cmpsf2+0x1c>
 80a444c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a4450:	4770      	bx	lr
 80a4452:	bf00      	nop

080a4454 <__aeabi_cfrcmple>:
 80a4454:	4684      	mov	ip, r0
 80a4456:	4608      	mov	r0, r1
 80a4458:	4661      	mov	r1, ip
 80a445a:	e7ff      	b.n	80a445c <__aeabi_cfcmpeq>

080a445c <__aeabi_cfcmpeq>:
 80a445c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a445e:	f7ff ffc9 	bl	80a43f4 <__cmpsf2>
 80a4462:	2800      	cmp	r0, #0
 80a4464:	bf48      	it	mi
 80a4466:	f110 0f00 	cmnmi.w	r0, #0
 80a446a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a446c <__aeabi_fcmpeq>:
 80a446c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4470:	f7ff fff4 	bl	80a445c <__aeabi_cfcmpeq>
 80a4474:	bf0c      	ite	eq
 80a4476:	2001      	moveq	r0, #1
 80a4478:	2000      	movne	r0, #0
 80a447a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a447e:	bf00      	nop

080a4480 <__aeabi_fcmplt>:
 80a4480:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4484:	f7ff ffea 	bl	80a445c <__aeabi_cfcmpeq>
 80a4488:	bf34      	ite	cc
 80a448a:	2001      	movcc	r0, #1
 80a448c:	2000      	movcs	r0, #0
 80a448e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a4492:	bf00      	nop

080a4494 <__aeabi_fcmple>:
 80a4494:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a4498:	f7ff ffe0 	bl	80a445c <__aeabi_cfcmpeq>
 80a449c:	bf94      	ite	ls
 80a449e:	2001      	movls	r0, #1
 80a44a0:	2000      	movhi	r0, #0
 80a44a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80a44a6:	bf00      	nop

080a44a8 <__aeabi_fcmpge>:
 80a44a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44ac:	f7ff ffd2 	bl	80a4454 <__aeabi_cfrcmple>
 80a44b0:	bf94      	ite	ls
 80a44b2:	2001      	movls	r0, #1
 80a44b4:	2000      	movhi	r0, #0
 80a44b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a44ba:	bf00      	nop

080a44bc <__aeabi_fcmpgt>:
 80a44bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a44c0:	f7ff ffc8 	bl	80a4454 <__aeabi_cfrcmple>
 80a44c4:	bf34      	ite	cc
 80a44c6:	2001      	movcc	r0, #1
 80a44c8:	2000      	movcs	r0, #0
 80a44ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80a44ce:	bf00      	nop

080a44d0 <__aeabi_fcmpun>:
 80a44d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a44d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a44d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a44dc:	d102      	bne.n	80a44e4 <__aeabi_fcmpun+0x14>
 80a44de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a44e2:	d108      	bne.n	80a44f6 <__aeabi_fcmpun+0x26>
 80a44e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a44e8:	d102      	bne.n	80a44f0 <__aeabi_fcmpun+0x20>
 80a44ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a44ee:	d102      	bne.n	80a44f6 <__aeabi_fcmpun+0x26>
 80a44f0:	f04f 0000 	mov.w	r0, #0
 80a44f4:	4770      	bx	lr
 80a44f6:	f04f 0001 	mov.w	r0, #1
 80a44fa:	4770      	bx	lr

080a44fc <atol>:
 80a44fc:	220a      	movs	r2, #10
 80a44fe:	2100      	movs	r1, #0
 80a4500:	f000 b8f4 	b.w	80a46ec <strtol>

080a4504 <__cxa_atexit>:
 80a4504:	b510      	push	{r4, lr}
 80a4506:	4c05      	ldr	r4, [pc, #20]	; (80a451c <__cxa_atexit+0x18>)
 80a4508:	4613      	mov	r3, r2
 80a450a:	b12c      	cbz	r4, 80a4518 <__cxa_atexit+0x14>
 80a450c:	460a      	mov	r2, r1
 80a450e:	4601      	mov	r1, r0
 80a4510:	2002      	movs	r0, #2
 80a4512:	f3af 8000 	nop.w
 80a4516:	bd10      	pop	{r4, pc}
 80a4518:	4620      	mov	r0, r4
 80a451a:	bd10      	pop	{r4, pc}
 80a451c:	00000000 	.word	0x00000000

080a4520 <memcpy>:
 80a4520:	b510      	push	{r4, lr}
 80a4522:	1e43      	subs	r3, r0, #1
 80a4524:	440a      	add	r2, r1
 80a4526:	4291      	cmp	r1, r2
 80a4528:	d004      	beq.n	80a4534 <memcpy+0x14>
 80a452a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a452e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a4532:	e7f8      	b.n	80a4526 <memcpy+0x6>
 80a4534:	bd10      	pop	{r4, pc}

080a4536 <memset>:
 80a4536:	4603      	mov	r3, r0
 80a4538:	4402      	add	r2, r0
 80a453a:	4293      	cmp	r3, r2
 80a453c:	d002      	beq.n	80a4544 <memset+0xe>
 80a453e:	f803 1b01 	strb.w	r1, [r3], #1
 80a4542:	e7fa      	b.n	80a453a <memset+0x4>
 80a4544:	4770      	bx	lr
	...

080a4548 <srand>:
 80a4548:	b538      	push	{r3, r4, r5, lr}
 80a454a:	4b12      	ldr	r3, [pc, #72]	; (80a4594 <srand+0x4c>)
 80a454c:	4605      	mov	r5, r0
 80a454e:	681c      	ldr	r4, [r3, #0]
 80a4550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a4552:	b9d3      	cbnz	r3, 80a458a <srand+0x42>
 80a4554:	2018      	movs	r0, #24
 80a4556:	f7fd f9a5 	bl	80a18a4 <malloc>
 80a455a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a455e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a4560:	8003      	strh	r3, [r0, #0]
 80a4562:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a4566:	8043      	strh	r3, [r0, #2]
 80a4568:	f241 2334 	movw	r3, #4660	; 0x1234
 80a456c:	8083      	strh	r3, [r0, #4]
 80a456e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a4572:	80c3      	strh	r3, [r0, #6]
 80a4574:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a4578:	8103      	strh	r3, [r0, #8]
 80a457a:	2305      	movs	r3, #5
 80a457c:	8143      	strh	r3, [r0, #10]
 80a457e:	230b      	movs	r3, #11
 80a4580:	8183      	strh	r3, [r0, #12]
 80a4582:	2201      	movs	r2, #1
 80a4584:	2300      	movs	r3, #0
 80a4586:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a458a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a458c:	2200      	movs	r2, #0
 80a458e:	611d      	str	r5, [r3, #16]
 80a4590:	615a      	str	r2, [r3, #20]
 80a4592:	bd38      	pop	{r3, r4, r5, pc}
 80a4594:	200000a0 	.word	0x200000a0

080a4598 <strdup>:
 80a4598:	4b02      	ldr	r3, [pc, #8]	; (80a45a4 <strdup+0xc>)
 80a459a:	4601      	mov	r1, r0
 80a459c:	6818      	ldr	r0, [r3, #0]
 80a459e:	f000 b803 	b.w	80a45a8 <_strdup_r>
 80a45a2:	bf00      	nop
 80a45a4:	200000a0 	.word	0x200000a0

080a45a8 <_strdup_r>:
 80a45a8:	b570      	push	{r4, r5, r6, lr}
 80a45aa:	4606      	mov	r6, r0
 80a45ac:	4608      	mov	r0, r1
 80a45ae:	460c      	mov	r4, r1
 80a45b0:	f000 f80d 	bl	80a45ce <strlen>
 80a45b4:	1c45      	adds	r5, r0, #1
 80a45b6:	4629      	mov	r1, r5
 80a45b8:	4630      	mov	r0, r6
 80a45ba:	f7fd f99b 	bl	80a18f4 <_malloc_r>
 80a45be:	4606      	mov	r6, r0
 80a45c0:	b118      	cbz	r0, 80a45ca <_strdup_r+0x22>
 80a45c2:	462a      	mov	r2, r5
 80a45c4:	4621      	mov	r1, r4
 80a45c6:	f7ff ffab 	bl	80a4520 <memcpy>
 80a45ca:	4630      	mov	r0, r6
 80a45cc:	bd70      	pop	{r4, r5, r6, pc}

080a45ce <strlen>:
 80a45ce:	4603      	mov	r3, r0
 80a45d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a45d4:	2a00      	cmp	r2, #0
 80a45d6:	d1fb      	bne.n	80a45d0 <strlen+0x2>
 80a45d8:	1a18      	subs	r0, r3, r0
 80a45da:	3801      	subs	r0, #1
 80a45dc:	4770      	bx	lr
	...

080a45e0 <_strtol_r>:
 80a45e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a45e4:	460f      	mov	r7, r1
 80a45e6:	4680      	mov	r8, r0
 80a45e8:	483f      	ldr	r0, [pc, #252]	; (80a46e8 <_strtol_r+0x108>)
 80a45ea:	f8d0 9000 	ldr.w	r9, [r0]
 80a45ee:	463d      	mov	r5, r7
 80a45f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a45f4:	eb09 0004 	add.w	r0, r9, r4
 80a45f8:	7840      	ldrb	r0, [r0, #1]
 80a45fa:	f000 0008 	and.w	r0, r0, #8
 80a45fe:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a4602:	b108      	cbz	r0, 80a4608 <_strtol_r+0x28>
 80a4604:	462f      	mov	r7, r5
 80a4606:	e7f2      	b.n	80a45ee <_strtol_r+0xe>
 80a4608:	2c2d      	cmp	r4, #45	; 0x2d
 80a460a:	d103      	bne.n	80a4614 <_strtol_r+0x34>
 80a460c:	1cbd      	adds	r5, r7, #2
 80a460e:	787c      	ldrb	r4, [r7, #1]
 80a4610:	2601      	movs	r6, #1
 80a4612:	e003      	b.n	80a461c <_strtol_r+0x3c>
 80a4614:	2c2b      	cmp	r4, #43	; 0x2b
 80a4616:	bf04      	itt	eq
 80a4618:	787c      	ldrbeq	r4, [r7, #1]
 80a461a:	1cbd      	addeq	r5, r7, #2
 80a461c:	b113      	cbz	r3, 80a4624 <_strtol_r+0x44>
 80a461e:	2b10      	cmp	r3, #16
 80a4620:	d10a      	bne.n	80a4638 <_strtol_r+0x58>
 80a4622:	e05b      	b.n	80a46dc <_strtol_r+0xfc>
 80a4624:	2c30      	cmp	r4, #48	; 0x30
 80a4626:	d157      	bne.n	80a46d8 <_strtol_r+0xf8>
 80a4628:	7828      	ldrb	r0, [r5, #0]
 80a462a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a462e:	2858      	cmp	r0, #88	; 0x58
 80a4630:	d14d      	bne.n	80a46ce <_strtol_r+0xee>
 80a4632:	786c      	ldrb	r4, [r5, #1]
 80a4634:	2310      	movs	r3, #16
 80a4636:	3502      	adds	r5, #2
 80a4638:	2e00      	cmp	r6, #0
 80a463a:	bf14      	ite	ne
 80a463c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a4640:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a4644:	fbbc faf3 	udiv	sl, ip, r3
 80a4648:	2700      	movs	r7, #0
 80a464a:	4638      	mov	r0, r7
 80a464c:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a4650:	eb09 0e04 	add.w	lr, r9, r4
 80a4654:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a4658:	f01e 0f04 	tst.w	lr, #4
 80a465c:	d001      	beq.n	80a4662 <_strtol_r+0x82>
 80a465e:	3c30      	subs	r4, #48	; 0x30
 80a4660:	e00b      	b.n	80a467a <_strtol_r+0x9a>
 80a4662:	f01e 0e03 	ands.w	lr, lr, #3
 80a4666:	d01b      	beq.n	80a46a0 <_strtol_r+0xc0>
 80a4668:	f1be 0f01 	cmp.w	lr, #1
 80a466c:	bf0c      	ite	eq
 80a466e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a4672:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a4676:	ebce 0404 	rsb	r4, lr, r4
 80a467a:	42a3      	cmp	r3, r4
 80a467c:	dd10      	ble.n	80a46a0 <_strtol_r+0xc0>
 80a467e:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a4682:	d00a      	beq.n	80a469a <_strtol_r+0xba>
 80a4684:	4550      	cmp	r0, sl
 80a4686:	d806      	bhi.n	80a4696 <_strtol_r+0xb6>
 80a4688:	d101      	bne.n	80a468e <_strtol_r+0xae>
 80a468a:	4564      	cmp	r4, ip
 80a468c:	dc03      	bgt.n	80a4696 <_strtol_r+0xb6>
 80a468e:	fb03 4000 	mla	r0, r3, r0, r4
 80a4692:	2701      	movs	r7, #1
 80a4694:	e001      	b.n	80a469a <_strtol_r+0xba>
 80a4696:	f04f 37ff 	mov.w	r7, #4294967295
 80a469a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a469e:	e7d7      	b.n	80a4650 <_strtol_r+0x70>
 80a46a0:	1c7b      	adds	r3, r7, #1
 80a46a2:	d10c      	bne.n	80a46be <_strtol_r+0xde>
 80a46a4:	2e00      	cmp	r6, #0
 80a46a6:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a46aa:	bf14      	ite	ne
 80a46ac:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a46b0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a46b4:	f8c8 3000 	str.w	r3, [r8]
 80a46b8:	b92a      	cbnz	r2, 80a46c6 <_strtol_r+0xe6>
 80a46ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a46be:	b106      	cbz	r6, 80a46c2 <_strtol_r+0xe2>
 80a46c0:	4240      	negs	r0, r0
 80a46c2:	b172      	cbz	r2, 80a46e2 <_strtol_r+0x102>
 80a46c4:	b107      	cbz	r7, 80a46c8 <_strtol_r+0xe8>
 80a46c6:	1e69      	subs	r1, r5, #1
 80a46c8:	6011      	str	r1, [r2, #0]
 80a46ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a46ce:	2430      	movs	r4, #48	; 0x30
 80a46d0:	2b00      	cmp	r3, #0
 80a46d2:	d1b1      	bne.n	80a4638 <_strtol_r+0x58>
 80a46d4:	2308      	movs	r3, #8
 80a46d6:	e7af      	b.n	80a4638 <_strtol_r+0x58>
 80a46d8:	230a      	movs	r3, #10
 80a46da:	e7ad      	b.n	80a4638 <_strtol_r+0x58>
 80a46dc:	2c30      	cmp	r4, #48	; 0x30
 80a46de:	d0a3      	beq.n	80a4628 <_strtol_r+0x48>
 80a46e0:	e7aa      	b.n	80a4638 <_strtol_r+0x58>
 80a46e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a46e6:	bf00      	nop
 80a46e8:	2000003c 	.word	0x2000003c

080a46ec <strtol>:
 80a46ec:	4613      	mov	r3, r2
 80a46ee:	460a      	mov	r2, r1
 80a46f0:	4601      	mov	r1, r0
 80a46f2:	4802      	ldr	r0, [pc, #8]	; (80a46fc <strtol+0x10>)
 80a46f4:	6800      	ldr	r0, [r0, #0]
 80a46f6:	f7ff bf73 	b.w	80a45e0 <_strtol_r>
 80a46fa:	bf00      	nop
 80a46fc:	200000a0 	.word	0x200000a0

080a4700 <dynalib_user>:
 80a4700:	080a0021 080a0061 080a008d 080a0091     !...a...........
 80a4710:	00000000                                ....

080a4714 <_ZL5psiFS>:
 80a4714:	00001388 0000012c 0000012c 00000000     ....,...,.......
 80a4724:	000001f4 00000000 00000000 00000000     ................
 80a4734:	77707061 61007464 74726f62 56585400     appwdt.abort.TXV
 80a4744:	58540031 6f003256 666f006e 65640066     1.TXV2.on.off.de
 80a4754:	69746361 65746176 676f7400 00656c67     activate.toggle.
 80a4764:	70696c66 6c657200 6f007961 75707475     flip.relay.outpu
 80a4774:	61620074 61006b6e 25006c6c 2666322e     t.bank.all.%.2f&
 80a4784:	66322e25 322e2526 2e252666 25266632     %.2f&%.2f&%.2f&%
 80a4794:	2666322e 66322e25 322e2526 2e252666     .2f&%.2f&%.2f&%.
 80a47a4:	25266632 2666322e 66322e25 322e2526     2f&%.2f&%.2f&%.2
 80a47b4:	2e252666 64006632 4d455473 64005350     f&%.2f.dsTEMPS.d
 80a47c4:	73705f73 6f670069 46464f00 00000000     s_psi.go.OFF....
 80a47d4:	000000ff 000000ff 74746553 20676e69     ........Setting 
 80a47e4:	204d5750 20726f66 2044454c 6f742000     PWM for LED . to
 80a47f4:	2d200020 4100203e 6d657474 6e697470      . -> .Attemptin
 80a4804:	6f742067 74657320 65726620 45002071     g to set freq .E
 80a4814:	6d697473 64657461 65727020 6163732d     stimated pre-sca
 80a4824:	203a656c 6e694600 70206c61 732d6572     le: .Final pre-s
 80a4834:	656c6163 0000203a                       cale: ..

080a483c <_ZTV8SPIClass>:
	...
 80a4844:	080a1915 080a1917 006e616e 0066766f     ........nan.ovf.
 80a4854:	6e69002e 61620066 53006475 61697265     ..inf.baud.Seria
 80a4864:	5355006c 72655342 316c6169 70797400     l.USBSerial1.typ
 80a4874:	61700065 006d6172 00646d63 68006469     e.param.cmd.id.h
 80a4884:	7300646e 006d7274 746c6966 6c766c00     nd.strm.filt.lvl
 80a4894:	64646100 646e6148 0072656c 6f6d6572     .addHandler.remo
 80a48a4:	61486576 656c646e 6e650072 61486d75     veHandler.enumHa
 80a48b4:	656c646e 4a007372 534e4f53 61657274     ndlers.JSONStrea
 80a48c4:	676f4c6d 646e6148 0072656c 00707061     mLogHandler.app.
 80a48d4:	30313025 5d002075 64250020 00202c00     %010u .] .%d., .
 80a48e4:	203a2928 005b2000 65646f63 00203d20     (): . [.code = .
 80a48f4:	64006925 69617465 3d20736c 0a0d0020     %i.details = ...
 80a4904:	006e6c00 63006e66 0065646f 61746564     .ln.fn.code.deta
 80a4914:	6e006c69 00656e6f 63617274 6e690065     il.none.trace.in
 80a4924:	77006f66 006e7261 6f727265 61700072     fo.warn.error.pa
 80a4934:	0063696e 2b25005a 3a643330 75323025     nic.Z.%+03d:%02u
 80a4944:	2d592500 252d6d25 48255464 3a4d253a     .%Y-%m-%dT%H:%M:
 80a4954:	7a255325 63736100 656d6974 00000000     %S%z.asctime....

080a4964 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a496c:	080a1ee9 080a1eef 080a1f33 080a1efd     ........3.......
 80a497c:	080a1eeb                                ....

080a4980 <_ZTV9IPAddress>:
	...
 80a4988:	080a24d9 080a24c9 080a24cb              .$...$...$..

080a4994 <_ZTV9USBSerial>:
	...
 80a499c:	080a2595 080a25e5 080a25f3 080a1a6f     .%...%...%..o...
 80a49ac:	080a25d1 080a2597 080a25ad 080a25df     .%...%...%...%..
 80a49bc:	080a25c3 080a2591                       .%...%..

080a49c4 <_ZTV11USARTSerial>:
	...
 80a49cc:	080a2735 080a2785 080a2793 080a1a6f     5'...'...'..o...
 80a49dc:	080a2749 080a276b 080a2757 080a277f     I'..k'..W'...'..
 80a49ec:	080a2737 080a273b                       7'..;'..

080a49f4 <_ZTV7TwoWire>:
	...
 80a49fc:	080a2861 080a28ab 080a2883 080a2863     a(...(...(..c(..
 80a4a0c:	080a288b 080a2893 080a289b 080a28a3     .(...(...(...(..

080a4a1c <_ZTVN5spark9WiFiClassE>:
	...
 80a4a24:	080a29bb 080a29b1 080a29a7 080a2925     .)...)...)..%)..
 80a4a34:	080a1d21 080a299b 080a298f 080a2987     !....)...)...)..
 80a4a44:	080a297d 080a2973 080a292f              })..s)../)..

080a4a50 <_ZTVN5spark12NetworkClassE>:
	...
 80a4a58:	080a29d9 080a29e3 080a29ed 080a29f7     .)...)...)...)..
 80a4a68:	080a2a01 080a2a0d 080a2a19 080a2a25     .*...*...*..%*..
 80a4a78:	080a2a2d 080a2a37 080a2a41              -*..7*..A*..

080a4a84 <_ZSt7nothrow>:
 80a4a84:	00000000 00676f6c 00000000              ....log.....

080a4a90 <_ctype_>:
 80a4a90:	20202000 20202020 28282020 20282828     .         ((((( 
 80a4aa0:	20202020 20202020 20202020 20202020                     
 80a4ab0:	10108820 10101010 10101010 10101010      ...............
 80a4ac0:	04040410 04040404 10040404 10101010     ................
 80a4ad0:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a4ae0:	01010101 01010101 01010101 10101010     ................
 80a4af0:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a4b00:	02020202 02020202 02020202 10101010     ................
 80a4b10:	00000020 00000000 00000000 00000000      ...............
	...

080a4b94 <__sf_fake_stdin>:
	...

080a4bb4 <__sf_fake_stdout>:
	...

080a4bd4 <__sf_fake_stderr>:
	...
 80a4bf4:	00000043                                         C.

080a4bf6 <link_const_variable_data_end>:
	...

080a4bf8 <link_constructors_location>:
 80a4bf8:	080a0a75 	.word	0x080a0a75
 80a4bfc:	080a0b25 	.word	0x080a0b25
 80a4c00:	080a0e55 	.word	0x080a0e55
 80a4c04:	080a0e59 	.word	0x080a0e59
 80a4c08:	080a0e89 	.word	0x080a0e89
 80a4c0c:	080a1085 	.word	0x080a1085
 80a4c10:	080a11dd 	.word	0x080a11dd
 80a4c14:	080a1495 	.word	0x080a1495
 80a4c18:	080a1965 	.word	0x080a1965
 80a4c1c:	080a1d3d 	.word	0x080a1d3d
 80a4c20:	080a1d4d 	.word	0x080a1d4d
 80a4c24:	080a1d95 	.word	0x080a1d95
 80a4c28:	080a29c5 	.word	0x080a29c5
 80a4c2c:	080a2a91 	.word	0x080a2a91
 80a4c30:	080a2b11 	.word	0x080a2b11
 80a4c34:	080a2bdd 	.word	0x080a2bdd
 80a4c38:	080a2c91 	.word	0x080a2c91
 80a4c3c:	080a2d15 	.word	0x080a2d15
 80a4c40:	080a2dd9 	.word	0x080a2dd9
 80a4c44:	080a2e9d 	.word	0x080a2e9d

080a4c48 <link_constructors_end>:
	...
