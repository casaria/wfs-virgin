
c:/Users/casaria3/Documents/workbench/wfs-virgin/wfs-virgin/target/wfs-virgin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006780  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000064  40024000  080a67a0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a4  20000000  080a6804  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000076c  200000a4  200000a4  000400a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a68a8  080a68a8  000368a8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a68d0  080a68d0  000368d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001083fb  00000000  00000000  000368d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000176c3  00000000  00000000  0013eccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ca14  00000000  00000000  00156392  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b18  00000000  00000000  00172da6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004210  00000000  00000000  001758be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000308af  00000000  00000000  00179ace  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037653  00000000  00000000  001aa37d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b14ec  00000000  00000000  001e19d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000db80  00000000  00000000  00292ebc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f005 ff25 	bl	80a5e80 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f005 ff2a 	bl	80a5e96 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6804 	.word	0x080a6804
 80a0050:	200000a4 	.word	0x200000a4
 80a0054:	200000a4 	.word	0x200000a4
 80a0058:	20000810 	.word	0x20000810
 80a005c:	20000810 	.word	0x20000810

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 fb8b 	bl	80a377c <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a674c 	.word	0x080a674c
 80a0088:	080a67a0 	.word	0x080a67a0

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 bdca 	b.w	80a0c24 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f000 ff8d 	bl	80a0fb0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f003 bb31 	b.w	80a3700 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f002 bd15 	b.w	80a2acc <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f002 bd13 	b.w	80a2acc <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f002 bd19 	b.w	80a2adc <free>

080a00aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00aa:	f002 bd17 	b.w	80a2adc <free>

080a00ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00ae:	7800      	ldrb	r0, [r0, #0]
 80a00b0:	fab0 f080 	clz	r0, r0
 80a00b4:	0940      	lsrs	r0, r0, #5
 80a00b6:	4770      	bx	lr

080a00b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b8:	2301      	movs	r3, #1
 80a00ba:	7003      	strb	r3, [r0, #0]
 80a00bc:	4770      	bx	lr

080a00be <_Z12qoscallback1j>:



// QOS ack callback.
// if application use QOS1 or QOS2, MQTT server sendback ack message id.
void qoscallback1(unsigned int messageid) {
 80a00be:	4770      	bx	lr

080a00c0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00c0:	6803      	ldr	r3, [r0, #0]
 80a00c2:	4718      	bx	r3

080a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00c4:	2a01      	cmp	r2, #1
 80a00c6:	d002      	beq.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00c8:	2a02      	cmp	r2, #2
 80a00ca:	d002      	beq.n	80a00d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00cc:	e004      	b.n	80a00d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00ce:	6001      	str	r1, [r0, #0]
	      break;
 80a00d0:	e002      	b.n	80a00d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00d2:	680b      	ldr	r3, [r1, #0]
 80a00d4:	b100      	cbz	r0, 80a00d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00d6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00d8:	2000      	movs	r0, #0
 80a00da:	4770      	bx	lr

080a00dc <_Z11cmdDefrost16String>:
  }
  return TXVpos; 
}

int cmdDefrost1(String szDefrost1)
{
 80a00dc:	b508      	push	{r3, lr}
  DefrostLevel1 = szDefrost1.toInt();
 80a00de:	f003 f90d 	bl	80a32fc <_ZNK6String5toIntEv>
 80a00e2:	4b01      	ldr	r3, [pc, #4]	; (80a00e8 <_Z11cmdDefrost16String+0xc>)
 80a00e4:	6018      	str	r0, [r3, #0]
  return DefrostLevel1;
}
 80a00e6:	bd08      	pop	{r3, pc}
 80a00e8:	20000234 	.word	0x20000234

080a00ec <_Z11cmdDefrost26String>:
  InReverse2 = 0;
  return 0;
}

int cmdDefrost2(String szDefrost2)
{
 80a00ec:	b508      	push	{r3, lr}

  DefrostLevel2 = szDefrost2.toInt();
 80a00ee:	f003 f905 	bl	80a32fc <_ZNK6String5toIntEv>
 80a00f2:	4b01      	ldr	r3, [pc, #4]	; (80a00f8 <_Z11cmdDefrost26String+0xc>)
 80a00f4:	6018      	str	r0, [r3, #0]
  return DefrostLevel2;
}
 80a00f6:	bd08      	pop	{r3, pc}
 80a00f8:	20000238 	.word	0x20000238

080a00fc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a00fc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80a00fe:	2301      	movs	r3, #1
 80a0100:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80a0102:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a0104:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80a0106:	b10b      	cbz	r3, 80a010c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80a0108:	68c0      	ldr	r0, [r0, #12]
 80a010a:	e006      	b.n	80a011a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a010c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80a010e:	b128      	cbz	r0, 80a011c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0110:	6883      	ldr	r3, [r0, #8]
 80a0112:	b90b      	cbnz	r3, 80a0118 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80a0114:	f004 fa69 	bl	80a45ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0118:	68c3      	ldr	r3, [r0, #12]
 80a011a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80a011c:	2301      	movs	r3, #1
 80a011e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80a0120:	2000      	movs	r0, #0
    }
 80a0122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80a0126:	f002 bb03 	b.w	80a2730 <os_thread_exit>

080a012a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a012a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a012c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a012e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0130:	b113      	cbz	r3, 80a0138 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0132:	2203      	movs	r2, #3
 80a0134:	4601      	mov	r1, r0
 80a0136:	4798      	blx	r3
    }
 80a0138:	4620      	mov	r0, r4
 80a013a:	bd10      	pop	{r4, pc}

080a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.10>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 80a013c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a013e:	4604      	mov	r4, r0
 80a0140:	b170      	cbz	r0, 80a0160 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.10+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a0142:	6805      	ldr	r5, [r0, #0]
 80a0144:	b135      	cbz	r5, 80a0154 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.10+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0146:	4628      	mov	r0, r5
 80a0148:	f7ff ffef 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a014c:	2110      	movs	r1, #16
 80a014e:	4628      	mov	r0, r5
 80a0150:	f004 fa3a 	bl	80a45c8 <_ZdlPvj>
 80a0154:	4620      	mov	r0, r4
      }
 80a0156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a015a:	2114      	movs	r1, #20
 80a015c:	f004 ba34 	b.w	80a45c8 <_ZdlPvj>
 80a0160:	bd38      	pop	{r3, r4, r5, pc}

080a0162 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
 80a0162:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0164:	6943      	ldr	r3, [r0, #20]
 80a0166:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
 80a0168:	b1bb      	cbz	r3, 80a019a <_ZN19ApplicationWatchdogD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 80a016a:	6858      	ldr	r0, [r3, #4]
 80a016c:	f002 fac0 	bl	80a26f0 <os_thread_is_current>
 80a0170:	b978      	cbnz	r0, 80a0192 <_ZN19ApplicationWatchdogD1Ev+0x30>
 80a0172:	6963      	ldr	r3, [r4, #20]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 80a0174:	7c5a      	ldrb	r2, [r3, #17]
 80a0176:	b912      	cbnz	r2, 80a017e <_ZN19ApplicationWatchdogD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 80a0178:	6858      	ldr	r0, [r3, #4]
 80a017a:	f002 fac1 	bl	80a2700 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 80a017e:	6963      	ldr	r3, [r4, #20]
 80a0180:	6858      	ldr	r0, [r3, #4]
 80a0182:	f002 fac5 	bl	80a2710 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0186:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0188:	2300      	movs	r3, #0
 80a018a:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a018c:	b128      	cbz	r0, 80a019a <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__p);
 80a018e:	f7ff ffd5 	bl	80a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.10>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a0192:	6960      	ldr	r0, [r4, #20]
 80a0194:	b108      	cbz	r0, 80a019a <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__ptr);
 80a0196:	f7ff ffd1 	bl	80a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.10>
 80a019a:	1d20      	adds	r0, r4, #4
 80a019c:	f7ff ffc5 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a01a0:	4620      	mov	r0, r4
 80a01a2:	bd10      	pop	{r4, pc}

080a01a4 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 80a01a4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a01a6:	f002 fa8b 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a01aa:	4b01      	ldr	r3, [pc, #4]	; (80a01b0 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 80a01ac:	6018      	str	r0, [r3, #0]
 80a01ae:	bd08      	pop	{r3, pc}
 80a01b0:	20000738 	.word	0x20000738

080a01b4 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
		checkin();
	}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 80a01b4:	b530      	push	{r4, r5, lr}
 80a01b6:	461d      	mov	r5, r3
 80a01b8:	b087      	sub	sp, #28
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a01ba:	2300      	movs	r3, #0
 80a01bc:	4604      	mov	r4, r0
 80a01be:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80a01c0:	b122      	cbz	r2, 80a01cc <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a01c2:	4b21      	ldr	r3, [pc, #132]	; (80a0248 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x94>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a01c4:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a01c6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a01c8:	4b20      	ldr	r3, [pc, #128]	; (80a024c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x98>)
 80a01ca:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a01cc:	2300      	movs	r3, #0
 80a01ce:	60e3      	str	r3, [r4, #12]
 80a01d0:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80a01d2:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a01d4:	b13b      	cbz	r3, 80a01e6 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a01d6:	2202      	movs	r2, #2
 80a01d8:	a902      	add	r1, sp, #8
 80a01da:	1d20      	adds	r0, r4, #4
 80a01dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a01de:	9b05      	ldr	r3, [sp, #20]
 80a01e0:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 80a01e2:	9b04      	ldr	r3, [sp, #16]
 80a01e4:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80a01e6:	491a      	ldr	r1, [pc, #104]	; (80a0250 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9c>)
 80a01e8:	2014      	movs	r0, #20
 80a01ea:	f004 f9ef 	bl	80a45cc <_ZnwjRKSt9nothrow_t>
 80a01ee:	b130      	cbz	r0, 80a01fe <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80a01f0:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80a01f2:	7403      	strb	r3, [r0, #16]
 80a01f4:	6003      	str	r3, [r0, #0]
 80a01f6:	6043      	str	r3, [r0, #4]
 80a01f8:	6083      	str	r3, [r0, #8]
 80a01fa:	60c3      	str	r3, [r0, #12]
 80a01fc:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a01fe:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80a0200:	b1a0      	cbz	r0, 80a022c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 80a0202:	4b14      	ldr	r3, [pc, #80]	; (80a0254 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa0>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0204:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 80a0206:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0208:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a020a:	4913      	ldr	r1, [pc, #76]	; (80a0258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 80a020c:	60dc      	str	r4, [r3, #12]
 80a020e:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0210:	4b12      	ldr	r3, [pc, #72]	; (80a025c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa8>)
 80a0212:	e88d 0021 	stmia.w	sp, {r0, r5}
 80a0216:	3004      	adds	r0, #4
 80a0218:	f002 fa62 	bl	80a26e0 <os_thread_create>
 80a021c:	b930      	cbnz	r0, 80a022c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 80a021e:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 80a0220:	7c1b      	ldrb	r3, [r3, #16]
 80a0222:	b94b      	cbnz	r3, 80a0238 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 80a0224:	2001      	movs	r0, #1
 80a0226:	f002 fa3b 	bl	80a26a0 <HAL_Delay_Milliseconds>
 80a022a:	e7f8      	b.n	80a021e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a022c:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a022e:	2300      	movs	r3, #0
 80a0230:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a0232:	b108      	cbz	r0, 80a0238 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
	  get_deleter()(__p);
 80a0234:	f7ff ff82 	bl	80a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.10>
	{
		checkin();
 80a0238:	f7ff ffb4 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a023c:	a802      	add	r0, sp, #8
 80a023e:	f7ff ff74 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 80a0242:	4620      	mov	r0, r4
 80a0244:	b007      	add	sp, #28
 80a0246:	bd30      	pop	{r4, r5, pc}
 80a0248:	080a00c1 	.word	0x080a00c1
 80a024c:	080a00c5 	.word	0x080a00c5
 80a0250:	080a65d8 	.word	0x080a65d8
 80a0254:	080a452d 	.word	0x080a452d
 80a0258:	080a60b8 	.word	0x080a60b8
 80a025c:	080a00fd 	.word	0x080a00fd

080a0260 <_Z12MQTTConnect1v>:

  //Particle.publish("TOPIC", String(topic));
}
  

void MQTTConnect1(){
 80a0260:	b500      	push	{lr}
// connect to the server
 digitalWrite(MQTT_LED, LOW);
 80a0262:	2100      	movs	r1, #0

  //Particle.publish("TOPIC", String(topic));
}
  

void MQTTConnect1(){
 80a0264:	b08d      	sub	sp, #52	; 0x34
// connect to the server
 digitalWrite(MQTT_LED, LOW);
 80a0266:	2007      	movs	r0, #7
 80a0268:	f004 f8e9 	bl	80a443e <digitalWrite>
 wd.checkin();
 80a026c:	f7ff ff9a 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
 MQTTclient1.connect(String(SubscribeTopic)+String(UNIT));
 80a0270:	4921      	ldr	r1, [pc, #132]	; (80a02f8 <_Z12MQTTConnect1v+0x98>)
 80a0272:	4668      	mov	r0, sp
 80a0274:	f002 ffa9 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0278:	4669      	mov	r1, sp
 80a027a:	a808      	add	r0, sp, #32
 80a027c:	f002 ffc7 	bl	80a320e <_ZN6StringC1ERKS_>
 80a0280:	491e      	ldr	r1, [pc, #120]	; (80a02fc <_Z12MQTTConnect1v+0x9c>)
 80a0282:	a804      	add	r0, sp, #16
 80a0284:	f002 ffa1 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a0288:	a904      	add	r1, sp, #16
 80a028a:	a808      	add	r0, sp, #32
 80a028c:	f003 f818 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a0290:	6801      	ldr	r1, [r0, #0]
 80a0292:	481b      	ldr	r0, [pc, #108]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a0294:	f001 ffcc 	bl	80a2230 <_ZN4MQTT7connectEPKc>
 80a0298:	a804      	add	r0, sp, #16
 80a029a:	f002 ff4f 	bl	80a313c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a029e:	a808      	add	r0, sp, #32
 80a02a0:	f002 ff4c 	bl	80a313c <_ZN6StringD1Ev>
 80a02a4:	4668      	mov	r0, sp
 80a02a6:	f002 ff49 	bl	80a313c <_ZN6StringD1Ev>
  // add qos callback. If don't add qoscallback, ACK message from MQTT server is ignored.
 MQTTclient1.addQosCallback(qoscallback1);
 80a02aa:	4815      	ldr	r0, [pc, #84]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a02ac:	4915      	ldr	r1, [pc, #84]	; (80a0304 <_Z12MQTTConnect1v+0xa4>)
 80a02ae:	f001 fe13 	bl	80a1ed8 <_ZN4MQTT14addQosCallbackEPFvjE>
        // publish/subscribe
    if (MQTTclient1.isConnected()) {
 80a02b2:	4813      	ldr	r0, [pc, #76]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a02b4:	f001 fed7 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a02b8:	b1d0      	cbz	r0, 80a02f0 <_Z12MQTTConnect1v+0x90>
        digitalWrite(MQTT_LED, HIGH);    
 80a02ba:	2101      	movs	r1, #1
 80a02bc:	2007      	movs	r0, #7
 80a02be:	f004 f8be 	bl	80a443e <digitalWrite>
        MQTTclient1.subscribe(String(SubscribeTopic)+"/#", MQTT::QOS2);
 80a02c2:	490d      	ldr	r1, [pc, #52]	; (80a02f8 <_Z12MQTTConnect1v+0x98>)
 80a02c4:	a808      	add	r0, sp, #32
 80a02c6:	f002 ff80 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a02ca:	a908      	add	r1, sp, #32
 80a02cc:	a804      	add	r0, sp, #16
 80a02ce:	f002 ff9e 	bl	80a320e <_ZN6StringC1ERKS_>
 80a02d2:	490d      	ldr	r1, [pc, #52]	; (80a0308 <_Z12MQTTConnect1v+0xa8>)
 80a02d4:	a804      	add	r0, sp, #16
 80a02d6:	f002 ffff 	bl	80a32d8 <_ZplRK15StringSumHelperPKc>
 80a02da:	2202      	movs	r2, #2
 80a02dc:	6801      	ldr	r1, [r0, #0]
 80a02de:	4808      	ldr	r0, [pc, #32]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a02e0:	f002 f950 	bl	80a2584 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a02e4:	a804      	add	r0, sp, #16
 80a02e6:	f002 ff29 	bl	80a313c <_ZN6StringD1Ev>
 80a02ea:	a808      	add	r0, sp, #32
 80a02ec:	f002 ff26 	bl	80a313c <_ZN6StringD1Ev>
    }

}
 80a02f0:	b00d      	add	sp, #52	; 0x34
 80a02f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02f6:	bf00      	nop
 80a02f8:	080a60bf 	.word	0x080a60bf
 80a02fc:	080a60c3 	.word	0x080a60c3
 80a0300:	20000170 	.word	0x20000170
 80a0304:	080a00bf 	.word	0x080a00bf
 80a0308:	080a60ca 	.word	0x080a60ca

080a030c <_Z11MQTTpublish6StringPKc>:
    }
    */
}


void MQTTpublish(String subTopic, const char* payload) {
 80a030c:	b570      	push	{r4, r5, r6, lr}
 80a030e:	4605      	mov	r5, r0
 80a0310:	b092      	sub	sp, #72	; 0x48
    uint16_t messageid;
    if (MQTTclient1.isConnected()) {
 80a0312:	4821      	ldr	r0, [pc, #132]	; (80a0398 <_Z11MQTTpublish6StringPKc+0x8c>)
    }
    */
}


void MQTTpublish(String subTopic, const char* payload) {
 80a0314:	460c      	mov	r4, r1
    uint16_t messageid;
    if (MQTTclient1.isConnected()) {
 80a0316:	f001 fea6 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a031a:	2800      	cmp	r0, #0
 80a031c:	d039      	beq.n	80a0392 <_Z11MQTTpublish6StringPKc+0x86>
          } else {
            memcpy(state,"CLOSED", 7); 
        }
            
      */
        MQTTclient1.publish(String(SubscribeTopic)+"/"+String(UNIT)+"/"+subTopic, (uint8_t*)payload, strlen(payload), true, MQTT::QOS2, false, &messageid);
 80a031e:	491f      	ldr	r1, [pc, #124]	; (80a039c <_Z11MQTTpublish6StringPKc+0x90>)
 80a0320:	a80a      	add	r0, sp, #40	; 0x28
 80a0322:	f002 ff52 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0326:	a90a      	add	r1, sp, #40	; 0x28
 80a0328:	a806      	add	r0, sp, #24
 80a032a:	f002 ff70 	bl	80a320e <_ZN6StringC1ERKS_>
 80a032e:	491c      	ldr	r1, [pc, #112]	; (80a03a0 <_Z11MQTTpublish6StringPKc+0x94>)
 80a0330:	a806      	add	r0, sp, #24
 80a0332:	f002 ffd1 	bl	80a32d8 <_ZplRK15StringSumHelperPKc>
 80a0336:	4606      	mov	r6, r0
 80a0338:	491a      	ldr	r1, [pc, #104]	; (80a03a4 <_Z11MQTTpublish6StringPKc+0x98>)
 80a033a:	a80e      	add	r0, sp, #56	; 0x38
 80a033c:	f002 ff45 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a0340:	a90e      	add	r1, sp, #56	; 0x38
 80a0342:	4630      	mov	r0, r6
 80a0344:	f002 ffbc 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a0348:	4915      	ldr	r1, [pc, #84]	; (80a03a0 <_Z11MQTTpublish6StringPKc+0x94>)
 80a034a:	f002 ffc5 	bl	80a32d8 <_ZplRK15StringSumHelperPKc>
 80a034e:	4629      	mov	r1, r5
 80a0350:	f002 ffb6 	bl	80a32c0 <_ZplRK15StringSumHelperRK6String>
 80a0354:	4605      	mov	r5, r0
 80a0356:	4620      	mov	r0, r4
 80a0358:	f005 fdfb 	bl	80a5f52 <strlen>
 80a035c:	f10d 0316 	add.w	r3, sp, #22
 80a0360:	9303      	str	r3, [sp, #12]
 80a0362:	2101      	movs	r1, #1
 80a0364:	2202      	movs	r2, #2
 80a0366:	2300      	movs	r3, #0
 80a0368:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80a036c:	4603      	mov	r3, r0
 80a036e:	4622      	mov	r2, r4
 80a0370:	6829      	ldr	r1, [r5, #0]
 80a0372:	4809      	ldr	r0, [pc, #36]	; (80a0398 <_Z11MQTTpublish6StringPKc+0x8c>)
 80a0374:	f001 ff6c 	bl	80a2250 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
 80a0378:	a80e      	add	r0, sp, #56	; 0x38
 80a037a:	f002 fedf 	bl	80a313c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a037e:	a806      	add	r0, sp, #24
 80a0380:	f002 fedc 	bl	80a313c <_ZN6StringD1Ev>
 80a0384:	a80a      	add	r0, sp, #40	; 0x28
 80a0386:	f002 fed9 	bl	80a313c <_ZN6StringD1Ev>
        
         // save QoS2 message id as global parameter.
        qos2messageid1 = messageid;
 80a038a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80a038e:	4b06      	ldr	r3, [pc, #24]	; (80a03a8 <_Z11MQTTpublish6StringPKc+0x9c>)
 80a0390:	801a      	strh	r2, [r3, #0]
    }
}
 80a0392:	b012      	add	sp, #72	; 0x48
 80a0394:	bd70      	pop	{r4, r5, r6, pc}
 80a0396:	bf00      	nop
 80a0398:	20000170 	.word	0x20000170
 80a039c:	080a60bf 	.word	0x080a60bf
 80a03a0:	080a60cd 	.word	0x080a60cd
 80a03a4:	080a60c3 	.word	0x080a60c3
 80a03a8:	20000160 	.word	0x20000160

080a03ac <_Z7cmdTXV26String>:
  }
  return 1;
}

int cmdTXV2(String command)
{
 80a03ac:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos = command.toInt();
 80a03ae:	f002 ffa5 	bl	80a32fc <_ZNK6String5toIntEv>
  if (TXVpos <= 4095)
 80a03b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
}

int cmdTXV2(String command)
{
  int TXVpos;
  TXVpos = command.toInt();
 80a03b6:	4604      	mov	r4, r0
  if (TXVpos <= 4095)
 80a03b8:	da05      	bge.n	80a03c6 <_Z7cmdTXV26String+0x1a>
  {
    damper.setVal(txv2, TXVpos);
 80a03ba:	b282      	uxth	r2, r0
 80a03bc:	2300      	movs	r3, #0
 80a03be:	2108      	movs	r1, #8
 80a03c0:	4802      	ldr	r0, [pc, #8]	; (80a03cc <_Z7cmdTXV26String+0x20>)
 80a03c2:	f001 fc1d 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>

  } 
  return TXVpos;
}
 80a03c6:	4620      	mov	r0, r4
 80a03c8:	bd10      	pop	{r4, pc}
 80a03ca:	bf00      	nop
 80a03cc:	200001f0 	.word	0x200001f0

080a03d0 <_Z7cmdTXV16String>:

int cmdTXV1(String command)
{
 80a03d0:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos = command.toInt();
 80a03d2:	f002 ff93 	bl	80a32fc <_ZNK6String5toIntEv>
  if (TXVpos <= 4095)
 80a03d6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
}

int cmdTXV1(String command)
{
  int TXVpos;
  TXVpos = command.toInt();
 80a03da:	4604      	mov	r4, r0
  if (TXVpos <= 4095)
 80a03dc:	da05      	bge.n	80a03ea <_Z7cmdTXV16String+0x1a>
  {
    damper.setVal(txv1, TXVpos);
 80a03de:	b282      	uxth	r2, r0
 80a03e0:	2300      	movs	r3, #0
 80a03e2:	2104      	movs	r1, #4
 80a03e4:	4802      	ldr	r0, [pc, #8]	; (80a03f0 <_Z7cmdTXV16String+0x20>)
 80a03e6:	f001 fc0b 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
  }
  return TXVpos; 
}
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	bd10      	pop	{r4, pc}
 80a03ee:	bf00      	nop
 80a03f0:	200001f0 	.word	0x200001f0

080a03f4 <_Z12relayOff8574v>:
  relayOn8574();
  return 0;
}

void relayOff8574()
{
 80a03f4:	b510      	push	{r4, lr}
  Wire.begin();
 80a03f6:	f004 f8b9 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a03fa:	f003 fefb 	bl	80a41f4 <_ZN7TwoWire5beginEv>
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
  // Select GPIO as input
  relayMap = 0xff;
 80a03fe:	4c0a      	ldr	r4, [pc, #40]	; (80a0428 <_Z12relayOff8574v+0x34>)

void relayOff8574()
{
  Wire.begin();
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
 80a0400:	f004 f8b4 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0404:	2124      	movs	r1, #36	; 0x24
 80a0406:	f003 ff0b 	bl	80a4220 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input
  relayMap = 0xff;
 80a040a:	23ff      	movs	r3, #255	; 0xff
 80a040c:	7023      	strb	r3, [r4, #0]

  Wire.write(relayMap); //Wire.write(0xff);
 80a040e:	f004 f8ad 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0412:	6803      	ldr	r3, [r0, #0]
 80a0414:	7821      	ldrb	r1, [r4, #0]
 80a0416:	689b      	ldr	r3, [r3, #8]
 80a0418:	4798      	blx	r3

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a041a:	f004 f8a7 	bl	80a456c <_Z19__fetch_global_Wirev>
}
 80a041e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  Wire.write(relayMap); //Wire.write(0xff);

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a0422:	f003 bf04 	b.w	80a422e <_ZN7TwoWire15endTransmissionEv>
 80a0426:	bf00      	nop
 80a0428:	20000030 	.word	0x20000030

080a042c <_Z11relayOn8574v>:
}
void relayOn8574()
{
 80a042c:	b510      	push	{r4, lr}
  Wire.begin();
 80a042e:	f004 f89d 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0432:	f003 fedf 	bl	80a41f4 <_ZN7TwoWire5beginEv>
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
  // Select GPIO as input
  relayMap = 0x00;
 80a0436:	4c0a      	ldr	r4, [pc, #40]	; (80a0460 <_Z11relayOn8574v+0x34>)
}
void relayOn8574()
{
  Wire.begin();
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
 80a0438:	f004 f898 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a043c:	2124      	movs	r1, #36	; 0x24
 80a043e:	f003 feef 	bl	80a4220 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input
  relayMap = 0x00;
 80a0442:	2300      	movs	r3, #0
 80a0444:	7023      	strb	r3, [r4, #0]
  Wire.write(relayMap); //Wire.write(0xff);
 80a0446:	f004 f891 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a044a:	6803      	ldr	r3, [r0, #0]
 80a044c:	7821      	ldrb	r1, [r4, #0]
 80a044e:	689b      	ldr	r3, [r3, #8]
 80a0450:	4798      	blx	r3

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a0452:	f004 f88b 	bl	80a456c <_Z19__fetch_global_Wirev>
}
 80a0456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  relayMap = 0x00;
  Wire.write(relayMap); //Wire.write(0xff);

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a045a:	f003 bee8 	b.w	80a422e <_ZN7TwoWire15endTransmissionEv>
 80a045e:	bf00      	nop
 80a0460:	20000030 	.word	0x20000030

080a0464 <_Z12cmdTempReset6String>:
  DefrostLevel2 = szDefrost2.toInt();
  return DefrostLevel2;
}

int cmdTempReset(String command)
{
 80a0464:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  HaltTemp = TRUE;
 80a0468:	4d2f      	ldr	r5, [pc, #188]	; (80a0528 <_Z12cmdTempReset6String+0xc4>)
 80a046a:	2301      	movs	r3, #1
 80a046c:	702b      	strb	r3, [r5, #0]
  relayOff8574();
 80a046e:	f7ff ffc1 	bl	80a03f4 <_Z12relayOff8574v>
  delay(8000);
 80a0472:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80a0476:	f003 f8e9 	bl	80a364c <delay>
  //find all temp sensors
  wd.checkin();
 80a047a:	f7ff fe93 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
  ds18b20.resetsearch();
 80a047e:	482b      	ldr	r0, [pc, #172]	; (80a052c <_Z12cmdTempReset6String+0xc8>)
 80a0480:	f001 f9ed 	bl	80a185e <_ZN7DS18B2011resetsearchEv>
  delay(200); // initialise for sensor search
 80a0484:	20c8      	movs	r0, #200	; 0xc8
 80a0486:	f003 f8e1 	bl	80a364c <delay>
  sz18B20AddressInfo = "";
 80a048a:	4929      	ldr	r1, [pc, #164]	; (80a0530 <_Z12cmdTempReset6String+0xcc>)
 80a048c:	4829      	ldr	r0, [pc, #164]	; (80a0534 <_Z12cmdTempReset6String+0xd0>)
 80a048e:	f002 fec9 	bl	80a3224 <_ZN6StringaSEPKc>
  for (int i = 0; i < nSENSORS; i++)
  {                                     // try to read the sensor addre
    ds18b20.search(sensorAddresses[i]); // and if available store
 80a0492:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80a053c <_Z12cmdTempReset6String+0xd8>
 80a0496:	462e      	mov	r6, r5
  //find all temp sensors
  wd.checkin();
  ds18b20.resetsearch();
  delay(200); // initialise for sensor search
  sz18B20AddressInfo = "";
  for (int i = 0; i < nSENSORS; i++)
 80a0498:	2400      	movs	r4, #0
  {                                     // try to read the sensor addre
    ds18b20.search(sensorAddresses[i]); // and if available store
    //String address((char*)sensorAddresses[i]);
    delay(240);
    celsius[i] = 0;
 80a049a:	2500      	movs	r5, #0
  ds18b20.resetsearch();
  delay(200); // initialise for sensor search
  sz18B20AddressInfo = "";
  for (int i = 0; i < nSENSORS; i++)
  {                                     // try to read the sensor addre
    ds18b20.search(sensorAddresses[i]); // and if available store
 80a049c:	eb08 01c4 	add.w	r1, r8, r4, lsl #3
 80a04a0:	4822      	ldr	r0, [pc, #136]	; (80a052c <_Z12cmdTempReset6String+0xc8>)
 80a04a2:	f001 f9c0 	bl	80a1826 <_ZN7DS18B206searchEPh>
    //String address((char*)sensorAddresses[i]);
    delay(240);
 80a04a6:	20f0      	movs	r0, #240	; 0xf0
 80a04a8:	f003 f8d0 	bl	80a364c <delay>
    celsius[i] = 0;
 80a04ac:	4b22      	ldr	r3, [pc, #136]	; (80a0538 <_Z12cmdTempReset6String+0xd4>)
 80a04ae:	4f23      	ldr	r7, [pc, #140]	; (80a053c <_Z12cmdTempReset6String+0xd8>)
 80a04b0:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  //find all temp sensors
  wd.checkin();
  ds18b20.resetsearch();
  delay(200); // initialise for sensor search
  sz18B20AddressInfo = "";
  for (int i = 0; i < nSENSORS; i++)
 80a04b4:	3401      	adds	r4, #1
 80a04b6:	2c0c      	cmp	r4, #12
 80a04b8:	d1f0      	bne.n	80a049c <_Z12cmdTempReset6String+0x38>
    ds18b20.search(sensorAddresses[i]); // and if available store
    //String address((char*)sensorAddresses[i]);
    delay(240);
    celsius[i] = 0;
  }
  wd.checkin();
 80a04ba:	f7ff fe73 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
  for (int i = 0; i< nSENSORS; i++){
 80a04be:	2400      	movs	r4, #0
     sz18B20AddressInfo.concat(String(i,DEC));
 80a04c0:	220a      	movs	r2, #10
 80a04c2:	4621      	mov	r1, r4
 80a04c4:	4668      	mov	r0, sp
 80a04c6:	f002 febe 	bl	80a3246 <_ZN6StringC1Eih>
 80a04ca:	4669      	mov	r1, sp
 80a04cc:	4819      	ldr	r0, [pc, #100]	; (80a0534 <_Z12cmdTempReset6String+0xd0>)
 80a04ce:	f002 fee4 	bl	80a329a <_ZN6String6concatERKS_>
 80a04d2:	4668      	mov	r0, sp
 80a04d4:	f002 fe32 	bl	80a313c <_ZN6StringD1Ev>
     sz18B20AddressInfo.concat(":");
 80a04d8:	4919      	ldr	r1, [pc, #100]	; (80a0540 <_Z12cmdTempReset6String+0xdc>)
 80a04da:	4816      	ldr	r0, [pc, #88]	; (80a0534 <_Z12cmdTempReset6String+0xd0>)
 80a04dc:	f002 fee1 	bl	80a32a2 <_ZN6String6concatEPKc>
 80a04e0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
      for (int x=0; x < 8; x++){
 80a04e4:	2500      	movs	r5, #0
        sz18B20AddressInfo.concat(String::format("%02x", sensorAddresses[i][x]) );
 80a04e6:	197b      	adds	r3, r7, r5
 80a04e8:	f813 2008 	ldrb.w	r2, [r3, r8]
 80a04ec:	4915      	ldr	r1, [pc, #84]	; (80a0544 <_Z12cmdTempReset6String+0xe0>)
 80a04ee:	4668      	mov	r0, sp
 80a04f0:	f002 ff0a 	bl	80a3308 <_ZN6String6formatEPKcz>
 80a04f4:	4669      	mov	r1, sp
 80a04f6:	480f      	ldr	r0, [pc, #60]	; (80a0534 <_Z12cmdTempReset6String+0xd0>)
 80a04f8:	f002 fecf 	bl	80a329a <_ZN6String6concatERKS_>
  }
  wd.checkin();
  for (int i = 0; i< nSENSORS; i++){
     sz18B20AddressInfo.concat(String(i,DEC));
     sz18B20AddressInfo.concat(":");
      for (int x=0; x < 8; x++){
 80a04fc:	3501      	adds	r5, #1
        sz18B20AddressInfo.concat(String::format("%02x", sensorAddresses[i][x]) );
 80a04fe:	4668      	mov	r0, sp
 80a0500:	f002 fe1c 	bl	80a313c <_ZN6StringD1Ev>
  }
  wd.checkin();
  for (int i = 0; i< nSENSORS; i++){
     sz18B20AddressInfo.concat(String(i,DEC));
     sz18B20AddressInfo.concat(":");
      for (int x=0; x < 8; x++){
 80a0504:	2d08      	cmp	r5, #8
 80a0506:	d1ee      	bne.n	80a04e6 <_Z12cmdTempReset6String+0x82>
        sz18B20AddressInfo.concat(String::format("%02x", sensorAddresses[i][x]) );
      }
    sz18B20AddressInfo.concat("&");
 80a0508:	490f      	ldr	r1, [pc, #60]	; (80a0548 <_Z12cmdTempReset6String+0xe4>)
 80a050a:	480a      	ldr	r0, [pc, #40]	; (80a0534 <_Z12cmdTempReset6String+0xd0>)
    //String address((char*)sensorAddresses[i]);
    delay(240);
    celsius[i] = 0;
  }
  wd.checkin();
  for (int i = 0; i< nSENSORS; i++){
 80a050c:	3401      	adds	r4, #1
     sz18B20AddressInfo.concat(String(i,DEC));
     sz18B20AddressInfo.concat(":");
      for (int x=0; x < 8; x++){
        sz18B20AddressInfo.concat(String::format("%02x", sensorAddresses[i][x]) );
      }
    sz18B20AddressInfo.concat("&");
 80a050e:	f002 fec8 	bl	80a32a2 <_ZN6String6concatEPKc>
    //String address((char*)sensorAddresses[i]);
    delay(240);
    celsius[i] = 0;
  }
  wd.checkin();
  for (int i = 0; i< nSENSORS; i++){
 80a0512:	2c0c      	cmp	r4, #12
 80a0514:	d1d4      	bne.n	80a04c0 <_Z12cmdTempReset6String+0x5c>
      for (int x=0; x < 8; x++){
        sz18B20AddressInfo.concat(String::format("%02x", sensorAddresses[i][x]) );
      }
    sz18B20AddressInfo.concat("&");
  }
  HaltTemp = FALSE;
 80a0516:	2400      	movs	r4, #0
 80a0518:	7034      	strb	r4, [r6, #0]
  relayOn8574();
 80a051a:	f7ff ff87 	bl	80a042c <_Z11relayOn8574v>
  return 0;
}
 80a051e:	4620      	mov	r0, r4
 80a0520:	b004      	add	sp, #16
 80a0522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0526:	bf00      	nop
 80a0528:	20000162 	.word	0x20000162
 80a052c:	20000260 	.word	0x20000260
 80a0530:	080a645b 	.word	0x080a645b
 80a0534:	20000204 	.word	0x20000204
 80a0538:	20000000 	.word	0x20000000
 80a053c:	40024000 	.word	0x40024000
 80a0540:	080a60cf 	.word	0x080a60cf
 80a0544:	080a60d1 	.word	0x080a60d1
 80a0548:	080a60d6 	.word	0x080a60d6

080a054c <_Z7getTempPh>:
  // char szInfo[200];
}


double getTemp(uint8_t addr[8])
{
 80a054c:	b570      	push	{r4, r5, r6, lr}
 80a054e:	4606      	mov	r6, r0
  double _temp;
  int i = 0;
 80a0550:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature(addr);
 80a0552:	2200      	movs	r2, #0
 80a0554:	4631      	mov	r1, r6
 80a0556:	480a      	ldr	r0, [pc, #40]	; (80a0580 <_Z7getTempPh+0x34>)
 80a0558:	f001 f984 	bl	80a1864 <_ZN7DS18B2014getTemperatureEPhb>
 80a055c:	4605      	mov	r5, r0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a055e:	4808      	ldr	r0, [pc, #32]	; (80a0580 <_Z7getTempPh+0x34>)
 80a0560:	f001 fa3a 	bl	80a19d8 <_ZN7DS18B208crcCheckEv>
 80a0564:	b928      	cbnz	r0, 80a0572 <_Z7getTempPh+0x26>
 80a0566:	3401      	adds	r4, #1
 80a0568:	2c04      	cmp	r4, #4
 80a056a:	d1f2      	bne.n	80a0552 <_Z7getTempPh+0x6>
    //_temp = ds18b20.convertToFahrenheit(_temp);
    // Serial.println(_temp);
  }
  else
  {
    _temp = -99;
 80a056c:	2000      	movs	r0, #0
 80a056e:	4905      	ldr	r1, [pc, #20]	; (80a0584 <_Z7getTempPh+0x38>)
 80a0570:	bd70      	pop	{r4, r5, r6, pc}

  do {
    _temp = ds18b20.getTemperature(addr);
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY)
 80a0572:	2c03      	cmp	r4, #3
 80a0574:	d0fa      	beq.n	80a056c <_Z7getTempPh+0x20>
{
  double _temp;
  int i = 0;

  do {
    _temp = ds18b20.getTemperature(addr);
 80a0576:	4628      	mov	r0, r5
 80a0578:	f004 fdea 	bl	80a5150 <__aeabi_f2d>
  {
    _temp = -99;
    // Serial.println("Invalid reading");
  }
  return _temp;
}
 80a057c:	bd70      	pop	{r4, r5, r6, pc}
 80a057e:	bf00      	nop
 80a0580:	20000260 	.word	0x20000260
 80a0584:	c058c000 	.word	0xc058c000

080a0588 <_Z13publishStatusv>:
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%4d&%4d&%4d&%4d&%4d&%4d", psi[0], psi[1], psi[2], psi[3], psi[4], d11, d12, d21, d22, tx1,tx2);
  Particle.publish("ds_psi", szInfo, PRIVATE);
}

void publishStatus()
{
 80a0588:	b510      	push	{r4, lr}
  status10 = 0;
  status10  |  (((bool)HaltTemp)<<0);
  status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 )<<1);
  status10  |  (((DefrostLevel2 >= 1) ? 1 : 0 )<<2);
  
  if (status10 != prevStatus10){
 80a058a:	4c0d      	ldr	r4, [pc, #52]	; (80a05c0 <_Z13publishStatusv+0x38>)
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%4d&%4d&%4d&%4d&%4d&%4d", psi[0], psi[1], psi[2], psi[3], psi[4], d11, d12, d21, d22, tx1,tx2);
  Particle.publish("ds_psi", szInfo, PRIVATE);
}

void publishStatus()
{
 80a058c:	b088      	sub	sp, #32
  status10 = 0;
  status10  |  (((bool)HaltTemp)<<0);
  status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 )<<1);
  status10  |  (((DefrostLevel2 >= 1) ? 1 : 0 )<<2);
  
  if (status10 != prevStatus10){
 80a058e:	6823      	ldr	r3, [r4, #0]
 80a0590:	b1a3      	cbz	r3, 80a05bc <_Z13publishStatusv+0x34>
    MQTTpublish("status10", String(status10, BIN));
 80a0592:	490c      	ldr	r1, [pc, #48]	; (80a05c4 <_Z13publishStatusv+0x3c>)
 80a0594:	4668      	mov	r0, sp
 80a0596:	f002 fe18 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a059a:	2202      	movs	r2, #2
 80a059c:	2100      	movs	r1, #0
 80a059e:	a804      	add	r0, sp, #16
 80a05a0:	f002 fe51 	bl	80a3246 <_ZN6StringC1Eih>
 80a05a4:	9904      	ldr	r1, [sp, #16]
 80a05a6:	4668      	mov	r0, sp
 80a05a8:	f7ff feb0 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a05ac:	a804      	add	r0, sp, #16
 80a05ae:	f002 fdc5 	bl	80a313c <_ZN6StringD1Ev>
 80a05b2:	4668      	mov	r0, sp
 80a05b4:	f002 fdc2 	bl	80a313c <_ZN6StringD1Ev>
    prevStatus10 = status10;
 80a05b8:	2300      	movs	r3, #0
 80a05ba:	6023      	str	r3, [r4, #0]
  }
}
 80a05bc:	b008      	add	sp, #32
 80a05be:	bd10      	pop	{r4, pc}
 80a05c0:	200000b0 	.word	0x200000b0
 80a05c4:	080a60d8 	.word	0x080a60d8

080a05c8 <_Z23publishOneWireAddressesv>:

void publishOneWireAddresses()
{
 80a05c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 // Particle.publish("ds_18B20Addr", sz18B20AddressInfo, PRIVATE);
    MQTTpublish("D18B22addresses",  sz18B20AddressInfo);
 80a05ca:	4907      	ldr	r1, [pc, #28]	; (80a05e8 <_Z23publishOneWireAddressesv+0x20>)
 80a05cc:	4668      	mov	r0, sp
 80a05ce:	f002 fdfc 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a05d2:	4b06      	ldr	r3, [pc, #24]	; (80a05ec <_Z23publishOneWireAddressesv+0x24>)
 80a05d4:	4668      	mov	r0, sp
 80a05d6:	6819      	ldr	r1, [r3, #0]
 80a05d8:	f7ff fe98 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a05dc:	4668      	mov	r0, sp
 80a05de:	f002 fdad 	bl	80a313c <_ZN6StringD1Ev>


}
 80a05e2:	b005      	add	sp, #20
 80a05e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80a05e8:	080a60e1 	.word	0x080a60e1
 80a05ec:	20000204 	.word	0x20000204

080a05f0 <_Z13MQTTcallback1PcPhj>:
#define Addr8574 0x24
static byte relayMap = 0xFF;



void MQTTcallback1(char* topic, byte* payload, unsigned int length){
 80a05f0:	b5b0      	push	{r4, r5, r7, lr}
 80a05f2:	4615      	mov	r5, r2
 80a05f4:	4604      	mov	r4, r0
    char p[length + 1];
 80a05f6:	f102 0308 	add.w	r3, r2, #8
#define Addr8574 0x24
static byte relayMap = 0xFF;



void MQTTcallback1(char* topic, byte* payload, unsigned int length){
 80a05fa:	b088      	sub	sp, #32
    char p[length + 1];
 80a05fc:	f023 0307 	bic.w	r3, r3, #7
#define Addr8574 0x24
static byte relayMap = 0xFF;



void MQTTcallback1(char* topic, byte* payload, unsigned int length){
 80a0600:	af00      	add	r7, sp, #0
    char p[length + 1];
 80a0602:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80a0606:	4668      	mov	r0, sp
 80a0608:	f005 fc3a 	bl	80a5e80 <memcpy>
    p[length] = NULL;
 80a060c:	2300      	movs	r3, #0
    String message(p);
 80a060e:	4669      	mov	r1, sp
 80a0610:	4638      	mov	r0, r7


void MQTTcallback1(char* topic, byte* payload, unsigned int length){
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 80a0612:	f80d 3005 	strb.w	r3, [sp, r5]
    String message(p);
 80a0616:	f002 fdd8 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
    wd.checkin(); // resets the AWDT count
 80a061a:	f7ff fdc3 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
        
    //message.getBytes(payload,length); does not work
    //message.toCharArray(ColorMode,length+1);
  if (strcmp(topic,"WFS/CONTROL1/TXV1") == 0){
 80a061e:	4948      	ldr	r1, [pc, #288]	; (80a0740 <_Z13MQTTcallback1PcPhj+0x150>)
 80a0620:	4620      	mov	r0, r4
 80a0622:	f005 fc69 	bl	80a5ef8 <strcmp>
 80a0626:	b948      	cbnz	r0, 80a063c <_Z13MQTTcallback1PcPhj+0x4c>
      cmdTXV1(message);
 80a0628:	4639      	mov	r1, r7
 80a062a:	f107 0010 	add.w	r0, r7, #16
 80a062e:	f002 fdee 	bl	80a320e <_ZN6StringC1ERKS_>
 80a0632:	f107 0010 	add.w	r0, r7, #16
 80a0636:	f7ff fecb 	bl	80a03d0 <_Z7cmdTXV16String>
 80a063a:	e077      	b.n	80a072c <_Z13MQTTcallback1PcPhj+0x13c>
  } 
  else if (strcmp(topic,"WFS/CONTROL1/TXV2") == 0){
 80a063c:	4941      	ldr	r1, [pc, #260]	; (80a0744 <_Z13MQTTcallback1PcPhj+0x154>)
 80a063e:	4620      	mov	r0, r4
 80a0640:	f005 fc5a 	bl	80a5ef8 <strcmp>
 80a0644:	b948      	cbnz	r0, 80a065a <_Z13MQTTcallback1PcPhj+0x6a>
      cmdTXV2(message);
 80a0646:	4639      	mov	r1, r7
 80a0648:	f107 0010 	add.w	r0, r7, #16
 80a064c:	f002 fddf 	bl	80a320e <_ZN6StringC1ERKS_>
 80a0650:	f107 0010 	add.w	r0, r7, #16
 80a0654:	f7ff feaa 	bl	80a03ac <_Z7cmdTXV26String>
 80a0658:	e068      	b.n	80a072c <_Z13MQTTcallback1PcPhj+0x13c>
  }
  else if ( (strcmp(topic,"WFS/CONTROL1/damper1_1") == 0))
 80a065a:	493b      	ldr	r1, [pc, #236]	; (80a0748 <_Z13MQTTcallback1PcPhj+0x158>)
 80a065c:	4620      	mov	r0, r4
 80a065e:	f005 fc4b 	bl	80a5ef8 <strcmp>
 80a0662:	4605      	mov	r5, r0
 80a0664:	b930      	cbnz	r0, 80a0674 <_Z13MQTTcallback1PcPhj+0x84>
  {
     damper.setVal(damper1_1, message.toInt());
 80a0666:	4638      	mov	r0, r7
 80a0668:	f002 fe48 	bl	80a32fc <_ZNK6String5toIntEv>
 80a066c:	462b      	mov	r3, r5
 80a066e:	b282      	uxth	r2, r0
 80a0670:	2102      	movs	r1, #2
 80a0672:	e00b      	b.n	80a068c <_Z13MQTTcallback1PcPhj+0x9c>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/damper1_2") == 0))
 80a0674:	4935      	ldr	r1, [pc, #212]	; (80a074c <_Z13MQTTcallback1PcPhj+0x15c>)
 80a0676:	4620      	mov	r0, r4
 80a0678:	f005 fc3e 	bl	80a5ef8 <strcmp>
 80a067c:	4605      	mov	r5, r0
 80a067e:	b948      	cbnz	r0, 80a0694 <_Z13MQTTcallback1PcPhj+0xa4>
  {
     damper.setVal(damper1_2, message.toInt());
 80a0680:	4638      	mov	r0, r7
 80a0682:	f002 fe3b 	bl	80a32fc <_ZNK6String5toIntEv>
 80a0686:	462b      	mov	r3, r5
 80a0688:	b282      	uxth	r2, r0
 80a068a:	2103      	movs	r1, #3
 80a068c:	4830      	ldr	r0, [pc, #192]	; (80a0750 <_Z13MQTTcallback1PcPhj+0x160>)
 80a068e:	f001 fab7 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0692:	e04f      	b.n	80a0734 <_Z13MQTTcallback1PcPhj+0x144>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/damper2_1") == 0))
 80a0694:	492f      	ldr	r1, [pc, #188]	; (80a0754 <_Z13MQTTcallback1PcPhj+0x164>)
 80a0696:	4620      	mov	r0, r4
 80a0698:	f005 fc2e 	bl	80a5ef8 <strcmp>
 80a069c:	4605      	mov	r5, r0
 80a069e:	b930      	cbnz	r0, 80a06ae <_Z13MQTTcallback1PcPhj+0xbe>
  {
     damper.setVal(damper2_1, message.toInt());
 80a06a0:	4638      	mov	r0, r7
 80a06a2:	f002 fe2b 	bl	80a32fc <_ZNK6String5toIntEv>
 80a06a6:	462b      	mov	r3, r5
 80a06a8:	b282      	uxth	r2, r0
 80a06aa:	4629      	mov	r1, r5
 80a06ac:	e7ee      	b.n	80a068c <_Z13MQTTcallback1PcPhj+0x9c>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/damper2_2") == 0))
 80a06ae:	492a      	ldr	r1, [pc, #168]	; (80a0758 <_Z13MQTTcallback1PcPhj+0x168>)
 80a06b0:	4620      	mov	r0, r4
 80a06b2:	f005 fc21 	bl	80a5ef8 <strcmp>
 80a06b6:	4605      	mov	r5, r0
 80a06b8:	b930      	cbnz	r0, 80a06c8 <_Z13MQTTcallback1PcPhj+0xd8>
  {
     damper.setVal(damper2_2, message.toInt());
 80a06ba:	4638      	mov	r0, r7
 80a06bc:	f002 fe1e 	bl	80a32fc <_ZNK6String5toIntEv>
 80a06c0:	462b      	mov	r3, r5
 80a06c2:	b282      	uxth	r2, r0
 80a06c4:	2101      	movs	r1, #1
 80a06c6:	e7e1      	b.n	80a068c <_Z13MQTTcallback1PcPhj+0x9c>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/InitializeTemp") == 0))
 80a06c8:	4924      	ldr	r1, [pc, #144]	; (80a075c <_Z13MQTTcallback1PcPhj+0x16c>)
 80a06ca:	4620      	mov	r0, r4
 80a06cc:	f005 fc14 	bl	80a5ef8 <strcmp>
 80a06d0:	b978      	cbnz	r0, 80a06f2 <_Z13MQTTcallback1PcPhj+0x102>
  {
     cmdTempReset(message);
 80a06d2:	4639      	mov	r1, r7
 80a06d4:	f107 0010 	add.w	r0, r7, #16
 80a06d8:	f002 fd99 	bl	80a320e <_ZN6StringC1ERKS_>
 80a06dc:	f107 0010 	add.w	r0, r7, #16
 80a06e0:	f7ff fec0 	bl	80a0464 <_Z12cmdTempReset6String>
 80a06e4:	f107 0010 	add.w	r0, r7, #16
 80a06e8:	f002 fd28 	bl	80a313c <_ZN6StringD1Ev>
     publishOneWireAddresses();
 80a06ec:	f7ff ff6c 	bl	80a05c8 <_Z23publishOneWireAddressesv>
 80a06f0:	e020      	b.n	80a0734 <_Z13MQTTcallback1PcPhj+0x144>
  }  
    else if ( (strcmp(topic,"WFS/CONTROL1/defrost1") == 0))
 80a06f2:	491b      	ldr	r1, [pc, #108]	; (80a0760 <_Z13MQTTcallback1PcPhj+0x170>)
 80a06f4:	4620      	mov	r0, r4
 80a06f6:	f005 fbff 	bl	80a5ef8 <strcmp>
 80a06fa:	b948      	cbnz	r0, 80a0710 <_Z13MQTTcallback1PcPhj+0x120>
  {
     cmdDefrost1(message);
 80a06fc:	4639      	mov	r1, r7
 80a06fe:	f107 0010 	add.w	r0, r7, #16
 80a0702:	f002 fd84 	bl	80a320e <_ZN6StringC1ERKS_>
 80a0706:	f107 0010 	add.w	r0, r7, #16
 80a070a:	f7ff fce7 	bl	80a00dc <_Z11cmdDefrost16String>
 80a070e:	e00d      	b.n	80a072c <_Z13MQTTcallback1PcPhj+0x13c>
  }    
    else if ( (strcmp(topic,"WFS/CONTROL1/defrost2") == 0))
 80a0710:	4914      	ldr	r1, [pc, #80]	; (80a0764 <_Z13MQTTcallback1PcPhj+0x174>)
 80a0712:	4620      	mov	r0, r4
 80a0714:	f005 fbf0 	bl	80a5ef8 <strcmp>
 80a0718:	b960      	cbnz	r0, 80a0734 <_Z13MQTTcallback1PcPhj+0x144>
  {
     cmdDefrost2(message);
 80a071a:	4639      	mov	r1, r7
 80a071c:	f107 0010 	add.w	r0, r7, #16
 80a0720:	f002 fd75 	bl	80a320e <_ZN6StringC1ERKS_>
 80a0724:	f107 0010 	add.w	r0, r7, #16
 80a0728:	f7ff fce0 	bl	80a00ec <_Z11cmdDefrost26String>
 80a072c:	f107 0010 	add.w	r0, r7, #16
 80a0730:	f002 fd04 	bl	80a313c <_ZN6StringD1Ev>

void MQTTcallback1(char* topic, byte* payload, unsigned int length){
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 80a0734:	4638      	mov	r0, r7
 80a0736:	f002 fd01 	bl	80a313c <_ZN6StringD1Ev>
     cmdDefrost2(message);
  }


  //Particle.publish("TOPIC", String(topic));
}
 80a073a:	3720      	adds	r7, #32
 80a073c:	46bd      	mov	sp, r7
 80a073e:	bdb0      	pop	{r4, r5, r7, pc}
 80a0740:	080a60f1 	.word	0x080a60f1
 80a0744:	080a6103 	.word	0x080a6103
 80a0748:	080a6115 	.word	0x080a6115
 80a074c:	080a612c 	.word	0x080a612c
 80a0750:	200001f0 	.word	0x200001f0
 80a0754:	080a6143 	.word	0x080a6143
 80a0758:	080a615a 	.word	0x080a615a
 80a075c:	080a6171 	.word	0x080a6171
 80a0760:	080a618d 	.word	0x080a618d
 80a0764:	080a61a3 	.word	0x080a61a3

080a0768 <_Z5bitophhi>:
    Wire.endTransmission();
  }
}
byte bitop(byte b1, byte b2, int op)
{
  switch (op)
 80a0768:	2a02      	cmp	r2, #2
 80a076a:	d005      	beq.n	80a0778 <_Z5bitophhi+0x10>
 80a076c:	2a03      	cmp	r2, #3
 80a076e:	d006      	beq.n	80a077e <_Z5bitophhi+0x16>
 80a0770:	2a01      	cmp	r2, #1
 80a0772:	d106      	bne.n	80a0782 <_Z5bitophhi+0x1a>
  {
  case 1:
    return b1 | b2;
 80a0774:	4308      	orrs	r0, r1
 80a0776:	4770      	bx	lr
  case 2:
    return b1 & ~b2;
 80a0778:	ea20 0001 	bic.w	r0, r0, r1
 80a077c:	4770      	bx	lr
  case 3:
    return b1 ^ b2;
 80a077e:	4048      	eors	r0, r1
 80a0780:	4770      	bx	lr
  }
  return 0;
 80a0782:	2000      	movs	r0, #0
}
 80a0784:	4770      	bx	lr
	...

080a0788 <_Z7relayOpii>:
  return dutyCycle;
}

void relayOp(int relay, int op)
{
  if (relay > 8)
 80a0788:	2808      	cmp	r0, #8
  damper.setVal(damperNum, dutyCycle);
  return dutyCycle;
}

void relayOp(int relay, int op)
{
 80a078a:	b570      	push	{r4, r5, r6, lr}
 80a078c:	4604      	mov	r4, r0
 80a078e:	460e      	mov	r6, r1
  if (relay > 8)
 80a0790:	dc1a      	bgt.n	80a07c8 <_Z7relayOpii+0x40>
  {
  }
  else
  {
    byte rbit = (1 << (relay - 1));
    Wire.beginTransmission(Addr8574);
 80a0792:	f003 feeb 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0796:	2124      	movs	r1, #36	; 0x24
 80a0798:	f003 fd42 	bl	80a4220 <_ZN7TwoWire17beginTransmissionEi>
    // Select GPIO as input
    //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
    //Wire.write(0x00);
    // Stop I2C transmission
    relayMap = bitop(relayMap, rbit, op);
 80a079c:	4d0b      	ldr	r5, [pc, #44]	; (80a07cc <_Z7relayOpii+0x44>)
 80a079e:	3c01      	subs	r4, #1
 80a07a0:	2101      	movs	r1, #1
 80a07a2:	40a1      	lsls	r1, r4
 80a07a4:	4632      	mov	r2, r6
 80a07a6:	7828      	ldrb	r0, [r5, #0]
 80a07a8:	b2c9      	uxtb	r1, r1
 80a07aa:	f7ff ffdd 	bl	80a0768 <_Z5bitophhi>
 80a07ae:	7028      	strb	r0, [r5, #0]
    Wire.write(relayMap);
 80a07b0:	f003 fedc 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a07b4:	6803      	ldr	r3, [r0, #0]
 80a07b6:	7829      	ldrb	r1, [r5, #0]
 80a07b8:	689b      	ldr	r3, [r3, #8]
 80a07ba:	4798      	blx	r3
    Wire.endTransmission();
 80a07bc:	f003 fed6 	bl	80a456c <_Z19__fetch_global_Wirev>
  }
}
 80a07c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
    //Wire.write(0x00);
    // Stop I2C transmission
    relayMap = bitop(relayMap, rbit, op);
    Wire.write(relayMap);
    Wire.endTransmission();
 80a07c4:	f003 bd33 	b.w	80a422e <_ZN7TwoWire15endTransmissionEv>
 80a07c8:	bd70      	pop	{r4, r5, r6, pc}
 80a07ca:	bf00      	nop
 80a07cc:	20000030 	.word	0x20000030

080a07d0 <_Z11turnOnRelayi>:
  return 0;
}

void turnOnRelay(int relay)
{
  relayOp(relay, 2);
 80a07d0:	2102      	movs	r1, #2
 80a07d2:	f7ff bfd9 	b.w	80a0788 <_Z7relayOpii>

080a07d6 <_Z12turnOffRelayi>:
}
void turnOffRelay(int relay)
{
  relayOp(relay, 1);
 80a07d6:	2101      	movs	r1, #1
 80a07d8:	f7ff bfd6 	b.w	80a0788 <_Z7relayOpii>

080a07dc <_Z15PerformDefrost2v>:
  // Stop I2C transmission
  Wire.endTransmission();
}

void PerformDefrost2()
{
 80a07dc:	b538      	push	{r3, r4, r5, lr}
  static int defstate = 0;
  static uint32_t msStartTime = 0;
  static int damper1 = damper.getVal(damper2_1);
 80a07de:	4d5a      	ldr	r5, [pc, #360]	; (80a0948 <_Z15PerformDefrost2v+0x16c>)
 80a07e0:	6829      	ldr	r1, [r5, #0]
 80a07e2:	f011 0401 	ands.w	r4, r1, #1
 80a07e6:	d10c      	bne.n	80a0802 <_Z15PerformDefrost2v+0x26>
 80a07e8:	4628      	mov	r0, r5
 80a07ea:	f7ff fc60 	bl	80a00ae <__cxa_guard_acquire>
 80a07ee:	b140      	cbz	r0, 80a0802 <_Z15PerformDefrost2v+0x26>
 80a07f0:	4621      	mov	r1, r4
 80a07f2:	4856      	ldr	r0, [pc, #344]	; (80a094c <_Z15PerformDefrost2v+0x170>)
 80a07f4:	f001 f9ab 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a07f8:	4b55      	ldr	r3, [pc, #340]	; (80a0950 <_Z15PerformDefrost2v+0x174>)
 80a07fa:	6018      	str	r0, [r3, #0]
 80a07fc:	4628      	mov	r0, r5
 80a07fe:	f7ff fc5b 	bl	80a00b8 <__cxa_guard_release>
  static int damper2 = damper.getVal(damper2_2);
 80a0802:	4c54      	ldr	r4, [pc, #336]	; (80a0954 <_Z15PerformDefrost2v+0x178>)
 80a0804:	6823      	ldr	r3, [r4, #0]
 80a0806:	07db      	lsls	r3, r3, #31
 80a0808:	d40c      	bmi.n	80a0824 <_Z15PerformDefrost2v+0x48>
 80a080a:	4620      	mov	r0, r4
 80a080c:	f7ff fc4f 	bl	80a00ae <__cxa_guard_acquire>
 80a0810:	b140      	cbz	r0, 80a0824 <_Z15PerformDefrost2v+0x48>
 80a0812:	2101      	movs	r1, #1
 80a0814:	484d      	ldr	r0, [pc, #308]	; (80a094c <_Z15PerformDefrost2v+0x170>)
 80a0816:	f001 f99a 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a081a:	4b4f      	ldr	r3, [pc, #316]	; (80a0958 <_Z15PerformDefrost2v+0x17c>)
 80a081c:	6018      	str	r0, [r3, #0]
 80a081e:	4620      	mov	r0, r4
 80a0820:	f7ff fc4a 	bl	80a00b8 <__cxa_guard_release>

  switch (defstate)
 80a0824:	4c4d      	ldr	r4, [pc, #308]	; (80a095c <_Z15PerformDefrost2v+0x180>)
 80a0826:	6823      	ldr	r3, [r4, #0]
 80a0828:	2b09      	cmp	r3, #9
 80a082a:	f200 808c 	bhi.w	80a0946 <_Z15PerformDefrost2v+0x16a>
 80a082e:	e8df f003 	tbb	[pc, r3]
 80a0832:	3405      	.short	0x3405
 80a0834:	5149473c 	.word	0x5149473c
 80a0838:	8679755f 	.word	0x8679755f
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a083c:	f001 ff40 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
  {
  case 0:
    msStartTime = millis();
 80a0840:	4d47      	ldr	r5, [pc, #284]	; (80a0960 <_Z15PerformDefrost2v+0x184>)
 80a0842:	6028      	str	r0, [r5, #0]
    turnOffRelay(RelayCool2);
 80a0844:	2005      	movs	r0, #5
 80a0846:	f7ff ffc6 	bl	80a07d6 <_Z12turnOffRelayi>
    turnOffRelay(RelayFan2);
 80a084a:	2007      	movs	r0, #7
 80a084c:	f7ff ffc3 	bl	80a07d6 <_Z12turnOffRelayi>
    turnOffRelay(RelayBypassDamper2);
 80a0850:	2006      	movs	r0, #6
 80a0852:	f7ff ffc0 	bl	80a07d6 <_Z12turnOffRelayi>
    InReverse2 = !InReverse2;
 80a0856:	4a43      	ldr	r2, [pc, #268]	; (80a0964 <_Z15PerformDefrost2v+0x188>)
 80a0858:	7813      	ldrb	r3, [r2, #0]
 80a085a:	f083 0301 	eor.w	r3, r3, #1
 80a085e:	7013      	strb	r3, [r2, #0]
    if (InReverse2)
 80a0860:	b11b      	cbz	r3, 80a086a <_Z15PerformDefrost2v+0x8e>
 80a0862:	f001 ff2d 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
      msStartReverse2 = millis();
 80a0866:	4b40      	ldr	r3, [pc, #256]	; (80a0968 <_Z15PerformDefrost2v+0x18c>)
 80a0868:	6018      	str	r0, [r3, #0]
    if (DefrostLevel2 >= 3)
 80a086a:	4b40      	ldr	r3, [pc, #256]	; (80a096c <_Z15PerformDefrost2v+0x190>)
    {
      msStartTime = msStartTime - 2000;
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a086c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    turnOffRelay(RelayFan2);
    turnOffRelay(RelayBypassDamper2);
    InReverse2 = !InReverse2;
    if (InReverse2)
      msStartReverse2 = millis();
    if (DefrostLevel2 >= 3)
 80a0870:	681b      	ldr	r3, [r3, #0]
    {
      msStartTime = msStartTime - 2000;
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a0872:	2101      	movs	r1, #1
    turnOffRelay(RelayFan2);
    turnOffRelay(RelayBypassDamper2);
    InReverse2 = !InReverse2;
    if (InReverse2)
      msStartReverse2 = millis();
    if (DefrostLevel2 >= 3)
 80a0874:	2b02      	cmp	r3, #2
    {
      msStartTime = msStartTime - 2000;
 80a0876:	bfc8      	it	gt
 80a0878:	682b      	ldrgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a087a:	4834      	ldr	r0, [pc, #208]	; (80a094c <_Z15PerformDefrost2v+0x170>)
    InReverse2 = !InReverse2;
    if (InReverse2)
      msStartReverse2 = millis();
    if (DefrostLevel2 >= 3)
    {
      msStartTime = msStartTime - 2000;
 80a087c:	bfc4      	itt	gt
 80a087e:	f5a3 63fa 	subgt.w	r3, r3, #2000	; 0x7d0
 80a0882:	602b      	strgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a0884:	2300      	movs	r3, #0
 80a0886:	f001 f9bb 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper2_1, 500);
 80a088a:	2300      	movs	r3, #0
 80a088c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a0890:	4619      	mov	r1, r3
 80a0892:	482e      	ldr	r0, [pc, #184]	; (80a094c <_Z15PerformDefrost2v+0x170>)
 80a0894:	f001 f9b4 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0898:	e04e      	b.n	80a0938 <_Z15PerformDefrost2v+0x15c>
 80a089a:	f001 ff11 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    defstate++;
    break;
  case 1:

    if (millis() > (msStartTime + 25000))
 80a089e:	4b30      	ldr	r3, [pc, #192]	; (80a0960 <_Z15PerformDefrost2v+0x184>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80a08a6:	3328      	adds	r3, #40	; 0x28
 80a08a8:	e044      	b.n	80a0934 <_Z15PerformDefrost2v+0x158>
      defstate++;
    break;
  case 2:
    turnOnRelay(RelayFan2);
 80a08aa:	2007      	movs	r0, #7
 80a08ac:	f7ff ff90 	bl	80a07d0 <_Z11turnOnRelayi>
 80a08b0:	f001 ff06 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 29000))
 80a08b4:	4b2a      	ldr	r3, [pc, #168]	; (80a0960 <_Z15PerformDefrost2v+0x184>)
 80a08b6:	681b      	ldr	r3, [r3, #0]
 80a08b8:	f503 43e2 	add.w	r3, r3, #28928	; 0x7100
 80a08bc:	3348      	adds	r3, #72	; 0x48
 80a08be:	e039      	b.n	80a0934 <_Z15PerformDefrost2v+0x158>
      defstate++;
    break;
  case 3:

    defstate++;
 80a08c0:	2304      	movs	r3, #4
 80a08c2:	e03f      	b.n	80a0944 <_Z15PerformDefrost2v+0x168>
 80a08c4:	f001 fefc 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    break;
  case 4:

    if (millis() > (msStartTime + 55000)) defstate++;
 80a08c8:	4b25      	ldr	r3, [pc, #148]	; (80a0960 <_Z15PerformDefrost2v+0x184>)
 80a08ca:	681b      	ldr	r3, [r3, #0]
 80a08cc:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80a08d0:	33d8      	adds	r3, #216	; 0xd8
 80a08d2:	e02f      	b.n	80a0934 <_Z15PerformDefrost2v+0x158>
    break;
  case 5:
    turnOnRelay(RelayFan2);
 80a08d4:	2007      	movs	r0, #7
 80a08d6:	f7ff ff7b 	bl	80a07d0 <_Z11turnOnRelayi>
    turnOnRelay(RelayCool2);
 80a08da:	2005      	movs	r0, #5
 80a08dc:	f7ff ff78 	bl	80a07d0 <_Z11turnOnRelayi>
 80a08e0:	f001 feee 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
   
    if (millis() > (msStartTime + 65000)) defstate++;
 80a08e4:	4b1e      	ldr	r3, [pc, #120]	; (80a0960 <_Z15PerformDefrost2v+0x184>)
 80a08e6:	681b      	ldr	r3, [r3, #0]
 80a08e8:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80a08ec:	33e8      	adds	r3, #232	; 0xe8
 80a08ee:	e021      	b.n	80a0934 <_Z15PerformDefrost2v+0x158>
  break;
  case 6:
    damper.setVal(damper2_2, damper2);
 80a08f0:	4a19      	ldr	r2, [pc, #100]	; (80a0958 <_Z15PerformDefrost2v+0x17c>)
 80a08f2:	2300      	movs	r3, #0
 80a08f4:	8812      	ldrh	r2, [r2, #0]
 80a08f6:	2101      	movs	r1, #1
 80a08f8:	4814      	ldr	r0, [pc, #80]	; (80a094c <_Z15PerformDefrost2v+0x170>)
 80a08fa:	f001 f981 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper2_1, damper1);
 80a08fe:	4a14      	ldr	r2, [pc, #80]	; (80a0950 <_Z15PerformDefrost2v+0x174>)
 80a0900:	2300      	movs	r3, #0
 80a0902:	4619      	mov	r1, r3
 80a0904:	8812      	ldrh	r2, [r2, #0]
 80a0906:	4811      	ldr	r0, [pc, #68]	; (80a094c <_Z15PerformDefrost2v+0x170>)
 80a0908:	f001 f97a 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
 80a090c:	f001 fed8 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 75000)) defstate++;    
 80a0910:	4b13      	ldr	r3, [pc, #76]	; (80a0960 <_Z15PerformDefrost2v+0x184>)
 80a0912:	681b      	ldr	r3, [r3, #0]
 80a0914:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80a0918:	33f8      	adds	r3, #248	; 0xf8
 80a091a:	e00b      	b.n	80a0934 <_Z15PerformDefrost2v+0x158>
  break;
  case 7:
    turnOnRelay(RelayBypassDamper2);
 80a091c:	2006      	movs	r0, #6
 80a091e:	f7ff ff57 	bl	80a07d0 <_Z11turnOnRelayi>
 80a0922:	e009      	b.n	80a0938 <_Z15PerformDefrost2v+0x15c>
 80a0924:	f001 fecc 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    defstate++;
    break;
  case 8:
    if (millis() > (msStartTime + 95000))
 80a0928:	4b0d      	ldr	r3, [pc, #52]	; (80a0960 <_Z15PerformDefrost2v+0x184>)
 80a092a:	681b      	ldr	r3, [r3, #0]
 80a092c:	f503 33b9 	add.w	r3, r3, #94720	; 0x17200
 80a0930:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80a0934:	4298      	cmp	r0, r3
 80a0936:	d906      	bls.n	80a0946 <_Z15PerformDefrost2v+0x16a>
      defstate++;
 80a0938:	6823      	ldr	r3, [r4, #0]
 80a093a:	3301      	adds	r3, #1
 80a093c:	e002      	b.n	80a0944 <_Z15PerformDefrost2v+0x168>

    break;
  case 9:

    DefrostLevel2 = 0;
 80a093e:	4a0b      	ldr	r2, [pc, #44]	; (80a096c <_Z15PerformDefrost2v+0x190>)
 80a0940:	2300      	movs	r3, #0
 80a0942:	6013      	str	r3, [r2, #0]
    defstate = 0;
 80a0944:	6023      	str	r3, [r4, #0]
 80a0946:	bd38      	pop	{r3, r4, r5, pc}
 80a0948:	200001cc 	.word	0x200001cc
 80a094c:	200001f0 	.word	0x200001f0
 80a0950:	200000dc 	.word	0x200000dc
 80a0954:	200000ec 	.word	0x200000ec
 80a0958:	200000e0 	.word	0x200000e0
 80a095c:	200001c8 	.word	0x200001c8
 80a0960:	200000d8 	.word	0x200000d8
 80a0964:	200000a8 	.word	0x200000a8
 80a0968:	200000f4 	.word	0x200000f4
 80a096c:	20000238 	.word	0x20000238

080a0970 <_Z15PerformDefrost1v>:
    break;
  }
}

void PerformDefrost1()
{
 80a0970:	b538      	push	{r3, r4, r5, lr}
  static int defstate = 0;
  static uint32_t msStartTime = 0;
  static int damper1 = damper.getVal(damper1_1);
 80a0972:	4c8f      	ldr	r4, [pc, #572]	; (80a0bb0 <_Z15PerformDefrost1v+0x240>)
 80a0974:	6823      	ldr	r3, [r4, #0]
 80a0976:	07d9      	lsls	r1, r3, #31
 80a0978:	d40c      	bmi.n	80a0994 <_Z15PerformDefrost1v+0x24>
 80a097a:	4620      	mov	r0, r4
 80a097c:	f7ff fb97 	bl	80a00ae <__cxa_guard_acquire>
 80a0980:	b140      	cbz	r0, 80a0994 <_Z15PerformDefrost1v+0x24>
 80a0982:	2102      	movs	r1, #2
 80a0984:	488b      	ldr	r0, [pc, #556]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a0986:	f001 f8e2 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a098a:	4b8b      	ldr	r3, [pc, #556]	; (80a0bb8 <_Z15PerformDefrost1v+0x248>)
 80a098c:	6018      	str	r0, [r3, #0]
 80a098e:	4620      	mov	r0, r4
 80a0990:	f7ff fb92 	bl	80a00b8 <__cxa_guard_release>
  static int damper2 = damper.getVal(damper1_2);
 80a0994:	4c89      	ldr	r4, [pc, #548]	; (80a0bbc <_Z15PerformDefrost1v+0x24c>)
 80a0996:	6823      	ldr	r3, [r4, #0]
 80a0998:	07da      	lsls	r2, r3, #31
 80a099a:	d40c      	bmi.n	80a09b6 <_Z15PerformDefrost1v+0x46>
 80a099c:	4620      	mov	r0, r4
 80a099e:	f7ff fb86 	bl	80a00ae <__cxa_guard_acquire>
 80a09a2:	b140      	cbz	r0, 80a09b6 <_Z15PerformDefrost1v+0x46>
 80a09a4:	2103      	movs	r1, #3
 80a09a6:	4883      	ldr	r0, [pc, #524]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a09a8:	f001 f8d1 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a09ac:	4b84      	ldr	r3, [pc, #528]	; (80a0bc0 <_Z15PerformDefrost1v+0x250>)
 80a09ae:	6018      	str	r0, [r3, #0]
 80a09b0:	4620      	mov	r0, r4
 80a09b2:	f7ff fb81 	bl	80a00b8 <__cxa_guard_release>
  static int txv1Value = damper.getVal(txv1);
 80a09b6:	4c83      	ldr	r4, [pc, #524]	; (80a0bc4 <_Z15PerformDefrost1v+0x254>)
 80a09b8:	6823      	ldr	r3, [r4, #0]
 80a09ba:	07db      	lsls	r3, r3, #31
 80a09bc:	d40c      	bmi.n	80a09d8 <_Z15PerformDefrost1v+0x68>
 80a09be:	4620      	mov	r0, r4
 80a09c0:	f7ff fb75 	bl	80a00ae <__cxa_guard_acquire>
 80a09c4:	b140      	cbz	r0, 80a09d8 <_Z15PerformDefrost1v+0x68>
 80a09c6:	2104      	movs	r1, #4
 80a09c8:	487a      	ldr	r0, [pc, #488]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a09ca:	f001 f8c0 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a09ce:	4b7e      	ldr	r3, [pc, #504]	; (80a0bc8 <_Z15PerformDefrost1v+0x258>)
 80a09d0:	6018      	str	r0, [r3, #0]
 80a09d2:	4620      	mov	r0, r4
 80a09d4:	f7ff fb70 	bl	80a00b8 <__cxa_guard_release>

  switch (defstate)
 80a09d8:	4c7c      	ldr	r4, [pc, #496]	; (80a0bcc <_Z15PerformDefrost1v+0x25c>)
 80a09da:	6823      	ldr	r3, [r4, #0]
 80a09dc:	2b0a      	cmp	r3, #10
 80a09de:	f200 80e5 	bhi.w	80a0bac <_Z15PerformDefrost1v+0x23c>
 80a09e2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a09e6:	000b      	.short	0x000b
 80a09e8:	005d0042 	.word	0x005d0042
 80a09ec:	00e300e3 	.word	0x00e300e3
 80a09f0:	00720068 	.word	0x00720068
 80a09f4:	0099007c 	.word	0x0099007c
 80a09f8:	00df00c1 	.word	0x00df00c1
 80a09fc:	f001 fe60 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
  {
  case 0:
    msStartTime = millis();
 80a0a00:	4d73      	ldr	r5, [pc, #460]	; (80a0bd0 <_Z15PerformDefrost1v+0x260>)
    damper.setVal(txv1, 4095);
 80a0a02:	2300      	movs	r3, #0
 80a0a04:	f640 72ff 	movw	r2, #4095	; 0xfff
 80a0a08:	2104      	movs	r1, #4
  static int txv1Value = damper.getVal(txv1);

  switch (defstate)
  {
  case 0:
    msStartTime = millis();
 80a0a0a:	6028      	str	r0, [r5, #0]
    damper.setVal(txv1, 4095);
 80a0a0c:	4869      	ldr	r0, [pc, #420]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a0a0e:	f001 f8f7 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
    turnOffRelay(RelayCool1);
 80a0a12:	2003      	movs	r0, #3
 80a0a14:	f7ff fedf 	bl	80a07d6 <_Z12turnOffRelayi>
    turnOffRelay(RelayFan1);
 80a0a18:	2002      	movs	r0, #2
 80a0a1a:	f7ff fedc 	bl	80a07d6 <_Z12turnOffRelayi>
    turnOffRelay(RelayBypassDamper1);
 80a0a1e:	2004      	movs	r0, #4
 80a0a20:	f7ff fed9 	bl	80a07d6 <_Z12turnOffRelayi>
    InReverse1 = !InReverse1;
 80a0a24:	4a6b      	ldr	r2, [pc, #428]	; (80a0bd4 <_Z15PerformDefrost1v+0x264>)
 80a0a26:	7813      	ldrb	r3, [r2, #0]
 80a0a28:	f083 0301 	eor.w	r3, r3, #1
 80a0a2c:	7013      	strb	r3, [r2, #0]
    if (InReverse1)
 80a0a2e:	b11b      	cbz	r3, 80a0a38 <_Z15PerformDefrost1v+0xc8>
 80a0a30:	f001 fe46 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
      msStartReverse1 = millis();
 80a0a34:	4b68      	ldr	r3, [pc, #416]	; (80a0bd8 <_Z15PerformDefrost1v+0x268>)
 80a0a36:	6018      	str	r0, [r3, #0]
    if (DefrostLevel1 >= 2)
 80a0a38:	4b68      	ldr	r3, [pc, #416]	; (80a0bdc <_Z15PerformDefrost1v+0x26c>)
    {
      msStartTime = msStartTime - 25000;
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0a3a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    turnOffRelay(RelayFan1);
    turnOffRelay(RelayBypassDamper1);
    InReverse1 = !InReverse1;
    if (InReverse1)
      msStartReverse1 = millis();
    if (DefrostLevel1 >= 2)
 80a0a3e:	681b      	ldr	r3, [r3, #0]
    {
      msStartTime = msStartTime - 25000;
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0a40:	2103      	movs	r1, #3
    turnOffRelay(RelayFan1);
    turnOffRelay(RelayBypassDamper1);
    InReverse1 = !InReverse1;
    if (InReverse1)
      msStartReverse1 = millis();
    if (DefrostLevel1 >= 2)
 80a0a42:	2b01      	cmp	r3, #1
    {
      msStartTime = msStartTime - 25000;
 80a0a44:	bfc8      	it	gt
 80a0a46:	682b      	ldrgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0a48:	485a      	ldr	r0, [pc, #360]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
    InReverse1 = !InReverse1;
    if (InReverse1)
      msStartReverse1 = millis();
    if (DefrostLevel1 >= 2)
    {
      msStartTime = msStartTime - 25000;
 80a0a4a:	bfc2      	ittt	gt
 80a0a4c:	f5a3 43c3 	subgt.w	r3, r3, #24960	; 0x6180
 80a0a50:	3b28      	subgt	r3, #40	; 0x28
 80a0a52:	602b      	strgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0a54:	2300      	movs	r3, #0
 80a0a56:	f001 f8d3 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_1, 500);
 80a0a5a:	2300      	movs	r3, #0
 80a0a5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a0a60:	2102      	movs	r1, #2
 80a0a62:	4854      	ldr	r0, [pc, #336]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a0a64:	f001 f8cc 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0a68:	e07b      	b.n	80a0b62 <_Z15PerformDefrost1v+0x1f2>
    defstate++;
    break;
  case 1:
    if (psi[4] > 425) turnOffRelay(RelayCompr1); 
 80a0a6a:	4b5d      	ldr	r3, [pc, #372]	; (80a0be0 <_Z15PerformDefrost1v+0x270>)
 80a0a6c:	495d      	ldr	r1, [pc, #372]	; (80a0be4 <_Z15PerformDefrost1v+0x274>)
 80a0a6e:	6918      	ldr	r0, [r3, #16]
 80a0a70:	f005 f9d4 	bl	80a5e1c <__aeabi_fcmpgt>
 80a0a74:	b110      	cbz	r0, 80a0a7c <_Z15PerformDefrost1v+0x10c>
 80a0a76:	2001      	movs	r0, #1
 80a0a78:	f7ff fead 	bl	80a07d6 <_Z12turnOffRelayi>
 80a0a7c:	f001 fe20 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 5000)){
 80a0a80:	4b53      	ldr	r3, [pc, #332]	; (80a0bd0 <_Z15PerformDefrost1v+0x260>)
 80a0a82:	681b      	ldr	r3, [r3, #0]
 80a0a84:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80a0a88:	3308      	adds	r3, #8
 80a0a8a:	4298      	cmp	r0, r3
 80a0a8c:	f240 808e 	bls.w	80a0bac <_Z15PerformDefrost1v+0x23c>
      defstate++;
 80a0a90:	6823      	ldr	r3, [r4, #0]
      turnOffRelay(RelayCompr1);
 80a0a92:	2001      	movs	r0, #1
    defstate++;
    break;
  case 1:
    if (psi[4] > 425) turnOffRelay(RelayCompr1); 
    if (millis() > (msStartTime + 5000)){
      defstate++;
 80a0a94:	3301      	adds	r3, #1
 80a0a96:	6023      	str	r3, [r4, #0]
  case 10:
    DefrostLevel1 = 0;
    defstate = 0;
    break;
  }
}
 80a0a98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    break;
  case 1:
    if (psi[4] > 425) turnOffRelay(RelayCompr1); 
    if (millis() > (msStartTime + 5000)){
      defstate++;
      turnOffRelay(RelayCompr1);
 80a0a9c:	f7ff be9b 	b.w	80a07d6 <_Z12turnOffRelayi>
 80a0aa0:	f001 fe0e 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    } 
    break;
  case 2:
    //wait for damprt clodse with fan off/compressor off
    if (millis() > (msStartTime + 65000))
 80a0aa4:	4b4a      	ldr	r3, [pc, #296]	; (80a0bd0 <_Z15PerformDefrost1v+0x260>)
 80a0aa6:	681b      	ldr	r3, [r3, #0]
 80a0aa8:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80a0aac:	33e8      	adds	r3, #232	; 0xe8
 80a0aae:	4298      	cmp	r0, r3
 80a0ab0:	d97c      	bls.n	80a0bac <_Z15PerformDefrost1v+0x23c>
      defstate = 5;
 80a0ab2:	2305      	movs	r3, #5
 80a0ab4:	e079      	b.n	80a0baa <_Z15PerformDefrost1v+0x23a>
    break;
  case 5:;
    turnOnRelay(RelayFan1);
 80a0ab6:	2002      	movs	r0, #2
 80a0ab8:	f7ff fe8a 	bl	80a07d0 <_Z11turnOnRelayi>
    turnOffRelay(RelayCool1);  //reverse heat - cool
 80a0abc:	2003      	movs	r0, #3
 80a0abe:	f7ff fe8a 	bl	80a07d6 <_Z12turnOffRelayi>
    turnOnRelay(RelayCompr1);
 80a0ac2:	2001      	movs	r0, #1
 80a0ac4:	f7ff fe84 	bl	80a07d0 <_Z11turnOnRelayi>
 80a0ac8:	e04b      	b.n	80a0b62 <_Z15PerformDefrost1v+0x1f2>
 80a0aca:	f001 fdf9 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    defstate++;
    break;
  case 6:
      //run in reverse with dampers clsoed, bypass open
      if (millis() > (msStartTime + 125000 + DefrostLevel1 * 10000)) defstate++;
 80a0ace:	4b43      	ldr	r3, [pc, #268]	; (80a0bdc <_Z15PerformDefrost1v+0x26c>)
 80a0ad0:	681a      	ldr	r2, [r3, #0]
 80a0ad2:	4b3f      	ldr	r3, [pc, #252]	; (80a0bd0 <_Z15PerformDefrost1v+0x260>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80a0ada:	3348      	adds	r3, #72	; 0x48
 80a0adc:	e03b      	b.n	80a0b56 <_Z15PerformDefrost1v+0x1e6>
    break;
  case 7:
      // back to cooling mode
      turnOnRelay(RelayFan1);
 80a0ade:	2002      	movs	r0, #2
 80a0ae0:	f7ff fe76 	bl	80a07d0 <_Z11turnOnRelayi>
      turnOnRelay(RelayCool1);
 80a0ae4:	2003      	movs	r0, #3
 80a0ae6:	f7ff fe73 	bl	80a07d0 <_Z11turnOnRelayi>
      InReverse1 = FALSE;
 80a0aea:	4b3a      	ldr	r3, [pc, #232]	; (80a0bd4 <_Z15PerformDefrost1v+0x264>)
 80a0aec:	2500      	movs	r5, #0
      turnOnRelay(RelayCompr1);
 80a0aee:	2001      	movs	r0, #1
    break;
  case 7:
      // back to cooling mode
      turnOnRelay(RelayFan1);
      turnOnRelay(RelayCool1);
      InReverse1 = FALSE;
 80a0af0:	701d      	strb	r5, [r3, #0]
      turnOnRelay(RelayCompr1);
 80a0af2:	f7ff fe6d 	bl	80a07d0 <_Z11turnOnRelayi>
      damper.setVal(txv1,txv1Value);
 80a0af6:	4a34      	ldr	r2, [pc, #208]	; (80a0bc8 <_Z15PerformDefrost1v+0x258>)
 80a0af8:	462b      	mov	r3, r5
 80a0afa:	8812      	ldrh	r2, [r2, #0]
 80a0afc:	2104      	movs	r1, #4
 80a0afe:	482d      	ldr	r0, [pc, #180]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a0b00:	f001 f87e 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0b04:	f001 fddc 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
      if (millis() > (msStartTime + 165000 + DefrostLevel1 * 10000)) defstate++;      
 80a0b08:	4b34      	ldr	r3, [pc, #208]	; (80a0bdc <_Z15PerformDefrost1v+0x26c>)
 80a0b0a:	681a      	ldr	r2, [r3, #0]
 80a0b0c:	4b30      	ldr	r3, [pc, #192]	; (80a0bd0 <_Z15PerformDefrost1v+0x260>)
 80a0b0e:	681b      	ldr	r3, [r3, #0]
 80a0b10:	f503 3321 	add.w	r3, r3, #164864	; 0x28400
 80a0b14:	3388      	adds	r3, #136	; 0x88
 80a0b16:	e01e      	b.n	80a0b56 <_Z15PerformDefrost1v+0x1e6>
    break;
  case 8:
    //restore dampers to previous position
    //restore txv 
    damper.setVal(damper1_2, damper2);
 80a0b18:	4a29      	ldr	r2, [pc, #164]	; (80a0bc0 <_Z15PerformDefrost1v+0x250>)
 80a0b1a:	2300      	movs	r3, #0
 80a0b1c:	8812      	ldrh	r2, [r2, #0]
 80a0b1e:	2103      	movs	r1, #3
 80a0b20:	4824      	ldr	r0, [pc, #144]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a0b22:	f001 f86d 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_1, damper1);
 80a0b26:	4a24      	ldr	r2, [pc, #144]	; (80a0bb8 <_Z15PerformDefrost1v+0x248>)
 80a0b28:	2300      	movs	r3, #0
 80a0b2a:	8812      	ldrh	r2, [r2, #0]
 80a0b2c:	2102      	movs	r1, #2
 80a0b2e:	4821      	ldr	r0, [pc, #132]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a0b30:	f001 f866 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv1,txv1Value);
 80a0b34:	4a24      	ldr	r2, [pc, #144]	; (80a0bc8 <_Z15PerformDefrost1v+0x258>)
 80a0b36:	2300      	movs	r3, #0
 80a0b38:	8812      	ldrh	r2, [r2, #0]
 80a0b3a:	2104      	movs	r1, #4
 80a0b3c:	481d      	ldr	r0, [pc, #116]	; (80a0bb4 <_Z15PerformDefrost1v+0x244>)
 80a0b3e:	f001 f85f 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0b42:	f001 fdbd 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 200000  + DefrostLevel1 * 10000)) defstate++;
 80a0b46:	4b25      	ldr	r3, [pc, #148]	; (80a0bdc <_Z15PerformDefrost1v+0x26c>)
 80a0b48:	681a      	ldr	r2, [r3, #0]
 80a0b4a:	4b21      	ldr	r3, [pc, #132]	; (80a0bd0 <_Z15PerformDefrost1v+0x260>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80a0b52:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80a0b56:	f242 7110 	movw	r1, #10000	; 0x2710
 80a0b5a:	fb01 3302 	mla	r3, r1, r2, r3
 80a0b5e:	4298      	cmp	r0, r3
 80a0b60:	d924      	bls.n	80a0bac <_Z15PerformDefrost1v+0x23c>
 80a0b62:	6823      	ldr	r3, [r4, #0]
 80a0b64:	3301      	adds	r3, #1
 80a0b66:	e020      	b.n	80a0baa <_Z15PerformDefrost1v+0x23a>
    break;
  case 9:
    turnOnRelay(RelayBypassDamper1);
 80a0b68:	2004      	movs	r0, #4
 80a0b6a:	f7ff fe31 	bl	80a07d0 <_Z11turnOnRelayi>
 80a0b6e:	f001 fda7 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 220000  + DefrostLevel1 * 10000)) {
 80a0b72:	f242 7110 	movw	r1, #10000	; 0x2710
 80a0b76:	4b19      	ldr	r3, [pc, #100]	; (80a0bdc <_Z15PerformDefrost1v+0x26c>)
 80a0b78:	681a      	ldr	r2, [r3, #0]
 80a0b7a:	4b15      	ldr	r3, [pc, #84]	; (80a0bd0 <_Z15PerformDefrost1v+0x260>)
 80a0b7c:	681b      	ldr	r3, [r3, #0]
 80a0b7e:	f503 3356 	add.w	r3, r3, #219136	; 0x35800
 80a0b82:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80a0b86:	fb01 3302 	mla	r3, r1, r2, r3
 80a0b8a:	4298      	cmp	r0, r3
 80a0b8c:	d90e      	bls.n	80a0bac <_Z15PerformDefrost1v+0x23c>
      defstate++;
 80a0b8e:	6823      	ldr	r3, [r4, #0]
      turnOnRelay(RelayCompr1);
 80a0b90:	2001      	movs	r0, #1
    if (millis() > (msStartTime + 200000  + DefrostLevel1 * 10000)) defstate++;
    break;
  case 9:
    turnOnRelay(RelayBypassDamper1);
    if (millis() > (msStartTime + 220000  + DefrostLevel1 * 10000)) {
      defstate++;
 80a0b92:	3301      	adds	r3, #1
 80a0b94:	6023      	str	r3, [r4, #0]
      turnOnRelay(RelayCompr1);
 80a0b96:	f7ff fe1b 	bl	80a07d0 <_Z11turnOnRelayi>
  case 10:
    DefrostLevel1 = 0;
    defstate = 0;
    break;
  }
}
 80a0b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  case 9:
    turnOnRelay(RelayBypassDamper1);
    if (millis() > (msStartTime + 220000  + DefrostLevel1 * 10000)) {
      defstate++;
      turnOnRelay(RelayCompr1);
      turnOnRelay(RelayFan1);
 80a0b9e:	2002      	movs	r0, #2
 80a0ba0:	f7ff be16 	b.w	80a07d0 <_Z11turnOnRelayi>
    }
    break;
  case 10:
    DefrostLevel1 = 0;
 80a0ba4:	4a0d      	ldr	r2, [pc, #52]	; (80a0bdc <_Z15PerformDefrost1v+0x26c>)
 80a0ba6:	2300      	movs	r3, #0
 80a0ba8:	6013      	str	r3, [r2, #0]
    defstate = 0;
 80a0baa:	6023      	str	r3, [r4, #0]
 80a0bac:	bd38      	pop	{r3, r4, r5, pc}
 80a0bae:	bf00      	nop
 80a0bb0:	20000168 	.word	0x20000168
 80a0bb4:	200001f0 	.word	0x200001f0
 80a0bb8:	20000134 	.word	0x20000134
 80a0bbc:	2000015c 	.word	0x2000015c
 80a0bc0:	20000138 	.word	0x20000138
 80a0bc4:	200000e4 	.word	0x200000e4
 80a0bc8:	200000d0 	.word	0x200000d0
 80a0bcc:	200000e8 	.word	0x200000e8
 80a0bd0:	2000027c 	.word	0x2000027c
 80a0bd4:	200001e4 	.word	0x200001e4
 80a0bd8:	200000f0 	.word	0x200000f0
 80a0bdc:	20000234 	.word	0x20000234
 80a0be0:	20000240 	.word	0x20000240
 80a0be4:	43d48000 	.word	0x43d48000

080a0be8 <_Z9Relay8574hb>:
{
  relayOp(relay, 3);
}

void Relay8574(byte bitnum, boolean value)
{
 80a0be8:	b508      	push	{r3, lr}
  static bool toggle;

  Wire.beginTransmission(Addr8574);
 80a0bea:	f003 fcbf 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0bee:	2124      	movs	r1, #36	; 0x24
 80a0bf0:	f003 fb16 	bl	80a4220 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input
  //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
  //Wire.write(0x00);
  // Stop I2C transmission
  Wire.write(0x00);
 80a0bf4:	f003 fcba 	bl	80a456c <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0bf8:	6803      	ldr	r3, [r0, #0]
 80a0bfa:	2100      	movs	r1, #0
 80a0bfc:	689b      	ldr	r3, [r3, #8]
 80a0bfe:	4798      	blx	r3
  relayMap = 0x00;
 80a0c00:	4b06      	ldr	r3, [pc, #24]	; (80a0c1c <_Z9Relay8574hb+0x34>)
 80a0c02:	2200      	movs	r2, #0
 80a0c04:	701a      	strb	r2, [r3, #0]
  Wire.endTransmission();
 80a0c06:	f003 fcb1 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0c0a:	f003 fb10 	bl	80a422e <_ZN7TwoWire15endTransmissionEv>
  toggle = !toggle;
 80a0c0e:	4a04      	ldr	r2, [pc, #16]	; (80a0c20 <_Z9Relay8574hb+0x38>)
 80a0c10:	7813      	ldrb	r3, [r2, #0]
 80a0c12:	f083 0301 	eor.w	r3, r3, #1
 80a0c16:	7013      	strb	r3, [r2, #0]
 80a0c18:	bd08      	pop	{r3, pc}
 80a0c1a:	bf00      	nop
 80a0c1c:	20000030 	.word	0x20000030
 80a0c20:	2000012c 	.word	0x2000012c

080a0c24 <setup>:
    break;
  }
}

void setup(void)
{
 80a0c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    celsius[i] = 0;
  }
  wd.checkin();

  */
  cmdTempReset("");
 80a0c26:	4925      	ldr	r1, [pc, #148]	; (80a0cbc <setup+0x98>)
 80a0c28:	4668      	mov	r0, sp
 80a0c2a:	f002 face 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80a0c2e:	4c24      	ldr	r4, [pc, #144]	; (80a0cc0 <setup+0x9c>)
 80a0c30:	4668      	mov	r0, sp
 80a0c32:	f7ff fc17 	bl	80a0464 <_Z12cmdTempReset6String>
 80a0c36:	4668      	mov	r0, sp
 80a0c38:	f002 fa80 	bl	80a313c <_ZN6StringD1Ev>
 80a0c3c:	4a21      	ldr	r2, [pc, #132]	; (80a0cc4 <setup+0xa0>)
 80a0c3e:	4922      	ldr	r1, [pc, #136]	; (80a0cc8 <setup+0xa4>)
 80a0c40:	4620      	mov	r0, r4
 80a0c42:	f002 fe25 	bl	80a3890 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80a0c46:	4a21      	ldr	r2, [pc, #132]	; (80a0ccc <setup+0xa8>)
 80a0c48:	4921      	ldr	r1, [pc, #132]	; (80a0cd0 <setup+0xac>)
 80a0c4a:	4620      	mov	r0, r4
  //delay(500);
  // Start serial communication and set baud rate = 9600
  //Serial.begin(9600);
  // Set variable

  damper.begin();          // This calls Wire.begin()
 80a0c4c:	4c21      	ldr	r4, [pc, #132]	; (80a0cd4 <setup+0xb0>)
 80a0c4e:	f002 fe1f 	bl	80a3890 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

  // Particle.variable("Bank_1", b1status);
  // Particle.variable("Bank_2", b2status);
  //Particle.variable("Input Status", b4status);
  //relays.turnOffAllRelays();
  pinMode(pinLED, OUTPUT);
 80a0c52:	2101      	movs	r1, #1
 80a0c54:	2007      	movs	r0, #7
 80a0c56:	f003 fbe1 	bl	80a441c <pinMode>
  //delay(500);
  // Start serial communication and set baud rate = 9600
  //Serial.begin(9600);
  // Set variable

  damper.begin();          // This calls Wire.begin()
 80a0c5a:	4620      	mov	r0, r4
 80a0c5c:	f001 f83a 	bl	80a1cd4 <_ZN16Adafruit_PCA96855beginEv>
  damper.setPWMFreq(1500); // Maximum PWM frequency is 1600
 80a0c60:	4620      	mov	r0, r4
 80a0c62:	491d      	ldr	r1, [pc, #116]	; (80a0cd8 <setup+0xb4>)
 80a0c64:	f001 f844 	bl	80a1cf0 <_ZN16Adafruit_PCA968510setPWMFreqEf>

  damper.setVal(damper2_2, 3000);
 80a0c68:	4620      	mov	r0, r4
 80a0c6a:	2300      	movs	r3, #0
 80a0c6c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0c70:	2101      	movs	r1, #1
 80a0c72:	f000 ffc5 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
  damper.setVal(damper2_1, 2900);                             
 80a0c76:	2300      	movs	r3, #0
 80a0c78:	f640 3254 	movw	r2, #2900	; 0xb54
 80a0c7c:	4619      	mov	r1, r3
 80a0c7e:	4620      	mov	r0, r4
 80a0c80:	f000 ffbe 	bl	80a1c00 <_ZN16Adafruit_PCA96856setValEhtb>
  // Selct configuration command
  // Continuous conversion mode, Channel-1, 12-bit resolution
  //Wire.write(0x10);
  // Stop I2C Transmission
  //Wire.endTransmission();
  Wire.begin();
 80a0c84:	f003 fc72 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0c88:	f003 fab4 	bl	80a41f4 <_ZN7TwoWire5beginEv>
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
  // Select GPIO as input
  relayMap = 0xFF;
 80a0c8c:	4c13      	ldr	r4, [pc, #76]	; (80a0cdc <setup+0xb8>)
  //Wire.write(0x10);
  // Stop I2C Transmission
  //Wire.endTransmission();
  Wire.begin();
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
 80a0c8e:	f003 fc6d 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0c92:	2124      	movs	r1, #36	; 0x24
 80a0c94:	f003 fac4 	bl	80a4220 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input
  relayMap = 0xFF;
 80a0c98:	23ff      	movs	r3, #255	; 0xff
 80a0c9a:	7023      	strb	r3, [r4, #0]
  Wire.write(relayMap); //Wire.write(0xff);13
 80a0c9c:	f003 fc66 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0ca0:	6803      	ldr	r3, [r0, #0]
 80a0ca2:	7821      	ldrb	r1, [r4, #0]
 80a0ca4:	689b      	ldr	r3, [r3, #8]
 80a0ca6:	4798      	blx	r3
  Relay8574(1, 1);
 80a0ca8:	2101      	movs	r1, #1
 80a0caa:	4608      	mov	r0, r1
 80a0cac:	f7ff ff9c 	bl	80a0be8 <_Z9Relay8574hb>

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a0cb0:	f003 fc5c 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0cb4:	f003 fabb 	bl	80a422e <_ZN7TwoWire15endTransmissionEv>

  //turnOffRelay(RelayCompr2);
  //turnOffRelay(RelayFan2);
}
 80a0cb8:	b004      	add	sp, #16
 80a0cba:	bd10      	pop	{r4, pc}
 80a0cbc:	080a645b 	.word	0x080a645b
 80a0cc0:	080a3865 	.word	0x080a3865
 80a0cc4:	080a61b9 	.word	0x080a61b9
 80a0cc8:	080a00dd 	.word	0x080a00dd
 80a0ccc:	080a61c2 	.word	0x080a61c2
 80a0cd0:	080a00ed 	.word	0x080a00ed
 80a0cd4:	200001f0 	.word	0x200001f0
 80a0cd8:	44bb8000 	.word	0x44bb8000
 80a0cdc:	20000030 	.word	0x20000030

080a0ce0 <_Z6getMCPv>:
  }
  wd.checkin(); // resets the AWDT count
 }
}

void getMCP(){
 80a0ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  // https://www.controleverything.com/content/Analog-Digital-Converters?sku=MCP3428_I2CADC#tabs-0-product_tabset-2

  byte error;
  int8_t address;

  address = mcp1.devAddr;
 80a0ce4:	4b3b      	ldr	r3, [pc, #236]	; (80a0dd4 <_Z6getMCPv+0xf4>)
 80a0ce6:	f993 400e 	ldrsb.w	r4, [r3, #14]
  // The i2c_scanner uses the  return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
 80a0cea:	f003 fc3f 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0cee:	4621      	mov	r1, r4
 80a0cf0:	f003 fa96 	bl	80a4220 <_ZN7TwoWire17beginTransmissionEi>
  error = Wire.endTransmission();
 80a0cf4:	f003 fc3a 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0cf8:	f003 fa99 	bl	80a422e <_ZN7TwoWire15endTransmissionEv>
  if (error == 0)
 80a0cfc:	2800      	cmp	r0, #0
 80a0cfe:	d132      	bne.n	80a0d66 <_Z6getMCPv+0x86>
 80a0d00:	4604      	mov	r4, r0

    for (int i = 1; i <= 4; i++)
    {
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp1.SetConfiguration(i, 16, 1, 2);
 80a0d02:	1c66      	adds	r6, r4, #1
 80a0d04:	2302      	movs	r3, #2
 80a0d06:	2210      	movs	r2, #16
 80a0d08:	b2f1      	uxtb	r1, r6
 80a0d0a:	9300      	str	r3, [sp, #0]
 80a0d0c:	4831      	ldr	r0, [pc, #196]	; (80a0dd4 <_Z6getMCPv+0xf4>)
 80a0d0e:	2301      	movs	r3, #1
 80a0d10:	f000 fe7a 	bl	80a1a08 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>
      Raw_adc[i - 1] = mcp1.readADC();
 80a0d14:	482f      	ldr	r0, [pc, #188]	; (80a0dd4 <_Z6getMCPv+0xf4>)
 80a0d16:	f000 fedd 	bl	80a1ad4 <_ZN15CASARIA_MCP34287readADCEv>
 80a0d1a:	4b2f      	ldr	r3, [pc, #188]	; (80a0dd8 <_Z6getMCPv+0xf8>)
      // Note that the library waits for a complete conversion
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a0d1c:	4d2f      	ldr	r5, [pc, #188]	; (80a0ddc <_Z6getMCPv+0xfc>)
    for (int i = 1; i <= 4; i++)
    {
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp1.SetConfiguration(i, 16, 1, 2);
      Raw_adc[i - 1] = mcp1.readADC();
 80a0d1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
      // Note that the library waits for a complete conversion
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a0d22:	f004 fe6b 	bl	80a59fc <__aeabi_i2f>
 80a0d26:	492e      	ldr	r1, [pc, #184]	; (80a0de0 <_Z6getMCPv+0x100>)
 80a0d28:	f004 fdb2 	bl	80a5890 <__aeabi_fsub>
 80a0d2c:	492d      	ldr	r1, [pc, #180]	; (80a0de4 <_Z6getMCPv+0x104>)
 80a0d2e:	f004 ff6d 	bl	80a5c0c <__aeabi_fdiv>
 80a0d32:	4b2d      	ldr	r3, [pc, #180]	; (80a0de8 <_Z6getMCPv+0x108>)
 80a0d34:	4607      	mov	r7, r0
 80a0d36:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a0d3a:	f004 fe5f 	bl	80a59fc <__aeabi_i2f>
 80a0d3e:	4601      	mov	r1, r0
 80a0d40:	4638      	mov	r0, r7
 80a0d42:	f004 feaf 	bl	80a5aa4 <__aeabi_fmul>
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {

    for (int i = 1; i <= 4; i++)
 80a0d46:	2e04      	cmp	r6, #4
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp1.SetConfiguration(i, 16, 1, 2);
      Raw_adc[i - 1] = mcp1.readADC();
      // Note that the library waits for a complete conversion
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a0d48:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80a0d4c:	4634      	mov	r4, r6
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {

    for (int i = 1; i <= 4; i++)
 80a0d4e:	d1d8      	bne.n	80a0d02 <_Z6getMCPv+0x22>
      // raw_adc = raw_adc * LSB(250 µV)/PGA for PGA = 1;     // 14-bit Resolution
      // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;    // 16-bit Resolution
    } //calibration/linearizatiom
    //CALIBRATION
    // correct zero offset
    if (psi[0] < 600)
 80a0d50:	682c      	ldr	r4, [r5, #0]
 80a0d52:	4926      	ldr	r1, [pc, #152]	; (80a0dec <_Z6getMCPv+0x10c>)
 80a0d54:	4620      	mov	r0, r4
 80a0d56:	f005 f843 	bl	80a5de0 <__aeabi_fcmplt>
 80a0d5a:	b120      	cbz	r0, 80a0d66 <_Z6getMCPv+0x86>
    {
      psi[0] = psi[0] + 15;
 80a0d5c:	4924      	ldr	r1, [pc, #144]	; (80a0df0 <_Z6getMCPv+0x110>)
 80a0d5e:	4620      	mov	r0, r4
 80a0d60:	f004 fd98 	bl	80a5894 <__addsf3>
 80a0d64:	6028      	str	r0, [r5, #0]
    }
  }

  address = mcp2.devAddr;
 80a0d66:	4b23      	ldr	r3, [pc, #140]	; (80a0df4 <_Z6getMCPv+0x114>)
 80a0d68:	f993 400e 	ldrsb.w	r4, [r3, #14]
  // The i2c_scanner uses the return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
 80a0d6c:	f003 fbfe 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0d70:	4621      	mov	r1, r4
 80a0d72:	f003 fa55 	bl	80a4220 <_ZN7TwoWire17beginTransmissionEi>
  error = Wire.endTransmission();
 80a0d76:	f003 fbf9 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a0d7a:	f003 fa58 	bl	80a422e <_ZN7TwoWire15endTransmissionEv>
  if (error == 0)
 80a0d7e:	bb30      	cbnz	r0, 80a0dce <_Z6getMCPv+0xee>
 80a0d80:	4f1d      	ldr	r7, [pc, #116]	; (80a0df8 <_Z6getMCPv+0x118>)
 80a0d82:	4e1e      	ldr	r6, [pc, #120]	; (80a0dfc <_Z6getMCPv+0x11c>)
 80a0d84:	4d1e      	ldr	r5, [pc, #120]	; (80a0e00 <_Z6getMCPv+0x120>)
 80a0d86:	2404      	movs	r4, #4
  {
    for (int i = 4; i <= 8; i++)
    {
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp2.SetConfiguration(i, 16, 1, 2);
 80a0d88:	2302      	movs	r3, #2
 80a0d8a:	2210      	movs	r2, #16
 80a0d8c:	b2e1      	uxtb	r1, r4
 80a0d8e:	9300      	str	r3, [sp, #0]
 80a0d90:	4818      	ldr	r0, [pc, #96]	; (80a0df4 <_Z6getMCPv+0x114>)
 80a0d92:	2301      	movs	r3, #1
 80a0d94:	f000 fe38 	bl	80a1a08 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>

      // Note that the library waits for a complete conversion
      Raw_adc[i - 1] = mcp2.readADC();
 80a0d98:	4816      	ldr	r0, [pc, #88]	; (80a0df4 <_Z6getMCPv+0x114>)
 80a0d9a:	f000 fe9b 	bl	80a1ad4 <_ZN15CASARIA_MCP34287readADCEv>
 80a0d9e:	f847 0f04 	str.w	r0, [r7, #4]!
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a0da2:	f004 fe2b 	bl	80a59fc <__aeabi_i2f>
 80a0da6:	490e      	ldr	r1, [pc, #56]	; (80a0de0 <_Z6getMCPv+0x100>)
 80a0da8:	f004 fd72 	bl	80a5890 <__aeabi_fsub>
 80a0dac:	490d      	ldr	r1, [pc, #52]	; (80a0de4 <_Z6getMCPv+0x104>)
 80a0dae:	f004 ff2d 	bl	80a5c0c <__aeabi_fdiv>
 80a0db2:	4680      	mov	r8, r0
 80a0db4:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a0db8:	f004 fe20 	bl	80a59fc <__aeabi_i2f>
 80a0dbc:	4601      	mov	r1, r0
 80a0dbe:	4640      	mov	r0, r8
 80a0dc0:	f004 fe70 	bl	80a5aa4 <__aeabi_fmul>
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {
    for (int i = 4; i <= 8; i++)
 80a0dc4:	3401      	adds	r4, #1
 80a0dc6:	2c09      	cmp	r4, #9
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp2.SetConfiguration(i, 16, 1, 2);

      // Note that the library waits for a complete conversion
      Raw_adc[i - 1] = mcp2.readADC();
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a0dc8:	f845 0f04 	str.w	r0, [r5, #4]!
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {
    for (int i = 4; i <= 8; i++)
 80a0dcc:	d1dc      	bne.n	80a0d88 <_Z6getMCPv+0xa8>
    }
    //calibration/linearizatiom
    //CALIBRATION
    // correct zero offset error
  }
}
 80a0dce:	b002      	add	sp, #8
 80a0dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0dd4:	20000214 	.word	0x20000214
 80a0dd8:	2000013c 	.word	0x2000013c
 80a0ddc:	20000240 	.word	0x20000240
 80a0de0:	45b5a800 	.word	0x45b5a800
 80a0de4:	46b83200 	.word	0x46b83200
 80a0de8:	080a6098 	.word	0x080a6098
 80a0dec:	44160000 	.word	0x44160000
 80a0df0:	41700000 	.word	0x41700000
 80a0df4:	20000224 	.word	0x20000224
 80a0df8:	20000144 	.word	0x20000144
 80a0dfc:	080a60a0 	.word	0x080a60a0
 80a0e00:	20000248 	.word	0x20000248

080a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0e04:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0e06:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0e08:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0e0a:	b17c      	cbz	r4, 80a0e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0e0c:	6863      	ldr	r3, [r4, #4]
 80a0e0e:	3b01      	subs	r3, #1
 80a0e10:	6063      	str	r3, [r4, #4]
 80a0e12:	b95b      	cbnz	r3, 80a0e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0e14:	6823      	ldr	r3, [r4, #0]
 80a0e16:	4620      	mov	r0, r4
 80a0e18:	689b      	ldr	r3, [r3, #8]
 80a0e1a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0e1c:	68a3      	ldr	r3, [r4, #8]
 80a0e1e:	3b01      	subs	r3, #1
 80a0e20:	60a3      	str	r3, [r4, #8]
 80a0e22:	b91b      	cbnz	r3, 80a0e2c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0e24:	6823      	ldr	r3, [r4, #0]
 80a0e26:	4620      	mov	r0, r4
 80a0e28:	68db      	ldr	r3, [r3, #12]
 80a0e2a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0e2c:	4628      	mov	r0, r5
 80a0e2e:	bd38      	pop	{r3, r4, r5, pc}

080a0e30 <_Z11publishDatav>:
  }
  return _temp;
}

void publishData()
{
 80a0e30:	b510      	push	{r4, lr}
  char szInfo[200];
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
           celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9], celsius[10], celsius[11]);
 80a0e32:	4c29      	ldr	r4, [pc, #164]	; (80a0ed8 <_Z11publishDatav+0xa8>)
  }
  return _temp;
}

void publishData()
{
 80a0e34:	b0cc      	sub	sp, #304	; 0x130
  char szInfo[200];
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
           celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9], celsius[10], celsius[11]);
 80a0e36:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a0e38:	f004 f98a 	bl	80a5150 <__aeabi_f2d>
 80a0e3c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80a0e40:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a0e42:	f004 f985 	bl	80a5150 <__aeabi_f2d>
 80a0e46:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80a0e4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a0e4c:	f004 f980 	bl	80a5150 <__aeabi_f2d>
 80a0e50:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80a0e54:	6a20      	ldr	r0, [r4, #32]
 80a0e56:	f004 f97b 	bl	80a5150 <__aeabi_f2d>
 80a0e5a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80a0e5e:	69e0      	ldr	r0, [r4, #28]
 80a0e60:	f004 f976 	bl	80a5150 <__aeabi_f2d>
 80a0e64:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a0e68:	69a0      	ldr	r0, [r4, #24]
 80a0e6a:	f004 f971 	bl	80a5150 <__aeabi_f2d>
 80a0e6e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a0e72:	6960      	ldr	r0, [r4, #20]
 80a0e74:	f004 f96c 	bl	80a5150 <__aeabi_f2d>
 80a0e78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a0e7c:	6920      	ldr	r0, [r4, #16]
 80a0e7e:	f004 f967 	bl	80a5150 <__aeabi_f2d>
 80a0e82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a0e86:	68e0      	ldr	r0, [r4, #12]
 80a0e88:	f004 f962 	bl	80a5150 <__aeabi_f2d>
 80a0e8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a0e90:	68a0      	ldr	r0, [r4, #8]
 80a0e92:	f004 f95d 	bl	80a5150 <__aeabi_f2d>
 80a0e96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0e9a:	6860      	ldr	r0, [r4, #4]
 80a0e9c:	f004 f958 	bl	80a5150 <__aeabi_f2d>
 80a0ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0ea4:	6820      	ldr	r0, [r4, #0]
 80a0ea6:	f004 f953 	bl	80a5150 <__aeabi_f2d>
 80a0eaa:	4a0c      	ldr	r2, [pc, #48]	; (80a0edc <_Z11publishDatav+0xac>)
 80a0eac:	e9cd 0100 	strd	r0, r1, [sp]
 80a0eb0:	21c8      	movs	r1, #200	; 0xc8
 80a0eb2:	a81a      	add	r0, sp, #104	; 0x68
 80a0eb4:	f001 fe22 	bl	80a2afc <snprintf>
 80a0eb8:	4b09      	ldr	r3, [pc, #36]	; (80a0ee0 <_Z11publishDatav+0xb0>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a0eba:	aa1a      	add	r2, sp, #104	; 0x68
 80a0ebc:	781b      	ldrb	r3, [r3, #0]
 80a0ebe:	4909      	ldr	r1, [pc, #36]	; (80a0ee4 <_Z11publishDatav+0xb4>)
 80a0ec0:	f88d 3000 	strb.w	r3, [sp]
 80a0ec4:	a818      	add	r0, sp, #96	; 0x60
 80a0ec6:	233c      	movs	r3, #60	; 0x3c
 80a0ec8:	f002 fdf2 	bl	80a3ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0ecc:	a819      	add	r0, sp, #100	; 0x64
 80a0ece:	f7ff ff99 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorAddresses[4], sensorAddresses[5], sensorAddresses[6], sensorAddresses[7], sensorAddresses[8],sensorAddresses[9],sensorAddresses[10],sensorAddresses[11]);
    Particle.publish("dsAddress", szInfo, PRIVATE);
  
  }
  */ 
}
 80a0ed2:	b04c      	add	sp, #304	; 0x130
 80a0ed4:	bd10      	pop	{r4, pc}
 80a0ed6:	bf00      	nop
 80a0ed8:	20000000 	.word	0x20000000
 80a0edc:	080a61ff 	.word	0x080a61ff
 80a0ee0:	200000d4 	.word	0x200000d4
 80a0ee4:	080a623b 	.word	0x080a623b

080a0ee8 <_Z15publishPressurev>:

 void publishPressure()
{
 80a0ee8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
 80a0eec:	4c2a      	ldr	r4, [pc, #168]	; (80a0f98 <_Z15publishPressurev+0xb0>)
  }
  */ 
}

 void publishPressure()
{
 80a0eee:	b0c5      	sub	sp, #276	; 0x114
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
 80a0ef0:	2102      	movs	r1, #2
 80a0ef2:	4620      	mov	r0, r4
 80a0ef4:	f000 fe2b 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
  d12= damper.getVal(damper1_2);
 80a0ef8:	2103      	movs	r1, #3

 void publishPressure()
{
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
 80a0efa:	4605      	mov	r5, r0
  d12= damper.getVal(damper1_2);
 80a0efc:	4620      	mov	r0, r4
 80a0efe:	f000 fe26 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
  d21= damper.getVal(damper2_1);
 80a0f02:	2100      	movs	r1, #0
 void publishPressure()
{
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
 80a0f04:	4606      	mov	r6, r0
  d21= damper.getVal(damper2_1);
 80a0f06:	4620      	mov	r0, r4
 80a0f08:	f000 fe21 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
  d22= damper.getVal(damper2_2);
 80a0f0c:	2101      	movs	r1, #1
{
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
  d21= damper.getVal(damper2_1);
 80a0f0e:	4607      	mov	r7, r0
  d22= damper.getVal(damper2_2);
 80a0f10:	4620      	mov	r0, r4
 80a0f12:	f000 fe1c 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
  tx1= damper.getVal(txv1);
 80a0f16:	2104      	movs	r1, #4
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
  d21= damper.getVal(damper2_1);
  d22= damper.getVal(damper2_2);
 80a0f18:	4680      	mov	r8, r0
  tx1= damper.getVal(txv1);
 80a0f1a:	4620      	mov	r0, r4
 80a0f1c:	f000 fe17 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
  tx2= damper.getVal(txv2);    
 80a0f20:	2108      	movs	r1, #8
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
  d21= damper.getVal(damper2_1);
  d22= damper.getVal(damper2_2);
  tx1= damper.getVal(txv1);
 80a0f22:	4681      	mov	r9, r0
  tx2= damper.getVal(txv2);    
 80a0f24:	4620      	mov	r0, r4
 80a0f26:	f000 fe12 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
  //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
  // Particle.publish("dsAnalogin",szInfo, PRIVATE );
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%4d&%4d&%4d&%4d&%4d&%4d", psi[0], psi[1], psi[2], psi[3], psi[4], d11, d12, d21, d22, tx1,tx2);
 80a0f2a:	4c1c      	ldr	r4, [pc, #112]	; (80a0f9c <_Z15publishPressurev+0xb4>)
 80a0f2c:	900f      	str	r0, [sp, #60]	; 0x3c
 80a0f2e:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80a0f32:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80a0f36:	970c      	str	r7, [sp, #48]	; 0x30
 80a0f38:	960b      	str	r6, [sp, #44]	; 0x2c
 80a0f3a:	950a      	str	r5, [sp, #40]	; 0x28
 80a0f3c:	6920      	ldr	r0, [r4, #16]
 80a0f3e:	f004 f907 	bl	80a5150 <__aeabi_f2d>
 80a0f42:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a0f46:	68e0      	ldr	r0, [r4, #12]
 80a0f48:	f004 f902 	bl	80a5150 <__aeabi_f2d>
 80a0f4c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a0f50:	68a0      	ldr	r0, [r4, #8]
 80a0f52:	f004 f8fd 	bl	80a5150 <__aeabi_f2d>
 80a0f56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a0f5a:	6860      	ldr	r0, [r4, #4]
 80a0f5c:	f004 f8f8 	bl	80a5150 <__aeabi_f2d>
 80a0f60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a0f64:	6820      	ldr	r0, [r4, #0]
 80a0f66:	f004 f8f3 	bl	80a5150 <__aeabi_f2d>
 80a0f6a:	4a0d      	ldr	r2, [pc, #52]	; (80a0fa0 <_Z15publishPressurev+0xb8>)
 80a0f6c:	e9cd 0100 	strd	r0, r1, [sp]
 80a0f70:	21c8      	movs	r1, #200	; 0xc8
 80a0f72:	a812      	add	r0, sp, #72	; 0x48
 80a0f74:	f001 fdc2 	bl	80a2afc <snprintf>
 80a0f78:	4b0a      	ldr	r3, [pc, #40]	; (80a0fa4 <_Z15publishPressurev+0xbc>)
 80a0f7a:	aa12      	add	r2, sp, #72	; 0x48
 80a0f7c:	781b      	ldrb	r3, [r3, #0]
 80a0f7e:	490a      	ldr	r1, [pc, #40]	; (80a0fa8 <_Z15publishPressurev+0xc0>)
 80a0f80:	f88d 3000 	strb.w	r3, [sp]
 80a0f84:	a810      	add	r0, sp, #64	; 0x40
 80a0f86:	233c      	movs	r3, #60	; 0x3c
 80a0f88:	f002 fd92 	bl	80a3ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a0f8c:	a811      	add	r0, sp, #68	; 0x44
 80a0f8e:	f7ff ff39 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("ds_psi", szInfo, PRIVATE);
}
 80a0f92:	b045      	add	sp, #276	; 0x114
 80a0f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0f98:	200001f0 	.word	0x200001f0
 80a0f9c:	20000240 	.word	0x20000240
 80a0fa0:	080a6243 	.word	0x080a6243
 80a0fa4:	200000d4 	.word	0x200000d4
 80a0fa8:	080a6274 	.word	0x080a6274
 80a0fac:	00000000 	.word	0x00000000

080a0fb0 <loop>:
  Wire.endTransmission();
  toggle = !toggle;
}

void loop()
{
 80a0fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  static uint32_t msModulateDamper = 0;
  static uint32_t msReverse1 = 0;
  static uint32_t msReverse2 = 0;
  static uint32_t now;

   if (MQTTclient1.isConnected())  MQTTclient1.loop();
 80a0fb4:	4848      	ldr	r0, [pc, #288]	; (80a10d8 <loop+0x128>)
  Wire.endTransmission();
  toggle = !toggle;
}

void loop()
{
 80a0fb6:	b088      	sub	sp, #32
  static uint32_t msModulateDamper = 0;
  static uint32_t msReverse1 = 0;
  static uint32_t msReverse2 = 0;
  static uint32_t now;

   if (MQTTclient1.isConnected())  MQTTclient1.loop();
 80a0fb8:	f001 f855 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a0fbc:	b110      	cbz	r0, 80a0fc4 <loop+0x14>
 80a0fbe:	4846      	ldr	r0, [pc, #280]	; (80a10d8 <loop+0x128>)
 80a0fc0:	f001 f9da 	bl	80a2378 <_ZN4MQTT4loopEv>
 80a0fc4:	f001 fb7c 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>

  now = millis();

  if (msDefrost1 == 0)
 80a0fc8:	4e44      	ldr	r6, [pc, #272]	; (80a10dc <loop+0x12c>)
  static uint32_t msReverse2 = 0;
  static uint32_t now;

   if (MQTTclient1.isConnected())  MQTTclient1.loop();

  now = millis();
 80a0fca:	4c45      	ldr	r4, [pc, #276]	; (80a10e0 <loop+0x130>)

  if (msDefrost1 == 0)
 80a0fcc:	6833      	ldr	r3, [r6, #0]
 80a0fce:	4607      	mov	r7, r0
  static uint32_t msReverse2 = 0;
  static uint32_t now;

   if (MQTTclient1.isConnected())  MQTTclient1.loop();

  now = millis();
 80a0fd0:	6020      	str	r0, [r4, #0]

  if (msDefrost1 == 0)
 80a0fd2:	b94b      	cbnz	r3, 80a0fe8 <loop+0x38>
    msDefrost1 = now + defrostTimer * 0.3;
 80a0fd4:	f004 f89a 	bl	80a510c <__aeabi_ui2d>
 80a0fd8:	a33b      	add	r3, pc, #236	; (adr r3, 80a10c8 <loop+0x118>)
 80a0fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0fde:	f003 ff59 	bl	80a4e94 <__adddf3>
 80a0fe2:	f004 fbe1 	bl	80a57a8 <__aeabi_d2uiz>
 80a0fe6:	6030      	str	r0, [r6, #0]

  if (msDefrost2 == 0)
 80a0fe8:	4d3e      	ldr	r5, [pc, #248]	; (80a10e4 <loop+0x134>)
 80a0fea:	682b      	ldr	r3, [r5, #0]
 80a0fec:	b953      	cbnz	r3, 80a1004 <loop+0x54>
    msDefrost2 = now + defrostTimer * 0.6;
 80a0fee:	4638      	mov	r0, r7
 80a0ff0:	f004 f88c 	bl	80a510c <__aeabi_ui2d>
 80a0ff4:	a336      	add	r3, pc, #216	; (adr r3, 80a10d0 <loop+0x120>)
 80a0ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0ffa:	f003 ff4b 	bl	80a4e94 <__adddf3>
 80a0ffe:	f004 fbd3 	bl	80a57a8 <__aeabi_d2uiz>
 80a1002:	6028      	str	r0, [r5, #0]

  wd.checkin();

  if (psi[0] > 525)
 80a1004:	4f38      	ldr	r7, [pc, #224]	; (80a10e8 <loop+0x138>)
    msDefrost1 = now + defrostTimer * 0.3;

  if (msDefrost2 == 0)
    msDefrost2 = now + defrostTimer * 0.6;

  wd.checkin();
 80a1006:	f7ff f8cd 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>

  if (psi[0] > 525)
 80a100a:	4938      	ldr	r1, [pc, #224]	; (80a10ec <loop+0x13c>)
 80a100c:	6838      	ldr	r0, [r7, #0]
 80a100e:	f004 ff05 	bl	80a5e1c <__aeabi_fcmpgt>
 80a1012:	b110      	cbz	r0, 80a101a <loop+0x6a>
    turnOffRelay(RelayCompr2);
 80a1014:	2008      	movs	r0, #8
 80a1016:	f7ff fbde 	bl	80a07d6 <_Z12turnOffRelayi>
  if (psi[4] > 525)
 80a101a:	4934      	ldr	r1, [pc, #208]	; (80a10ec <loop+0x13c>)
 80a101c:	6938      	ldr	r0, [r7, #16]
 80a101e:	f004 fefd 	bl	80a5e1c <__aeabi_fcmpgt>
 80a1022:	b110      	cbz	r0, 80a102a <loop+0x7a>
    turnOffRelay(RelayCompr1);
 80a1024:	2001      	movs	r0, #1
 80a1026:	f7ff fbd6 	bl	80a07d6 <_Z12turnOffRelayi>


  if (now - msRelaySample >= msRelaySampleTime)
 80a102a:	4f31      	ldr	r7, [pc, #196]	; (80a10f0 <loop+0x140>)
 80a102c:	6823      	ldr	r3, [r4, #0]
 80a102e:	683a      	ldr	r2, [r7, #0]
 80a1030:	1a9b      	subs	r3, r3, r2
 80a1032:	f240 726b 	movw	r2, #1899	; 0x76b
 80a1036:	4293      	cmp	r3, r2
 80a1038:	d902      	bls.n	80a1040 <loop+0x90>
 80a103a:	f001 fb41 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
  {
    msRelaySample = millis();
 80a103e:	6038      	str	r0, [r7, #0]
  }

  if (now - msDefrost1 >= defrostTimer) 
 80a1040:	6823      	ldr	r3, [r4, #0]
 80a1042:	6832      	ldr	r2, [r6, #0]
 80a1044:	1a9a      	subs	r2, r3, r2
 80a1046:	4b2b      	ldr	r3, [pc, #172]	; (80a10f4 <loop+0x144>)
 80a1048:	429a      	cmp	r2, r3
 80a104a:	461f      	mov	r7, r3
 80a104c:	d912      	bls.n	80a1074 <loop+0xc4>
  {
    if (celsius[0] < 0.0)
 80a104e:	4b2a      	ldr	r3, [pc, #168]	; (80a10f8 <loop+0x148>)
 80a1050:	2100      	movs	r1, #0
 80a1052:	6818      	ldr	r0, [r3, #0]
 80a1054:	f004 fec4 	bl	80a5de0 <__aeabi_fcmplt>
 80a1058:	b148      	cbz	r0, 80a106e <loop+0xbe>
      cmdDefrost1("4");
 80a105a:	4928      	ldr	r1, [pc, #160]	; (80a10fc <loop+0x14c>)
 80a105c:	a804      	add	r0, sp, #16
 80a105e:	f002 f8b4 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a1062:	a804      	add	r0, sp, #16
 80a1064:	f7ff f83a 	bl	80a00dc <_Z11cmdDefrost16String>
 80a1068:	a804      	add	r0, sp, #16
 80a106a:	f002 f867 	bl	80a313c <_ZN6StringD1Ev>
 80a106e:	f001 fb27 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    msDefrost1 = millis();
 80a1072:	6030      	str	r0, [r6, #0]
  }

  if (now - msDefrost2 >= defrostTimer)
 80a1074:	6823      	ldr	r3, [r4, #0]
 80a1076:	682a      	ldr	r2, [r5, #0]
 80a1078:	1a9b      	subs	r3, r3, r2
 80a107a:	42bb      	cmp	r3, r7
 80a107c:	d912      	bls.n	80a10a4 <loop+0xf4>
  {
    if (celsius[2] < 0.0)
 80a107e:	4b1e      	ldr	r3, [pc, #120]	; (80a10f8 <loop+0x148>)
 80a1080:	2100      	movs	r1, #0
 80a1082:	6898      	ldr	r0, [r3, #8]
 80a1084:	f004 feac 	bl	80a5de0 <__aeabi_fcmplt>
 80a1088:	b148      	cbz	r0, 80a109e <loop+0xee>
      cmdDefrost2("4");
 80a108a:	491c      	ldr	r1, [pc, #112]	; (80a10fc <loop+0x14c>)
 80a108c:	a804      	add	r0, sp, #16
 80a108e:	f002 f89c 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a1092:	a804      	add	r0, sp, #16
 80a1094:	f7ff f82a 	bl	80a00ec <_Z11cmdDefrost26String>
 80a1098:	a804      	add	r0, sp, #16
 80a109a:	f002 f84f 	bl	80a313c <_ZN6StringD1Ev>
 80a109e:	f001 fb0f 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    msDefrost2 = millis();
 80a10a2:	6028      	str	r0, [r5, #0]
  }


  if (now - msMQTTConnectCheck >= MQTTConnectCheckTimer){
 80a10a4:	4b16      	ldr	r3, [pc, #88]	; (80a1100 <loop+0x150>)
 80a10a6:	6822      	ldr	r2, [r4, #0]
 80a10a8:	6819      	ldr	r1, [r3, #0]
 80a10aa:	461d      	mov	r5, r3
 80a10ac:	1a52      	subs	r2, r2, r1
 80a10ae:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a10b2:	d32e      	bcc.n	80a1112 <loop+0x162>

    if (!MQTTclient1.isConnected())  {   //cloud connect
 80a10b4:	4808      	ldr	r0, [pc, #32]	; (80a10d8 <loop+0x128>)
 80a10b6:	f000 ffd6 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a10ba:	bb18      	cbnz	r0, 80a1104 <loop+0x154>
          MQTTConnect1();
 80a10bc:	f7ff f8d0 	bl	80a0260 <_Z12MQTTConnect1v>
 80a10c0:	e024      	b.n	80a110c <loop+0x15c>
 80a10c2:	bf00      	nop
 80a10c4:	f3af 8000 	nop.w
 80a10c8:	00000000 	.word	0x00000000
 80a10cc:	4125f900 	.word	0x4125f900
 80a10d0:	00000000 	.word	0x00000000
 80a10d4:	4135f900 	.word	0x4135f900
 80a10d8:	20000170 	.word	0x20000170
 80a10dc:	200001e8 	.word	0x200001e8
 80a10e0:	2000016c 	.word	0x2000016c
 80a10e4:	200001ec 	.word	0x200001ec
 80a10e8:	20000240 	.word	0x20000240
 80a10ec:	44034000 	.word	0x44034000
 80a10f0:	20000130 	.word	0x20000130
 80a10f4:	00249eff 	.word	0x00249eff
 80a10f8:	20000000 	.word	0x20000000
 80a10fc:	080a627b 	.word	0x080a627b
 80a1100:	200000ac 	.word	0x200000ac
    } else {
        digitalWrite(MQTT_LED, HIGH);
 80a1104:	2101      	movs	r1, #1
 80a1106:	2007      	movs	r0, #7
 80a1108:	f003 f999 	bl	80a443e <digitalWrite>
 80a110c:	f001 fad8 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
               
    }
    msMQTTConnectCheck = millis();
 80a1110:	6028      	str	r0, [r5, #0]
  }


  if (now - msTempSample >= msTempSampleTime)
 80a1112:	4d83      	ldr	r5, [pc, #524]	; (80a1320 <loop+0x370>)
 80a1114:	6823      	ldr	r3, [r4, #0]
 80a1116:	682a      	ldr	r2, [r5, #0]
 80a1118:	1a9b      	subs	r3, r3, r2
 80a111a:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a111e:	4293      	cmp	r3, r2
 80a1120:	f240 80fb 	bls.w	80a131a <loop+0x36a>
  {
    if (!HaltTemp)
 80a1124:	4b7f      	ldr	r3, [pc, #508]	; (80a1324 <loop+0x374>)
 80a1126:	781b      	ldrb	r3, [r3, #0]
 80a1128:	b913      	cbnz	r3, 80a1130 <loop+0x180>
 80a112a:	f001 fac9 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    msTempSample = millis();
 80a112e:	6028      	str	r0, [r5, #0]
 80a1130:	f8df a230 	ldr.w	sl, [pc, #560]	; 80a1364 <loop+0x3b4>
    {
      for (int i = 0; i < nSENSORS; i++)
      {
        temp = getTemp(sensorAddresses[i]);
 80a1134:	4f7c      	ldr	r7, [pc, #496]	; (80a1328 <loop+0x378>)
        }
        else
        {
          temp = getTemp(sensorAddresses[i]);
          if (!isnan(temp))
            celsius[i] = temp;
 80a1136:	f8df 8230 	ldr.w	r8, [pc, #560]	; 80a1368 <loop+0x3b8>
  Wire.endTransmission();
  toggle = !toggle;
}

void loop()
{
 80a113a:	2500      	movs	r5, #0
 80a113c:	eb0a 09c5 	add.w	r9, sl, r5, lsl #3
    if (!HaltTemp)
    msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
      {
        temp = getTemp(sensorAddresses[i]);
 80a1140:	4648      	mov	r0, r9
 80a1142:	f7ff fa03 	bl	80a054c <_Z7getTempPh>
 80a1146:	f004 fb4f 	bl	80a57e8 <__aeabi_d2f>
 80a114a:	6038      	str	r0, [r7, #0]

        if (!isnan(temp))
 80a114c:	4601      	mov	r1, r0
    if (!HaltTemp)
    msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
      {
        temp = getTemp(sensorAddresses[i]);
 80a114e:	4606      	mov	r6, r0

        if (!isnan(temp))
 80a1150:	f004 fe6e 	bl	80a5e30 <__aeabi_fcmpun>
 80a1154:	b150      	cbz	r0, 80a116c <loop+0x1bc>
        {
          celsius[i] = temp;
        }
        else
        {
          temp = getTemp(sensorAddresses[i]);
 80a1156:	4648      	mov	r0, r9
 80a1158:	f7ff f9f8 	bl	80a054c <_Z7getTempPh>
 80a115c:	f004 fb44 	bl	80a57e8 <__aeabi_d2f>
 80a1160:	6038      	str	r0, [r7, #0]
          if (!isnan(temp))
 80a1162:	4601      	mov	r1, r0
        {
          celsius[i] = temp;
        }
        else
        {
          temp = getTemp(sensorAddresses[i]);
 80a1164:	4606      	mov	r6, r0
          if (!isnan(temp))
 80a1166:	f004 fe63 	bl	80a5e30 <__aeabi_fcmpun>
 80a116a:	b908      	cbnz	r0, 80a1170 <loop+0x1c0>
            celsius[i] = temp;
 80a116c:	f848 6025 	str.w	r6, [r8, r5, lsl #2]
  if (now - msTempSample >= msTempSampleTime)
  {
    if (!HaltTemp)
    msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
 80a1170:	3501      	adds	r5, #1
          temp = getTemp(sensorAddresses[i]);
          if (!isnan(temp))
            celsius[i] = temp;
        }

        wd.checkin();
 80a1172:	f7ff f817 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
  if (now - msTempSample >= msTempSampleTime)
  {
    if (!HaltTemp)
    msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
 80a1176:	2d0c      	cmp	r5, #12
 80a1178:	d1e0      	bne.n	80a113c <loop+0x18c>
        wd.checkin();
      }
  
  }

  if (now - msPressureSample >= msPressureSampleTime)
 80a117a:	4d6c      	ldr	r5, [pc, #432]	; (80a132c <loop+0x37c>)
 80a117c:	6823      	ldr	r3, [r4, #0]
 80a117e:	682a      	ldr	r2, [r5, #0]
 80a1180:	1a9b      	subs	r3, r3, r2
 80a1182:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a1186:	d30a      	bcc.n	80a119e <loop+0x1ee>
  {
    getMCP();
 80a1188:	f7ff fdaa 	bl	80a0ce0 <_Z6getMCPv>
 80a118c:	f001 fa98 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    msPressureSample = millis();
 80a1190:	6028      	str	r0, [r5, #0]
 80a1192:	f001 fa95 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
 80a1196:	f001 fa93 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    msReverse1 = millis() - msStartReverse1;
    msReverse2 = millis() - msStartReverse2;

    wd.checkin();
 80a119a:	f7ff f803 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
      //  if ( (psi[0]>300)) {
      cmdStopDefrost2("OFF");
    } */
  }

  if (DefrostLevel1) PerformDefrost1();
 80a119e:	4b64      	ldr	r3, [pc, #400]	; (80a1330 <loop+0x380>)
 80a11a0:	681b      	ldr	r3, [r3, #0]
 80a11a2:	b10b      	cbz	r3, 80a11a8 <loop+0x1f8>
 80a11a4:	f7ff fbe4 	bl	80a0970 <_Z15PerformDefrost1v>
  if (DefrostLevel2) PerformDefrost2();
 80a11a8:	4b62      	ldr	r3, [pc, #392]	; (80a1334 <loop+0x384>)
 80a11aa:	681b      	ldr	r3, [r3, #0]
 80a11ac:	b10b      	cbz	r3, 80a11b2 <loop+0x202>
 80a11ae:	f7ff fb15 	bl	80a07dc <_Z15PerformDefrost2v>

  if (now - msPublish2 >= msPublishTime2)
 80a11b2:	4d61      	ldr	r5, [pc, #388]	; (80a1338 <loop+0x388>)
 80a11b4:	6823      	ldr	r3, [r4, #0]
 80a11b6:	682a      	ldr	r2, [r5, #0]
 80a11b8:	1a9b      	subs	r3, r3, r2
 80a11ba:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a11be:	4293      	cmp	r3, r2
 80a11c0:	f240 8093 	bls.w	80a12ea <loop+0x33a>
 80a11c4:	f001 fa7c 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
  {
    msPublish2 = millis();
 80a11c8:	6028      	str	r0, [r5, #0]
    publishPressure();
 80a11ca:	f7ff fe8d 	bl	80a0ee8 <_Z15publishPressurev>
    wd.checkin();
 80a11ce:	f7fe ffe9 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
    MQTTpublish("damper1_1",  String(damper.getVal(damper1_1), DEC));
 80a11d2:	495a      	ldr	r1, [pc, #360]	; (80a133c <loop+0x38c>)
 80a11d4:	a804      	add	r0, sp, #16
 80a11d6:	f001 fff8 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a11da:	2102      	movs	r1, #2
 80a11dc:	4858      	ldr	r0, [pc, #352]	; (80a1340 <loop+0x390>)
 80a11de:	f000 fcb6 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a11e2:	220a      	movs	r2, #10
 80a11e4:	4601      	mov	r1, r0
 80a11e6:	4668      	mov	r0, sp
 80a11e8:	f002 f82d 	bl	80a3246 <_ZN6StringC1Eih>
 80a11ec:	9900      	ldr	r1, [sp, #0]
 80a11ee:	a804      	add	r0, sp, #16
 80a11f0:	f7ff f88c 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a11f4:	4668      	mov	r0, sp
 80a11f6:	f001 ffa1 	bl	80a313c <_ZN6StringD1Ev>
 80a11fa:	a804      	add	r0, sp, #16
 80a11fc:	f001 ff9e 	bl	80a313c <_ZN6StringD1Ev>
    MQTTpublish("damper1_2",  String(damper.getVal(damper1_2), DEC));
 80a1200:	4950      	ldr	r1, [pc, #320]	; (80a1344 <loop+0x394>)
 80a1202:	a804      	add	r0, sp, #16
 80a1204:	f001 ffe1 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a1208:	2103      	movs	r1, #3
 80a120a:	484d      	ldr	r0, [pc, #308]	; (80a1340 <loop+0x390>)
 80a120c:	f000 fc9f 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a1210:	220a      	movs	r2, #10
 80a1212:	4601      	mov	r1, r0
 80a1214:	4668      	mov	r0, sp
 80a1216:	f002 f816 	bl	80a3246 <_ZN6StringC1Eih>
 80a121a:	9900      	ldr	r1, [sp, #0]
 80a121c:	a804      	add	r0, sp, #16
 80a121e:	f7ff f875 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a1222:	4668      	mov	r0, sp
 80a1224:	f001 ff8a 	bl	80a313c <_ZN6StringD1Ev>
 80a1228:	a804      	add	r0, sp, #16
 80a122a:	f001 ff87 	bl	80a313c <_ZN6StringD1Ev>
    MQTTpublish("damper2_1",  String(damper.getVal(damper2_1), DEC));
 80a122e:	4946      	ldr	r1, [pc, #280]	; (80a1348 <loop+0x398>)
 80a1230:	a804      	add	r0, sp, #16
 80a1232:	f001 ffca 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a1236:	2100      	movs	r1, #0
 80a1238:	4841      	ldr	r0, [pc, #260]	; (80a1340 <loop+0x390>)
 80a123a:	f000 fc88 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a123e:	220a      	movs	r2, #10
 80a1240:	4601      	mov	r1, r0
 80a1242:	4668      	mov	r0, sp
 80a1244:	f001 ffff 	bl	80a3246 <_ZN6StringC1Eih>
 80a1248:	9900      	ldr	r1, [sp, #0]
 80a124a:	a804      	add	r0, sp, #16
 80a124c:	f7ff f85e 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a1250:	4668      	mov	r0, sp
 80a1252:	f001 ff73 	bl	80a313c <_ZN6StringD1Ev>
 80a1256:	a804      	add	r0, sp, #16
 80a1258:	f001 ff70 	bl	80a313c <_ZN6StringD1Ev>
    MQTTpublish("damper2_2",  String(damper.getVal(damper2_2), DEC));
 80a125c:	493b      	ldr	r1, [pc, #236]	; (80a134c <loop+0x39c>)
 80a125e:	a804      	add	r0, sp, #16
 80a1260:	f001 ffb3 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a1264:	2101      	movs	r1, #1
 80a1266:	4836      	ldr	r0, [pc, #216]	; (80a1340 <loop+0x390>)
 80a1268:	f000 fc71 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a126c:	220a      	movs	r2, #10
 80a126e:	4601      	mov	r1, r0
 80a1270:	4668      	mov	r0, sp
 80a1272:	f001 ffe8 	bl	80a3246 <_ZN6StringC1Eih>
 80a1276:	9900      	ldr	r1, [sp, #0]
 80a1278:	a804      	add	r0, sp, #16
 80a127a:	f7ff f847 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a127e:	4668      	mov	r0, sp
 80a1280:	f001 ff5c 	bl	80a313c <_ZN6StringD1Ev>
 80a1284:	a804      	add	r0, sp, #16
 80a1286:	f001 ff59 	bl	80a313c <_ZN6StringD1Ev>
    MQTTpublish("txv1",  String(damper.getVal(txv1), DEC));  
 80a128a:	4931      	ldr	r1, [pc, #196]	; (80a1350 <loop+0x3a0>)
 80a128c:	a804      	add	r0, sp, #16
 80a128e:	f001 ff9c 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a1292:	2104      	movs	r1, #4
 80a1294:	482a      	ldr	r0, [pc, #168]	; (80a1340 <loop+0x390>)
 80a1296:	f000 fc5a 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a129a:	220a      	movs	r2, #10
 80a129c:	4601      	mov	r1, r0
 80a129e:	4668      	mov	r0, sp
 80a12a0:	f001 ffd1 	bl	80a3246 <_ZN6StringC1Eih>
 80a12a4:	9900      	ldr	r1, [sp, #0]
 80a12a6:	a804      	add	r0, sp, #16
 80a12a8:	f7ff f830 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a12ac:	4668      	mov	r0, sp
 80a12ae:	f001 ff45 	bl	80a313c <_ZN6StringD1Ev>
 80a12b2:	a804      	add	r0, sp, #16
 80a12b4:	f001 ff42 	bl	80a313c <_ZN6StringD1Ev>
    MQTTpublish("txv2",  String(damper.getVal(txv2), DEC));
 80a12b8:	4926      	ldr	r1, [pc, #152]	; (80a1354 <loop+0x3a4>)
 80a12ba:	a804      	add	r0, sp, #16
 80a12bc:	f001 ff85 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a12c0:	2108      	movs	r1, #8
 80a12c2:	481f      	ldr	r0, [pc, #124]	; (80a1340 <loop+0x390>)
 80a12c4:	f000 fc43 	bl	80a1b4e <_ZN16Adafruit_PCA96856getValEh>
 80a12c8:	220a      	movs	r2, #10
 80a12ca:	4601      	mov	r1, r0
 80a12cc:	4668      	mov	r0, sp
 80a12ce:	f001 ffba 	bl	80a3246 <_ZN6StringC1Eih>
 80a12d2:	9900      	ldr	r1, [sp, #0]
 80a12d4:	a804      	add	r0, sp, #16
 80a12d6:	f7ff f819 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a12da:	4668      	mov	r0, sp
 80a12dc:	f001 ff2e 	bl	80a313c <_ZN6StringD1Ev>
 80a12e0:	a804      	add	r0, sp, #16
 80a12e2:	f001 ff2b 	bl	80a313c <_ZN6StringD1Ev>
  
    publishStatus();
 80a12e6:	f7ff f94f 	bl	80a0588 <_Z13publishStatusv>
    //publishDebug();
  }

  if (now - msModulateDamper >= msModulateDamperTime)
 80a12ea:	4d1b      	ldr	r5, [pc, #108]	; (80a1358 <loop+0x3a8>)
 80a12ec:	6823      	ldr	r3, [r4, #0]
 80a12ee:	682a      	ldr	r2, [r5, #0]
 80a12f0:	1a9b      	subs	r3, r3, r2
 80a12f2:	4a1a      	ldr	r2, [pc, #104]	; (80a135c <loop+0x3ac>)
 80a12f4:	4293      	cmp	r3, r2
 80a12f6:	d902      	bls.n	80a12fe <loop+0x34e>
 80a12f8:	f001 f9e2 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
  {
    msModulateDamper = millis();
 80a12fc:	6028      	str	r0, [r5, #0]
  //  ModulateDamper(damper2_1 ,1200, 3200, 100);
  //  ModulateDamper(damper2_2 ,1500, 3200, 100);
  //
  }

  if (now - msPublish >= msPublishTime)
 80a12fe:	4d18      	ldr	r5, [pc, #96]	; (80a1360 <loop+0x3b0>)
 80a1300:	6823      	ldr	r3, [r4, #0]
 80a1302:	682a      	ldr	r2, [r5, #0]
 80a1304:	1a9b      	subs	r3, r3, r2
 80a1306:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80a130a:	d304      	bcc.n	80a1316 <loop+0x366>
  {
    publishData();
 80a130c:	f7ff fd90 	bl	80a0e30 <_Z11publishDatav>
 80a1310:	f001 f9d6 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    //ModulateDamper();
    msPublish = millis();
 80a1314:	6028      	str	r0, [r5, #0]
  }
  wd.checkin(); // resets the AWDT count
 80a1316:	f7fe ff45 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
 }
}
 80a131a:	b008      	add	sp, #32
 80a131c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a1320:	20000280 	.word	0x20000280
 80a1324:	20000162 	.word	0x20000162
 80a1328:	2000023c 	.word	0x2000023c
 80a132c:	200000cc 	.word	0x200000cc
 80a1330:	20000234 	.word	0x20000234
 80a1334:	20000238 	.word	0x20000238
 80a1338:	200001e0 	.word	0x200001e0
 80a133c:	080a6122 	.word	0x080a6122
 80a1340:	200001f0 	.word	0x200001f0
 80a1344:	080a6139 	.word	0x080a6139
 80a1348:	080a6150 	.word	0x080a6150
 80a134c:	080a6167 	.word	0x080a6167
 80a1350:	080a627d 	.word	0x080a627d
 80a1354:	080a6282 	.word	0x080a6282
 80a1358:	200000f8 	.word	0x200000f8
 80a135c:	0001d4bf 	.word	0x0001d4bf
 80a1360:	20000164 	.word	0x20000164
 80a1364:	40024000 	.word	0x40024000
 80a1368:	20000000 	.word	0x20000000

080a136c <_GLOBAL__sub_I_msStartReverse1>:
{

  //relays.relayTalk(relayCmd(command));
  relays.relayTalk(command);
  return 1;
}
 80a136c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a1370:	4b30      	ldr	r3, [pc, #192]	; (80a1434 <_GLOBAL__sub_I_msStartReverse1+0xc8>)

// SYSTEM_THREAD(ENABLED);

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(30000, System.reset, 1024);
 80a1372:	4e31      	ldr	r6, [pc, #196]	; (80a1438 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a1374:	2501      	movs	r5, #1
 80a1376:	4c31      	ldr	r4, [pc, #196]	; (80a143c <_GLOBAL__sub_I_msStartReverse1+0xd0>)
 80a1378:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a137a:	f001 f941 	bl	80a2600 <HAL_Pin_Map>
 80a137e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80a1382:	4a2f      	ldr	r2, [pc, #188]	; (80a1440 <_GLOBAL__sub_I_msStartReverse1+0xd4>)
 80a1384:	f247 5130 	movw	r1, #30000	; 0x7530
 80a1388:	4630      	mov	r0, r6
 80a138a:	f7fe ff13 	bl	80a01b4 <_ZN19ApplicationWatchdogC1EjPFvvEj>


const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo; //[(1 * nSENSORS)+1];
 80a138e:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80a1480 <_GLOBAL__sub_I_msStartReverse1+0x114>

// SYSTEM_THREAD(ENABLED);

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(30000, System.reset, 1024);
 80a1392:	4630      	mov	r0, r6


const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo; //[(1 * nSENSORS)+1];
 80a1394:	4e2b      	ldr	r6, [pc, #172]	; (80a1444 <_GLOBAL__sub_I_msStartReverse1+0xd8>)

// SYSTEM_THREAD(ENABLED);

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
ApplicationWatchdog wd(30000, System.reset, 1024);
 80a1396:	4622      	mov	r2, r4
 80a1398:	492b      	ldr	r1, [pc, #172]	; (80a1448 <_GLOBAL__sub_I_msStartReverse1+0xdc>)
 80a139a:	f003 f907 	bl	80a45ac <__aeabi_atexit>


const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo; //[(1 * nSENSORS)+1];
 80a139e:	4f2b      	ldr	r7, [pc, #172]	; (80a144c <_GLOBAL__sub_I_msStartReverse1+0xe0>)
 80a13a0:	4641      	mov	r1, r8
 80a13a2:	4630      	mov	r0, r6
 80a13a4:	f001 ff11 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a13a8:	4630      	mov	r0, r6
String szInfo;
 80a13aa:	4e29      	ldr	r6, [pc, #164]	; (80a1450 <_GLOBAL__sub_I_msStartReverse1+0xe4>)


const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo; //[(1 * nSENSORS)+1];
 80a13ac:	4622      	mov	r2, r4
 80a13ae:	4639      	mov	r1, r7
 80a13b0:	f003 f8fc 	bl	80a45ac <__aeabi_atexit>
String szInfo;
 80a13b4:	4641      	mov	r1, r8
 80a13b6:	4630      	mov	r0, r6
 80a13b8:	f001 ff07 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
 80a13bc:	4630      	mov	r0, r6

DS18B20 ds18b20(pinOneWire);
 80a13be:	4e25      	ldr	r6, [pc, #148]	; (80a1454 <_GLOBAL__sub_I_msStartReverse1+0xe8>)

const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo; //[(1 * nSENSORS)+1];
String szInfo;
 80a13c0:	4622      	mov	r2, r4
 80a13c2:	4639      	mov	r1, r7
 80a13c4:	f003 f8f2 	bl	80a45ac <__aeabi_atexit>

DS18B20 ds18b20(pinOneWire);
 80a13c8:	2200      	movs	r2, #0
 80a13ca:	2104      	movs	r1, #4
 80a13cc:	4630      	mov	r0, r6
 80a13ce:	f000 fa13 	bl	80a17f8 <_ZN7DS18B20C1Etb>
 80a13d2:	4630      	mov	r0, r6
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428 mcp1(0x68);
 80a13d4:	4e20      	ldr	r6, [pc, #128]	; (80a1458 <_GLOBAL__sub_I_msStartReverse1+0xec>)
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo; //[(1 * nSENSORS)+1];
String szInfo;

DS18B20 ds18b20(pinOneWire);
 80a13d6:	4622      	mov	r2, r4
 80a13d8:	4920      	ldr	r1, [pc, #128]	; (80a145c <_GLOBAL__sub_I_msStartReverse1+0xf0>)
 80a13da:	f003 f8e7 	bl	80a45ac <__aeabi_atexit>
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428 mcp1(0x68);
 80a13de:	4f20      	ldr	r7, [pc, #128]	; (80a1460 <_GLOBAL__sub_I_msStartReverse1+0xf4>)
 80a13e0:	2168      	movs	r1, #104	; 0x68
 80a13e2:	4630      	mov	r0, r6
 80a13e4:	f000 fb00 	bl	80a19e8 <_ZN15CASARIA_MCP3428C1Eh>
 80a13e8:	4630      	mov	r0, r6
CASARIA_MCP3428 mcp2(0x6E);
 80a13ea:	4e1e      	ldr	r6, [pc, #120]	; (80a1464 <_GLOBAL__sub_I_msStartReverse1+0xf8>)
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428 mcp1(0x68);
 80a13ec:	4622      	mov	r2, r4
 80a13ee:	4639      	mov	r1, r7
 80a13f0:	f003 f8dc 	bl	80a45ac <__aeabi_atexit>
CASARIA_MCP3428 mcp2(0x6E);
 80a13f4:	216e      	movs	r1, #110	; 0x6e
 80a13f6:	4630      	mov	r0, r6
 80a13f8:	f000 faf6 	bl	80a19e8 <_ZN15CASARIA_MCP3428C1Eh>
 80a13fc:	4630      	mov	r0, r6


MQTT MQTTclient1("ccc.casaria.net", 1883, MQTTcallback1);
 80a13fe:	4e1a      	ldr	r6, [pc, #104]	; (80a1468 <_GLOBAL__sub_I_msStartReverse1+0xfc>)

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428 mcp1(0x68);
CASARIA_MCP3428 mcp2(0x6E);
 80a1400:	4622      	mov	r2, r4
 80a1402:	4639      	mov	r1, r7
 80a1404:	f003 f8d2 	bl	80a45ac <__aeabi_atexit>


MQTT MQTTclient1("ccc.casaria.net", 1883, MQTTcallback1);
 80a1408:	4b18      	ldr	r3, [pc, #96]	; (80a146c <_GLOBAL__sub_I_msStartReverse1+0x100>)
 80a140a:	f240 725b 	movw	r2, #1883	; 0x75b
 80a140e:	4918      	ldr	r1, [pc, #96]	; (80a1470 <_GLOBAL__sub_I_msStartReverse1+0x104>)
 80a1410:	4630      	mov	r0, r6
 80a1412:	f000 fd3f 	bl	80a1e94 <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a1416:	4622      	mov	r2, r4
 80a1418:	4916      	ldr	r1, [pc, #88]	; (80a1474 <_GLOBAL__sub_I_msStartReverse1+0x108>)
 80a141a:	4630      	mov	r0, r6
 80a141c:	f003 f8c6 	bl	80a45ac <__aeabi_atexit>



//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true); // Use the default address, but also turn on debugging
 80a1420:	462a      	mov	r2, r5
 80a1422:	2140      	movs	r1, #64	; 0x40
 80a1424:	4814      	ldr	r0, [pc, #80]	; (80a1478 <_GLOBAL__sub_I_msStartReverse1+0x10c>)
 80a1426:	f000 fb8f 	bl	80a1b48 <_ZN16Adafruit_PCA9685C1Ehb>
{

  //relays.relayTalk(relayCmd(command));
  relays.relayTalk(command);
  return 1;
}
 80a142a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true); // Use the default address, but also turn on debugging

CASARIA_MCP23017 relays; //not used
 80a142e:	4813      	ldr	r0, [pc, #76]	; (80a147c <_GLOBAL__sub_I_msStartReverse1+0x110>)
 80a1430:	f000 b9c4 	b.w	80a17bc <_ZN16CASARIA_MCP23017C1Ev>
 80a1434:	200000d4 	.word	0x200000d4
 80a1438:	200000b4 	.word	0x200000b4
 80a143c:	200000a4 	.word	0x200000a4
 80a1440:	080a2b95 	.word	0x080a2b95
 80a1444:	20000204 	.word	0x20000204
 80a1448:	080a0163 	.word	0x080a0163
 80a144c:	080a313d 	.word	0x080a313d
 80a1450:	200001d0 	.word	0x200001d0
 80a1454:	20000260 	.word	0x20000260
 80a1458:	20000214 	.word	0x20000214
 80a145c:	080a184f 	.word	0x080a184f
 80a1460:	080a1a01 	.word	0x080a1a01
 80a1464:	20000224 	.word	0x20000224
 80a1468:	20000170 	.word	0x20000170
 80a146c:	080a05f1 	.word	0x080a05f1
 80a1470:	080a6287 	.word	0x080a6287
 80a1474:	080a25d1 	.word	0x080a25d1
 80a1478:	200001f0 	.word	0x200001f0
 80a147c:	200000fc 	.word	0x200000fc
 80a1480:	080a645b 	.word	0x080a645b

080a1484 <_GLOBAL__sub_I_lastTime>:
 80a1484:	f001 b8bc 	b.w	80a2600 <HAL_Pin_Map>

080a1488 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a1488:	8802      	ldrh	r2, [r0, #0]
 80a148a:	231c      	movs	r3, #28
 80a148c:	4353      	muls	r3, r2
 80a148e:	6842      	ldr	r2, [r0, #4]
 80a1490:	18d1      	adds	r1, r2, r3
 80a1492:	58d3      	ldr	r3, [r2, r3]
 80a1494:	888a      	ldrh	r2, [r1, #4]
 80a1496:	835a      	strh	r2, [r3, #26]
 80a1498:	4770      	bx	lr

080a149a <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a149a:	b538      	push	{r3, r4, r5, lr}
 80a149c:	4604      	mov	r4, r0
 80a149e:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a14a0:	f001 f8ae 	bl	80a2600 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a14a4:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a14a6:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a14a8:	4628      	mov	r0, r5
 80a14aa:	f002 ffb7 	bl	80a441c <pinMode>
    _pin = pin;
 80a14ae:	8025      	strh	r5, [r4, #0]
}
 80a14b0:	4620      	mov	r0, r4
 80a14b2:	bd38      	pop	{r3, r4, r5, pc}

080a14b4 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a14b4:	b538      	push	{r3, r4, r5, lr}
 80a14b6:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a14b8:	f002 fdc4 	bl	80a4044 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a14bc:	2100      	movs	r1, #0
 80a14be:	8828      	ldrh	r0, [r5, #0]
 80a14c0:	f001 f8a6 	bl	80a2610 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a14c4:	f002 fdc0 	bl	80a4048 <_Z10interruptsv>
 80a14c8:	247d      	movs	r4, #125	; 0x7d
 80a14ca:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 80a14cc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a14d0:	d02d      	beq.n	80a152e <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a14d2:	2002      	movs	r0, #2
 80a14d4:	f001 f8ec 	bl	80a26b0 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a14d8:	8828      	ldrh	r0, [r5, #0]
 80a14da:	f001 f8b1 	bl	80a2640 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 80a14de:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a14e2:	d0f2      	beq.n	80a14ca <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 80a14e4:	f002 fdae 	bl	80a4044 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a14e8:	4628      	mov	r0, r5
 80a14ea:	f7ff ffcd 	bl	80a1488 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a14ee:	2101      	movs	r1, #1
 80a14f0:	8828      	ldrh	r0, [r5, #0]
 80a14f2:	f001 f88d 	bl	80a2610 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 80a14f6:	f002 fda7 	bl	80a4048 <_Z10interruptsv>
 80a14fa:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a14fe:	f001 f8d7 	bl	80a26b0 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 80a1502:	f002 fd9f 	bl	80a4044 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a1506:	2100      	movs	r1, #0
 80a1508:	8828      	ldrh	r0, [r5, #0]
 80a150a:	f001 f881 	bl	80a2610 <HAL_Pin_Mode>
 80a150e:	2046      	movs	r0, #70	; 0x46
 80a1510:	f001 f8ce 	bl	80a26b0 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a1514:	8828      	ldrh	r0, [r5, #0]
 80a1516:	f001 f893 	bl	80a2640 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a151a:	b2c0      	uxtb	r0, r0
 80a151c:	fab0 f480 	clz	r4, r0

    interrupts();
 80a1520:	f002 fd92 	bl	80a4048 <_Z10interruptsv>
 80a1524:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a1528:	0964      	lsrs	r4, r4, #5
 80a152a:	f001 f8c1 	bl	80a26b0 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 80a152e:	4620      	mov	r0, r4
 80a1530:	bd38      	pop	{r3, r4, r5, pc}

080a1532 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a1532:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a1534:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a1538:	4604      	mov	r4, r0
    if (v & 1) {
 80a153a:	d013      	beq.n	80a1564 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a153c:	f002 fd82 	bl	80a4044 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a1540:	4620      	mov	r0, r4
 80a1542:	f7ff ffa1 	bl	80a1488 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a1546:	2101      	movs	r1, #1
 80a1548:	8820      	ldrh	r0, [r4, #0]
 80a154a:	f001 f861 	bl	80a2610 <HAL_Pin_Mode>
 80a154e:	200a      	movs	r0, #10
 80a1550:	f001 f8ae 	bl	80a26b0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a1554:	8820      	ldrh	r0, [r4, #0]
 80a1556:	2100      	movs	r1, #0
 80a1558:	f001 f85a 	bl	80a2610 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80a155c:	f002 fd74 	bl	80a4048 <_Z10interruptsv>
 80a1560:	2037      	movs	r0, #55	; 0x37
 80a1562:	e012      	b.n	80a158a <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80a1564:	f002 fd6e 	bl	80a4044 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a1568:	4620      	mov	r0, r4
 80a156a:	f7ff ff8d 	bl	80a1488 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a156e:	2101      	movs	r1, #1
 80a1570:	8820      	ldrh	r0, [r4, #0]
 80a1572:	f001 f84d 	bl	80a2610 <HAL_Pin_Mode>
 80a1576:	2041      	movs	r0, #65	; 0x41
 80a1578:	f001 f89a 	bl	80a26b0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a157c:	8820      	ldrh	r0, [r4, #0]
 80a157e:	4629      	mov	r1, r5
 80a1580:	f001 f846 	bl	80a2610 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80a1584:	f002 fd60 	bl	80a4048 <_Z10interruptsv>
 80a1588:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80a158a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a158e:	f001 b88f 	b.w	80a26b0 <HAL_Delay_Microseconds>

080a1592 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a1592:	b510      	push	{r4, lr}
 80a1594:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80a1596:	f002 fd55 	bl	80a4044 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a159a:	4620      	mov	r0, r4
 80a159c:	f7ff ff74 	bl	80a1488 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a15a0:	2101      	movs	r1, #1
 80a15a2:	8820      	ldrh	r0, [r4, #0]
 80a15a4:	f001 f834 	bl	80a2610 <HAL_Pin_Mode>
 80a15a8:	2003      	movs	r0, #3
 80a15aa:	f001 f881 	bl	80a26b0 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a15ae:	2100      	movs	r1, #0
 80a15b0:	8820      	ldrh	r0, [r4, #0]
 80a15b2:	f001 f82d 	bl	80a2610 <HAL_Pin_Mode>
 80a15b6:	200a      	movs	r0, #10
 80a15b8:	f001 f87a 	bl	80a26b0 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a15bc:	8820      	ldrh	r0, [r4, #0]
 80a15be:	f001 f83f 	bl	80a2640 <HAL_GPIO_Read>
 80a15c2:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 80a15c4:	f002 fd40 	bl	80a4048 <_Z10interruptsv>
 80a15c8:	2035      	movs	r0, #53	; 0x35
 80a15ca:	f001 f871 	bl	80a26b0 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 80a15ce:	b2e0      	uxtb	r0, r4
 80a15d0:	bd10      	pop	{r4, pc}

080a15d2 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 80a15d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a15d6:	4605      	mov	r5, r0
 80a15d8:	4688      	mov	r8, r1
 80a15da:	4617      	mov	r7, r2
 80a15dc:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a15de:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a15e0:	ea18 0f04 	tst.w	r8, r4
 80a15e4:	bf14      	ite	ne
 80a15e6:	2101      	movne	r1, #1
 80a15e8:	2100      	moveq	r1, #0
 80a15ea:	4628      	mov	r0, r5
 80a15ec:	f7ff ffa1 	bl	80a1532 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a15f0:	0064      	lsls	r4, r4, #1
 80a15f2:	3e01      	subs	r6, #1
 80a15f4:	b2e4      	uxtb	r4, r4
 80a15f6:	d1f3      	bne.n	80a15e0 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 80a15f8:	b18f      	cbz	r7, 80a161e <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 80a15fa:	f002 fd23 	bl	80a4044 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a15fe:	882a      	ldrh	r2, [r5, #0]
 80a1600:	231c      	movs	r3, #28
 80a1602:	4353      	muls	r3, r2
 80a1604:	686a      	ldr	r2, [r5, #4]
 80a1606:	18d1      	adds	r1, r2, r3
 80a1608:	58d3      	ldr	r3, [r2, r3]
 80a160a:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a160c:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a160e:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a1610:	8828      	ldrh	r0, [r5, #0]
 80a1612:	f000 fffd 	bl	80a2610 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a1616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 80a161a:	f002 bd15 	b.w	80a4048 <_Z10interruptsv>
 80a161e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a1622 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 80a1622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1624:	4607      	mov	r7, r0
 80a1626:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a1628:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a162a:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a162c:	4638      	mov	r0, r7
 80a162e:	f7ff ffb0 	bl	80a1592 <_ZN7OneWire8read_bitEv>
 80a1632:	b100      	cbz	r0, 80a1636 <_ZN7OneWire4readEv+0x14>
 80a1634:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a1636:	0064      	lsls	r4, r4, #1
 80a1638:	3e01      	subs	r6, #1
 80a163a:	b2e4      	uxtb	r4, r4
 80a163c:	d1f6      	bne.n	80a162c <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 80a163e:	4628      	mov	r0, r5
 80a1640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a1642 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a1642:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a1644:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a1646:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 80a1648:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a164a:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 80a164c:	f7ff ffc1 	bl	80a15d2 <_ZN7OneWire5writeEhh>
 80a1650:	1e65      	subs	r5, r4, #1
 80a1652:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80a1654:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a1658:	2200      	movs	r2, #0
 80a165a:	4630      	mov	r0, r6
 80a165c:	f7ff ffb9 	bl	80a15d2 <_ZN7OneWire5writeEhh>
 80a1660:	42a5      	cmp	r5, r4
 80a1662:	d1f7      	bne.n	80a1654 <_ZN7OneWire6selectEPKh+0x12>
}
 80a1664:	bd70      	pop	{r4, r5, r6, pc}

080a1666 <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
 80a1666:	2200      	movs	r2, #0
 80a1668:	21cc      	movs	r1, #204	; 0xcc
 80a166a:	f7ff bfb2 	b.w	80a15d2 <_ZN7OneWire5writeEhh>

080a166e <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a166e:	2300      	movs	r3, #0
 80a1670:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a1672:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a1674:	7443      	strb	r3, [r0, #17]
 80a1676:	f100 0210 	add.w	r2, r0, #16
 80a167a:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a167c:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80a1680:	4282      	cmp	r2, r0
 80a1682:	d1fb      	bne.n	80a167c <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80a1684:	4770      	bx	lr

080a1686 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a1686:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a168a:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a168c:	4604      	mov	r4, r0
 80a168e:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a1690:	2d00      	cmp	r5, #0
 80a1692:	d15e      	bne.n	80a1752 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80a1694:	f7ff ff0e 	bl	80a14b4 <_ZN7OneWire5resetEv>
 80a1698:	b920      	cbnz	r0, 80a16a4 <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80a169a:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a169c:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a169e:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a16a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a16a4:	462a      	mov	r2, r5
 80a16a6:	21f0      	movs	r1, #240	; 0xf0
 80a16a8:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a16aa:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a16ac:	f7ff ff91 	bl	80a15d2 <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a16b0:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a16b2:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a16b4:	4620      	mov	r0, r4
 80a16b6:	f7ff ff6c 	bl	80a1592 <_ZN7OneWire8read_bitEv>
 80a16ba:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a16bc:	4620      	mov	r0, r4
 80a16be:	f7ff ff68 	bl	80a1592 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a16c2:	f1b9 0f01 	cmp.w	r9, #1
 80a16c6:	d102      	bne.n	80a16ce <_ZN7OneWire6searchEPh+0x48>
 80a16c8:	2801      	cmp	r0, #1
 80a16ca:	d11b      	bne.n	80a1704 <_ZN7OneWire6searchEPh+0x7e>
 80a16cc:	e037      	b.n	80a173e <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 80a16ce:	4581      	cmp	r9, r0
 80a16d0:	eb04 0305 	add.w	r3, r4, r5
 80a16d4:	d11e      	bne.n	80a1714 <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a16d6:	7c22      	ldrb	r2, [r4, #16]
 80a16d8:	4297      	cmp	r7, r2
 80a16da:	d207      	bcs.n	80a16ec <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a16dc:	7a1a      	ldrb	r2, [r3, #8]
 80a16de:	4216      	tst	r6, r2
 80a16e0:	bf14      	ite	ne
 80a16e2:	f04f 0901 	movne.w	r9, #1
 80a16e6:	f04f 0900 	moveq.w	r9, #0
 80a16ea:	e004      	b.n	80a16f6 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a16ec:	bf0c      	ite	eq
 80a16ee:	f04f 0901 	moveq.w	r9, #1
 80a16f2:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 80a16f6:	f1b9 0f00 	cmp.w	r9, #0
 80a16fa:	d103      	bne.n	80a1704 <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a16fc:	2f08      	cmp	r7, #8
 80a16fe:	d808      	bhi.n	80a1712 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a1700:	7467      	strb	r7, [r4, #17]
 80a1702:	e006      	b.n	80a1712 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a1704:	1962      	adds	r2, r4, r5
 80a1706:	7a13      	ldrb	r3, [r2, #8]
 80a1708:	f04f 0901 	mov.w	r9, #1
 80a170c:	4333      	orrs	r3, r6
 80a170e:	7213      	strb	r3, [r2, #8]
 80a1710:	e004      	b.n	80a171c <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a1712:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a1714:	7a1a      	ldrb	r2, [r3, #8]
 80a1716:	ea22 0206 	bic.w	r2, r2, r6
 80a171a:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a171c:	4649      	mov	r1, r9
 80a171e:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a1720:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a1722:	f7ff ff06 	bl	80a1532 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a1726:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a172a:	bf04      	itt	eq
 80a172c:	3501      	addeq	r5, #1
 80a172e:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a1730:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a1734:	bf08      	it	eq
 80a1736:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a1738:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a173a:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a173c:	d9ba      	bls.n	80a16b4 <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a173e:	2f40      	cmp	r7, #64	; 0x40
 80a1740:	d907      	bls.n	80a1752 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a1742:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a1746:	f1ba 0f00 	cmp.w	sl, #0
 80a174a:	d112      	bne.n	80a1772 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a174c:	2301      	movs	r3, #1
 80a174e:	74a3      	strb	r3, [r4, #18]
 80a1750:	e00f      	b.n	80a1772 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a1752:	2000      	movs	r0, #0
 80a1754:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a1756:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a1758:	7460      	strb	r0, [r4, #17]
 80a175a:	1de3      	adds	r3, r4, #7
 80a175c:	f108 38ff 	add.w	r8, r8, #4294967295
 80a1760:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a1762:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a1766:	42a3      	cmp	r3, r4
 80a1768:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a176c:	d1f9      	bne.n	80a1762 <_ZN7OneWire6searchEPh+0xdc>
 80a176e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80a1772:	7a23      	ldrb	r3, [r4, #8]
 80a1774:	2b00      	cmp	r3, #0
 80a1776:	d0ec      	beq.n	80a1752 <_ZN7OneWire6searchEPh+0xcc>
 80a1778:	2001      	movs	r0, #1
 80a177a:	e7ee      	b.n	80a175a <_ZN7OneWire6searchEPh+0xd4>

080a177c <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a177c:	b530      	push	{r4, r5, lr}
 80a177e:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a1780:	2000      	movs	r0, #0

    while (len--) {
 80a1782:	3901      	subs	r1, #1
 80a1784:	b2c9      	uxtb	r1, r1
 80a1786:	29ff      	cmp	r1, #255	; 0xff
 80a1788:	d013      	beq.n	80a17b2 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80a178a:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a178e:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a1790:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a1794:	f013 0f01 	tst.w	r3, #1
 80a1798:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a179c:	bf1c      	itt	ne
 80a179e:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a17a2:	b2d8      	uxtbne	r0, r3
 80a17a4:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a17a6:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80a17aa:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a17ae:	d1ef      	bne.n	80a1790 <_ZN7OneWire4crc8EPhh+0x14>
 80a17b0:	e7e7      	b.n	80a1782 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80a17b2:	bd30      	pop	{r4, r5, pc}

080a17b4 <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a17b4:	f000 bf24 	b.w	80a2600 <HAL_Pin_Map>

080a17b8 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a17b8:	f000 bf22 	b.w	80a2600 <HAL_Pin_Map>

080a17bc <_ZN16CASARIA_MCP23017C1Ev>:

//Comment line below out to turn off Serial logging
//#define LOGGING

//Constructor
CASARIA_MCP23017::CASARIA_MCP23017(){
 80a17bc:	4603      	mov	r3, r0
 80a17be:	4909      	ldr	r1, [pc, #36]	; (80a17e4 <_ZN16CASARIA_MCP23017C1Ev+0x28>)
 80a17c0:	f100 020c 	add.w	r2, r0, #12
 80a17c4:	c903      	ldmia	r1, {r0, r1}
 80a17c6:	e882 0003 	stmia.w	r2, {r0, r1}
 80a17ca:	2200      	movs	r2, #0
 80a17cc:	615a      	str	r2, [r3, #20]
 80a17ce:	619a      	str	r2, [r3, #24]
 80a17d0:	771a      	strb	r2, [r3, #28]
 80a17d2:	621a      	str	r2, [r3, #32]
 80a17d4:	2120      	movs	r1, #32
 80a17d6:	629a      	str	r2, [r3, #40]	; 0x28
 80a17d8:	220a      	movs	r2, #10
 80a17da:	6259      	str	r1, [r3, #36]	; 0x24
 80a17dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80a17e0:	4618      	mov	r0, r3
 80a17e2:	4770      	bx	lr
 80a17e4:	080a6298 	.word	0x080a6298

080a17e8 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev>:
 80a17e8:	4b02      	ldr	r3, [pc, #8]	; (80a17f4 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev+0xc>)
 80a17ea:	2200      	movs	r2, #0
 80a17ec:	701a      	strb	r2, [r3, #0]
 80a17ee:	f000 bf07 	b.w	80a2600 <HAL_Pin_Map>
 80a17f2:	bf00      	nop
 80a17f4:	20000284 	.word	0x20000284

080a17f8 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a17f8:	b570      	push	{r4, r5, r6, lr}
 80a17fa:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
 80a17fc:	2300      	movs	r3, #0
 80a17fe:	6063      	str	r3, [r4, #4]
 80a1800:	60a3      	str	r3, [r4, #8]
 80a1802:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
 80a1804:	6123      	str	r3, [r4, #16]
 80a1806:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
 80a1808:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
 80a180a:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
 80a180c:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
 80a180e:	2014      	movs	r0, #20
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a1810:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
 80a1812:	f7fe fc44 	bl	80a009e <_Znwj>
 80a1816:	4605      	mov	r5, r0
 80a1818:	b110      	cbz	r0, 80a1820 <_ZN7DS18B20C1Etb+0x28>
 80a181a:	4631      	mov	r1, r6
 80a181c:	f7ff fe3d 	bl	80a149a <_ZN7OneWireC1Et>
 80a1820:	6025      	str	r5, [r4, #0]
}
 80a1822:	4620      	mov	r0, r4
 80a1824:	bd70      	pop	{r4, r5, r6, pc}

080a1826 <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a1826:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a1828:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a182c:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a182e:	6800      	ldr	r0, [r0, #0]
 80a1830:	4629      	mov	r1, r5
 80a1832:	f7ff ff28 	bl	80a1686 <_ZN7OneWire6searchEPh>
 80a1836:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a1838:	bf17      	itett	ne
 80a183a:	682b      	ldrne	r3, [r5, #0]
  else           memset(addr, 0, 8);
 80a183c:	6023      	streq	r3, [r4, #0]
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
  if (isSuccess) memcpy(addr, _addr, 8);
 80a183e:	6023      	strne	r3, [r4, #0]
 80a1840:	686b      	ldrne	r3, [r5, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a1842:	bf18      	it	ne
 80a1844:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
 80a1846:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a1848:	bf08      	it	eq
 80a184a:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
 80a184c:	bd38      	pop	{r3, r4, r5, pc}

080a184e <_ZN7DS18B20D1Ev>:
  
DS18B20::~DS18B20()
 80a184e:	b510      	push	{r4, lr}
 80a1850:	4604      	mov	r4, r0
{
  delete(ds);
 80a1852:	2114      	movs	r1, #20
 80a1854:	6800      	ldr	r0, [r0, #0]
 80a1856:	f002 feb7 	bl	80a45c8 <_ZdlPvj>
}
 80a185a:	4620      	mov	r0, r4
 80a185c:	bd10      	pop	{r4, pc}

080a185e <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a185e:	6800      	ldr	r0, [r0, #0]
 80a1860:	f7ff bf05 	b.w	80a166e <_ZN7OneWire12reset_searchEv>

080a1864 <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a1864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a1866:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a1868:	4604      	mov	r4, r0
 80a186a:	460d      	mov	r5, r1
 80a186c:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a186e:	b91b      	cbnz	r3, 80a1878 <_ZN7DS18B2014getTemperatureEPhb+0x14>
 80a1870:	780b      	ldrb	r3, [r1, #0]
 80a1872:	2b00      	cmp	r3, #0
 80a1874:	f000 80a4 	beq.w	80a19c0 <_ZN7DS18B2014getTemperatureEPhb+0x15c>

  ds->reset();
 80a1878:	6820      	ldr	r0, [r4, #0]
 80a187a:	f7ff fe1b 	bl	80a14b4 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a187e:	7ea3      	ldrb	r3, [r4, #26]
 80a1880:	b123      	cbz	r3, 80a188c <_ZN7DS18B2014getTemperatureEPhb+0x28>
 80a1882:	b91e      	cbnz	r6, 80a188c <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
 80a1884:	6820      	ldr	r0, [r4, #0]
 80a1886:	f7ff feee 	bl	80a1666 <_ZN7OneWire4skipEv>
 80a188a:	e003      	b.n	80a1894 <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
 80a188c:	4629      	mov	r1, r5
 80a188e:	6820      	ldr	r0, [r4, #0]
 80a1890:	f7ff fed7 	bl	80a1642 <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a1894:	2200      	movs	r2, #0
 80a1896:	2144      	movs	r1, #68	; 0x44
 80a1898:	6820      	ldr	r0, [r4, #0]
 80a189a:	f7ff fe9a 	bl	80a15d2 <_ZN7OneWire5writeEhh>
  //+++ 750
  delay(745);     // maybe 750ms is enough, maybe not
 80a189e:	f240 20e9 	movw	r0, #745	; 0x2e9
 80a18a2:	f001 fed3 	bl	80a364c <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
 80a18a6:	6820      	ldr	r0, [r4, #0]
 80a18a8:	f7ff fe04 	bl	80a14b4 <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a18ac:	7ea3      	ldrb	r3, [r4, #26]
 80a18ae:	b123      	cbz	r3, 80a18ba <_ZN7DS18B2014getTemperatureEPhb+0x56>
 80a18b0:	b91e      	cbnz	r6, 80a18ba <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
 80a18b2:	6820      	ldr	r0, [r4, #0]
 80a18b4:	f7ff fed7 	bl	80a1666 <_ZN7OneWire4skipEv>
 80a18b8:	e003      	b.n	80a18c2 <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
 80a18ba:	4629      	mov	r1, r5
 80a18bc:	6820      	ldr	r0, [r4, #0]
 80a18be:	f7ff fec0 	bl	80a1642 <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
 80a18c2:	2200      	movs	r2, #0
 80a18c4:	21be      	movs	r1, #190	; 0xbe
 80a18c6:	6820      	ldr	r0, [r4, #0]
 80a18c8:	f7ff fe83 	bl	80a15d2 <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a18cc:	782b      	ldrb	r3, [r5, #0]
 80a18ce:	2b26      	cmp	r3, #38	; 0x26
 80a18d0:	d104      	bne.n	80a18dc <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a18d2:	2200      	movs	r2, #0
 80a18d4:	4611      	mov	r1, r2
 80a18d6:	6820      	ldr	r0, [r4, #0]
 80a18d8:	f7ff fe7b 	bl	80a15d2 <_ZN7OneWire5writeEhh>
 80a18dc:	1ce6      	adds	r6, r4, #3
 80a18de:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
 80a18e2:	6820      	ldr	r0, [r4, #0]
 80a18e4:	f7ff fe9d 	bl	80a1622 <_ZN7OneWire4readEv>
 80a18e8:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
 80a18ec:	42be      	cmp	r6, r7
 80a18ee:	d1f8      	bne.n	80a18e2 <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a18f0:	2108      	movs	r1, #8
 80a18f2:	1d20      	adds	r0, r4, #4
 80a18f4:	f7ff ff42 	bl	80a177c <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a18f8:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a18fa:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
 80a18fc:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
 80a18fe:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a1900:	d15e      	bne.n	80a19c0 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a1902:	782b      	ldrb	r3, [r5, #0]
 80a1904:	2b22      	cmp	r3, #34	; 0x22
 80a1906:	d01b      	beq.n	80a1940 <_ZN7DS18B2014getTemperatureEPhb+0xdc>
 80a1908:	d816      	bhi.n	80a1938 <_ZN7DS18B2014getTemperatureEPhb+0xd4>
 80a190a:	2b10      	cmp	r3, #16
 80a190c:	d158      	bne.n	80a19c0 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a190e:	7ae3      	ldrb	r3, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a1910:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a1912:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a1914:	bf08      	it	eq
 80a1916:	7aa3      	ldrbeq	r3, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a1918:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a191c:	bf02      	ittt	eq
 80a191e:	f020 000f 	biceq.w	r0, r0, #15
 80a1922:	f1c3 030c 	rsbeq	r3, r3, #12
 80a1926:	18c0      	addeq	r0, r0, r3
 80a1928:	b200      	sxth	r0, r0
      celsius = (float)raw / 16.0;
 80a192a:	f004 f867 	bl	80a59fc <__aeabi_i2f>
 80a192e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a1932:	f004 f8b7 	bl	80a5aa4 <__aeabi_fmul>
      break;
 80a1936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a1938:	2b26      	cmp	r3, #38	; 0x26
 80a193a:	d01f      	beq.n	80a197c <_ZN7DS18B2014getTemperatureEPhb+0x118>
 80a193c:	2b28      	cmp	r3, #40	; 0x28
 80a193e:	d13f      	bne.n	80a19c0 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
 80a1940:	7a22      	ldrb	r2, [r4, #8]
 80a1942:	7923      	ldrb	r3, [r4, #4]
 80a1944:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a1948:	2a20      	cmp	r2, #32
 80a194a:	d005      	beq.n	80a1958 <_ZN7DS18B2014getTemperatureEPhb+0xf4>
 80a194c:	2a40      	cmp	r2, #64	; 0x40
 80a194e:	d006      	beq.n	80a195e <_ZN7DS18B2014getTemperatureEPhb+0xfa>
 80a1950:	b942      	cbnz	r2, 80a1964 <_ZN7DS18B2014getTemperatureEPhb+0x100>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a1952:	f023 0307 	bic.w	r3, r3, #7
 80a1956:	e004      	b.n	80a1962 <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a1958:	f023 0303 	bic.w	r3, r3, #3
 80a195c:	e001      	b.n	80a1962 <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a195e:	f023 0301 	bic.w	r3, r3, #1
 80a1962:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a1964:	7923      	ldrb	r3, [r4, #4]
 80a1966:	7960      	ldrb	r0, [r4, #5]
 80a1968:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a196c:	b200      	sxth	r0, r0
 80a196e:	f003 fbdd 	bl	80a512c <__aeabi_i2d>
 80a1972:	2200      	movs	r2, #0
 80a1974:	4b13      	ldr	r3, [pc, #76]	; (80a19c4 <_ZN7DS18B2014getTemperatureEPhb+0x160>)
 80a1976:	f003 fc3f 	bl	80a51f8 <__aeabi_dmul>
 80a197a:	e01e      	b.n	80a19ba <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a197c:	79a5      	ldrb	r5, [r4, #6]
 80a197e:	4628      	mov	r0, r5
 80a1980:	f003 fbd4 	bl	80a512c <__aeabi_i2d>
 80a1984:	4606      	mov	r6, r0
 80a1986:	7960      	ldrb	r0, [r4, #5]
 80a1988:	460f      	mov	r7, r1
 80a198a:	08c0      	lsrs	r0, r0, #3
 80a198c:	f004 f836 	bl	80a59fc <__aeabi_i2f>
 80a1990:	f003 fbde 	bl	80a5150 <__aeabi_f2d>
 80a1994:	2200      	movs	r2, #0
 80a1996:	4b0c      	ldr	r3, [pc, #48]	; (80a19c8 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
 80a1998:	f003 fc2e 	bl	80a51f8 <__aeabi_dmul>
 80a199c:	460b      	mov	r3, r1
 80a199e:	0629      	lsls	r1, r5, #24
 80a19a0:	4602      	mov	r2, r0
 80a19a2:	bf48      	it	mi
 80a19a4:	4909      	ldrmi	r1, [pc, #36]	; (80a19cc <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a19a6:	f04f 0000 	mov.w	r0, #0
 80a19aa:	bf58      	it	pl
 80a19ac:	4908      	ldrpl	r1, [pc, #32]	; (80a19d0 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a19ae:	f003 fc23 	bl	80a51f8 <__aeabi_dmul>
 80a19b2:	4632      	mov	r2, r6
 80a19b4:	463b      	mov	r3, r7
 80a19b6:	f003 fa6d 	bl	80a4e94 <__adddf3>
 80a19ba:	f003 ff15 	bl	80a57e8 <__aeabi_d2f>
      break;
 80a19be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
 80a19c0:	4804      	ldr	r0, [pc, #16]	; (80a19d4 <_ZN7DS18B2014getTemperatureEPhb+0x170>)
      break;                            
  }
  
  return celsius;
}
 80a19c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a19c4:	3fb00000 	.word	0x3fb00000
 80a19c8:	3fa00000 	.word	0x3fa00000
 80a19cc:	bff00000 	.word	0xbff00000
 80a19d0:	3ff00000 	.word	0x3ff00000
 80a19d4:	7fc00000 	.word	0x7fc00000

080a19d8 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a19d8:	7e02      	ldrb	r2, [r0, #24]
 80a19da:	7e40      	ldrb	r0, [r0, #25]
}
 80a19dc:	1a13      	subs	r3, r2, r0
 80a19de:	4258      	negs	r0, r3
 80a19e0:	4158      	adcs	r0, r3
 80a19e2:	4770      	bx	lr

080a19e4 <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
 80a19e4:	f000 be0c 	b.w	80a2600 <HAL_Pin_Map>

080a19e8 <_ZN15CASARIA_MCP3428C1Eh>:
/**************************************************************************/
/*
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
 80a19e8:	b538      	push	{r3, r4, r5, lr}
 80a19ea:	460c      	mov	r4, r1
 80a19ec:	4605      	mov	r5, r0
{
    Wire.begin();
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a19ee:	f044 0468 	orr.w	r4, r4, #104	; 0x68
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
{
    Wire.begin();
 80a19f2:	f002 fdbb 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a19f6:	f002 fbfd 	bl	80a41f4 <_ZN7TwoWire5beginEv>
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a19fa:	73ac      	strb	r4, [r5, #14]
}
 80a19fc:	4628      	mov	r0, r5
 80a19fe:	bd38      	pop	{r3, r4, r5, pc}

080a1a00 <_ZN15CASARIA_MCP3428D1Ev>:
CASARIA_MCP3428::~CASARIA_MCP3428()
{
}
 80a1a00:	4770      	bx	lr
 80a1a02:	0000      	movs	r0, r0
 80a1a04:	0000      	movs	r0, r0
	...

080a1a08 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>:
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1a08:	b538      	push	{r3, r4, r5, lr}
 80a1a0a:	4604      	mov	r4, r0
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1a0c:	f002 05fd 	and.w	r5, r2, #253	; 0xfd
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1a10:	f89d 0010 	ldrb.w	r0, [sp, #16]
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1a14:	2d0c      	cmp	r5, #12
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
    GAIN = PGA;
 80a1a16:	7260      	strb	r0, [r4, #9]

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1a18:	d002      	beq.n	80a1a20 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x18>
 80a1a1a:	2a10      	cmp	r2, #16
    {
        SPS = 12;
 80a1a1c:	bf18      	it	ne
 80a1a1e:	220c      	movne	r2, #12
    }
    else
    {
        SPS = resolution;
 80a1a20:	7122      	strb	r2, [r4, #4]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a1a22:	7922      	ldrb	r2, [r4, #4]
 80a1a24:	3901      	subs	r1, #1
    else
    {
        SPS = resolution;
    }

    MODE = mode;
 80a1a26:	7163      	strb	r3, [r4, #5]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a1a28:	3a0c      	subs	r2, #12
 80a1a2a:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80a1a2e:	2102      	movs	r1, #2
 80a1a30:	fb92 f2f1 	sdiv	r2, r2, r1
 80a1a34:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80a1a38:	408b      	lsls	r3, r1
 80a1a3a:	7223      	strb	r3, [r4, #8]
    // Setting the PGA Gain
    config|=int(log(PGA)/log(2));
 80a1a3c:	f003 fb66 	bl	80a510c <__aeabi_ui2d>
 80a1a40:	f002 ffa6 	bl	80a4990 <log>
 80a1a44:	a30e      	add	r3, pc, #56	; (adr r3, 80a1a80 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x78>)
 80a1a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1a4a:	f003 fcff 	bl	80a544c <__aeabi_ddiv>
 80a1a4e:	f003 fe83 	bl	80a5758 <__aeabi_d2iz>
 80a1a52:	7a23      	ldrb	r3, [r4, #8]
 80a1a54:	4318      	orrs	r0, r3
 80a1a56:	7220      	strb	r0, [r4, #8]
    
    // Start a conversion using configuration settings
    Wire.beginTransmission(devAddr);
 80a1a58:	f002 fd88 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1a5c:	7ba1      	ldrb	r1, [r4, #14]
 80a1a5e:	f002 fbdb 	bl	80a4218 <_ZN7TwoWire17beginTransmissionEh>
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
 80a1a62:	f002 fd83 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1a66:	7a21      	ldrb	r1, [r4, #8]
 80a1a68:	6803      	ldr	r3, [r0, #0]
 80a1a6a:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a1a6e:	689b      	ldr	r3, [r3, #8]
 80a1a70:	7221      	strb	r1, [r4, #8]
 80a1a72:	4798      	blx	r3
    Wire.endTransmission();
 80a1a74:	f002 fd7a 	bl	80a456c <_Z19__fetch_global_Wirev>
}
 80a1a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.beginTransmission(devAddr);
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
    Wire.endTransmission();
 80a1a7c:	f002 bbd7 	b.w	80a422e <_ZN7TwoWire15endTransmissionEv>
 80a1a80:	fefa39ef 	.word	0xfefa39ef
 80a1a84:	3fe62e42 	.word	0x3fe62e42

080a1a88 <_ZN15CASARIA_MCP342815CheckConversionEv>:
/*
        Check the adc conversion
*/
/**************************************************************************/
bool CASARIA_MCP3428::CheckConversion()
{
 80a1a88:	b570      	push	{r4, r5, r6, lr}
 80a1a8a:	4604      	mov	r4, r0
    uint8_t i = 0;
    no_of_bytes = 3;
 80a1a8c:	2303      	movs	r3, #3
 80a1a8e:	7283      	strb	r3, [r0, #10]
    Wire.requestFrom(devAddr, no_of_bytes);
 80a1a90:	f002 fd6c 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1a94:	7aa2      	ldrb	r2, [r4, #10]
 80a1a96:	7ba1      	ldrb	r1, [r4, #14]
 80a1a98:	f002 fbbb 	bl	80a4212 <_ZN7TwoWire11requestFromEhh>
 80a1a9c:	2500      	movs	r5, #0

    while(Wire.available())
 80a1a9e:	f002 fd65 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1aa2:	6803      	ldr	r3, [r0, #0]
 80a1aa4:	1c6e      	adds	r6, r5, #1
 80a1aa6:	691b      	ldr	r3, [r3, #16]
 80a1aa8:	4798      	blx	r3
 80a1aaa:	b170      	cbz	r0, 80a1aca <_ZN15CASARIA_MCP342815CheckConversionEv+0x42>
    {   data[i++] = Wire.read();
 80a1aac:	f002 fd5e 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1ab0:	6803      	ldr	r3, [r0, #0]
 80a1ab2:	b2ed      	uxtb	r5, r5
 80a1ab4:	695b      	ldr	r3, [r3, #20]
 80a1ab6:	4798      	blx	r3
 80a1ab8:	4425      	add	r5, r4
 80a1aba:	72e8      	strb	r0, [r5, #11]

        testvar = data[no_of_bytes-1] >> 7;
 80a1abc:	7aa3      	ldrb	r3, [r4, #10]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a1abe:	4635      	mov	r5, r6
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
 80a1ac0:	4423      	add	r3, r4
 80a1ac2:	7a9b      	ldrb	r3, [r3, #10]
 80a1ac4:	11db      	asrs	r3, r3, #7
 80a1ac6:	71e3      	strb	r3, [r4, #7]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a1ac8:	e7e9      	b.n	80a1a9e <_ZN15CASARIA_MCP342815CheckConversionEv+0x16>
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
    }
    return testvar;
 80a1aca:	79e0      	ldrb	r0, [r4, #7]
}
 80a1acc:	3000      	adds	r0, #0
 80a1ace:	bf18      	it	ne
 80a1ad0:	2001      	movne	r0, #1
 80a1ad2:	bd70      	pop	{r4, r5, r6, pc}

080a1ad4 <_ZN15CASARIA_MCP34287readADCEv>:
        Where:
        N = Resolution, which is programmed in the Configuration Register: 12, 14, or 16
*/
/**************************************************************************/
long CASARIA_MCP3428::readADC()
{
 80a1ad4:	b510      	push	{r4, lr}
 80a1ad6:	4604      	mov	r4, r0

    raw_adc = 0;
 80a1ad8:	2300      	movs	r3, #0
 80a1ada:	6003      	str	r3, [r0, #0]

    while(CheckConversion() == 1);
 80a1adc:	4620      	mov	r0, r4
 80a1ade:	f7ff ffd3 	bl	80a1a88 <_ZN15CASARIA_MCP342815CheckConversionEv>
 80a1ae2:	2800      	cmp	r0, #0
 80a1ae4:	d1fa      	bne.n	80a1adc <_ZN15CASARIA_MCP34287readADCEv+0x8>

    switch (SPS)
 80a1ae6:	7923      	ldrb	r3, [r4, #4]
 80a1ae8:	2b0e      	cmp	r3, #14
 80a1aea:	d00f      	beq.n	80a1b0c <_ZN15CASARIA_MCP34287readADCEv+0x38>
 80a1aec:	2b10      	cmp	r3, #16
 80a1aee:	d019      	beq.n	80a1b24 <_ZN15CASARIA_MCP34287readADCEv+0x50>
 80a1af0:	2b0c      	cmp	r3, #12
 80a1af2:	d121      	bne.n	80a1b38 <_ZN15CASARIA_MCP34287readADCEv+0x64>
  
        case 12:
                raw_adc = data[0];
                raw_adc &= 0b00001111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1af4:	7ae3      	ldrb	r3, [r4, #11]
 80a1af6:	f003 020f 	and.w	r2, r3, #15
 80a1afa:	7b23      	ldrb	r3, [r4, #12]
 80a1afc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 2047)
 80a1b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
                {
                    raw_adc = raw_adc - 4096;
 80a1b04:	bfa8      	it	ge
 80a1b06:	f5a3 5380 	subge.w	r3, r3, #4096	; 0x1000
 80a1b0a:	e014      	b.n	80a1b36 <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 14:
                raw_adc = data[0];
                raw_adc &= 0b00111111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1b0c:	7ae3      	ldrb	r3, [r4, #11]
 80a1b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80a1b12:	7b23      	ldrb	r3, [r4, #12]
 80a1b14:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 8191)
 80a1b18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
                {
                    raw_adc = raw_adc - 16384;
 80a1b1c:	bfa8      	it	ge
 80a1b1e:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 80a1b22:	e008      	b.n	80a1b36 <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 16:

                raw_adc = data[0];
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1b24:	7ae2      	ldrb	r2, [r4, #11]
 80a1b26:	7b23      	ldrb	r3, [r4, #12]
 80a1b28:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 32767)
 80a1b2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
                {
                    raw_adc = raw_adc - 65536;
 80a1b30:	bfa8      	it	ge
 80a1b32:	f5a3 3380 	subge.w	r3, r3, #65536	; 0x10000
 80a1b36:	6023      	str	r3, [r4, #0]
                // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;
      
                break;
    }
    return raw_adc;
}
 80a1b38:	6820      	ldr	r0, [r4, #0]
 80a1b3a:	bd10      	pop	{r4, pc}

080a1b3c <_GLOBAL__sub_I__ZN15CASARIA_MCP3428C2Eh>:
 80a1b3c:	f000 bd60 	b.w	80a2600 <HAL_Pin_Map>

080a1b40 <_ZN7TwoWire5writeEi>:
 80a1b40:	6803      	ldr	r3, [r0, #0]
 80a1b42:	b2c9      	uxtb	r1, r1
 80a1b44:	689b      	ldr	r3, [r3, #8]
 80a1b46:	4718      	bx	r3

080a1b48 <_ZN16Adafruit_PCA9685C1Ehb>:
 * the address that is set by the physical jumpers on the driver. If the
 * address is not being set by hardware, give no parameters and it will
 * use the default as specified in the header file (0x40)
 */
Adafruit_PCA9685::Adafruit_PCA9685(uint8_t addr, bool debug) {
  _i2caddr = addr;
 80a1b48:	7001      	strb	r1, [r0, #0]
  _debug = debug;
 80a1b4a:	7042      	strb	r2, [r0, #1]
}
 80a1b4c:	4770      	bx	lr

080a1b4e <_ZN16Adafruit_PCA96856getValEh>:
    }
  }
}

uint16_t Adafruit_PCA9685::getVal(uint8_t ledNum){
    return values[ledNum];
 80a1b4e:	eb00 0141 	add.w	r1, r0, r1, lsl #1


}
 80a1b52:	8848      	ldrh	r0, [r1, #2]
 80a1b54:	4770      	bx	lr
	...

080a1b58 <_ZN16Adafruit_PCA96856setPWMEhtt>:
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a1b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1b5a:	461d      	mov	r5, r3
  if (_debug) {
 80a1b5c:	7843      	ldrb	r3, [r0, #1]
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a1b5e:	4607      	mov	r7, r0
 80a1b60:	460c      	mov	r4, r1
 80a1b62:	4616      	mov	r6, r2
  if (_debug) {
 80a1b64:	b303      	cbz	r3, 80a1ba8 <_ZN16Adafruit_PCA96856setPWMEhtt+0x50>
   Serial.print("Setting PWM for LED "); Serial.print(ledNum); Serial.print(" to ");
 80a1b66:	f002 fa0b 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1b6a:	4922      	ldr	r1, [pc, #136]	; (80a1bf4 <_ZN16Adafruit_PCA96856setPWMEhtt+0x9c>)
 80a1b6c:	f001 fc1a 	bl	80a33a4 <_ZN5Print5printEPKc>
 80a1b70:	f002 fa06 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1b74:	220a      	movs	r2, #10
 80a1b76:	4621      	mov	r1, r4
 80a1b78:	f001 fc51 	bl	80a341e <_ZN5Print5printEhi>
 80a1b7c:	f002 fa00 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1b80:	491d      	ldr	r1, [pc, #116]	; (80a1bf8 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa0>)
 80a1b82:	f001 fc0f 	bl	80a33a4 <_ZN5Print5printEPKc>
   Serial.print(on); Serial.print(" -> "); Serial.println(off);
 80a1b86:	f002 f9fb 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1b8a:	220a      	movs	r2, #10
 80a1b8c:	4631      	mov	r1, r6
 80a1b8e:	f001 fc74 	bl	80a347a <_ZN5Print5printEii>
 80a1b92:	f002 f9f5 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1b96:	4919      	ldr	r1, [pc, #100]	; (80a1bfc <_ZN16Adafruit_PCA96856setPWMEhtt+0xa4>)
 80a1b98:	f001 fc04 	bl	80a33a4 <_ZN5Print5printEPKc>
 80a1b9c:	f002 f9f0 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1ba0:	220a      	movs	r2, #10
 80a1ba2:	4629      	mov	r1, r5
 80a1ba4:	f001 fc6b 	bl	80a347e <_ZN5Print7printlnEii>
  }

  Wire.beginTransmission(_i2caddr);
 80a1ba8:	f002 fce0 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1bac:	7839      	ldrb	r1, [r7, #0]
 80a1bae:	f002 fb33 	bl	80a4218 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
 80a1bb2:	f002 fcdb 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1bb6:	00a1      	lsls	r1, r4, #2
 80a1bb8:	3106      	adds	r1, #6
 80a1bba:	f7ff ffc1 	bl	80a1b40 <_ZN7TwoWire5writeEi>
  Wire.write(on);                    // Write the first byte for On
 80a1bbe:	f002 fcd5 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1bc2:	4631      	mov	r1, r6
 80a1bc4:	f7ff ffbc 	bl	80a1b40 <_ZN7TwoWire5writeEi>
  Wire.write(on >> 8);               // Write the second byte
 80a1bc8:	f002 fcd0 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1bcc:	0a31      	lsrs	r1, r6, #8
 80a1bce:	f7ff ffb7 	bl	80a1b40 <_ZN7TwoWire5writeEi>
  Wire.write(off);                   // First byte for Off
 80a1bd2:	f002 fccb 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1bd6:	4629      	mov	r1, r5
 80a1bd8:	f7ff ffb2 	bl	80a1b40 <_ZN7TwoWire5writeEi>
  Wire.write(off >> 8);              // Second byte for Off
 80a1bdc:	f002 fcc6 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1be0:	0a29      	lsrs	r1, r5, #8
 80a1be2:	f7ff ffad 	bl	80a1b40 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a1be6:	f002 fcc1 	bl	80a456c <_Z19__fetch_global_Wirev>
}
 80a1bea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
  Wire.write(on);                    // Write the first byte for On
  Wire.write(on >> 8);               // Write the second byte
  Wire.write(off);                   // First byte for Off
  Wire.write(off >> 8);              // Second byte for Off
  Wire.endTransmission();
 80a1bee:	f002 bb1e 	b.w	80a422e <_ZN7TwoWire15endTransmissionEv>
 80a1bf2:	bf00      	nop
 80a1bf4:	080a62a0 	.word	0x080a62a0
 80a1bf8:	080a62b5 	.word	0x080a62b5
 80a1bfc:	080a62ba 	.word	0x080a62ba

080a1c00 <_ZN16Adafruit_PCA96856setValEhtb>:
 * @param val     The duty cycle value. Should be from 0 to 4095 inclusive, 
 *                will be clamped if not within range
 * @param invert  Whether or not to invert the pulse for sinking to ground
 */
void Adafruit_PCA9685::setVal(uint8_t ledNum, uint16_t val, bool invert)
{
 80a1c00:	b5f0      	push	{r4, r5, r6, r7, lr}
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
 80a1c02:	f640 7eff 	movw	lr, #4095	; 0xfff
 80a1c06:	4572      	cmp	r2, lr
 80a1c08:	bfa8      	it	ge
 80a1c0a:	4672      	movge	r2, lr
 80a1c0c:	ea22 75e2 	bic.w	r5, r2, r2, asr #31
  // Clamp value between 0 and 4095 inclusive.
  val = min(val, 4095);
  val = max(0, val);
 80a1c10:	b2ac      	uxth	r4, r5
  values[ledNum]=val;  //stpre for retrieval
 80a1c12:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 80a1c16:	8054      	strh	r4, [r2, #2]
 * @param val     The duty cycle value. Should be from 0 to 4095 inclusive, 
 *                will be clamped if not within range
 * @param invert  Whether or not to invert the pulse for sinking to ground
 */
void Adafruit_PCA9685::setVal(uint8_t ledNum, uint16_t val, bool invert)
{
 80a1c18:	4606      	mov	r6, r0
 80a1c1a:	460f      	mov	r7, r1
  // Clamp value between 0 and 4095 inclusive.
  val = min(val, 4095);
  val = max(0, val);
  values[ledNum]=val;  //stpre for retrieval
  if (invert) {
 80a1c1c:	461a      	mov	r2, r3
 80a1c1e:	b193      	cbz	r3, 80a1c46 <_ZN16Adafruit_PCA96856setValEhtb+0x46>
    if (val == 0) {
 80a1c20:	b91d      	cbnz	r5, 80a1c2a <_ZN16Adafruit_PCA96856setValEhtb+0x2a>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
 80a1c22:	2300      	movs	r3, #0
 80a1c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a1c28:	e004      	b.n	80a1c34 <_ZN16Adafruit_PCA96856setValEhtb+0x34>
    }
    else if (val == 4095) {
 80a1c2a:	4575      	cmp	r5, lr
 80a1c2c:	d105      	bne.n	80a1c3a <_ZN16Adafruit_PCA96856setValEhtb+0x3a>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
 80a1c2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a1c32:	2200      	movs	r2, #0
 80a1c34:	4639      	mov	r1, r7
 80a1c36:	4630      	mov	r0, r6
 80a1c38:	e00a      	b.n	80a1c50 <_ZN16Adafruit_PCA96856setValEhtb+0x50>
    }
    else {
      setPWM(ledNum, 0, 4095-val);
 80a1c3a:	f5c4 637f 	rsb	r3, r4, #4080	; 0xff0
 80a1c3e:	330f      	adds	r3, #15
 80a1c40:	b29b      	uxth	r3, r3
 80a1c42:	2200      	movs	r2, #0
 80a1c44:	e004      	b.n	80a1c50 <_ZN16Adafruit_PCA96856setValEhtb+0x50>
    }
  }
  else {
    if (val == 4095) {
 80a1c46:	4575      	cmp	r5, lr
 80a1c48:	d0eb      	beq.n	80a1c22 <_ZN16Adafruit_PCA96856setValEhtb+0x22>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
    }
    else if (val == 0) {
 80a1c4a:	2d00      	cmp	r5, #0
 80a1c4c:	d0ef      	beq.n	80a1c2e <_ZN16Adafruit_PCA96856setValEhtb+0x2e>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a1c4e:	4623      	mov	r3, r4
    }
  }
}
 80a1c50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    else if (val == 0) {
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a1c54:	f7ff bf80 	b.w	80a1b58 <_ZN16Adafruit_PCA96856setPWMEhtt>

080a1c58 <_ZN16Adafruit_PCA96855read8Eh>:
/**
 * Read a byte from a given address on the driver
 * @param  addr  The address
 * @return       The value at the given address
 */
uint8_t Adafruit_PCA9685::read8(uint8_t addr) {
 80a1c58:	b538      	push	{r3, r4, r5, lr}
 80a1c5a:	4604      	mov	r4, r0
 80a1c5c:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a1c5e:	f002 fc85 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1c62:	7821      	ldrb	r1, [r4, #0]
 80a1c64:	f002 fad8 	bl	80a4218 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a1c68:	f002 fc80 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1c6c:	6803      	ldr	r3, [r0, #0]
 80a1c6e:	4629      	mov	r1, r5
 80a1c70:	689b      	ldr	r3, [r3, #8]
 80a1c72:	4798      	blx	r3
  Wire.endTransmission();
 80a1c74:	f002 fc7a 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1c78:	f002 fad9 	bl	80a422e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
 80a1c7c:	f002 fc76 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1c80:	2201      	movs	r2, #1
 80a1c82:	7821      	ldrb	r1, [r4, #0]
 80a1c84:	f002 fac5 	bl	80a4212 <_ZN7TwoWire11requestFromEhh>
  return Wire.read();
 80a1c88:	f002 fc70 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1c8c:	6803      	ldr	r3, [r0, #0]
 80a1c8e:	695b      	ldr	r3, [r3, #20]
 80a1c90:	4798      	blx	r3
}
 80a1c92:	b2c0      	uxtb	r0, r0
 80a1c94:	bd38      	pop	{r3, r4, r5, pc}

080a1c96 <_ZN16Adafruit_PCA96856write8Ehh>:
/**
 * Write a byte to a given address on the driver
 * @param addr  The address
 * @param val   The byte to be written
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
 80a1c96:	b570      	push	{r4, r5, r6, lr}
 80a1c98:	4606      	mov	r6, r0
 80a1c9a:	4614      	mov	r4, r2
 80a1c9c:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a1c9e:	f002 fc65 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1ca2:	7831      	ldrb	r1, [r6, #0]
 80a1ca4:	f002 fab8 	bl	80a4218 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a1ca8:	f002 fc60 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1cac:	6803      	ldr	r3, [r0, #0]
 80a1cae:	4629      	mov	r1, r5
 80a1cb0:	689b      	ldr	r3, [r3, #8]
 80a1cb2:	4798      	blx	r3
  Wire.write(val);
 80a1cb4:	f002 fc5a 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1cb8:	6803      	ldr	r3, [r0, #0]
 80a1cba:	4621      	mov	r1, r4
 80a1cbc:	689b      	ldr	r3, [r3, #8]
 80a1cbe:	4798      	blx	r3
  Wire.endTransmission();
 80a1cc0:	f002 fc54 	bl	80a456c <_Z19__fetch_global_Wirev>
}
 80a1cc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(addr);
  Wire.write(val);
  Wire.endTransmission();
 80a1cc8:	f002 bab1 	b.w	80a422e <_ZN7TwoWire15endTransmissionEv>

080a1ccc <_ZN16Adafruit_PCA96855resetEv>:

/**
 * Setup the driver's modes
 */
void Adafruit_PCA9685::reset(void) {
 write8(MODE1, 0x0);  // See page 13 of datasheet
 80a1ccc:	2200      	movs	r2, #0
 80a1cce:	4611      	mov	r1, r2
 80a1cd0:	f7ff bfe1 	b.w	80a1c96 <_ZN16Adafruit_PCA96856write8Ehh>

080a1cd4 <_ZN16Adafruit_PCA96855beginEv>:
}

/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 80a1cd4:	b510      	push	{r4, lr}
 80a1cd6:	4604      	mov	r4, r0
 Wire.begin();
 80a1cd8:	f002 fc48 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a1cdc:	f002 fa8a 	bl	80a41f4 <_ZN7TwoWire5beginEv>
 reset();
 80a1ce0:	4620      	mov	r0, r4
}
 80a1ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 Wire.begin();
 reset();
 80a1ce6:	f7ff bff1 	b.w	80a1ccc <_ZN16Adafruit_PCA96855resetEv>
 80a1cea:	0000      	movs	r0, r0
 80a1cec:	0000      	movs	r0, r0
	...

080a1cf0 <_ZN16Adafruit_PCA968510setPWMFreqEf>:

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1cf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if ( _debug ) {
 80a1cf2:	7843      	ldrb	r3, [r0, #1]

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a1cf4:	4604      	mov	r4, r0
 80a1cf6:	460d      	mov	r5, r1
  if ( _debug ) {
 80a1cf8:	b18b      	cbz	r3, 80a1d1e <_ZN16Adafruit_PCA968510setPWMFreqEf+0x2e>
    Serial.print("Attempting to set freq "); Serial.println(freq);
 80a1cfa:	f002 f941 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1cfe:	493c      	ldr	r1, [pc, #240]	; (80a1df0 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x100>)
 80a1d00:	f001 fb50 	bl	80a33a4 <_ZN5Print5printEPKc>
 80a1d04:	f002 f93c 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1d08:	4606      	mov	r6, r0
 80a1d0a:	4628      	mov	r0, r5
 80a1d0c:	f003 fa20 	bl	80a5150 <__aeabi_f2d>
 80a1d10:	2302      	movs	r3, #2
 80a1d12:	9300      	str	r3, [sp, #0]
 80a1d14:	4602      	mov	r2, r0
 80a1d16:	460b      	mov	r3, r1
 80a1d18:	4630      	mov	r0, r6
 80a1d1a:	f001 fc69 	bl	80a35f0 <_ZN5Print7printlnEdi>
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
 80a1d1e:	4628      	mov	r0, r5
 80a1d20:	f003 fa16 	bl	80a5150 <__aeabi_f2d>
 80a1d24:	a330      	add	r3, pc, #192	; (adr r3, 80a1de8 <_ZN16Adafruit_PCA968510setPWMFreqEf+0xf8>)
 80a1d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1d2a:	f003 fa65 	bl	80a51f8 <__aeabi_dmul>
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
 80a1d2e:	f003 fd5b 	bl	80a57e8 <__aeabi_d2f>
 80a1d32:	4601      	mov	r1, r0
 80a1d34:	482f      	ldr	r0, [pc, #188]	; (80a1df4 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x104>)
 80a1d36:	f003 ff69 	bl	80a5c0c <__aeabi_fdiv>
  prescaleval -= 1;
 80a1d3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a1d3e:	f003 fda7 	bl	80a5890 <__aeabi_fsub>
  if ( _debug ) {
 80a1d42:	7863      	ldrb	r3, [r4, #1]
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
 80a1d44:	4605      	mov	r5, r0
  if ( _debug ) {
 80a1d46:	b18b      	cbz	r3, 80a1d6c <_ZN16Adafruit_PCA968510setPWMFreqEf+0x7c>
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
 80a1d48:	f002 f91a 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1d4c:	492a      	ldr	r1, [pc, #168]	; (80a1df8 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x108>)
 80a1d4e:	f001 fb29 	bl	80a33a4 <_ZN5Print5printEPKc>
 80a1d52:	f002 f915 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1d56:	4606      	mov	r6, r0
 80a1d58:	4628      	mov	r0, r5
 80a1d5a:	f003 f9f9 	bl	80a5150 <__aeabi_f2d>
 80a1d5e:	2302      	movs	r3, #2
 80a1d60:	9300      	str	r3, [sp, #0]
 80a1d62:	4602      	mov	r2, r0
 80a1d64:	460b      	mov	r3, r1
 80a1d66:	4630      	mov	r0, r6
 80a1d68:	f001 fc42 	bl	80a35f0 <_ZN5Print7printlnEdi>
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a1d6c:	4628      	mov	r0, r5
 80a1d6e:	f003 f9ef 	bl	80a5150 <__aeabi_f2d>
 80a1d72:	4b22      	ldr	r3, [pc, #136]	; (80a1dfc <_ZN16Adafruit_PCA968510setPWMFreqEf+0x10c>)
 80a1d74:	2200      	movs	r2, #0
 80a1d76:	f003 f88d 	bl	80a4e94 <__adddf3>
 80a1d7a:	f002 fd81 	bl	80a4880 <floor>
 80a1d7e:	f003 fd13 	bl	80a57a8 <__aeabi_d2uiz>
  if ( _debug ) {
 80a1d82:	7863      	ldrb	r3, [r4, #1]
  prescaleval /= freq;
  prescaleval -= 1;
  if ( _debug ) {
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a1d84:	b2c6      	uxtb	r6, r0
  if ( _debug ) {
 80a1d86:	b153      	cbz	r3, 80a1d9e <_ZN16Adafruit_PCA968510setPWMFreqEf+0xae>
    Serial.print("Final pre-scale: "); Serial.println(prescale);
 80a1d88:	f002 f8fa 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1d8c:	491c      	ldr	r1, [pc, #112]	; (80a1e00 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x110>)
 80a1d8e:	f001 fb09 	bl	80a33a4 <_ZN5Print5printEPKc>
 80a1d92:	f002 f8f5 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a1d96:	220a      	movs	r2, #10
 80a1d98:	4631      	mov	r1, r6
 80a1d9a:	f001 fb42 	bl	80a3422 <_ZN5Print7printlnEhi>
  }
  
  uint8_t oldmode = read8(MODE1);
 80a1d9e:	2100      	movs	r1, #0
 80a1da0:	4620      	mov	r0, r4
 80a1da2:	f7ff ff59 	bl	80a1c58 <_ZN16Adafruit_PCA96855read8Eh>
 80a1da6:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
 80a1da8:	f000 026f 	and.w	r2, r0, #111	; 0x6f
 80a1dac:	f042 0210 	orr.w	r2, r2, #16
 80a1db0:	4620      	mov	r0, r4
 80a1db2:	2100      	movs	r1, #0
 80a1db4:	f7ff ff6f 	bl	80a1c96 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(PRESCALE, prescale); // set the prescaler
 80a1db8:	4632      	mov	r2, r6
 80a1dba:	4620      	mov	r0, r4
 80a1dbc:	21fe      	movs	r1, #254	; 0xfe
 80a1dbe:	f7ff ff6a 	bl	80a1c96 <_ZN16Adafruit_PCA96856write8Ehh>
  write8(MODE1, oldmode);
 80a1dc2:	462a      	mov	r2, r5
 80a1dc4:	2100      	movs	r1, #0
 80a1dc6:	4620      	mov	r0, r4
 80a1dc8:	f7ff ff65 	bl	80a1c96 <_ZN16Adafruit_PCA96856write8Ehh>
  delay(5);
 80a1dcc:	2005      	movs	r0, #5
 80a1dce:	f001 fc3d 	bl	80a364c <delay>
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a1dd2:	4620      	mov	r0, r4
 80a1dd4:	f065 025e 	orn	r2, r5, #94	; 0x5e
 80a1dd8:	b2d2      	uxtb	r2, r2
 80a1dda:	2100      	movs	r1, #0
}
 80a1ddc:	b002      	add	sp, #8
 80a1dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
  write8(PRESCALE, prescale); // set the prescaler
  write8(MODE1, oldmode);
  delay(5);
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a1de2:	f7ff bf58 	b.w	80a1c96 <_ZN16Adafruit_PCA96856write8Ehh>
 80a1de6:	bf00      	nop
 80a1de8:	cccccccd 	.word	0xcccccccd
 80a1dec:	3feccccc 	.word	0x3feccccc
 80a1df0:	080a62bf 	.word	0x080a62bf
 80a1df4:	45bebc20 	.word	0x45bebc20
 80a1df8:	080a62d7 	.word	0x080a62d7
 80a1dfc:	3fe00000 	.word	0x3fe00000
 80a1e00:	080a62ed 	.word	0x080a62ed

080a1e04 <_GLOBAL__sub_I__ZN16Adafruit_PCA9685C2Ehb>:
 80a1e04:	f000 bbfc 	b.w	80a2600 <HAL_Pin_Map>

080a1e08 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a1e08:	b538      	push	{r3, r4, r5, lr}
 80a1e0a:	4b0b      	ldr	r3, [pc, #44]	; (80a1e38 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a1e0c:	6984      	ldr	r4, [r0, #24]
 80a1e0e:	4605      	mov	r5, r0
 80a1e10:	6003      	str	r3, [r0, #0]
 80a1e12:	b17c      	cbz	r4, 80a1e34 <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a1e14:	6863      	ldr	r3, [r4, #4]
 80a1e16:	3b01      	subs	r3, #1
 80a1e18:	6063      	str	r3, [r4, #4]
 80a1e1a:	b95b      	cbnz	r3, 80a1e34 <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a1e1c:	6823      	ldr	r3, [r4, #0]
 80a1e1e:	4620      	mov	r0, r4
 80a1e20:	689b      	ldr	r3, [r3, #8]
 80a1e22:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a1e24:	68a3      	ldr	r3, [r4, #8]
 80a1e26:	3b01      	subs	r3, #1
 80a1e28:	60a3      	str	r3, [r4, #8]
 80a1e2a:	b91b      	cbnz	r3, 80a1e34 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a1e2c:	6823      	ldr	r3, [r4, #0]
 80a1e2e:	4620      	mov	r0, r4
 80a1e30:	68db      	ldr	r3, [r3, #12]
 80a1e32:	4798      	blx	r3
 80a1e34:	4628      	mov	r0, r5
 80a1e36:	bd38      	pop	{r3, r4, r5, pc}
 80a1e38:	080a6344 	.word	0x080a6344

080a1e3c <_ZN9TCPClientD0Ev>:
 80a1e3c:	b510      	push	{r4, lr}
 80a1e3e:	4604      	mov	r4, r0
 80a1e40:	f7ff ffe2 	bl	80a1e08 <_ZN9TCPClientD1Ev>
 80a1e44:	4620      	mov	r0, r4
 80a1e46:	211c      	movs	r1, #28
 80a1e48:	f002 fbbe 	bl	80a45c8 <_ZdlPvj>
 80a1e4c:	4620      	mov	r0, r4
 80a1e4e:	bd10      	pop	{r4, pc}

080a1e50 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a1e50:	b538      	push	{r3, r4, r5, lr}
 80a1e52:	461d      	mov	r5, r3
    this->callback = callback;
 80a1e54:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a1e56:	4604      	mov	r4, r0
    this->callback = callback;
 80a1e58:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a1e5a:	2300      	movs	r3, #0
 80a1e5c:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a1e5e:	b102      	cbz	r2, 80a1e62 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a1e60:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a1e62:	b119      	cbz	r1, 80a1e6c <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a1e64:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1e68:	f001 f9dc 	bl	80a3224 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a1e6c:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a1e6e:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a1e70:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a1e72:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a1e74:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a1e78:	2bff      	cmp	r3, #255	; 0xff
 80a1e7a:	bfb8      	it	lt
 80a1e7c:	23ff      	movlt	r3, #255	; 0xff
 80a1e7e:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a1e82:	b108      	cbz	r0, 80a1e88 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a1e84:	f7fe f911 	bl	80a00aa <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a1e88:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a1e8c:	f7fe f909 	bl	80a00a2 <_Znaj>
 80a1e90:	61e0      	str	r0, [r4, #28]
 80a1e92:	bd38      	pop	{r3, r4, r5, pc}

080a1e94 <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a1e94:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a1e98:	4604      	mov	r4, r0
 80a1e9a:	4617      	mov	r7, r2
 80a1e9c:	4698      	mov	r8, r3
 80a1e9e:	460e      	mov	r6, r1
 80a1ea0:	2500      	movs	r5, #0
 80a1ea2:	f001 f8f3 	bl	80a308c <_ZN9TCPClientC1Ev>
 80a1ea6:	61e5      	str	r5, [r4, #28]
 80a1ea8:	490a      	ldr	r1, [pc, #40]	; (80a1ed4 <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a1eaa:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a1eae:	f001 f98c 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a1eb2:	23ff      	movs	r3, #255	; 0xff
 80a1eb4:	9302      	str	r3, [sp, #8]
 80a1eb6:	230f      	movs	r3, #15
 80a1eb8:	9300      	str	r3, [sp, #0]
 80a1eba:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a1ebc:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a1ebe:	f8cd 8004 	str.w	r8, [sp, #4]
 80a1ec2:	463b      	mov	r3, r7
 80a1ec4:	462a      	mov	r2, r5
 80a1ec6:	4631      	mov	r1, r6
 80a1ec8:	f7ff ffc2 	bl	80a1e50 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a1ecc:	4620      	mov	r0, r4
 80a1ece:	b004      	add	sp, #16
 80a1ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a1ed4:	080a645b 	.word	0x080a645b

080a1ed8 <_ZN4MQTT14addQosCallbackEPFvjE>:
    this->port = port;
}


void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
 80a1ed8:	6341      	str	r1, [r0, #52]	; 0x34
 80a1eda:	4770      	bx	lr

080a1edc <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a1edc:	b510      	push	{r4, lr}
 80a1ede:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a1ee0:	4620      	mov	r0, r4
 80a1ee2:	f000 ff67 	bl	80a2db4 <_ZN9TCPClient9availableEv>
 80a1ee6:	2800      	cmp	r0, #0
 80a1ee8:	d0fa      	beq.n	80a1ee0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a1eea:	4620      	mov	r0, r4
 80a1eec:	f000 ff17 	bl	80a2d1e <_ZN9TCPClient4readEv>
}
 80a1ef0:	b2c0      	uxtb	r0, r0
 80a1ef2:	bd10      	pop	{r4, pc}

080a1ef4 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a1ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a1ef8:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a1efa:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a1efc:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a1efe:	f7ff ffed 	bl	80a1edc <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a1f02:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a1f06:	4646      	mov	r6, r8
 80a1f08:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a1f0a:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a1f0c:	2700      	movs	r7, #0
 80a1f0e:	f893 9000 	ldrb.w	r9, [r3]
 80a1f12:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a1f16:	4628      	mov	r0, r5
 80a1f18:	f7ff ffe0 	bl	80a1edc <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a1f1c:	69eb      	ldr	r3, [r5, #28]
 80a1f1e:	1c74      	adds	r4, r6, #1
 80a1f20:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a1f22:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a1f26:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a1f2a:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a1f2c:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a1f2e:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a1f30:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a1f34:	d501      	bpl.n	80a1f3a <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a1f36:	4626      	mov	r6, r4
 80a1f38:	e7ed      	b.n	80a1f16 <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a1f3a:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a1f3c:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a1f40:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a1f44:	d113      	bne.n	80a1f6e <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a1f46:	4628      	mov	r0, r5
 80a1f48:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a1f4c:	f7ff ffc6 	bl	80a1edc <_ZN4MQTT8readByteEv>
 80a1f50:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a1f54:	4628      	mov	r0, r5
 80a1f56:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a1f5a:	f7ff ffbf 	bl	80a1edc <_ZN4MQTT8readByteEv>
 80a1f5e:	1cf4      	adds	r4, r6, #3
 80a1f60:	3602      	adds	r6, #2
 80a1f62:	b2b6      	uxth	r6, r6
 80a1f64:	b2a4      	uxth	r4, r4
 80a1f66:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a1f6a:	2302      	movs	r3, #2
 80a1f6c:	e000      	b.n	80a1f70 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a1f6e:	2300      	movs	r3, #0
 80a1f70:	1b1b      	subs	r3, r3, r4
 80a1f72:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a1f74:	19a3      	adds	r3, r4, r6
 80a1f76:	b29b      	uxth	r3, r3
 80a1f78:	429f      	cmp	r7, r3
 80a1f7a:	d90b      	bls.n	80a1f94 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a1f7c:	4628      	mov	r0, r5
 80a1f7e:	f7ff ffad 	bl	80a1edc <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a1f82:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a1f86:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a1f88:	bf84      	itt	hi
 80a1f8a:	69eb      	ldrhi	r3, [r5, #28]
 80a1f8c:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a1f8e:	3401      	adds	r4, #1
 80a1f90:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a1f92:	e7ef      	b.n	80a1f74 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a1f94:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a1f98:	42a0      	cmp	r0, r4
 80a1f9a:	bf2c      	ite	cs
 80a1f9c:	4620      	movcs	r0, r4
 80a1f9e:	2000      	movcc	r0, #0
 80a1fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a1fa4 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a1fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a1fa6:	4607      	mov	r7, r0
 80a1fa8:	468e      	mov	lr, r1
 80a1faa:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a1fac:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a1fae:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a1fb0:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a1fb4:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a1fb6:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a1fb8:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a1fba:	bf18      	it	ne
 80a1fbc:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a1fc0:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a1fc2:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a1fc6:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a1fc8:	2d00      	cmp	r5, #0
 80a1fca:	d1f1      	bne.n	80a1fb0 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a1fcc:	f1c4 0304 	rsb	r3, r4, #4
 80a1fd0:	18d1      	adds	r1, r2, r3
 80a1fd2:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a1fd6:	42a5      	cmp	r5, r4
 80a1fd8:	da06      	bge.n	80a1fe8 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a1fda:	a801      	add	r0, sp, #4
 80a1fdc:	1b2b      	subs	r3, r5, r4
 80a1fde:	5c28      	ldrb	r0, [r5, r0]
 80a1fe0:	4413      	add	r3, r2
 80a1fe2:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a1fe4:	3501      	adds	r5, #1
 80a1fe6:	e7f6      	b.n	80a1fd6 <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a1fe8:	1c72      	adds	r2, r6, #1
 80a1fea:	4422      	add	r2, r4
 80a1fec:	4638      	mov	r0, r7
 80a1fee:	f000 fe3d 	bl	80a2c6c <_ZN9TCPClient5writeEPKhj>
 80a1ff2:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a1ff4:	f000 fb64 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a1ff8:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a1ffa:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a1ffc:	4434      	add	r4, r6
 80a1ffe:	b2a8      	uxth	r0, r5
}
 80a2000:	1a23      	subs	r3, r4, r0
 80a2002:	4258      	negs	r0, r3
 80a2004:	4158      	adcs	r0, r3
 80a2006:	b003      	add	sp, #12
 80a2008:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a200a <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a200a:	b510      	push	{r4, lr}
 80a200c:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a200e:	69c3      	ldr	r3, [r0, #28]
 80a2010:	22e0      	movs	r2, #224	; 0xe0
 80a2012:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a2014:	69c3      	ldr	r3, [r0, #28]
 80a2016:	2200      	movs	r2, #0
 80a2018:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a201a:	69c1      	ldr	r1, [r0, #28]
 80a201c:	2202      	movs	r2, #2
 80a201e:	f000 fe25 	bl	80a2c6c <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a2022:	4620      	mov	r0, r4
 80a2024:	f000 ff02 	bl	80a2e2c <_ZN9TCPClient4stopEv>
 80a2028:	f000 fb4a 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a202c:	6260      	str	r0, [r4, #36]	; 0x24
 80a202e:	62a0      	str	r0, [r4, #40]	; 0x28
 80a2030:	bd10      	pop	{r4, pc}

080a2032 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a2032:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a2034:	460d      	mov	r5, r1
 80a2036:	3302      	adds	r3, #2
 80a2038:	b29b      	uxth	r3, r3
 80a203a:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a203c:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a2040:	b2a4      	uxth	r4, r4
 80a2042:	b13e      	cbz	r6, 80a2054 <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a2044:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a2048:	429f      	cmp	r7, r3
 80a204a:	d903      	bls.n	80a2054 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a204c:	1c5c      	adds	r4, r3, #1
 80a204e:	54d6      	strb	r6, [r2, r3]
 80a2050:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a2052:	e7f2      	b.n	80a203a <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a2054:	1b19      	subs	r1, r3, r4
 80a2056:	440a      	add	r2, r1
 80a2058:	1221      	asrs	r1, r4, #8
 80a205a:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a205e:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a2062:	4618      	mov	r0, r3
 80a2064:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2066 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a2066:	b538      	push	{r3, r4, r5, lr}
 80a2068:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a206a:	f000 ffa0 	bl	80a2fae <_ZN9TCPClient9connectedEv>
 80a206e:	2800      	cmp	r0, #0
 80a2070:	bf14      	ite	ne
 80a2072:	2401      	movne	r4, #1
 80a2074:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a2076:	d102      	bne.n	80a207e <_ZN4MQTT11isConnectedEv+0x18>
 80a2078:	4628      	mov	r0, r5
 80a207a:	f000 fed7 	bl	80a2e2c <_ZN9TCPClient4stopEv>
    return rc;
}
 80a207e:	4620      	mov	r0, r4
 80a2080:	bd38      	pop	{r3, r4, r5, pc}
	...

080a2084 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a2084:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2088:	b087      	sub	sp, #28
 80a208a:	4604      	mov	r4, r0
 80a208c:	4689      	mov	r9, r1
 80a208e:	4617      	mov	r7, r2
 80a2090:	461e      	mov	r6, r3
 80a2092:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a2096:	f7ff ffe6 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a209a:	4605      	mov	r5, r0
 80a209c:	2800      	cmp	r0, #0
 80a209e:	f040 80bd 	bne.w	80a221c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a20a2:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a20a4:	b939      	cbnz	r1, 80a20b6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a20a6:	4603      	mov	r3, r0
 80a20a8:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a20ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a20ae:	4620      	mov	r0, r4
 80a20b0:	f001 f80e 	bl	80a30d0 <_ZN9TCPClient7connectEPKctm>
 80a20b4:	e009      	b.n	80a20ca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a20b6:	4668      	mov	r0, sp
 80a20b8:	f001 feec 	bl	80a3e94 <_ZN9IPAddressC1EPKh>
 80a20bc:	462b      	mov	r3, r5
 80a20be:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a20c2:	4669      	mov	r1, sp
 80a20c4:	4620      	mov	r0, r4
 80a20c6:	f000 fecb 	bl	80a2e60 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a20ca:	2800      	cmp	r0, #0
 80a20cc:	f000 80a2 	beq.w	80a2214 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a20d0:	2301      	movs	r3, #1
 80a20d2:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a20d4:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a20d8:	2b04      	cmp	r3, #4
 80a20da:	d115      	bne.n	80a2108 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a20dc:	4b52      	ldr	r3, [pc, #328]	; (80a2228 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a20de:	6818      	ldr	r0, [r3, #0]
 80a20e0:	889a      	ldrh	r2, [r3, #4]
 80a20e2:	9000      	str	r0, [sp, #0]
 80a20e4:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a20e8:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a20ea:	69e2      	ldr	r2, [r4, #28]
 80a20ec:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a20ee:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a20f2:	f8c2 0005 	str.w	r0, [r2, #5]
 80a20f6:	1d53      	adds	r3, r2, #5
 80a20f8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a20fc:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2100:	8099      	strh	r1, [r3, #4]
 80a2102:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a2104:	230c      	movs	r3, #12
 80a2106:	e012      	b.n	80a212e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2108:	466a      	mov	r2, sp
 80a210a:	4b48      	ldr	r3, [pc, #288]	; (80a222c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a210c:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2110:	6818      	ldr	r0, [r3, #0]
 80a2112:	6859      	ldr	r1, [r3, #4]
 80a2114:	7a1b      	ldrb	r3, [r3, #8]
 80a2116:	c203      	stmia	r2!, {r0, r1}
 80a2118:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a211a:	466b      	mov	r3, sp
 80a211c:	cb03      	ldmia	r3!, {r0, r1}
 80a211e:	f8cc 0005 	str.w	r0, [ip, #5]
 80a2122:	f8cc 1009 	str.w	r1, [ip, #9]
 80a2126:	7813      	ldrb	r3, [r2, #0]
 80a2128:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a212c:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a212e:	f1b8 0f00 	cmp.w	r8, #0
 80a2132:	d00a      	beq.n	80a214a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a2134:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a2138:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a213c:	0152      	lsls	r2, r2, #5
 80a213e:	f042 0206 	orr.w	r2, r2, #6
 80a2142:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a2146:	b2d2      	uxtb	r2, r2
 80a2148:	e000      	b.n	80a214c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a214a:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a214c:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a2150:	b909      	cbnz	r1, 80a2156 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a2152:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a2156:	b12f      	cbz	r7, 80a2164 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a2158:	b916      	cbnz	r6, 80a2160 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a215a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a215e:	e001      	b.n	80a2164 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a2160:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a2164:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a2166:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a2168:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a216a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a216c:	69e1      	ldr	r1, [r4, #28]
 80a216e:	1212      	asrs	r2, r2, #8
 80a2170:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a2172:	69e1      	ldr	r1, [r4, #28]
 80a2174:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a2176:	1c9a      	adds	r2, r3, #2
 80a2178:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a217a:	3303      	adds	r3, #3
 80a217c:	69e2      	ldr	r2, [r4, #28]
 80a217e:	4649      	mov	r1, r9
 80a2180:	4620      	mov	r0, r4
 80a2182:	f7ff ff56 	bl	80a2032 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a2186:	f1b8 0f00 	cmp.w	r8, #0
 80a218a:	d00b      	beq.n	80a21a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a218c:	4603      	mov	r3, r0
 80a218e:	69e2      	ldr	r2, [r4, #28]
 80a2190:	4641      	mov	r1, r8
 80a2192:	4620      	mov	r0, r4
 80a2194:	f7ff ff4d 	bl	80a2032 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a2198:	69e2      	ldr	r2, [r4, #28]
 80a219a:	4603      	mov	r3, r0
 80a219c:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a219e:	4620      	mov	r0, r4
 80a21a0:	f7ff ff47 	bl	80a2032 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a21a4:	b167      	cbz	r7, 80a21c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a21a6:	4603      	mov	r3, r0
 80a21a8:	69e2      	ldr	r2, [r4, #28]
 80a21aa:	4639      	mov	r1, r7
 80a21ac:	4620      	mov	r0, r4
 80a21ae:	f7ff ff40 	bl	80a2032 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a21b2:	b12e      	cbz	r6, 80a21c0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a21b4:	4603      	mov	r3, r0
 80a21b6:	69e2      	ldr	r2, [r4, #28]
 80a21b8:	4631      	mov	r1, r6
 80a21ba:	4620      	mov	r0, r4
 80a21bc:	f7ff ff39 	bl	80a2032 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a21c0:	1f43      	subs	r3, r0, #5
 80a21c2:	b29b      	uxth	r3, r3
 80a21c4:	69e2      	ldr	r2, [r4, #28]
 80a21c6:	2110      	movs	r1, #16
 80a21c8:	4620      	mov	r0, r4
 80a21ca:	f7ff feeb 	bl	80a1fa4 <_ZN4MQTT5writeEhPht>
 80a21ce:	f000 fa77 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a21d2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a21d6:	6260      	str	r0, [r4, #36]	; 0x24
 80a21d8:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a21da:	4620      	mov	r0, r4
 80a21dc:	f000 fdea 	bl	80a2db4 <_ZN9TCPClient9availableEv>
 80a21e0:	b940      	cbnz	r0, 80a21f4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a21e2:	f000 fa6d 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a21e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a21e8:	1ac0      	subs	r0, r0, r3
 80a21ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a21ec:	4373      	muls	r3, r6
 80a21ee:	4298      	cmp	r0, r3
 80a21f0:	d9f3      	bls.n	80a21da <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a21f2:	e00f      	b.n	80a2214 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a21f4:	4669      	mov	r1, sp
 80a21f6:	4620      	mov	r0, r4
 80a21f8:	f7ff fe7c 	bl	80a1ef4 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a21fc:	2804      	cmp	r0, #4
 80a21fe:	d109      	bne.n	80a2214 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a2200:	69e3      	ldr	r3, [r4, #28]
 80a2202:	78de      	ldrb	r6, [r3, #3]
 80a2204:	b936      	cbnz	r6, 80a2214 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a2206:	f000 fa5b 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a220a:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a220c:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a220e:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a2212:	e004      	b.n	80a221e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a2214:	4620      	mov	r0, r4
 80a2216:	f000 fe09 	bl	80a2e2c <_ZN9TCPClient4stopEv>
 80a221a:	e000      	b.n	80a221e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a221c:	2500      	movs	r5, #0
}
 80a221e:	4628      	mov	r0, r5
 80a2220:	b007      	add	sp, #28
 80a2222:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a2226:	bf00      	nop
 80a2228:	080a62ff 	.word	0x080a62ff
 80a222c:	080a6306 	.word	0x080a6306

080a2230 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a2230:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a2232:	2304      	movs	r3, #4
 80a2234:	9305      	str	r3, [sp, #20]
 80a2236:	2301      	movs	r3, #1
 80a2238:	9304      	str	r3, [sp, #16]
 80a223a:	2300      	movs	r3, #0
 80a223c:	9303      	str	r3, [sp, #12]
 80a223e:	9302      	str	r3, [sp, #8]
 80a2240:	9301      	str	r3, [sp, #4]
 80a2242:	9300      	str	r3, [sp, #0]
 80a2244:	461a      	mov	r2, r3
 80a2246:	f7ff ff1d 	bl	80a2084 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a224a:	b007      	add	sp, #28
 80a224c:	f85d fb04 	ldr.w	pc, [sp], #4

080a2250 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a2250:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2254:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a2256:	4604      	mov	r4, r0
 80a2258:	468b      	mov	fp, r1
 80a225a:	4691      	mov	r9, r2
 80a225c:	469a      	mov	sl, r3
 80a225e:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a2262:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a2266:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a226a:	f7ff fefc 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a226e:	2800      	cmp	r0, #0
 80a2270:	d04b      	beq.n	80a230a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a2272:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a2276:	2100      	movs	r1, #0
 80a2278:	69e0      	ldr	r0, [r4, #28]
 80a227a:	f003 fe0c 	bl	80a5e96 <memset>

        length = writeString(topic, buffer, length);
 80a227e:	2305      	movs	r3, #5
 80a2280:	69e2      	ldr	r2, [r4, #28]
 80a2282:	4659      	mov	r1, fp
 80a2284:	4620      	mov	r0, r4
 80a2286:	f7ff fed4 	bl	80a2032 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a228a:	1e6b      	subs	r3, r5, #1
 80a228c:	2b01      	cmp	r3, #1
 80a228e:	d812      	bhi.n	80a22b6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a2290:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a2292:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a2294:	3301      	adds	r3, #1
 80a2296:	b29b      	uxth	r3, r3
 80a2298:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a229a:	121b      	asrs	r3, r3, #8
 80a229c:	5413      	strb	r3, [r2, r0]
 80a229e:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a22a0:	69e3      	ldr	r3, [r4, #28]
 80a22a2:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a22a4:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a22a6:	3002      	adds	r0, #2
 80a22a8:	b280      	uxth	r0, r0
 80a22aa:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a22ac:	b11e      	cbz	r6, 80a22b6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a22ae:	8c23      	ldrh	r3, [r4, #32]
 80a22b0:	1c5a      	adds	r2, r3, #1
 80a22b2:	8422      	strh	r2, [r4, #32]
 80a22b4:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a22b6:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a22b8:	b291      	uxth	r1, r2
 80a22ba:	1883      	adds	r3, r0, r2
 80a22bc:	458a      	cmp	sl, r1
 80a22be:	b29b      	uxth	r3, r3
 80a22c0:	d909      	bls.n	80a22d6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a22c2:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a22c6:	3201      	adds	r2, #1
 80a22c8:	429e      	cmp	r6, r3
 80a22ca:	d904      	bls.n	80a22d6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a22cc:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a22d0:	69e1      	ldr	r1, [r4, #28]
 80a22d2:	54ce      	strb	r6, [r1, r3]
 80a22d4:	e7f0      	b.n	80a22b8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a22d6:	f1b8 0f00 	cmp.w	r8, #0
 80a22da:	bf0c      	ite	eq
 80a22dc:	2130      	moveq	r1, #48	; 0x30
 80a22de:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a22e0:	b10f      	cbz	r7, 80a22e6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a22e2:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a22e6:	2d02      	cmp	r5, #2
 80a22e8:	d102      	bne.n	80a22f0 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a22ea:	f041 0104 	orr.w	r1, r1, #4
 80a22ee:	e003      	b.n	80a22f8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a22f0:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a22f2:	bf08      	it	eq
 80a22f4:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a22f8:	4620      	mov	r0, r4
 80a22fa:	3b05      	subs	r3, #5
 80a22fc:	69e2      	ldr	r2, [r4, #28]
 80a22fe:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a2300:	b001      	add	sp, #4
 80a2302:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a2306:	f7ff be4d 	b.w	80a1fa4 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a230a:	b001      	add	sp, #4
 80a230c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2310 <_ZN4MQTT14publishReleaseEt>:

bool MQTT::publishRelease(uint16_t messageid) {
 80a2310:	b538      	push	{r3, r4, r5, lr}
 80a2312:	4604      	mov	r4, r0
 80a2314:	460d      	mov	r5, r1
    if (isConnected()) {
 80a2316:	f7ff fea6 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a231a:	b190      	cbz	r0, 80a2342 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a231c:	69e3      	ldr	r3, [r4, #28]
 80a231e:	2262      	movs	r2, #98	; 0x62
 80a2320:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2322:	69e3      	ldr	r3, [r4, #28]
 80a2324:	2202      	movs	r2, #2
 80a2326:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a2328:	69e3      	ldr	r3, [r4, #28]
 80a232a:	122a      	asrs	r2, r5, #8
 80a232c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a232e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2330:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a2332:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2334:	69e1      	ldr	r1, [r4, #28]
 80a2336:	4620      	mov	r0, r4
 80a2338:	f000 fc98 	bl	80a2c6c <_ZN9TCPClient5writeEPKhj>
 80a233c:	3000      	adds	r0, #0
 80a233e:	bf18      	it	ne
 80a2340:	2001      	movne	r0, #1
    }
    return false;
}
 80a2342:	bd38      	pop	{r3, r4, r5, pc}

080a2344 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a2344:	b538      	push	{r3, r4, r5, lr}
 80a2346:	4604      	mov	r4, r0
 80a2348:	460d      	mov	r5, r1
    if (isConnected()) {
 80a234a:	f7ff fe8c 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a234e:	b190      	cbz	r0, 80a2376 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a2350:	69e3      	ldr	r3, [r4, #28]
 80a2352:	2272      	movs	r2, #114	; 0x72
 80a2354:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a2356:	69e3      	ldr	r3, [r4, #28]
 80a2358:	2202      	movs	r2, #2
 80a235a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a235c:	69e3      	ldr	r3, [r4, #28]
 80a235e:	122a      	asrs	r2, r5, #8
 80a2360:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a2362:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a2364:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a2366:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a2368:	69e1      	ldr	r1, [r4, #28]
 80a236a:	4620      	mov	r0, r4
 80a236c:	f000 fc7e 	bl	80a2c6c <_ZN9TCPClient5writeEPKhj>
 80a2370:	3000      	adds	r0, #0
 80a2372:	bf18      	it	ne
 80a2374:	2001      	movne	r0, #1
    }
    return false;
}
 80a2376:	bd38      	pop	{r3, r4, r5, pc}

080a2378 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a2378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a237c:	b083      	sub	sp, #12
 80a237e:	af00      	add	r7, sp, #0
 80a2380:	4604      	mov	r4, r0
    if (isConnected()) {
 80a2382:	f7ff fe70 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a2386:	4681      	mov	r9, r0
 80a2388:	2800      	cmp	r0, #0
 80a238a:	f000 80f6 	beq.w	80a257a <_ZN4MQTT4loopEv+0x202>
 80a238e:	f000 f997 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a2392:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a2394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2398:	4353      	muls	r3, r2
 80a239a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a239c:	4605      	mov	r5, r0
 80a239e:	1a82      	subs	r2, r0, r2
 80a23a0:	429a      	cmp	r2, r3
 80a23a2:	d803      	bhi.n	80a23ac <_ZN4MQTT4loopEv+0x34>
 80a23a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a23a6:	1a82      	subs	r2, r0, r2
 80a23a8:	4293      	cmp	r3, r2
 80a23aa:	d217      	bcs.n	80a23dc <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a23ac:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a23b0:	b12b      	cbz	r3, 80a23be <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a23b2:	4620      	mov	r0, r4
 80a23b4:	f000 fd3a 	bl	80a2e2c <_ZN9TCPClient4stopEv>
                return false;
 80a23b8:	f04f 0900 	mov.w	r9, #0
 80a23bc:	e0dd      	b.n	80a257a <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a23be:	69e2      	ldr	r2, [r4, #28]
 80a23c0:	21c0      	movs	r1, #192	; 0xc0
 80a23c2:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a23c4:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a23c6:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a23c8:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a23ca:	69e1      	ldr	r1, [r4, #28]
 80a23cc:	2202      	movs	r2, #2
 80a23ce:	f000 fc4d 	bl	80a2c6c <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a23d2:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a23d4:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a23d6:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a23d8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a23dc:	4620      	mov	r0, r4
 80a23de:	f000 fce9 	bl	80a2db4 <_ZN9TCPClient9availableEv>
 80a23e2:	2800      	cmp	r0, #0
 80a23e4:	f000 80c9 	beq.w	80a257a <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a23e8:	1df9      	adds	r1, r7, #7
 80a23ea:	4620      	mov	r0, r4
 80a23ec:	f7ff fd82 	bl	80a1ef4 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a23f0:	4602      	mov	r2, r0
 80a23f2:	2800      	cmp	r0, #0
 80a23f4:	f000 80c1 	beq.w	80a257a <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a23f8:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a23fa:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a23fc:	7818      	ldrb	r0, [r3, #0]
 80a23fe:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a2402:	2930      	cmp	r1, #48	; 0x30
 80a2404:	d17d      	bne.n	80a2502 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a2406:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a240a:	f1bb 0f00 	cmp.w	fp, #0
 80a240e:	f000 80b4 	beq.w	80a257a <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2412:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a2416:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2418:	eb03 000c 	add.w	r0, r3, ip
 80a241c:	7881      	ldrb	r1, [r0, #2]
 80a241e:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a2422:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a2426:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a242a:	f10e 0108 	add.w	r1, lr, #8
 80a242e:	f021 0107 	bic.w	r1, r1, #7
 80a2432:	ebad 0d01 	sub.w	sp, sp, r1
 80a2436:	4668      	mov	r0, sp
 80a2438:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a243a:	b28e      	uxth	r6, r1
 80a243c:	45b6      	cmp	lr, r6
 80a243e:	d906      	bls.n	80a244e <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a2440:	eb0c 0601 	add.w	r6, ip, r1
 80a2444:	441e      	add	r6, r3
 80a2446:	78f6      	ldrb	r6, [r6, #3]
 80a2448:	5446      	strb	r6, [r0, r1]
 80a244a:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a244c:	e7f5      	b.n	80a243a <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a244e:	2100      	movs	r1, #0
 80a2450:	f800 100e 	strb.w	r1, [r0, lr]
 80a2454:	781e      	ldrb	r6, [r3, #0]
 80a2456:	f10c 0103 	add.w	r1, ip, #3
 80a245a:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a245e:	2e02      	cmp	r6, #2
 80a2460:	ebcc 0202 	rsb	r2, ip, r2
 80a2464:	d11e      	bne.n	80a24a4 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2466:	4471      	add	r1, lr
 80a2468:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a246c:	4419      	add	r1, r3
 80a246e:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a2470:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2474:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a2478:	f10c 0105 	add.w	r1, ip, #5
 80a247c:	4471      	add	r1, lr
 80a247e:	3a05      	subs	r2, #5
 80a2480:	4419      	add	r1, r3
 80a2482:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a2484:	69e3      	ldr	r3, [r4, #28]
 80a2486:	2240      	movs	r2, #64	; 0x40
 80a2488:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a248a:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a248c:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a2490:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a2492:	69e3      	ldr	r3, [r4, #28]
 80a2494:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a2498:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a249a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a249c:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a249e:	f883 8003 	strb.w	r8, [r3, #3]
 80a24a2:	e020      	b.n	80a24e6 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a24a4:	2e04      	cmp	r6, #4
 80a24a6:	d124      	bne.n	80a24f2 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a24a8:	4471      	add	r1, lr
 80a24aa:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a24ae:	4419      	add	r1, r3
 80a24b0:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a24b2:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a24b6:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a24ba:	f10c 0105 	add.w	r1, ip, #5
 80a24be:	4471      	add	r1, lr
 80a24c0:	3a05      	subs	r2, #5
 80a24c2:	4419      	add	r1, r3
 80a24c4:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a24c6:	69e3      	ldr	r3, [r4, #28]
 80a24c8:	2250      	movs	r2, #80	; 0x50
 80a24ca:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a24cc:	69e3      	ldr	r3, [r4, #28]
 80a24ce:	2202      	movs	r2, #2
 80a24d0:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a24d2:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a24d4:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a24d8:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a24dc:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a24de:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a24e0:	69e3      	ldr	r3, [r4, #28]
 80a24e2:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a24e6:	69e1      	ldr	r1, [r4, #28]
 80a24e8:	4620      	mov	r0, r4
 80a24ea:	f000 fbbf 	bl	80a2c6c <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a24ee:	6265      	str	r5, [r4, #36]	; 0x24
 80a24f0:	e005      	b.n	80a24fe <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a24f2:	3a03      	subs	r2, #3
 80a24f4:	4471      	add	r1, lr
 80a24f6:	ebce 0202 	rsb	r2, lr, r2
 80a24fa:	4419      	add	r1, r3
 80a24fc:	47d8      	blx	fp
 80a24fe:	46d5      	mov	sp, sl
 80a2500:	e03b      	b.n	80a257a <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a2502:	2950      	cmp	r1, #80	; 0x50
 80a2504:	d108      	bne.n	80a2518 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a2506:	7899      	ldrb	r1, [r3, #2]
 80a2508:	78db      	ldrb	r3, [r3, #3]
 80a250a:	4620      	mov	r0, r4
 80a250c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a2510:	b289      	uxth	r1, r1
 80a2512:	f7ff fefd 	bl	80a2310 <_ZN4MQTT14publishReleaseEt>
 80a2516:	e030      	b.n	80a257a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a2518:	2940      	cmp	r1, #64	; 0x40
 80a251a:	d00c      	beq.n	80a2536 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a251c:	2960      	cmp	r1, #96	; 0x60
 80a251e:	d108      	bne.n	80a2532 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a2520:	7899      	ldrb	r1, [r3, #2]
 80a2522:	78db      	ldrb	r3, [r3, #3]
 80a2524:	4620      	mov	r0, r4
 80a2526:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a252a:	b289      	uxth	r1, r1
 80a252c:	f7ff ff0a 	bl	80a2344 <_ZN4MQTT15publishCompleteEt>
 80a2530:	e023      	b.n	80a257a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a2532:	2970      	cmp	r1, #112	; 0x70
 80a2534:	d10d      	bne.n	80a2552 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a2536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a2538:	b1f9      	cbz	r1, 80a257a <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a253a:	2a04      	cmp	r2, #4
 80a253c:	d11d      	bne.n	80a257a <_ZN4MQTT4loopEv+0x202>
 80a253e:	f010 0f06 	tst.w	r0, #6
 80a2542:	d11a      	bne.n	80a257a <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a2544:	7898      	ldrb	r0, [r3, #2]
 80a2546:	78db      	ldrb	r3, [r3, #3]
 80a2548:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a254c:	b280      	uxth	r0, r0
 80a254e:	4788      	blx	r1
 80a2550:	e013      	b.n	80a257a <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a2552:	2990      	cmp	r1, #144	; 0x90
 80a2554:	d011      	beq.n	80a257a <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a2556:	29c0      	cmp	r1, #192	; 0xc0
 80a2558:	d10a      	bne.n	80a2570 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a255a:	22d0      	movs	r2, #208	; 0xd0
 80a255c:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a255e:	69e3      	ldr	r3, [r4, #28]
 80a2560:	2200      	movs	r2, #0
 80a2562:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a2564:	69e1      	ldr	r1, [r4, #28]
 80a2566:	2202      	movs	r2, #2
 80a2568:	4620      	mov	r0, r4
 80a256a:	f000 fb7f 	bl	80a2c6c <_ZN9TCPClient5writeEPKhj>
 80a256e:	e004      	b.n	80a257a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a2570:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a2572:	bf04      	itt	eq
 80a2574:	2300      	moveq	r3, #0
 80a2576:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a257a:	4648      	mov	r0, r9
 80a257c:	370c      	adds	r7, #12
 80a257e:	46bd      	mov	sp, r7
 80a2580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2584 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a2584:	b570      	push	{r4, r5, r6, lr}
 80a2586:	4604      	mov	r4, r0
 80a2588:	460e      	mov	r6, r1
 80a258a:	4615      	mov	r5, r2

    if (isConnected()) {
 80a258c:	f7ff fd6b 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a2590:	b1e8      	cbz	r0, 80a25ce <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a2592:	8c23      	ldrh	r3, [r4, #32]
 80a2594:	3301      	adds	r3, #1
 80a2596:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a2598:	b903      	cbnz	r3, 80a259c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a259a:	2301      	movs	r3, #1
 80a259c:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a259e:	8c23      	ldrh	r3, [r4, #32]
 80a25a0:	69e2      	ldr	r2, [r4, #28]
 80a25a2:	121b      	asrs	r3, r3, #8
 80a25a4:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a25a6:	69e3      	ldr	r3, [r4, #28]
 80a25a8:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a25aa:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a25ac:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a25ae:	69e2      	ldr	r2, [r4, #28]
 80a25b0:	2307      	movs	r3, #7
 80a25b2:	4620      	mov	r0, r4
 80a25b4:	f7ff fd3d 	bl	80a2032 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a25b8:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a25ba:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a25bc:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a25be:	1f03      	subs	r3, r0, #4
 80a25c0:	69e2      	ldr	r2, [r4, #28]
 80a25c2:	4620      	mov	r0, r4
    }
    return false;
}
 80a25c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a25c8:	b29b      	uxth	r3, r3
 80a25ca:	f7ff bceb 	b.w	80a1fa4 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a25ce:	bd70      	pop	{r4, r5, r6, pc}

080a25d0 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a25d0:	b510      	push	{r4, lr}
 80a25d2:	4604      	mov	r4, r0
    if (isConnected()) {
 80a25d4:	f7ff fd47 	bl	80a2066 <_ZN4MQTT11isConnectedEv>
 80a25d8:	b110      	cbz	r0, 80a25e0 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a25da:	4620      	mov	r0, r4
 80a25dc:	f7ff fd15 	bl	80a200a <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a25e0:	69e0      	ldr	r0, [r4, #28]
 80a25e2:	b108      	cbz	r0, 80a25e8 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a25e4:	f7fd fd61 	bl	80a00aa <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a25e8:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a25ec:	f000 fda6 	bl	80a313c <_ZN6StringD1Ev>
 80a25f0:	4620      	mov	r0, r4
 80a25f2:	f7ff fc09 	bl	80a1e08 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a25f6:	4620      	mov	r0, r4
 80a25f8:	bd10      	pop	{r4, pc}

080a25fa <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a25fa:	f000 b801 	b.w	80a2600 <HAL_Pin_Map>
	...

080a2600 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2600:	b508      	push	{r3, lr}
 80a2602:	4b02      	ldr	r3, [pc, #8]	; (80a260c <HAL_Pin_Map+0xc>)
 80a2604:	681b      	ldr	r3, [r3, #0]
 80a2606:	681b      	ldr	r3, [r3, #0]
 80a2608:	9301      	str	r3, [sp, #4]
 80a260a:	bd08      	pop	{r3, pc}
 80a260c:	080601b0 	.word	0x080601b0

080a2610 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2610:	b508      	push	{r3, lr}
 80a2612:	4b02      	ldr	r3, [pc, #8]	; (80a261c <HAL_Pin_Mode+0xc>)
 80a2614:	681b      	ldr	r3, [r3, #0]
 80a2616:	689b      	ldr	r3, [r3, #8]
 80a2618:	9301      	str	r3, [sp, #4]
 80a261a:	bd08      	pop	{r3, pc}
 80a261c:	080601b0 	.word	0x080601b0

080a2620 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2620:	b508      	push	{r3, lr}
 80a2622:	4b02      	ldr	r3, [pc, #8]	; (80a262c <HAL_Get_Pin_Mode+0xc>)
 80a2624:	681b      	ldr	r3, [r3, #0]
 80a2626:	68db      	ldr	r3, [r3, #12]
 80a2628:	9301      	str	r3, [sp, #4]
 80a262a:	bd08      	pop	{r3, pc}
 80a262c:	080601b0 	.word	0x080601b0

080a2630 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a2630:	b508      	push	{r3, lr}
 80a2632:	4b02      	ldr	r3, [pc, #8]	; (80a263c <HAL_GPIO_Write+0xc>)
 80a2634:	681b      	ldr	r3, [r3, #0]
 80a2636:	691b      	ldr	r3, [r3, #16]
 80a2638:	9301      	str	r3, [sp, #4]
 80a263a:	bd08      	pop	{r3, pc}
 80a263c:	080601b0 	.word	0x080601b0

080a2640 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a2640:	b508      	push	{r3, lr}
 80a2642:	4b02      	ldr	r3, [pc, #8]	; (80a264c <HAL_GPIO_Read+0xc>)
 80a2644:	681b      	ldr	r3, [r3, #0]
 80a2646:	695b      	ldr	r3, [r3, #20]
 80a2648:	9301      	str	r3, [sp, #4]
 80a264a:	bd08      	pop	{r3, pc}
 80a264c:	080601b0 	.word	0x080601b0

080a2650 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a2650:	b508      	push	{r3, lr}
 80a2652:	4b02      	ldr	r3, [pc, #8]	; (80a265c <HAL_Interrupts_Enable_All+0xc>)
 80a2654:	681b      	ldr	r3, [r3, #0]
 80a2656:	6a1b      	ldr	r3, [r3, #32]
 80a2658:	9301      	str	r3, [sp, #4]
 80a265a:	bd08      	pop	{r3, pc}
 80a265c:	080601b0 	.word	0x080601b0

080a2660 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a2660:	b508      	push	{r3, lr}
 80a2662:	4b02      	ldr	r3, [pc, #8]	; (80a266c <HAL_Interrupts_Disable_All+0xc>)
 80a2664:	681b      	ldr	r3, [r3, #0]
 80a2666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2668:	9301      	str	r3, [sp, #4]
 80a266a:	bd08      	pop	{r3, pc}
 80a266c:	080601b0 	.word	0x080601b0

080a2670 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a2670:	b508      	push	{r3, lr}
 80a2672:	4b02      	ldr	r3, [pc, #8]	; (80a267c <HAL_SPI_Init+0xc>)
 80a2674:	681b      	ldr	r3, [r3, #0]
 80a2676:	69db      	ldr	r3, [r3, #28]
 80a2678:	9301      	str	r3, [sp, #4]
 80a267a:	bd08      	pop	{r3, pc}
 80a267c:	080601b4 	.word	0x080601b4

080a2680 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a2680:	b508      	push	{r3, lr}
 80a2682:	4b02      	ldr	r3, [pc, #8]	; (80a268c <HAL_SPI_Is_Enabled+0xc>)
 80a2684:	681b      	ldr	r3, [r3, #0]
 80a2686:	6a1b      	ldr	r3, [r3, #32]
 80a2688:	9301      	str	r3, [sp, #4]
 80a268a:	bd08      	pop	{r3, pc}
 80a268c:	080601b4 	.word	0x080601b4

080a2690 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2690:	b508      	push	{r3, lr}
 80a2692:	4b02      	ldr	r3, [pc, #8]	; (80a269c <HAL_RNG_GetRandomNumber+0xc>)
 80a2694:	681b      	ldr	r3, [r3, #0]
 80a2696:	685b      	ldr	r3, [r3, #4]
 80a2698:	9301      	str	r3, [sp, #4]
 80a269a:	bd08      	pop	{r3, pc}
 80a269c:	0806019c 	.word	0x0806019c

080a26a0 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80a26a0:	b508      	push	{r3, lr}
 80a26a2:	4b02      	ldr	r3, [pc, #8]	; (80a26ac <HAL_Delay_Milliseconds+0xc>)
 80a26a4:	681b      	ldr	r3, [r3, #0]
 80a26a6:	689b      	ldr	r3, [r3, #8]
 80a26a8:	9301      	str	r3, [sp, #4]
 80a26aa:	bd08      	pop	{r3, pc}
 80a26ac:	0806019c 	.word	0x0806019c

080a26b0 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a26b0:	b508      	push	{r3, lr}
 80a26b2:	4b02      	ldr	r3, [pc, #8]	; (80a26bc <HAL_Delay_Microseconds+0xc>)
 80a26b4:	681b      	ldr	r3, [r3, #0]
 80a26b6:	68db      	ldr	r3, [r3, #12]
 80a26b8:	9301      	str	r3, [sp, #4]
 80a26ba:	bd08      	pop	{r3, pc}
 80a26bc:	0806019c 	.word	0x0806019c

080a26c0 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a26c0:	b508      	push	{r3, lr}
 80a26c2:	4b02      	ldr	r3, [pc, #8]	; (80a26cc <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a26c4:	681b      	ldr	r3, [r3, #0]
 80a26c6:	695b      	ldr	r3, [r3, #20]
 80a26c8:	9301      	str	r3, [sp, #4]
 80a26ca:	bd08      	pop	{r3, pc}
 80a26cc:	0806019c 	.word	0x0806019c

080a26d0 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a26d0:	b508      	push	{r3, lr}
 80a26d2:	4b02      	ldr	r3, [pc, #8]	; (80a26dc <HAL_Core_System_Reset_Ex+0xc>)
 80a26d4:	681b      	ldr	r3, [r3, #0]
 80a26d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a26d8:	9301      	str	r3, [sp, #4]
 80a26da:	bd08      	pop	{r3, pc}
 80a26dc:	080601b8 	.word	0x080601b8

080a26e0 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a26e0:	b508      	push	{r3, lr}
 80a26e2:	4b02      	ldr	r3, [pc, #8]	; (80a26ec <os_thread_create+0xc>)
 80a26e4:	681b      	ldr	r3, [r3, #0]
 80a26e6:	685b      	ldr	r3, [r3, #4]
 80a26e8:	9301      	str	r3, [sp, #4]
 80a26ea:	bd08      	pop	{r3, pc}
 80a26ec:	080601d0 	.word	0x080601d0

080a26f0 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80a26f0:	b508      	push	{r3, lr}
 80a26f2:	4b02      	ldr	r3, [pc, #8]	; (80a26fc <os_thread_is_current+0xc>)
 80a26f4:	681b      	ldr	r3, [r3, #0]
 80a26f6:	689b      	ldr	r3, [r3, #8]
 80a26f8:	9301      	str	r3, [sp, #4]
 80a26fa:	bd08      	pop	{r3, pc}
 80a26fc:	080601d0 	.word	0x080601d0

080a2700 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80a2700:	b508      	push	{r3, lr}
 80a2702:	4b02      	ldr	r3, [pc, #8]	; (80a270c <os_thread_join+0xc>)
 80a2704:	681b      	ldr	r3, [r3, #0]
 80a2706:	691b      	ldr	r3, [r3, #16]
 80a2708:	9301      	str	r3, [sp, #4]
 80a270a:	bd08      	pop	{r3, pc}
 80a270c:	080601d0 	.word	0x080601d0

080a2710 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80a2710:	b508      	push	{r3, lr}
 80a2712:	4b02      	ldr	r3, [pc, #8]	; (80a271c <os_thread_cleanup+0xc>)
 80a2714:	681b      	ldr	r3, [r3, #0]
 80a2716:	695b      	ldr	r3, [r3, #20]
 80a2718:	9301      	str	r3, [sp, #4]
 80a271a:	bd08      	pop	{r3, pc}
 80a271c:	080601d0 	.word	0x080601d0

080a2720 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2720:	b508      	push	{r3, lr}
 80a2722:	4b02      	ldr	r3, [pc, #8]	; (80a272c <os_mutex_create+0xc>)
 80a2724:	681b      	ldr	r3, [r3, #0]
 80a2726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2728:	9301      	str	r3, [sp, #4]
 80a272a:	bd08      	pop	{r3, pc}
 80a272c:	080601d0 	.word	0x080601d0

080a2730 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80a2730:	b508      	push	{r3, lr}
 80a2732:	4b02      	ldr	r3, [pc, #8]	; (80a273c <os_thread_exit+0xc>)
 80a2734:	681b      	ldr	r3, [r3, #0]
 80a2736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2738:	9301      	str	r3, [sp, #4]
 80a273a:	bd08      	pop	{r3, pc}
 80a273c:	080601d0 	.word	0x080601d0

080a2740 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2740:	b508      	push	{r3, lr}
 80a2742:	4b02      	ldr	r3, [pc, #8]	; (80a274c <HAL_USART_Init+0xc>)
 80a2744:	681b      	ldr	r3, [r3, #0]
 80a2746:	699b      	ldr	r3, [r3, #24]
 80a2748:	9301      	str	r3, [sp, #4]
 80a274a:	bd08      	pop	{r3, pc}
 80a274c:	080601c4 	.word	0x080601c4

080a2750 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2750:	b508      	push	{r3, lr}
 80a2752:	4b02      	ldr	r3, [pc, #8]	; (80a275c <HAL_USART_Write_Data+0xc>)
 80a2754:	681b      	ldr	r3, [r3, #0]
 80a2756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2758:	9301      	str	r3, [sp, #4]
 80a275a:	bd08      	pop	{r3, pc}
 80a275c:	080601c4 	.word	0x080601c4

080a2760 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2760:	b508      	push	{r3, lr}
 80a2762:	4b02      	ldr	r3, [pc, #8]	; (80a276c <HAL_USART_Available_Data+0xc>)
 80a2764:	681b      	ldr	r3, [r3, #0]
 80a2766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2768:	9301      	str	r3, [sp, #4]
 80a276a:	bd08      	pop	{r3, pc}
 80a276c:	080601c4 	.word	0x080601c4

080a2770 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2770:	b508      	push	{r3, lr}
 80a2772:	4b02      	ldr	r3, [pc, #8]	; (80a277c <HAL_USART_Read_Data+0xc>)
 80a2774:	681b      	ldr	r3, [r3, #0]
 80a2776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2778:	9301      	str	r3, [sp, #4]
 80a277a:	bd08      	pop	{r3, pc}
 80a277c:	080601c4 	.word	0x080601c4

080a2780 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2780:	b508      	push	{r3, lr}
 80a2782:	4b02      	ldr	r3, [pc, #8]	; (80a278c <HAL_USART_Peek_Data+0xc>)
 80a2784:	681b      	ldr	r3, [r3, #0]
 80a2786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2788:	9301      	str	r3, [sp, #4]
 80a278a:	bd08      	pop	{r3, pc}
 80a278c:	080601c4 	.word	0x080601c4

080a2790 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2790:	b508      	push	{r3, lr}
 80a2792:	4b02      	ldr	r3, [pc, #8]	; (80a279c <HAL_USART_Flush_Data+0xc>)
 80a2794:	681b      	ldr	r3, [r3, #0]
 80a2796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2798:	9301      	str	r3, [sp, #4]
 80a279a:	bd08      	pop	{r3, pc}
 80a279c:	080601c4 	.word	0x080601c4

080a27a0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a27a0:	b508      	push	{r3, lr}
 80a27a2:	4b02      	ldr	r3, [pc, #8]	; (80a27ac <HAL_USART_Is_Enabled+0xc>)
 80a27a4:	681b      	ldr	r3, [r3, #0]
 80a27a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a27a8:	9301      	str	r3, [sp, #4]
 80a27aa:	bd08      	pop	{r3, pc}
 80a27ac:	080601c4 	.word	0x080601c4

080a27b0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a27b0:	b508      	push	{r3, lr}
 80a27b2:	4b02      	ldr	r3, [pc, #8]	; (80a27bc <HAL_USART_Available_Data_For_Write+0xc>)
 80a27b4:	681b      	ldr	r3, [r3, #0]
 80a27b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a27b8:	9301      	str	r3, [sp, #4]
 80a27ba:	bd08      	pop	{r3, pc}
 80a27bc:	080601c4 	.word	0x080601c4

080a27c0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a27c0:	b508      	push	{r3, lr}
 80a27c2:	4b02      	ldr	r3, [pc, #8]	; (80a27cc <HAL_I2C_Begin+0xc>)
 80a27c4:	681b      	ldr	r3, [r3, #0]
 80a27c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a27c8:	9301      	str	r3, [sp, #4]
 80a27ca:	bd08      	pop	{r3, pc}
 80a27cc:	080601ac 	.word	0x080601ac

080a27d0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a27d0:	b508      	push	{r3, lr}
 80a27d2:	4b02      	ldr	r3, [pc, #8]	; (80a27dc <HAL_I2C_Request_Data+0xc>)
 80a27d4:	681b      	ldr	r3, [r3, #0]
 80a27d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a27d8:	9301      	str	r3, [sp, #4]
 80a27da:	bd08      	pop	{r3, pc}
 80a27dc:	080601ac 	.word	0x080601ac

080a27e0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a27e0:	b508      	push	{r3, lr}
 80a27e2:	4b02      	ldr	r3, [pc, #8]	; (80a27ec <HAL_I2C_Begin_Transmission+0xc>)
 80a27e4:	681b      	ldr	r3, [r3, #0]
 80a27e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a27e8:	9301      	str	r3, [sp, #4]
 80a27ea:	bd08      	pop	{r3, pc}
 80a27ec:	080601ac 	.word	0x080601ac

080a27f0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a27f0:	b508      	push	{r3, lr}
 80a27f2:	4b02      	ldr	r3, [pc, #8]	; (80a27fc <HAL_I2C_End_Transmission+0xc>)
 80a27f4:	681b      	ldr	r3, [r3, #0]
 80a27f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a27f8:	9301      	str	r3, [sp, #4]
 80a27fa:	bd08      	pop	{r3, pc}
 80a27fc:	080601ac 	.word	0x080601ac

080a2800 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2800:	b508      	push	{r3, lr}
 80a2802:	4b02      	ldr	r3, [pc, #8]	; (80a280c <HAL_I2C_Write_Data+0xc>)
 80a2804:	681b      	ldr	r3, [r3, #0]
 80a2806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2808:	9301      	str	r3, [sp, #4]
 80a280a:	bd08      	pop	{r3, pc}
 80a280c:	080601ac 	.word	0x080601ac

080a2810 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2810:	b508      	push	{r3, lr}
 80a2812:	4b02      	ldr	r3, [pc, #8]	; (80a281c <HAL_I2C_Available_Data+0xc>)
 80a2814:	681b      	ldr	r3, [r3, #0]
 80a2816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2818:	9301      	str	r3, [sp, #4]
 80a281a:	bd08      	pop	{r3, pc}
 80a281c:	080601ac 	.word	0x080601ac

080a2820 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2820:	b508      	push	{r3, lr}
 80a2822:	4b02      	ldr	r3, [pc, #8]	; (80a282c <HAL_I2C_Read_Data+0xc>)
 80a2824:	681b      	ldr	r3, [r3, #0]
 80a2826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2828:	9301      	str	r3, [sp, #4]
 80a282a:	bd08      	pop	{r3, pc}
 80a282c:	080601ac 	.word	0x080601ac

080a2830 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2830:	b508      	push	{r3, lr}
 80a2832:	4b02      	ldr	r3, [pc, #8]	; (80a283c <HAL_I2C_Peek_Data+0xc>)
 80a2834:	681b      	ldr	r3, [r3, #0]
 80a2836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2838:	9301      	str	r3, [sp, #4]
 80a283a:	bd08      	pop	{r3, pc}
 80a283c:	080601ac 	.word	0x080601ac

080a2840 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2840:	b508      	push	{r3, lr}
 80a2842:	4b02      	ldr	r3, [pc, #8]	; (80a284c <HAL_I2C_Flush_Data+0xc>)
 80a2844:	681b      	ldr	r3, [r3, #0]
 80a2846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2848:	9301      	str	r3, [sp, #4]
 80a284a:	bd08      	pop	{r3, pc}
 80a284c:	080601ac 	.word	0x080601ac

080a2850 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2850:	b508      	push	{r3, lr}
 80a2852:	4b02      	ldr	r3, [pc, #8]	; (80a285c <HAL_I2C_Is_Enabled+0xc>)
 80a2854:	681b      	ldr	r3, [r3, #0]
 80a2856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2858:	9301      	str	r3, [sp, #4]
 80a285a:	bd08      	pop	{r3, pc}
 80a285c:	080601ac 	.word	0x080601ac

080a2860 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2860:	b508      	push	{r3, lr}
 80a2862:	4b03      	ldr	r3, [pc, #12]	; (80a2870 <HAL_I2C_Init+0x10>)
 80a2864:	681b      	ldr	r3, [r3, #0]
 80a2866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a286a:	9301      	str	r3, [sp, #4]
 80a286c:	bd08      	pop	{r3, pc}
 80a286e:	0000      	.short	0x0000
 80a2870:	080601ac 	.word	0x080601ac

080a2874 <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a2874:	b508      	push	{r3, lr}
 80a2876:	4b02      	ldr	r3, [pc, #8]	; (80a2880 <socket_active_status+0xc>)
 80a2878:	681b      	ldr	r3, [r3, #0]
 80a287a:	681b      	ldr	r3, [r3, #0]
 80a287c:	9301      	str	r3, [sp, #4]
 80a287e:	bd08      	pop	{r3, pc}
 80a2880:	080601bc 	.word	0x080601bc

080a2884 <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2884:	b508      	push	{r3, lr}
 80a2886:	4b02      	ldr	r3, [pc, #8]	; (80a2890 <socket_handle_valid+0xc>)
 80a2888:	681b      	ldr	r3, [r3, #0]
 80a288a:	685b      	ldr	r3, [r3, #4]
 80a288c:	9301      	str	r3, [sp, #4]
 80a288e:	bd08      	pop	{r3, pc}
 80a2890:	080601bc 	.word	0x080601bc

080a2894 <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2894:	b508      	push	{r3, lr}
 80a2896:	4b02      	ldr	r3, [pc, #8]	; (80a28a0 <socket_create+0xc>)
 80a2898:	681b      	ldr	r3, [r3, #0]
 80a289a:	689b      	ldr	r3, [r3, #8]
 80a289c:	9301      	str	r3, [sp, #4]
 80a289e:	bd08      	pop	{r3, pc}
 80a28a0:	080601bc 	.word	0x080601bc

080a28a4 <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a28a4:	b508      	push	{r3, lr}
 80a28a6:	4b02      	ldr	r3, [pc, #8]	; (80a28b0 <socket_connect+0xc>)
 80a28a8:	681b      	ldr	r3, [r3, #0]
 80a28aa:	68db      	ldr	r3, [r3, #12]
 80a28ac:	9301      	str	r3, [sp, #4]
 80a28ae:	bd08      	pop	{r3, pc}
 80a28b0:	080601bc 	.word	0x080601bc

080a28b4 <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a28b4:	b508      	push	{r3, lr}
 80a28b6:	4b02      	ldr	r3, [pc, #8]	; (80a28c0 <socket_receive+0xc>)
 80a28b8:	681b      	ldr	r3, [r3, #0]
 80a28ba:	691b      	ldr	r3, [r3, #16]
 80a28bc:	9301      	str	r3, [sp, #4]
 80a28be:	bd08      	pop	{r3, pc}
 80a28c0:	080601bc 	.word	0x080601bc

080a28c4 <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a28c4:	b508      	push	{r3, lr}
 80a28c6:	4b02      	ldr	r3, [pc, #8]	; (80a28d0 <socket_close+0xc>)
 80a28c8:	681b      	ldr	r3, [r3, #0]
 80a28ca:	6a1b      	ldr	r3, [r3, #32]
 80a28cc:	9301      	str	r3, [sp, #4]
 80a28ce:	bd08      	pop	{r3, pc}
 80a28d0:	080601bc 	.word	0x080601bc

080a28d4 <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a28d4:	b508      	push	{r3, lr}
 80a28d6:	4b02      	ldr	r3, [pc, #8]	; (80a28e0 <socket_handle_invalid+0xc>)
 80a28d8:	681b      	ldr	r3, [r3, #0]
 80a28da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a28dc:	9301      	str	r3, [sp, #4]
 80a28de:	bd08      	pop	{r3, pc}
 80a28e0:	080601bc 	.word	0x080601bc

080a28e4 <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a28e4:	b508      	push	{r3, lr}
 80a28e6:	4b02      	ldr	r3, [pc, #8]	; (80a28f0 <socket_send_ex+0xc>)
 80a28e8:	681b      	ldr	r3, [r3, #0]
 80a28ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a28ec:	9301      	str	r3, [sp, #4]
 80a28ee:	bd08      	pop	{r3, pc}
 80a28f0:	080601bc 	.word	0x080601bc

080a28f4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a28f4:	b508      	push	{r3, lr}
 80a28f6:	4b02      	ldr	r3, [pc, #8]	; (80a2900 <HAL_USB_USART_Init+0xc>)
 80a28f8:	681b      	ldr	r3, [r3, #0]
 80a28fa:	681b      	ldr	r3, [r3, #0]
 80a28fc:	9301      	str	r3, [sp, #4]
 80a28fe:	bd08      	pop	{r3, pc}
 80a2900:	080601d8 	.word	0x080601d8

080a2904 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2904:	b508      	push	{r3, lr}
 80a2906:	4b02      	ldr	r3, [pc, #8]	; (80a2910 <HAL_USB_USART_Available_Data+0xc>)
 80a2908:	681b      	ldr	r3, [r3, #0]
 80a290a:	691b      	ldr	r3, [r3, #16]
 80a290c:	9301      	str	r3, [sp, #4]
 80a290e:	bd08      	pop	{r3, pc}
 80a2910:	080601d8 	.word	0x080601d8

080a2914 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2914:	b508      	push	{r3, lr}
 80a2916:	4b02      	ldr	r3, [pc, #8]	; (80a2920 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2918:	681b      	ldr	r3, [r3, #0]
 80a291a:	695b      	ldr	r3, [r3, #20]
 80a291c:	9301      	str	r3, [sp, #4]
 80a291e:	bd08      	pop	{r3, pc}
 80a2920:	080601d8 	.word	0x080601d8

080a2924 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2924:	b508      	push	{r3, lr}
 80a2926:	4b02      	ldr	r3, [pc, #8]	; (80a2930 <HAL_USB_USART_Receive_Data+0xc>)
 80a2928:	681b      	ldr	r3, [r3, #0]
 80a292a:	699b      	ldr	r3, [r3, #24]
 80a292c:	9301      	str	r3, [sp, #4]
 80a292e:	bd08      	pop	{r3, pc}
 80a2930:	080601d8 	.word	0x080601d8

080a2934 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2934:	b508      	push	{r3, lr}
 80a2936:	4b02      	ldr	r3, [pc, #8]	; (80a2940 <HAL_USB_USART_Send_Data+0xc>)
 80a2938:	681b      	ldr	r3, [r3, #0]
 80a293a:	69db      	ldr	r3, [r3, #28]
 80a293c:	9301      	str	r3, [sp, #4]
 80a293e:	bd08      	pop	{r3, pc}
 80a2940:	080601d8 	.word	0x080601d8

080a2944 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2944:	b508      	push	{r3, lr}
 80a2946:	4b02      	ldr	r3, [pc, #8]	; (80a2950 <HAL_USB_USART_Flush_Data+0xc>)
 80a2948:	681b      	ldr	r3, [r3, #0]
 80a294a:	6a1b      	ldr	r3, [r3, #32]
 80a294c:	9301      	str	r3, [sp, #4]
 80a294e:	bd08      	pop	{r3, pc}
 80a2950:	080601d8 	.word	0x080601d8

080a2954 <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a2954:	b508      	push	{r3, lr}
 80a2956:	4b02      	ldr	r3, [pc, #8]	; (80a2960 <HAL_NET_SetNetWatchDog+0xc>)
 80a2958:	681b      	ldr	r3, [r3, #0]
 80a295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a295c:	9301      	str	r3, [sp, #4]
 80a295e:	bd08      	pop	{r3, pc}
 80a2960:	080601c0 	.word	0x080601c0

080a2964 <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2964:	b508      	push	{r3, lr}
 80a2966:	4b02      	ldr	r3, [pc, #8]	; (80a2970 <inet_gethostbyname+0xc>)
 80a2968:	681b      	ldr	r3, [r3, #0]
 80a296a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a296c:	9301      	str	r3, [sp, #4]
 80a296e:	bd08      	pop	{r3, pc}
 80a2970:	080601c0 	.word	0x080601c0

080a2974 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a2974:	b508      	push	{r3, lr}
 80a2976:	4b02      	ldr	r3, [pc, #8]	; (80a2980 <log_message+0xc>)
 80a2978:	681b      	ldr	r3, [r3, #0]
 80a297a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a297c:	9301      	str	r3, [sp, #4]
 80a297e:	bd08      	pop	{r3, pc}
 80a2980:	080201a8 	.word	0x080201a8

080a2984 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2984:	b508      	push	{r3, lr}
 80a2986:	4b02      	ldr	r3, [pc, #8]	; (80a2990 <set_system_mode+0xc>)
 80a2988:	681b      	ldr	r3, [r3, #0]
 80a298a:	685b      	ldr	r3, [r3, #4]
 80a298c:	9301      	str	r3, [sp, #4]
 80a298e:	bd08      	pop	{r3, pc}
 80a2990:	080601a4 	.word	0x080601a4

080a2994 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2994:	b508      	push	{r3, lr}
 80a2996:	4b02      	ldr	r3, [pc, #8]	; (80a29a0 <system_delay_ms+0xc>)
 80a2998:	681b      	ldr	r3, [r3, #0]
 80a299a:	695b      	ldr	r3, [r3, #20]
 80a299c:	9301      	str	r3, [sp, #4]
 80a299e:	bd08      	pop	{r3, pc}
 80a29a0:	080601a4 	.word	0x080601a4

080a29a4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a29a4:	b508      	push	{r3, lr}
 80a29a6:	4b02      	ldr	r3, [pc, #8]	; (80a29b0 <application_thread_current+0xc>)
 80a29a8:	681b      	ldr	r3, [r3, #0]
 80a29aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a29ac:	9301      	str	r3, [sp, #4]
 80a29ae:	bd08      	pop	{r3, pc}
 80a29b0:	080601a4 	.word	0x080601a4

080a29b4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a29b4:	b508      	push	{r3, lr}
 80a29b6:	4b02      	ldr	r3, [pc, #8]	; (80a29c0 <application_thread_invoke+0xc>)
 80a29b8:	681b      	ldr	r3, [r3, #0]
 80a29ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a29bc:	9301      	str	r3, [sp, #4]
 80a29be:	bd08      	pop	{r3, pc}
 80a29c0:	080601a4 	.word	0x080601a4

080a29c4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a29c4:	b508      	push	{r3, lr}
 80a29c6:	4b03      	ldr	r3, [pc, #12]	; (80a29d4 <system_ctrl_set_app_request_handler+0x10>)
 80a29c8:	681b      	ldr	r3, [r3, #0]
 80a29ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a29ce:	9301      	str	r3, [sp, #4]
 80a29d0:	bd08      	pop	{r3, pc}
 80a29d2:	0000      	.short	0x0000
 80a29d4:	080601a4 	.word	0x080601a4

080a29d8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a29d8:	b508      	push	{r3, lr}
 80a29da:	4b03      	ldr	r3, [pc, #12]	; (80a29e8 <system_ctrl_set_result+0x10>)
 80a29dc:	681b      	ldr	r3, [r3, #0]
 80a29de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a29e2:	9301      	str	r3, [sp, #4]
 80a29e4:	bd08      	pop	{r3, pc}
 80a29e6:	0000      	.short	0x0000
 80a29e8:	080601a4 	.word	0x080601a4

080a29ec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a29ec:	b508      	push	{r3, lr}
 80a29ee:	4b02      	ldr	r3, [pc, #8]	; (80a29f8 <network_connect+0xc>)
 80a29f0:	681b      	ldr	r3, [r3, #0]
 80a29f2:	685b      	ldr	r3, [r3, #4]
 80a29f4:	9301      	str	r3, [sp, #4]
 80a29f6:	bd08      	pop	{r3, pc}
 80a29f8:	080601c8 	.word	0x080601c8

080a29fc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a29fc:	b508      	push	{r3, lr}
 80a29fe:	4b02      	ldr	r3, [pc, #8]	; (80a2a08 <network_connecting+0xc>)
 80a2a00:	681b      	ldr	r3, [r3, #0]
 80a2a02:	689b      	ldr	r3, [r3, #8]
 80a2a04:	9301      	str	r3, [sp, #4]
 80a2a06:	bd08      	pop	{r3, pc}
 80a2a08:	080601c8 	.word	0x080601c8

080a2a0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2a0c:	b508      	push	{r3, lr}
 80a2a0e:	4b02      	ldr	r3, [pc, #8]	; (80a2a18 <network_disconnect+0xc>)
 80a2a10:	681b      	ldr	r3, [r3, #0]
 80a2a12:	68db      	ldr	r3, [r3, #12]
 80a2a14:	9301      	str	r3, [sp, #4]
 80a2a16:	bd08      	pop	{r3, pc}
 80a2a18:	080601c8 	.word	0x080601c8

080a2a1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2a1c:	b508      	push	{r3, lr}
 80a2a1e:	4b02      	ldr	r3, [pc, #8]	; (80a2a28 <network_ready+0xc>)
 80a2a20:	681b      	ldr	r3, [r3, #0]
 80a2a22:	691b      	ldr	r3, [r3, #16]
 80a2a24:	9301      	str	r3, [sp, #4]
 80a2a26:	bd08      	pop	{r3, pc}
 80a2a28:	080601c8 	.word	0x080601c8

080a2a2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2a2c:	b508      	push	{r3, lr}
 80a2a2e:	4b02      	ldr	r3, [pc, #8]	; (80a2a38 <network_on+0xc>)
 80a2a30:	681b      	ldr	r3, [r3, #0]
 80a2a32:	695b      	ldr	r3, [r3, #20]
 80a2a34:	9301      	str	r3, [sp, #4]
 80a2a36:	bd08      	pop	{r3, pc}
 80a2a38:	080601c8 	.word	0x080601c8

080a2a3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2a3c:	b508      	push	{r3, lr}
 80a2a3e:	4b02      	ldr	r3, [pc, #8]	; (80a2a48 <network_off+0xc>)
 80a2a40:	681b      	ldr	r3, [r3, #0]
 80a2a42:	699b      	ldr	r3, [r3, #24]
 80a2a44:	9301      	str	r3, [sp, #4]
 80a2a46:	bd08      	pop	{r3, pc}
 80a2a48:	080601c8 	.word	0x080601c8

080a2a4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2a4c:	b508      	push	{r3, lr}
 80a2a4e:	4b02      	ldr	r3, [pc, #8]	; (80a2a58 <network_listen+0xc>)
 80a2a50:	681b      	ldr	r3, [r3, #0]
 80a2a52:	69db      	ldr	r3, [r3, #28]
 80a2a54:	9301      	str	r3, [sp, #4]
 80a2a56:	bd08      	pop	{r3, pc}
 80a2a58:	080601c8 	.word	0x080601c8

080a2a5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2a5c:	b508      	push	{r3, lr}
 80a2a5e:	4b02      	ldr	r3, [pc, #8]	; (80a2a68 <network_listening+0xc>)
 80a2a60:	681b      	ldr	r3, [r3, #0]
 80a2a62:	6a1b      	ldr	r3, [r3, #32]
 80a2a64:	9301      	str	r3, [sp, #4]
 80a2a66:	bd08      	pop	{r3, pc}
 80a2a68:	080601c8 	.word	0x080601c8

080a2a6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2a6c:	b508      	push	{r3, lr}
 80a2a6e:	4b02      	ldr	r3, [pc, #8]	; (80a2a78 <network_set_listen_timeout+0xc>)
 80a2a70:	681b      	ldr	r3, [r3, #0]
 80a2a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2a74:	9301      	str	r3, [sp, #4]
 80a2a76:	bd08      	pop	{r3, pc}
 80a2a78:	080601c8 	.word	0x080601c8

080a2a7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2a7c:	b508      	push	{r3, lr}
 80a2a7e:	4b02      	ldr	r3, [pc, #8]	; (80a2a88 <network_get_listen_timeout+0xc>)
 80a2a80:	681b      	ldr	r3, [r3, #0]
 80a2a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2a84:	9301      	str	r3, [sp, #4]
 80a2a86:	bd08      	pop	{r3, pc}
 80a2a88:	080601c8 	.word	0x080601c8

080a2a8c <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 80a2a8c:	b508      	push	{r3, lr}
 80a2a8e:	4b02      	ldr	r3, [pc, #8]	; (80a2a98 <spark_function+0xc>)
 80a2a90:	681b      	ldr	r3, [r3, #0]
 80a2a92:	685b      	ldr	r3, [r3, #4]
 80a2a94:	9301      	str	r3, [sp, #4]
 80a2a96:	bd08      	pop	{r3, pc}
 80a2a98:	080601cc 	.word	0x080601cc

080a2a9c <spark_cloud_flag_connected>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2a9c:	b508      	push	{r3, lr}
 80a2a9e:	4b02      	ldr	r3, [pc, #8]	; (80a2aa8 <spark_cloud_flag_connected+0xc>)
 80a2aa0:	681b      	ldr	r3, [r3, #0]
 80a2aa2:	695b      	ldr	r3, [r3, #20]
 80a2aa4:	9301      	str	r3, [sp, #4]
 80a2aa6:	bd08      	pop	{r3, pc}
 80a2aa8:	080601cc 	.word	0x080601cc

080a2aac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2aac:	b508      	push	{r3, lr}
 80a2aae:	4b02      	ldr	r3, [pc, #8]	; (80a2ab8 <spark_send_event+0xc>)
 80a2ab0:	681b      	ldr	r3, [r3, #0]
 80a2ab2:	6a1b      	ldr	r3, [r3, #32]
 80a2ab4:	9301      	str	r3, [sp, #4]
 80a2ab6:	bd08      	pop	{r3, pc}
 80a2ab8:	080601cc 	.word	0x080601cc

080a2abc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2abc:	b508      	push	{r3, lr}
 80a2abe:	4b02      	ldr	r3, [pc, #8]	; (80a2ac8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2ac0:	681b      	ldr	r3, [r3, #0]
 80a2ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2ac4:	9301      	str	r3, [sp, #4]
 80a2ac6:	bd08      	pop	{r3, pc}
 80a2ac8:	080601cc 	.word	0x080601cc

080a2acc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2acc:	b508      	push	{r3, lr}
 80a2ace:	4b02      	ldr	r3, [pc, #8]	; (80a2ad8 <malloc+0xc>)
 80a2ad0:	681b      	ldr	r3, [r3, #0]
 80a2ad2:	681b      	ldr	r3, [r3, #0]
 80a2ad4:	9301      	str	r3, [sp, #4]
 80a2ad6:	bd08      	pop	{r3, pc}
 80a2ad8:	080601a0 	.word	0x080601a0

080a2adc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2adc:	b508      	push	{r3, lr}
 80a2ade:	4b02      	ldr	r3, [pc, #8]	; (80a2ae8 <free+0xc>)
 80a2ae0:	681b      	ldr	r3, [r3, #0]
 80a2ae2:	685b      	ldr	r3, [r3, #4]
 80a2ae4:	9301      	str	r3, [sp, #4]
 80a2ae6:	bd08      	pop	{r3, pc}
 80a2ae8:	080601a0 	.word	0x080601a0

080a2aec <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2aec:	b508      	push	{r3, lr}
 80a2aee:	4b02      	ldr	r3, [pc, #8]	; (80a2af8 <realloc+0xc>)
 80a2af0:	681b      	ldr	r3, [r3, #0]
 80a2af2:	689b      	ldr	r3, [r3, #8]
 80a2af4:	9301      	str	r3, [sp, #4]
 80a2af6:	bd08      	pop	{r3, pc}
 80a2af8:	080601a0 	.word	0x080601a0

080a2afc <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a2afc:	b508      	push	{r3, lr}
 80a2afe:	4b02      	ldr	r3, [pc, #8]	; (80a2b08 <snprintf+0xc>)
 80a2b00:	681b      	ldr	r3, [r3, #0]
 80a2b02:	69db      	ldr	r3, [r3, #28]
 80a2b04:	9301      	str	r3, [sp, #4]
 80a2b06:	bd08      	pop	{r3, pc}
 80a2b08:	080601a0 	.word	0x080601a0

080a2b0c <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a2b0c:	b508      	push	{r3, lr}
 80a2b0e:	4b02      	ldr	r3, [pc, #8]	; (80a2b18 <vsnprintf+0xc>)
 80a2b10:	681b      	ldr	r3, [r3, #0]
 80a2b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2b14:	9301      	str	r3, [sp, #4]
 80a2b16:	bd08      	pop	{r3, pc}
 80a2b18:	080601a0 	.word	0x080601a0

080a2b1c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2b1c:	b508      	push	{r3, lr}
 80a2b1e:	4b02      	ldr	r3, [pc, #8]	; (80a2b28 <abort+0xc>)
 80a2b20:	681b      	ldr	r3, [r3, #0]
 80a2b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2b24:	9301      	str	r3, [sp, #4]
 80a2b26:	bd08      	pop	{r3, pc}
 80a2b28:	080601a0 	.word	0x080601a0

080a2b2c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2b2c:	b508      	push	{r3, lr}
 80a2b2e:	4b02      	ldr	r3, [pc, #8]	; (80a2b38 <_malloc_r+0xc>)
 80a2b30:	681b      	ldr	r3, [r3, #0]
 80a2b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2b34:	9301      	str	r3, [sp, #4]
 80a2b36:	bd08      	pop	{r3, pc}
 80a2b38:	080601a0 	.word	0x080601a0

080a2b3c <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2b3c:	b508      	push	{r3, lr}
 80a2b3e:	4b02      	ldr	r3, [pc, #8]	; (80a2b48 <__errno+0xc>)
 80a2b40:	681b      	ldr	r3, [r3, #0]
 80a2b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2b44:	9301      	str	r3, [sp, #4]
 80a2b46:	bd08      	pop	{r3, pc}
 80a2b48:	080601a0 	.word	0x080601a0

080a2b4c <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2b4c:	4770      	bx	lr

080a2b4e <_ZN8SPIClassD0Ev>:
 80a2b4e:	b510      	push	{r4, lr}
 80a2b50:	4604      	mov	r4, r0
 80a2b52:	2110      	movs	r1, #16
 80a2b54:	f001 fd38 	bl	80a45c8 <_ZdlPvj>
 80a2b58:	4620      	mov	r0, r4
 80a2b5a:	bd10      	pop	{r4, pc}

080a2b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2b5c:	b570      	push	{r4, r5, r6, lr}
 80a2b5e:	4604      	mov	r4, r0
 80a2b60:	460e      	mov	r6, r1
 80a2b62:	4b07      	ldr	r3, [pc, #28]	; (80a2b80 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2b64:	2500      	movs	r5, #0
 80a2b66:	6003      	str	r3, [r0, #0]
 80a2b68:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2b6c:	f7ff fdd8 	bl	80a2720 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2b70:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2b72:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2b74:	f7ff fd7c 	bl	80a2670 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2b78:	60a5      	str	r5, [r4, #8]
}
 80a2b7a:	4620      	mov	r0, r4
 80a2b7c:	bd70      	pop	{r4, r5, r6, pc}
 80a2b7e:	bf00      	nop
 80a2b80:	080a6318 	.word	0x080a6318

080a2b84 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2b84:	7900      	ldrb	r0, [r0, #4]
 80a2b86:	f7ff bd7b 	b.w	80a2680 <HAL_SPI_Is_Enabled>

080a2b8a <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a2b8a:	4601      	mov	r1, r0
 80a2b8c:	2200      	movs	r2, #0
 80a2b8e:	208c      	movs	r0, #140	; 0x8c
 80a2b90:	f7ff bd9e 	b.w	80a26d0 <HAL_Core_System_Reset_Ex>

080a2b94 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a2b94:	2000      	movs	r0, #0
 80a2b96:	f7ff bff8 	b.w	80a2b8a <_ZN11SystemClass5resetEm>
	...

080a2b9c <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2ba0:	4b03      	ldr	r3, [pc, #12]	; (80a2bb0 <_GLOBAL__sub_I_System+0x14>)
 80a2ba2:	2000      	movs	r0, #0
 80a2ba4:	7018      	strb	r0, [r3, #0]
 80a2ba6:	8058      	strh	r0, [r3, #2]
 80a2ba8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2baa:	f7ff beeb 	b.w	80a2984 <set_system_mode>
 80a2bae:	bf00      	nop
 80a2bb0:	20000286 	.word	0x20000286

080a2bb4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a2bb4:	b510      	push	{r4, lr}
 80a2bb6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a2bb8:	f003 f9cb 	bl	80a5f52 <strlen>
 80a2bbc:	3801      	subs	r0, #1
 80a2bbe:	1823      	adds	r3, r4, r0
 80a2bc0:	4620      	mov	r0, r4
	while(i<j){
 80a2bc2:	4298      	cmp	r0, r3
 80a2bc4:	d206      	bcs.n	80a2bd4 <_Z11str_reversePc+0x20>
		c = *i;
 80a2bc6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2bc8:	7819      	ldrb	r1, [r3, #0]
 80a2bca:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a2bce:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a2bd2:	e7f6      	b.n	80a2bc2 <_Z11str_reversePc+0xe>
 80a2bd4:	bd10      	pop	{r4, pc}

080a2bd6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a2bd6:	b570      	push	{r4, r5, r6, lr}
 80a2bd8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a2bda:	1e91      	subs	r1, r2, #2
 80a2bdc:	2922      	cmp	r1, #34	; 0x22
 80a2bde:	d820      	bhi.n	80a2c22 <ultoa+0x4c>
 80a2be0:	4625      	mov	r5, r4
 80a2be2:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2be4:	b910      	cbnz	r0, 80a2bec <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2be6:	4423      	add	r3, r4
            *ptr++ = '0';
 80a2be8:	2230      	movs	r2, #48	; 0x30
 80a2bea:	e00e      	b.n	80a2c0a <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2bec:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2bf0:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2bf4:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2bf6:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a2bf8:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a2bfc:	bf94      	ite	ls
 80a2bfe:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a2c00:	3157      	addhi	r1, #87	; 0x57
 80a2c02:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a2c06:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2c08:	e7eb      	b.n	80a2be2 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2c0a:	4299      	cmp	r1, r3
 80a2c0c:	d202      	bcs.n	80a2c14 <ultoa+0x3e>
            *ptr++ = '0';
 80a2c0e:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2c12:	e7fa      	b.n	80a2c0a <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a2c14:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2c16:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a2c18:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a2c1a:	f7ff ffcb 	bl	80a2bb4 <_Z11str_reversePc>
	return buffer;
 80a2c1e:	4620      	mov	r0, r4
 80a2c20:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a2c22:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a2c24:	bd70      	pop	{r4, r5, r6, pc}

080a2c26 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2c26:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a2c28:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2c2a:	460c      	mov	r4, r1
 80a2c2c:	4615      	mov	r5, r2
	if(a<0){
 80a2c2e:	da0b      	bge.n	80a2c48 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a2c30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a2c34:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a2c38:	bf14      	ite	ne
 80a2c3a:	4258      	negne	r0, r3
 80a2c3c:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a2c3e:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a2c40:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a2c42:	462a      	mov	r2, r5
 80a2c44:	4419      	add	r1, r3
 80a2c46:	e000      	b.n	80a2c4a <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a2c48:	2301      	movs	r3, #1
 80a2c4a:	f7ff ffc4 	bl	80a2bd6 <ultoa>
	}
	return buffer;
}
 80a2c4e:	4620      	mov	r0, r4
 80a2c50:	bd38      	pop	{r3, r4, r5, pc}

080a2c52 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2c52:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2c54:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2c56:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2c58:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2c5c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2c5e:	2201      	movs	r2, #1
 80a2c60:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2c64:	4621      	mov	r1, r4
 80a2c66:	47a8      	blx	r5
}
 80a2c68:	b003      	add	sp, #12
 80a2c6a:	bd30      	pop	{r4, r5, pc}

080a2c6c <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a2c6c:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2c6e:	6803      	ldr	r3, [r0, #0]
 80a2c70:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a2c72:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2c76:	46a4      	mov	ip, r4
}
 80a2c78:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2c7a:	4760      	bx	ip

080a2c7c <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2c7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2c7e:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a2c80:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a2c82:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a2c86:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2c88:	4621      	mov	r1, r4
 80a2c8a:	4613      	mov	r3, r2
 80a2c8c:	2201      	movs	r2, #1
 80a2c8e:	47a8      	blx	r5
}
 80a2c90:	b003      	add	sp, #12
 80a2c92:	bd30      	pop	{r4, r5, pc}

080a2c94 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a2c94:	4770      	bx	lr

080a2c96 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a2c96:	4770      	bx	lr

080a2c98 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a2c98:	2000      	movs	r0, #0
 80a2c9a:	4770      	bx	lr

080a2c9c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a2c9c:	b510      	push	{r4, lr}
 80a2c9e:	4604      	mov	r4, r0
 80a2ca0:	2114      	movs	r1, #20
 80a2ca2:	f001 fc91 	bl	80a45c8 <_ZdlPvj>
 80a2ca6:	4620      	mov	r0, r4
 80a2ca8:	bd10      	pop	{r4, pc}

080a2caa <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a2caa:	f7fd b9fc 	b.w	80a00a6 <_ZdlPv>

080a2cae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a2cae:	b510      	push	{r4, lr}
 80a2cb0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a2cb2:	6803      	ldr	r3, [r0, #0]
 80a2cb4:	689b      	ldr	r3, [r3, #8]
 80a2cb6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a2cb8:	68a3      	ldr	r3, [r4, #8]
 80a2cba:	3b01      	subs	r3, #1
 80a2cbc:	60a3      	str	r3, [r4, #8]
 80a2cbe:	b92b      	cbnz	r3, 80a2ccc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a2cc0:	6823      	ldr	r3, [r4, #0]
 80a2cc2:	4620      	mov	r0, r4
        }
    }
 80a2cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a2cc8:	68db      	ldr	r3, [r3, #12]
 80a2cca:	4718      	bx	r3
 80a2ccc:	bd10      	pop	{r4, pc}
	...

080a2cd0 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a2cd0:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2cd2:	4604      	mov	r4, r0
 80a2cd4:	4606      	mov	r6, r0
 80a2cd6:	694d      	ldr	r5, [r1, #20]
 80a2cd8:	4b04      	ldr	r3, [pc, #16]	; (80a2cec <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a2cda:	358c      	adds	r5, #140	; 0x8c
 80a2cdc:	f844 3b04 	str.w	r3, [r4], #4
 80a2ce0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a2ce2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a2ce4:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a2ce6:	4630      	mov	r0, r6
 80a2ce8:	7023      	strb	r3, [r4, #0]
 80a2cea:	bd70      	pop	{r4, r5, r6, pc}
 80a2cec:	080a64dc 	.word	0x080a64dc

080a2cf0 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a2cf0:	b510      	push	{r4, lr}
 80a2cf2:	6943      	ldr	r3, [r0, #20]
 80a2cf4:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a2cf6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2cfa:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2cfe:	429a      	cmp	r2, r3
 80a2d00:	d005      	beq.n	80a2d0e <_ZN9TCPClient4peekEv+0x1e>
 80a2d02:	6962      	ldr	r2, [r4, #20]
 80a2d04:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2d08:	4413      	add	r3, r2
 80a2d0a:	7918      	ldrb	r0, [r3, #4]
 80a2d0c:	bd10      	pop	{r4, pc}
 80a2d0e:	6803      	ldr	r3, [r0, #0]
 80a2d10:	691b      	ldr	r3, [r3, #16]
 80a2d12:	4798      	blx	r3
 80a2d14:	2800      	cmp	r0, #0
 80a2d16:	d1f4      	bne.n	80a2d02 <_ZN9TCPClient4peekEv+0x12>
 80a2d18:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a2d1c:	bd10      	pop	{r4, pc}

080a2d1e <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a2d1e:	b510      	push	{r4, lr}
 80a2d20:	6943      	ldr	r3, [r0, #20]
 80a2d22:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a2d24:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2d28:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a2d2c:	429a      	cmp	r2, r3
 80a2d2e:	d008      	beq.n	80a2d42 <_ZN9TCPClient4readEv+0x24>
 80a2d30:	6962      	ldr	r2, [r4, #20]
 80a2d32:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2d36:	1c59      	adds	r1, r3, #1
 80a2d38:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a2d3c:	4413      	add	r3, r2
 80a2d3e:	7918      	ldrb	r0, [r3, #4]
 80a2d40:	bd10      	pop	{r4, pc}
 80a2d42:	6803      	ldr	r3, [r0, #0]
 80a2d44:	691b      	ldr	r3, [r3, #16]
 80a2d46:	4798      	blx	r3
 80a2d48:	2800      	cmp	r0, #0
 80a2d4a:	d1f1      	bne.n	80a2d30 <_ZN9TCPClient4readEv+0x12>
 80a2d4c:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a2d50:	bd10      	pop	{r4, pc}

080a2d52 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2d52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a2d54:	6943      	ldr	r3, [r0, #20]
 80a2d56:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a2d58:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2d5c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2d60:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a2d62:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a2d64:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a2d66:	d106      	bne.n	80a2d76 <_ZN9TCPClient4readEPhj+0x24>
 80a2d68:	6803      	ldr	r3, [r0, #0]
 80a2d6a:	691b      	ldr	r3, [r3, #16]
 80a2d6c:	4798      	blx	r3
 80a2d6e:	b910      	cbnz	r0, 80a2d76 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a2d70:	f04f 34ff 	mov.w	r4, #4294967295
 80a2d74:	e014      	b.n	80a2da0 <_ZN9TCPClient4readEPhj+0x4e>
 80a2d76:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2d78:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a2d7a:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a2d7e:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2d82:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a2d84:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a2d86:	42bc      	cmp	r4, r7
 80a2d88:	bf28      	it	cs
 80a2d8a:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a2d8c:	3104      	adds	r1, #4
 80a2d8e:	4622      	mov	r2, r4
 80a2d90:	f003 f876 	bl	80a5e80 <memcpy>
 80a2d94:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a2d96:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a2d9a:	4423      	add	r3, r4
 80a2d9c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a2da0:	4620      	mov	r0, r4
 80a2da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a2da4 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a2da4:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a2da6:	2300      	movs	r3, #0
 80a2da8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a2dac:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a2dae:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a2db2:	4770      	bx	lr

080a2db4 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a2db4:	b538      	push	{r3, r4, r5, lr}
 80a2db6:	6942      	ldr	r2, [r0, #20]
 80a2db8:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a2dba:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2dbe:	b11b      	cbz	r3, 80a2dc8 <_ZN9TCPClient9availableEv+0x14>
 80a2dc0:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a2dc4:	429a      	cmp	r2, r3
 80a2dc6:	d00c      	beq.n	80a2de2 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2dc8:	6920      	ldr	r0, [r4, #16]
 80a2dca:	f001 faed 	bl	80a43a8 <_ZN5spark12NetworkClass4fromEm>
 80a2dce:	6803      	ldr	r3, [r0, #0]
 80a2dd0:	68db      	ldr	r3, [r3, #12]
 80a2dd2:	4798      	blx	r3
 80a2dd4:	b318      	cbz	r0, 80a2e1e <_ZN9TCPClient9availableEv+0x6a>
 80a2dd6:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2dd8:	6818      	ldr	r0, [r3, #0]
 80a2dda:	f7ff fd53 	bl	80a2884 <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a2dde:	b918      	cbnz	r0, 80a2de8 <_ZN9TCPClient9availableEv+0x34>
 80a2de0:	e01d      	b.n	80a2e1e <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a2de2:	f7ff ffdf 	bl	80a2da4 <_ZN9TCPClient12flush_bufferEv>
 80a2de6:	e7ef      	b.n	80a2dc8 <_ZN9TCPClient9availableEv+0x14>
 80a2de8:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a2dea:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a2dee:	297f      	cmp	r1, #127	; 0x7f
 80a2df0:	d815      	bhi.n	80a2e1e <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a2df2:	1d05      	adds	r5, r0, #4
 80a2df4:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a2df8:	2300      	movs	r3, #0
 80a2dfa:	4429      	add	r1, r5
 80a2dfc:	6800      	ldr	r0, [r0, #0]
 80a2dfe:	f7ff fd59 	bl	80a28b4 <socket_receive>
            if (ret > 0)
 80a2e02:	2800      	cmp	r0, #0
 80a2e04:	dd0b      	ble.n	80a2e1e <_ZN9TCPClient9availableEv+0x6a>
 80a2e06:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a2e08:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a2e0c:	b90a      	cbnz	r2, 80a2e12 <_ZN9TCPClient9availableEv+0x5e>
 80a2e0e:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a2e12:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a2e14:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2e18:	4418      	add	r0, r3
 80a2e1a:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a2e1e:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a2e20:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a2e24:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a2e28:	1a18      	subs	r0, r3, r0
}
 80a2e2a:	bd38      	pop	{r3, r4, r5, pc}

080a2e2c <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a2e2c:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2e2e:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a2e30:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2e32:	6818      	ldr	r0, [r3, #0]
 80a2e34:	f7ff fd26 	bl	80a2884 <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a2e38:	b118      	cbz	r0, 80a2e42 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a2e3a:	6963      	ldr	r3, [r4, #20]
 80a2e3c:	6818      	ldr	r0, [r3, #0]
 80a2e3e:	f7ff fd41 	bl	80a28c4 <socket_close>
 80a2e42:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a2e44:	f7ff fd46 	bl	80a28d4 <socket_handle_invalid>
 80a2e48:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a2e4a:	6960      	ldr	r0, [r4, #20]
 80a2e4c:	2211      	movs	r2, #17
 80a2e4e:	2100      	movs	r1, #0
 80a2e50:	308c      	adds	r0, #140	; 0x8c
 80a2e52:	f003 f820 	bl	80a5e96 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a2e56:	4620      	mov	r0, r4
}
 80a2e58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a2e5c:	f7ff bfa2 	b.w	80a2da4 <_ZN9TCPClient12flush_bufferEv>

080a2e60 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a2e64:	461f      	mov	r7, r3
    stop();
 80a2e66:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2e68:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a2e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a2e6c:	4606      	mov	r6, r0
 80a2e6e:	460c      	mov	r4, r1
 80a2e70:	4615      	mov	r5, r2
    stop();
 80a2e72:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a2e74:	4638      	mov	r0, r7
 80a2e76:	f001 fa97 	bl	80a43a8 <_ZN5spark12NetworkClass4fromEm>
 80a2e7a:	6803      	ldr	r3, [r0, #0]
 80a2e7c:	68db      	ldr	r3, [r3, #12]
 80a2e7e:	4798      	blx	r3
 80a2e80:	2800      	cmp	r0, #0
 80a2e82:	d056      	beq.n	80a2f32 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2e84:	9700      	str	r7, [sp, #0]
 80a2e86:	462b      	mov	r3, r5
 80a2e88:	2206      	movs	r2, #6
 80a2e8a:	2101      	movs	r1, #1
 80a2e8c:	2002      	movs	r0, #2
 80a2e8e:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a2e92:	f7ff fcff 	bl	80a2894 <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2e96:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a2e98:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a2e9c:	2700      	movs	r7, #0
 80a2e9e:	9302      	str	r3, [sp, #8]
 80a2ea0:	6973      	ldr	r3, [r6, #20]
 80a2ea2:	9703      	str	r7, [sp, #12]
 80a2ea4:	681b      	ldr	r3, [r3, #0]
 80a2ea6:	2001      	movs	r0, #1
 80a2ea8:	9301      	str	r3, [sp, #4]
 80a2eaa:	4b23      	ldr	r3, [pc, #140]	; (80a2f38 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a2eac:	aa02      	add	r2, sp, #8
 80a2eae:	9300      	str	r3, [sp, #0]
 80a2eb0:	4922      	ldr	r1, [pc, #136]	; (80a2f3c <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a2eb2:	463b      	mov	r3, r7
 80a2eb4:	f7ff fd5e 	bl	80a2974 <log_message>

          if (socket_handle_valid(d_->sock))
 80a2eb8:	6973      	ldr	r3, [r6, #20]
 80a2eba:	6818      	ldr	r0, [r3, #0]
 80a2ebc:	f7ff fce2 	bl	80a2884 <socket_handle_valid>
 80a2ec0:	2800      	cmp	r0, #0
 80a2ec2:	d036      	beq.n	80a2f32 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a2ec4:	4630      	mov	r0, r6
 80a2ec6:	f7ff ff6d 	bl	80a2da4 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a2eca:	2302      	movs	r3, #2
 80a2ecc:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a2ed0:	0a2b      	lsrs	r3, r5, #8
 80a2ed2:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2ed6:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2ed8:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a2edc:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a2ee0:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a2ee2:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a2ee6:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a2eea:	7963      	ldrb	r3, [r4, #5]
 80a2eec:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a2ef0:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a2ef4:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2ef8:	f7ff fd2c 	bl	80a2954 <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2efc:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a2efe:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a2f00:	2210      	movs	r2, #16
 80a2f02:	a902      	add	r1, sp, #8
 80a2f04:	6818      	ldr	r0, [r3, #0]
 80a2f06:	f7ff fccd 	bl	80a28a4 <socket_connect>
 80a2f0a:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a2f0c:	4628      	mov	r0, r5
 80a2f0e:	f7ff fd21 	bl	80a2954 <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a2f12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a2f14:	6975      	ldr	r5, [r6, #20]
 80a2f16:	358c      	adds	r5, #140	; 0x8c
 80a2f18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a2f1a:	6823      	ldr	r3, [r4, #0]
 80a2f1c:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a2f1e:	f1b8 0f00 	cmp.w	r8, #0
 80a2f22:	d005      	beq.n	80a2f30 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a2f24:	6833      	ldr	r3, [r6, #0]
 80a2f26:	4630      	mov	r0, r6
 80a2f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2f2a:	4798      	blx	r3
 80a2f2c:	4638      	mov	r0, r7
 80a2f2e:	e000      	b.n	80a2f32 <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a2f30:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a2f32:	b00a      	add	sp, #40	; 0x28
 80a2f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a2f38:	080a638f 	.word	0x080a638f
 80a2f3c:	080a6388 	.word	0x080a6388

080a2f40 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2f40:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2f42:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a2f44:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2f46:	6818      	ldr	r0, [r3, #0]
 80a2f48:	f7ff fc9c 	bl	80a2884 <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a2f4c:	b908      	cbnz	r0, 80a2f52 <_ZN9TCPClient6statusEv+0x12>
 80a2f4e:	2000      	movs	r0, #0
 80a2f50:	bd10      	pop	{r4, pc}
 80a2f52:	6920      	ldr	r0, [r4, #16]
 80a2f54:	f001 fa28 	bl	80a43a8 <_ZN5spark12NetworkClass4fromEm>
 80a2f58:	6803      	ldr	r3, [r0, #0]
 80a2f5a:	68db      	ldr	r3, [r3, #12]
 80a2f5c:	4798      	blx	r3
 80a2f5e:	2800      	cmp	r0, #0
 80a2f60:	d0f5      	beq.n	80a2f4e <_ZN9TCPClient6statusEv+0xe>
 80a2f62:	6963      	ldr	r3, [r4, #20]
 80a2f64:	6818      	ldr	r0, [r3, #0]
 80a2f66:	f7ff fc85 	bl	80a2874 <socket_active_status>
 80a2f6a:	fab0 f080 	clz	r0, r0
 80a2f6e:	0940      	lsrs	r0, r0, #5
}
 80a2f70:	bd10      	pop	{r4, pc}

080a2f72 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a2f72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a2f76:	2500      	movs	r5, #0
 80a2f78:	6045      	str	r5, [r0, #4]
 80a2f7a:	4604      	mov	r4, r0
 80a2f7c:	460e      	mov	r6, r1
 80a2f7e:	4617      	mov	r7, r2
 80a2f80:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2f82:	f7ff ffdd 	bl	80a2f40 <_ZN9TCPClient6statusEv>
 80a2f86:	b160      	cbz	r0, 80a2fa2 <_ZN9TCPClient5writeEPKhjm+0x30>
 80a2f88:	6960      	ldr	r0, [r4, #20]
 80a2f8a:	9501      	str	r5, [sp, #4]
 80a2f8c:	f8cd 8000 	str.w	r8, [sp]
 80a2f90:	462b      	mov	r3, r5
 80a2f92:	463a      	mov	r2, r7
 80a2f94:	4631      	mov	r1, r6
 80a2f96:	6800      	ldr	r0, [r0, #0]
 80a2f98:	f7ff fca4 	bl	80a28e4 <socket_send_ex>
    if (ret < 0) {
 80a2f9c:	2800      	cmp	r0, #0
 80a2f9e:	da03      	bge.n	80a2fa8 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a2fa0:	e001      	b.n	80a2fa6 <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a2fa2:	f04f 30ff 	mov.w	r0, #4294967295
 80a2fa6:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a2fa8:	b002      	add	sp, #8
 80a2faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a2fae <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a2fae:	b538      	push	{r3, r4, r5, lr}
 80a2fb0:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a2fb2:	f7ff ffc5 	bl	80a2f40 <_ZN9TCPClient6statusEv>
 80a2fb6:	bb00      	cbnz	r0, 80a2ffa <_ZN9TCPClient9connectedEv+0x4c>
 80a2fb8:	6963      	ldr	r3, [r4, #20]
 80a2fba:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a2fbe:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a2fc2:	4291      	cmp	r1, r2
 80a2fc4:	d119      	bne.n	80a2ffa <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a2fc6:	6818      	ldr	r0, [r3, #0]
 80a2fc8:	f7ff fc5c 	bl	80a2884 <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a2fcc:	b128      	cbz	r0, 80a2fda <_ZN9TCPClient9connectedEv+0x2c>
 80a2fce:	6963      	ldr	r3, [r4, #20]
 80a2fd0:	6818      	ldr	r0, [r3, #0]
 80a2fd2:	f7ff fc4f 	bl	80a2874 <socket_active_status>
 80a2fd6:	2801      	cmp	r0, #1
 80a2fd8:	d001      	beq.n	80a2fde <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a2fda:	2500      	movs	r5, #0
 80a2fdc:	e00e      	b.n	80a2ffc <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a2fde:	6823      	ldr	r3, [r4, #0]
 80a2fe0:	4620      	mov	r0, r4
 80a2fe2:	691b      	ldr	r3, [r3, #16]
 80a2fe4:	4798      	blx	r3
 80a2fe6:	2800      	cmp	r0, #0
 80a2fe8:	bf14      	ite	ne
 80a2fea:	2501      	movne	r5, #1
 80a2fec:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a2fee:	d105      	bne.n	80a2ffc <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a2ff0:	6823      	ldr	r3, [r4, #0]
 80a2ff2:	4620      	mov	r0, r4
 80a2ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2ff6:	4798      	blx	r3
 80a2ff8:	e000      	b.n	80a2ffc <_ZN9TCPClient9connectedEv+0x4e>
 80a2ffa:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a2ffc:	4628      	mov	r0, r5
 80a2ffe:	bd38      	pop	{r3, r4, r5, pc}

080a3000 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a3000:	b508      	push	{r3, lr}
   return (status()!=0);
 80a3002:	f7ff ff9d 	bl	80a2f40 <_ZN9TCPClient6statusEv>
}
 80a3006:	3000      	adds	r0, #0
 80a3008:	bf18      	it	ne
 80a300a:	2001      	movne	r0, #1
 80a300c:	bd08      	pop	{r3, pc}

080a300e <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a300e:	b510      	push	{r4, lr}
 80a3010:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a3012:	2300      	movs	r3, #0
 80a3014:	6001      	str	r1, [r0, #0]
 80a3016:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a301a:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a301e:	3088      	adds	r0, #136	; 0x88
 80a3020:	f000 feea 	bl	80a3df8 <_ZN9IPAddressC1Ev>
}
 80a3024:	4620      	mov	r0, r4
 80a3026:	bd10      	pop	{r4, pc}

080a3028 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a3028:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a302c:	b570      	push	{r4, r5, r6, lr}
 80a302e:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a3030:	4a14      	ldr	r2, [pc, #80]	; (80a3084 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3032:	2300      	movs	r3, #0
 80a3034:	6043      	str	r3, [r0, #4]
 80a3036:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a3038:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a303a:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a303c:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a303e:	20a0      	movs	r0, #160	; 0xa0
 80a3040:	460e      	mov	r6, r1
 80a3042:	f7fd f82c 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a3046:	4605      	mov	r5, r0
 80a3048:	b110      	cbz	r0, 80a3050 <_ZN9TCPClientC1Em+0x28>
 80a304a:	4631      	mov	r1, r6
 80a304c:	f7ff ffdf 	bl	80a300e <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a3050:	2014      	movs	r0, #20
 80a3052:	f7fd f824 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a3056:	4603      	mov	r3, r0
 80a3058:	b128      	cbz	r0, 80a3066 <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a305a:	2201      	movs	r2, #1
 80a305c:	6042      	str	r2, [r0, #4]
 80a305e:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3060:	4a09      	ldr	r2, [pc, #36]	; (80a3088 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a3062:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a3064:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a3066:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a3068:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a306a:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a306c:	b128      	cbz	r0, 80a307a <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a306e:	6843      	ldr	r3, [r0, #4]
 80a3070:	3b01      	subs	r3, #1
 80a3072:	6043      	str	r3, [r0, #4]
 80a3074:	b90b      	cbnz	r3, 80a307a <_ZN9TCPClientC1Em+0x52>
 80a3076:	f7ff fe1a 	bl	80a2cae <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a307a:	4620      	mov	r0, r4
 80a307c:	f7ff fe92 	bl	80a2da4 <_ZN9TCPClient12flush_bufferEv>
}
 80a3080:	4620      	mov	r0, r4
 80a3082:	bd70      	pop	{r4, r5, r6, pc}
 80a3084:	080a6344 	.word	0x080a6344
 80a3088:	080a6328 	.word	0x080a6328

080a308c <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a308c:	b510      	push	{r4, lr}
 80a308e:	4604      	mov	r4, r0
 80a3090:	f7ff fc20 	bl	80a28d4 <socket_handle_invalid>
 80a3094:	4601      	mov	r1, r0
 80a3096:	4620      	mov	r0, r4
 80a3098:	f7ff ffc6 	bl	80a3028 <_ZN9TCPClientC1Em>
{
}
 80a309c:	4620      	mov	r0, r4
 80a309e:	bd10      	pop	{r4, pc}

080a30a0 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a30a0:	b510      	push	{r4, lr}
 80a30a2:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a30a4:	6800      	ldr	r0, [r0, #0]
 80a30a6:	f7ff fbed 	bl	80a2884 <socket_handle_valid>
 80a30aa:	b110      	cbz	r0, 80a30b2 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a30ac:	6820      	ldr	r0, [r4, #0]
 80a30ae:	f7ff fc09 	bl	80a28c4 <socket_close>
    }
}
 80a30b2:	4620      	mov	r0, r4
 80a30b4:	bd10      	pop	{r4, pc}

080a30b6 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a30b6:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a30b8:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a30ba:	4620      	mov	r0, r4
 80a30bc:	f7ff fff0 	bl	80a30a0 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a30c0:	b124      	cbz	r4, 80a30cc <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a30c2:	4620      	mov	r0, r4
 80a30c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a30c8:	f7fc bfed 	b.w	80a00a6 <_ZdlPv>
 80a30cc:	bd10      	pop	{r4, pc}
	...

080a30d0 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a30d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a30d4:	461f      	mov	r7, r3
    stop();
 80a30d6:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a30d8:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a30da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a30dc:	4606      	mov	r6, r0
 80a30de:	460d      	mov	r5, r1
 80a30e0:	4690      	mov	r8, r2
    stop();
 80a30e2:	4798      	blx	r3
    if (Network.ready())
 80a30e4:	4813      	ldr	r0, [pc, #76]	; (80a3134 <_ZN9TCPClient7connectEPKctm+0x64>)
 80a30e6:	f001 f912 	bl	80a430e <_ZN5spark12NetworkClass5readyEv>
 80a30ea:	b300      	cbz	r0, 80a312e <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a30ec:	a802      	add	r0, sp, #8
 80a30ee:	f000 fe83 	bl	80a3df8 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a30f2:	4628      	mov	r0, r5
 80a30f4:	f002 ff2d 	bl	80a5f52 <strlen>
 80a30f8:	2400      	movs	r4, #0
 80a30fa:	b281      	uxth	r1, r0
 80a30fc:	9400      	str	r4, [sp, #0]
 80a30fe:	463b      	mov	r3, r7
 80a3100:	aa03      	add	r2, sp, #12
 80a3102:	4628      	mov	r0, r5
 80a3104:	f7ff fc2e 	bl	80a2964 <inet_gethostbyname>
 80a3108:	b980      	cbnz	r0, 80a312c <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a310a:	6833      	ldr	r3, [r6, #0]
 80a310c:	ad09      	add	r5, sp, #36	; 0x24
 80a310e:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a3112:	4b09      	ldr	r3, [pc, #36]	; (80a3138 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a3114:	ac03      	add	r4, sp, #12
 80a3116:	9308      	str	r3, [sp, #32]
 80a3118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a311a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a311c:	6823      	ldr	r3, [r4, #0]
 80a311e:	4642      	mov	r2, r8
 80a3120:	702b      	strb	r3, [r5, #0]
 80a3122:	a908      	add	r1, sp, #32
 80a3124:	463b      	mov	r3, r7
 80a3126:	4630      	mov	r0, r6
 80a3128:	47c8      	blx	r9
 80a312a:	e000      	b.n	80a312e <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a312c:	4620      	mov	r0, r4
}
 80a312e:	b00f      	add	sp, #60	; 0x3c
 80a3130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a3134:	20000710 	.word	0x20000710
 80a3138:	080a64dc 	.word	0x080a64dc

080a313c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a313c:	b510      	push	{r4, lr}
 80a313e:	4604      	mov	r4, r0
{
	free(buffer);
 80a3140:	6800      	ldr	r0, [r0, #0]
 80a3142:	f7ff fccb 	bl	80a2adc <free>
}
 80a3146:	4620      	mov	r0, r4
 80a3148:	bd10      	pop	{r4, pc}

080a314a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a314a:	b510      	push	{r4, lr}
 80a314c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a314e:	6800      	ldr	r0, [r0, #0]
 80a3150:	b108      	cbz	r0, 80a3156 <_ZN6String10invalidateEv+0xc>
 80a3152:	f7ff fcc3 	bl	80a2adc <free>
	buffer = NULL;
 80a3156:	2300      	movs	r3, #0
 80a3158:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a315a:	60a3      	str	r3, [r4, #8]
 80a315c:	6063      	str	r3, [r4, #4]
 80a315e:	bd10      	pop	{r4, pc}

080a3160 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a3160:	b538      	push	{r3, r4, r5, lr}
 80a3162:	4604      	mov	r4, r0
 80a3164:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a3166:	6800      	ldr	r0, [r0, #0]
 80a3168:	3101      	adds	r1, #1
 80a316a:	f7ff fcbf 	bl	80a2aec <realloc>
	if (newbuffer) {
 80a316e:	b110      	cbz	r0, 80a3176 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3170:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a3174:	2001      	movs	r0, #1
	}
	return 0;
}
 80a3176:	bd38      	pop	{r3, r4, r5, pc}

080a3178 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3178:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a317a:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a317c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a317e:	b113      	cbz	r3, 80a3186 <_ZN6String7reserveEj+0xe>
 80a3180:	6843      	ldr	r3, [r0, #4]
 80a3182:	428b      	cmp	r3, r1
 80a3184:	d207      	bcs.n	80a3196 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a3186:	4620      	mov	r0, r4
 80a3188:	f7ff ffea 	bl	80a3160 <_ZN6String12changeBufferEj>
 80a318c:	b120      	cbz	r0, 80a3198 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a318e:	68a3      	ldr	r3, [r4, #8]
 80a3190:	b90b      	cbnz	r3, 80a3196 <_ZN6String7reserveEj+0x1e>
 80a3192:	6822      	ldr	r2, [r4, #0]
 80a3194:	7013      	strb	r3, [r2, #0]
 80a3196:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3198:	bd10      	pop	{r4, pc}

080a319a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a319a:	b570      	push	{r4, r5, r6, lr}
 80a319c:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a319e:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a31a0:	4604      	mov	r4, r0
 80a31a2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a31a4:	f7ff ffe8 	bl	80a3178 <_ZN6String7reserveEj>
 80a31a8:	b918      	cbnz	r0, 80a31b2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a31aa:	4620      	mov	r0, r4
 80a31ac:	f7ff ffcd 	bl	80a314a <_ZN6String10invalidateEv>
		return *this;
 80a31b0:	e009      	b.n	80a31c6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a31b2:	462a      	mov	r2, r5
 80a31b4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a31b6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a31b8:	6820      	ldr	r0, [r4, #0]
 80a31ba:	f002 fe61 	bl	80a5e80 <memcpy>
	buffer[len] = 0;
 80a31be:	6822      	ldr	r2, [r4, #0]
 80a31c0:	68a3      	ldr	r3, [r4, #8]
 80a31c2:	2100      	movs	r1, #0
 80a31c4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a31c6:	4620      	mov	r0, r4
 80a31c8:	bd70      	pop	{r4, r5, r6, pc}

080a31ca <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a31ca:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a31cc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a31ce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a31d0:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a31d2:	6043      	str	r3, [r0, #4]
	len = 0;
 80a31d4:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a31d6:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a31d8:	460d      	mov	r5, r1
 80a31da:	b139      	cbz	r1, 80a31ec <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a31dc:	4608      	mov	r0, r1
 80a31de:	f002 feb8 	bl	80a5f52 <strlen>
 80a31e2:	4629      	mov	r1, r5
 80a31e4:	4602      	mov	r2, r0
 80a31e6:	4620      	mov	r0, r4
 80a31e8:	f7ff ffd7 	bl	80a319a <_ZN6String4copyEPKcj>
}
 80a31ec:	4620      	mov	r0, r4
 80a31ee:	bd38      	pop	{r3, r4, r5, pc}

080a31f0 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a31f0:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a31f2:	b510      	push	{r4, lr}
 80a31f4:	460b      	mov	r3, r1
 80a31f6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a31f8:	d007      	beq.n	80a320a <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a31fa:	6809      	ldr	r1, [r1, #0]
 80a31fc:	b119      	cbz	r1, 80a3206 <_ZN6StringaSERKS_+0x16>
 80a31fe:	689a      	ldr	r2, [r3, #8]
 80a3200:	f7ff ffcb 	bl	80a319a <_ZN6String4copyEPKcj>
 80a3204:	e001      	b.n	80a320a <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a3206:	f7ff ffa0 	bl	80a314a <_ZN6String10invalidateEv>

	return *this;
}
 80a320a:	4620      	mov	r0, r4
 80a320c:	bd10      	pop	{r4, pc}

080a320e <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a320e:	b510      	push	{r4, lr}
 80a3210:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3212:	2300      	movs	r3, #0
 80a3214:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a3216:	6043      	str	r3, [r0, #4]
	len = 0;
 80a3218:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a321a:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a321c:	f7ff ffe8 	bl	80a31f0 <_ZN6StringaSERKS_>
}
 80a3220:	4620      	mov	r0, r4
 80a3222:	bd10      	pop	{r4, pc}

080a3224 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a3224:	b538      	push	{r3, r4, r5, lr}
 80a3226:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a3228:	460c      	mov	r4, r1
 80a322a:	b141      	cbz	r1, 80a323e <_ZN6StringaSEPKc+0x1a>
 80a322c:	4608      	mov	r0, r1
 80a322e:	f002 fe90 	bl	80a5f52 <strlen>
 80a3232:	4621      	mov	r1, r4
 80a3234:	4602      	mov	r2, r0
 80a3236:	4628      	mov	r0, r5
 80a3238:	f7ff ffaf 	bl	80a319a <_ZN6String4copyEPKcj>
 80a323c:	e001      	b.n	80a3242 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a323e:	f7ff ff84 	bl	80a314a <_ZN6String10invalidateEv>

	return *this;
}
 80a3242:	4628      	mov	r0, r5
 80a3244:	bd38      	pop	{r3, r4, r5, pc}

080a3246 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a3246:	b510      	push	{r4, lr}
 80a3248:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a324a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a324c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a324e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a3250:	6063      	str	r3, [r4, #4]
	len = 0;
 80a3252:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a3254:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a3256:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a3258:	a901      	add	r1, sp, #4
 80a325a:	f7ff fce4 	bl	80a2c26 <itoa>
	*this = buf;
 80a325e:	a901      	add	r1, sp, #4
 80a3260:	4620      	mov	r0, r4
 80a3262:	f7ff ffdf 	bl	80a3224 <_ZN6StringaSEPKc>
}
 80a3266:	4620      	mov	r0, r4
 80a3268:	b00a      	add	sp, #40	; 0x28
 80a326a:	bd10      	pop	{r4, pc}

080a326c <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a326c:	b570      	push	{r4, r5, r6, lr}
 80a326e:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a3270:	460e      	mov	r6, r1
 80a3272:	b909      	cbnz	r1, 80a3278 <_ZN6String6concatEPKcj+0xc>
 80a3274:	2000      	movs	r0, #0
 80a3276:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a3278:	b16a      	cbz	r2, 80a3296 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a327a:	6883      	ldr	r3, [r0, #8]
 80a327c:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a327e:	4629      	mov	r1, r5
 80a3280:	f7ff ff7a 	bl	80a3178 <_ZN6String7reserveEj>
 80a3284:	2800      	cmp	r0, #0
 80a3286:	d0f5      	beq.n	80a3274 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a3288:	6820      	ldr	r0, [r4, #0]
 80a328a:	68a3      	ldr	r3, [r4, #8]
 80a328c:	4631      	mov	r1, r6
 80a328e:	4418      	add	r0, r3
 80a3290:	f002 fe3c 	bl	80a5f0c <strcpy>
	len = newlen;
 80a3294:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a3296:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a3298:	bd70      	pop	{r4, r5, r6, pc}

080a329a <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a329a:	688a      	ldr	r2, [r1, #8]
 80a329c:	6809      	ldr	r1, [r1, #0]
 80a329e:	f7ff bfe5 	b.w	80a326c <_ZN6String6concatEPKcj>

080a32a2 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 80a32a2:	b538      	push	{r3, r4, r5, lr}
 80a32a4:	4605      	mov	r5, r0
	if (!cstr) return 0;
 80a32a6:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 80a32a8:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 80a32aa:	b141      	cbz	r1, 80a32be <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 80a32ac:	f002 fe51 	bl	80a5f52 <strlen>
 80a32b0:	4621      	mov	r1, r4
 80a32b2:	4602      	mov	r2, r0
 80a32b4:	4628      	mov	r0, r5
}
 80a32b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 80a32ba:	f7ff bfd7 	b.w	80a326c <_ZN6String6concatEPKcj>
}
 80a32be:	bd38      	pop	{r3, r4, r5, pc}

080a32c0 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a32c0:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a32c2:	688a      	ldr	r2, [r1, #8]
 80a32c4:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a32c6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a32c8:	f7ff ffd0 	bl	80a326c <_ZN6String6concatEPKcj>
 80a32cc:	b910      	cbnz	r0, 80a32d4 <_ZplRK15StringSumHelperRK6String+0x14>
 80a32ce:	4620      	mov	r0, r4
 80a32d0:	f7ff ff3b 	bl	80a314a <_ZN6String10invalidateEv>
	return a;
}
 80a32d4:	4620      	mov	r0, r4
 80a32d6:	bd10      	pop	{r4, pc}

080a32d8 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a32d8:	b538      	push	{r3, r4, r5, lr}
 80a32da:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a32dc:	460d      	mov	r5, r1
 80a32de:	b141      	cbz	r1, 80a32f2 <_ZplRK15StringSumHelperPKc+0x1a>
 80a32e0:	4608      	mov	r0, r1
 80a32e2:	f002 fe36 	bl	80a5f52 <strlen>
 80a32e6:	4629      	mov	r1, r5
 80a32e8:	4602      	mov	r2, r0
 80a32ea:	4620      	mov	r0, r4
 80a32ec:	f7ff ffbe 	bl	80a326c <_ZN6String6concatEPKcj>
 80a32f0:	b910      	cbnz	r0, 80a32f8 <_ZplRK15StringSumHelperPKc+0x20>
 80a32f2:	4620      	mov	r0, r4
 80a32f4:	f7ff ff29 	bl	80a314a <_ZN6String10invalidateEv>
	return a;
}
 80a32f8:	4620      	mov	r0, r4
 80a32fa:	bd38      	pop	{r3, r4, r5, pc}

080a32fc <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a32fc:	6800      	ldr	r0, [r0, #0]
 80a32fe:	b108      	cbz	r0, 80a3304 <_ZNK6String5toIntEv+0x8>
 80a3300:	f002 bdac 	b.w	80a5e5c <atol>
	return 0;
}
 80a3304:	4770      	bx	lr
	...

080a3308 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a3308:	b40e      	push	{r1, r2, r3}
 80a330a:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a330c:	ac09      	add	r4, sp, #36	; 0x24
 80a330e:	f854 7b04 	ldr.w	r7, [r4], #4
 80a3312:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a3314:	4623      	mov	r3, r4
 80a3316:	463a      	mov	r2, r7
 80a3318:	2105      	movs	r1, #5
 80a331a:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a331c:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a331e:	f7ff fbf5 	bl	80a2b0c <vsnprintf>
 80a3322:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a3324:	490b      	ldr	r1, [pc, #44]	; (80a3354 <_ZN6String6formatEPKcz+0x4c>)
 80a3326:	4628      	mov	r0, r5
 80a3328:	f7ff ff4f 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a332c:	4631      	mov	r1, r6
 80a332e:	4628      	mov	r0, r5
 80a3330:	f7ff ff22 	bl	80a3178 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a3334:	6828      	ldr	r0, [r5, #0]
 80a3336:	b130      	cbz	r0, 80a3346 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a3338:	4623      	mov	r3, r4
 80a333a:	463a      	mov	r2, r7
 80a333c:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a333e:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a3340:	f7ff fbe4 	bl	80a2b0c <vsnprintf>
        va_end(marker);
        result.len = n;
 80a3344:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a3346:	4628      	mov	r0, r5
 80a3348:	b004      	add	sp, #16
 80a334a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a334e:	b003      	add	sp, #12
 80a3350:	4770      	bx	lr
 80a3352:	bf00      	nop
 80a3354:	080a645b 	.word	0x080a645b

080a3358 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a335a:	4606      	mov	r6, r0
 80a335c:	460d      	mov	r5, r1
 80a335e:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3360:	2400      	movs	r4, #0
  while (size--) {
 80a3362:	42bd      	cmp	r5, r7
 80a3364:	d00c      	beq.n	80a3380 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a3366:	6833      	ldr	r3, [r6, #0]
 80a3368:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a336c:	689b      	ldr	r3, [r3, #8]
 80a336e:	4630      	mov	r0, r6
 80a3370:	4798      	blx	r3
     if (chunk>=0)
 80a3372:	2800      	cmp	r0, #0
 80a3374:	db01      	blt.n	80a337a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a3376:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3378:	e7f3      	b.n	80a3362 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a337a:	2c00      	cmp	r4, #0
 80a337c:	bf08      	it	eq
 80a337e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3380:	4620      	mov	r0, r4
 80a3382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3384 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a3384:	b570      	push	{r4, r5, r6, lr}
 80a3386:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3388:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a338a:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a338c:	b149      	cbz	r1, 80a33a2 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a338e:	f002 fde0 	bl	80a5f52 <strlen>
 80a3392:	682b      	ldr	r3, [r5, #0]
 80a3394:	4602      	mov	r2, r0
 80a3396:	4621      	mov	r1, r4
 80a3398:	4628      	mov	r0, r5
    }
 80a339a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a339e:	68db      	ldr	r3, [r3, #12]
 80a33a0:	4718      	bx	r3
    }
 80a33a2:	bd70      	pop	{r4, r5, r6, pc}

080a33a4 <_ZN5Print5printEPKc>:
 80a33a4:	b508      	push	{r3, lr}
 80a33a6:	f7ff ffed 	bl	80a3384 <_ZN5Print5writeEPKc>
 80a33aa:	bd08      	pop	{r3, pc}

080a33ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a33ac:	6803      	ldr	r3, [r0, #0]
 80a33ae:	689b      	ldr	r3, [r3, #8]
 80a33b0:	4718      	bx	r3

080a33b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a33b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a33b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a33b6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a33b8:	f7ff fff8 	bl	80a33ac <_ZN5Print5printEc>
  n += print('\n');
 80a33bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a33be:	4604      	mov	r4, r0
  n += print('\n');
 80a33c0:	4628      	mov	r0, r5
 80a33c2:	f7ff fff3 	bl	80a33ac <_ZN5Print5printEc>
  return n;
}
 80a33c6:	4420      	add	r0, r4
 80a33c8:	bd38      	pop	{r3, r4, r5, pc}

080a33ca <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a33ca:	2a01      	cmp	r2, #1
 80a33cc:	bf98      	it	ls
 80a33ce:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a33d0:	b530      	push	{r4, r5, lr}
 80a33d2:	460b      	mov	r3, r1
 80a33d4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a33d6:	2100      	movs	r1, #0
 80a33d8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a33dc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a33e0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a33e4:	fb05 3312 	mls	r3, r5, r2, r3
 80a33e8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a33ea:	2b09      	cmp	r3, #9
 80a33ec:	bf94      	ite	ls
 80a33ee:	3330      	addls	r3, #48	; 0x30
 80a33f0:	3337      	addhi	r3, #55	; 0x37
 80a33f2:	b2db      	uxtb	r3, r3
 80a33f4:	4621      	mov	r1, r4
 80a33f6:	f804 3901 	strb.w	r3, [r4], #-1
 80a33fa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a33fc:	2d00      	cmp	r5, #0
 80a33fe:	d1ef      	bne.n	80a33e0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a3400:	f7ff ffc0 	bl	80a3384 <_ZN5Print5writeEPKc>
}
 80a3404:	b00b      	add	sp, #44	; 0x2c
 80a3406:	bd30      	pop	{r4, r5, pc}

080a3408 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a3408:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a340a:	b922      	cbnz	r2, 80a3416 <_ZN5Print5printEmi+0xe>
 80a340c:	6803      	ldr	r3, [r0, #0]
 80a340e:	b2c9      	uxtb	r1, r1
 80a3410:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a3412:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a3414:	4718      	bx	r3
  else return printNumber(n, base);
 80a3416:	b2d2      	uxtb	r2, r2
}
 80a3418:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a341a:	f7ff bfd6 	b.w	80a33ca <_ZN5Print11printNumberEmh>

080a341e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a341e:	f7ff bff3 	b.w	80a3408 <_ZN5Print5printEmi>

080a3422 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a3422:	b538      	push	{r3, r4, r5, lr}
 80a3424:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a3426:	f7ff ffef 	bl	80a3408 <_ZN5Print5printEmi>
 80a342a:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a342c:	4628      	mov	r0, r5
 80a342e:	f7ff ffc0 	bl	80a33b2 <_ZN5Print7printlnEv>
  return n;
}
 80a3432:	4420      	add	r0, r4
 80a3434:	bd38      	pop	{r3, r4, r5, pc}

080a3436 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a3436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a343a:	4607      	mov	r7, r0
 80a343c:	460e      	mov	r6, r1
  if (base == 0) {
 80a343e:	4615      	mov	r5, r2
 80a3440:	b92a      	cbnz	r2, 80a344e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a3446:	6803      	ldr	r3, [r0, #0]
 80a3448:	b2c9      	uxtb	r1, r1
 80a344a:	689b      	ldr	r3, [r3, #8]
 80a344c:	4718      	bx	r3
  } else if (base == 10) {
 80a344e:	2a0a      	cmp	r2, #10
 80a3450:	d102      	bne.n	80a3458 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a3452:	2900      	cmp	r1, #0
 80a3454:	da01      	bge.n	80a345a <_ZN5Print5printEli+0x24>
 80a3456:	e004      	b.n	80a3462 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3458:	b2d2      	uxtb	r2, r2
  }
}
 80a345a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a345e:	f7ff bfb4 	b.w	80a33ca <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3462:	212d      	movs	r1, #45	; 0x2d
 80a3464:	f7ff ffa2 	bl	80a33ac <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3468:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a346a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a346c:	4271      	negs	r1, r6
 80a346e:	4638      	mov	r0, r7
 80a3470:	f7ff ffab 	bl	80a33ca <_ZN5Print11printNumberEmh>
 80a3474:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a3476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a347a <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a347a:	f7ff bfdc 	b.w	80a3436 <_ZN5Print5printEli>

080a347e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a347e:	b538      	push	{r3, r4, r5, lr}
 80a3480:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3482:	f7ff ffd8 	bl	80a3436 <_ZN5Print5printEli>
 80a3486:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3488:	4628      	mov	r0, r5
 80a348a:	f7ff ff92 	bl	80a33b2 <_ZN5Print7printlnEv>
  return n;
}
 80a348e:	4420      	add	r0, r4
 80a3490:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3494 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3498:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a349a:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a349c:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a349e:	4617      	mov	r7, r2
 80a34a0:	461e      	mov	r6, r3
 80a34a2:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a34a6:	f002 f941 	bl	80a572c <__aeabi_dcmpun>
 80a34aa:	b108      	cbz	r0, 80a34b0 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a34ac:	4947      	ldr	r1, [pc, #284]	; (80a35cc <_ZN5Print10printFloatEdh+0x138>)
 80a34ae:	e012      	b.n	80a34d6 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a34b0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a34b4:	f04f 32ff 	mov.w	r2, #4294967295
 80a34b8:	4b45      	ldr	r3, [pc, #276]	; (80a35d0 <_ZN5Print10printFloatEdh+0x13c>)
 80a34ba:	4638      	mov	r0, r7
 80a34bc:	4621      	mov	r1, r4
 80a34be:	f002 f935 	bl	80a572c <__aeabi_dcmpun>
 80a34c2:	b968      	cbnz	r0, 80a34e0 <_ZN5Print10printFloatEdh+0x4c>
 80a34c4:	f04f 32ff 	mov.w	r2, #4294967295
 80a34c8:	4b41      	ldr	r3, [pc, #260]	; (80a35d0 <_ZN5Print10printFloatEdh+0x13c>)
 80a34ca:	4638      	mov	r0, r7
 80a34cc:	4621      	mov	r1, r4
 80a34ce:	f002 f90f 	bl	80a56f0 <__aeabi_dcmple>
 80a34d2:	b928      	cbnz	r0, 80a34e0 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a34d4:	493f      	ldr	r1, [pc, #252]	; (80a35d4 <_ZN5Print10printFloatEdh+0x140>)
 80a34d6:	4640      	mov	r0, r8
 80a34d8:	f7ff ff54 	bl	80a3384 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a34dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a34e0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a34e4:	4b3c      	ldr	r3, [pc, #240]	; (80a35d8 <_ZN5Print10printFloatEdh+0x144>)
 80a34e6:	4638      	mov	r0, r7
 80a34e8:	4631      	mov	r1, r6
 80a34ea:	f002 f915 	bl	80a5718 <__aeabi_dcmpgt>
 80a34ee:	b108      	cbz	r0, 80a34f4 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a34f0:	493a      	ldr	r1, [pc, #232]	; (80a35dc <_ZN5Print10printFloatEdh+0x148>)
 80a34f2:	e7f0      	b.n	80a34d6 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a34f4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a34f8:	4b39      	ldr	r3, [pc, #228]	; (80a35e0 <_ZN5Print10printFloatEdh+0x14c>)
 80a34fa:	4638      	mov	r0, r7
 80a34fc:	4631      	mov	r1, r6
 80a34fe:	f002 f8ed 	bl	80a56dc <__aeabi_dcmplt>
 80a3502:	2800      	cmp	r0, #0
 80a3504:	d1f4      	bne.n	80a34f0 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a3506:	2200      	movs	r2, #0
 80a3508:	2300      	movs	r3, #0
 80a350a:	4638      	mov	r0, r7
 80a350c:	4631      	mov	r1, r6
 80a350e:	f002 f8e5 	bl	80a56dc <__aeabi_dcmplt>
 80a3512:	b138      	cbz	r0, 80a3524 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a3514:	212d      	movs	r1, #45	; 0x2d
 80a3516:	4640      	mov	r0, r8
 80a3518:	f7ff ff48 	bl	80a33ac <_ZN5Print5printEc>
     number = -number;
 80a351c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a3520:	4604      	mov	r4, r0
 80a3522:	e000      	b.n	80a3526 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3524:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a3526:	492f      	ldr	r1, [pc, #188]	; (80a35e4 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a3528:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a352c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a352e:	fa5f f389 	uxtb.w	r3, r9
 80a3532:	429d      	cmp	r5, r3
 80a3534:	d906      	bls.n	80a3544 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a3536:	2200      	movs	r2, #0
 80a3538:	4b2b      	ldr	r3, [pc, #172]	; (80a35e8 <_ZN5Print10printFloatEdh+0x154>)
 80a353a:	f001 ff87 	bl	80a544c <__aeabi_ddiv>
 80a353e:	f109 0901 	add.w	r9, r9, #1
 80a3542:	e7f4      	b.n	80a352e <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a3544:	463a      	mov	r2, r7
 80a3546:	4633      	mov	r3, r6
 80a3548:	f001 fca4 	bl	80a4e94 <__adddf3>
 80a354c:	460f      	mov	r7, r1
 80a354e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3550:	f002 f92a 	bl	80a57a8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3554:	220a      	movs	r2, #10
 80a3556:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3558:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a355a:	4640      	mov	r0, r8
 80a355c:	f7ff ff35 	bl	80a33ca <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3560:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a3562:	b37d      	cbz	r5, 80a35c4 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a3564:	4648      	mov	r0, r9
 80a3566:	f001 fdd1 	bl	80a510c <__aeabi_ui2d>
 80a356a:	4602      	mov	r2, r0
 80a356c:	460b      	mov	r3, r1
 80a356e:	4630      	mov	r0, r6
 80a3570:	4639      	mov	r1, r7
 80a3572:	f001 fc8d 	bl	80a4e90 <__aeabi_dsub>
 80a3576:	4606      	mov	r6, r0
 80a3578:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a357a:	4640      	mov	r0, r8
 80a357c:	491b      	ldr	r1, [pc, #108]	; (80a35ec <_ZN5Print10printFloatEdh+0x158>)
 80a357e:	f7ff ff01 	bl	80a3384 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a3582:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a3584:	4b18      	ldr	r3, [pc, #96]	; (80a35e8 <_ZN5Print10printFloatEdh+0x154>)
 80a3586:	2200      	movs	r2, #0
 80a3588:	4630      	mov	r0, r6
 80a358a:	4639      	mov	r1, r7
 80a358c:	f001 fe34 	bl	80a51f8 <__aeabi_dmul>
 80a3590:	460f      	mov	r7, r1
 80a3592:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a3594:	f002 f8e0 	bl	80a5758 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3598:	220a      	movs	r2, #10
 80a359a:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a359c:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a359e:	4640      	mov	r0, r8
 80a35a0:	f7ff ff49 	bl	80a3436 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a35a4:	4404      	add	r4, r0
    remainder -= toPrint;
 80a35a6:	4648      	mov	r0, r9
 80a35a8:	f001 fdc0 	bl	80a512c <__aeabi_i2d>
 80a35ac:	4602      	mov	r2, r0
 80a35ae:	460b      	mov	r3, r1
 80a35b0:	4630      	mov	r0, r6
 80a35b2:	4639      	mov	r1, r7
 80a35b4:	f001 fc6c 	bl	80a4e90 <__aeabi_dsub>
 80a35b8:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a35ba:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a35be:	4606      	mov	r6, r0
 80a35c0:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a35c2:	d1df      	bne.n	80a3584 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a35c4:	4620      	mov	r0, r4
 80a35c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a35ca:	bf00      	nop
 80a35cc:	080a63a3 	.word	0x080a63a3
 80a35d0:	7fefffff 	.word	0x7fefffff
 80a35d4:	080a63ad 	.word	0x080a63ad
 80a35d8:	41efffff 	.word	0x41efffff
 80a35dc:	080a63a7 	.word	0x080a63a7
 80a35e0:	c1efffff 	.word	0xc1efffff
 80a35e4:	3fe00000 	.word	0x3fe00000
 80a35e8:	40240000 	.word	0x40240000
 80a35ec:	080a63ab 	.word	0x080a63ab

080a35f0 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a35f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a35f2:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a35f6:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a35f8:	9100      	str	r1, [sp, #0]
 80a35fa:	f7ff ff4b 	bl	80a3494 <_ZN5Print10printFloatEdh>
 80a35fe:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a3600:	4628      	mov	r0, r5
 80a3602:	f7ff fed6 	bl	80a33b2 <_ZN5Print7printlnEv>
  return n;
}
 80a3606:	4420      	add	r0, r4
 80a3608:	b003      	add	sp, #12
 80a360a:	bd30      	pop	{r4, r5, pc}

080a360c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a360c:	2300      	movs	r3, #0
 80a360e:	461a      	mov	r2, r3
 80a3610:	4619      	mov	r1, r3
 80a3612:	6840      	ldr	r0, [r0, #4]
 80a3614:	f7ff ba0a 	b.w	80a2a2c <network_on>

080a3618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a3618:	680b      	ldr	r3, [r1, #0]
 80a361a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a361c:	b113      	cbz	r3, 80a3624 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a361e:	685a      	ldr	r2, [r3, #4]
 80a3620:	3201      	adds	r2, #1
 80a3622:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a3624:	4770      	bx	lr
	...

080a3628 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a3628:	4a01      	ldr	r2, [pc, #4]	; (80a3630 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a362a:	4b02      	ldr	r3, [pc, #8]	; (80a3634 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a362c:	601a      	str	r2, [r3, #0]
 80a362e:	4770      	bx	lr
 80a3630:	080a6427 	.word	0x080a6427
 80a3634:	2000028c 	.word	0x2000028c

080a3638 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a3638:	4b02      	ldr	r3, [pc, #8]	; (80a3644 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a363a:	681a      	ldr	r2, [r3, #0]
 80a363c:	4b02      	ldr	r3, [pc, #8]	; (80a3648 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a363e:	601a      	str	r2, [r3, #0]
 80a3640:	4770      	bx	lr
 80a3642:	bf00      	nop
 80a3644:	20000034 	.word	0x20000034
 80a3648:	20000290 	.word	0x20000290

080a364c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a364c:	2100      	movs	r1, #0
 80a364e:	f7ff b9a1 	b.w	80a2994 <system_delay_ms>

080a3652 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a3652:	b510      	push	{r4, lr}
 80a3654:	4604      	mov	r4, r0
 80a3656:	f7fc fd68 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a365a:	4620      	mov	r0, r4
 80a365c:	bd10      	pop	{r4, pc}

080a365e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a365e:	b513      	push	{r0, r1, r4, lr}
 80a3660:	460b      	mov	r3, r1
 80a3662:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3664:	c803      	ldmia	r0, {r0, r1}
 80a3666:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a366a:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a366e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a3672:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a3676:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a367a:	b002      	add	sp, #8
 80a367c:	bd10      	pop	{r4, pc}
	...

080a3680 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3680:	4803      	ldr	r0, [pc, #12]	; (80a3690 <_GLOBAL__sub_I_RGB+0x10>)
 80a3682:	2300      	movs	r3, #0
 80a3684:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a3686:	4a03      	ldr	r2, [pc, #12]	; (80a3694 <_GLOBAL__sub_I_RGB+0x14>)
 80a3688:	4903      	ldr	r1, [pc, #12]	; (80a3698 <_GLOBAL__sub_I_RGB+0x18>)
 80a368a:	f000 bf8f 	b.w	80a45ac <__aeabi_atexit>
 80a368e:	bf00      	nop
 80a3690:	20000294 	.word	0x20000294
 80a3694:	200000a4 	.word	0x200000a4
 80a3698:	080a3653 	.word	0x080a3653

080a369c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a369c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a369e:	4b14      	ldr	r3, [pc, #80]	; (80a36f0 <serialEventRun+0x54>)
 80a36a0:	b133      	cbz	r3, 80a36b0 <serialEventRun+0x14>
 80a36a2:	f000 fc6d 	bl	80a3f80 <_Z16_fetch_usbserialv>
 80a36a6:	6803      	ldr	r3, [r0, #0]
 80a36a8:	691b      	ldr	r3, [r3, #16]
 80a36aa:	4798      	blx	r3
 80a36ac:	2800      	cmp	r0, #0
 80a36ae:	dc16      	bgt.n	80a36de <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a36b0:	4b10      	ldr	r3, [pc, #64]	; (80a36f4 <serialEventRun+0x58>)
 80a36b2:	b133      	cbz	r3, 80a36c2 <serialEventRun+0x26>
 80a36b4:	f000 fd26 	bl	80a4104 <_Z22__fetch_global_Serial1v>
 80a36b8:	6803      	ldr	r3, [r0, #0]
 80a36ba:	691b      	ldr	r3, [r3, #16]
 80a36bc:	4798      	blx	r3
 80a36be:	2800      	cmp	r0, #0
 80a36c0:	dc10      	bgt.n	80a36e4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a36c2:	4b0d      	ldr	r3, [pc, #52]	; (80a36f8 <serialEventRun+0x5c>)
 80a36c4:	b10b      	cbz	r3, 80a36ca <serialEventRun+0x2e>
 80a36c6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a36ca:	4b0c      	ldr	r3, [pc, #48]	; (80a36fc <serialEventRun+0x60>)
 80a36cc:	b17b      	cbz	r3, 80a36ee <serialEventRun+0x52>
 80a36ce:	f000 fc93 	bl	80a3ff8 <_Z17_fetch_usbserial1v>
 80a36d2:	6803      	ldr	r3, [r0, #0]
 80a36d4:	691b      	ldr	r3, [r3, #16]
 80a36d6:	4798      	blx	r3
 80a36d8:	2800      	cmp	r0, #0
 80a36da:	dc06      	bgt.n	80a36ea <serialEventRun+0x4e>
 80a36dc:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a36de:	f3af 8000 	nop.w
 80a36e2:	e7e5      	b.n	80a36b0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a36e4:	f3af 8000 	nop.w
 80a36e8:	e7eb      	b.n	80a36c2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a36ea:	f3af 8000 	nop.w
 80a36ee:	bd08      	pop	{r3, pc}
	...

080a3700 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3700:	b508      	push	{r3, lr}
	serialEventRun();
 80a3702:	f7ff ffcb 	bl	80a369c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3706:	f7fe ffdb 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a370a:	4b01      	ldr	r3, [pc, #4]	; (80a3710 <_post_loop+0x10>)
 80a370c:	6018      	str	r0, [r3, #0]
 80a370e:	bd08      	pop	{r3, pc}
 80a3710:	20000738 	.word	0x20000738

080a3714 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3714:	4802      	ldr	r0, [pc, #8]	; (80a3720 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3716:	4a03      	ldr	r2, [pc, #12]	; (80a3724 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3718:	4903      	ldr	r1, [pc, #12]	; (80a3728 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a371a:	1a12      	subs	r2, r2, r0
 80a371c:	f002 bbb0 	b.w	80a5e80 <memcpy>
 80a3720:	40024000 	.word	0x40024000
 80a3724:	40024064 	.word	0x40024064
 80a3728:	080a67a0 	.word	0x080a67a0

080a372c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a372c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a372e:	2300      	movs	r3, #0
 80a3730:	9300      	str	r3, [sp, #0]
 80a3732:	461a      	mov	r2, r3
 80a3734:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3738:	f7ff f94e 	bl	80a29d8 <system_ctrl_set_result>
}
 80a373c:	b003      	add	sp, #12
 80a373e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3744 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3744:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3746:	8843      	ldrh	r3, [r0, #2]
 80a3748:	2b0a      	cmp	r3, #10
 80a374a:	d008      	beq.n	80a375e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a374c:	2b50      	cmp	r3, #80	; 0x50
 80a374e:	d109      	bne.n	80a3764 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3750:	4b09      	ldr	r3, [pc, #36]	; (80a3778 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3752:	681b      	ldr	r3, [r3, #0]
 80a3754:	b13b      	cbz	r3, 80a3766 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a3756:	b003      	add	sp, #12
 80a3758:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a375c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a375e:	f7ff ffe5 	bl	80a372c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3762:	e006      	b.n	80a3772 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3764:	2300      	movs	r3, #0
 80a3766:	9300      	str	r3, [sp, #0]
 80a3768:	461a      	mov	r2, r3
 80a376a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a376e:	f7ff f933 	bl	80a29d8 <system_ctrl_set_result>
        break;
    }
}
 80a3772:	b003      	add	sp, #12
 80a3774:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3778:	200002a4 	.word	0x200002a4

080a377c <module_user_init_hook>:

void module_user_init_hook()
{
 80a377c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a377e:	4c10      	ldr	r4, [pc, #64]	; (80a37c0 <module_user_init_hook+0x44>)
 80a3780:	4d10      	ldr	r5, [pc, #64]	; (80a37c4 <module_user_init_hook+0x48>)
 80a3782:	6823      	ldr	r3, [r4, #0]
 80a3784:	42ab      	cmp	r3, r5
 80a3786:	4b10      	ldr	r3, [pc, #64]	; (80a37c8 <module_user_init_hook+0x4c>)
 80a3788:	bf0c      	ite	eq
 80a378a:	2201      	moveq	r2, #1
 80a378c:	2200      	movne	r2, #0
 80a378e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3790:	d002      	beq.n	80a3798 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3792:	f7ff ffbf 	bl	80a3714 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3796:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3798:	f7fe ff7a 	bl	80a2690 <HAL_RNG_GetRandomNumber>
 80a379c:	4604      	mov	r4, r0
    srand(seed);
 80a379e:	f002 fb83 	bl	80a5ea8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a37a2:	4b0a      	ldr	r3, [pc, #40]	; (80a37cc <module_user_init_hook+0x50>)
 80a37a4:	b113      	cbz	r3, 80a37ac <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a37a6:	4620      	mov	r0, r4
 80a37a8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a37ac:	2100      	movs	r1, #0
 80a37ae:	4807      	ldr	r0, [pc, #28]	; (80a37cc <module_user_init_hook+0x50>)
 80a37b0:	f7ff f984 	bl	80a2abc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a37b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a37b8:	2100      	movs	r1, #0
 80a37ba:	4805      	ldr	r0, [pc, #20]	; (80a37d0 <module_user_init_hook+0x54>)
 80a37bc:	f7ff b902 	b.w	80a29c4 <system_ctrl_set_app_request_handler>
 80a37c0:	40024060 	.word	0x40024060
 80a37c4:	9a271c1e 	.word	0x9a271c1e
 80a37c8:	200002a8 	.word	0x200002a8
 80a37cc:	00000000 	.word	0x00000000
 80a37d0:	080a3745 	.word	0x080a3745

080a37d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a37d4:	4770      	bx	lr

080a37d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a37d6:	2000      	movs	r0, #0
 80a37d8:	4770      	bx	lr

080a37da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a37da:	b510      	push	{r4, lr}
 80a37dc:	4604      	mov	r4, r0
 80a37de:	2110      	movs	r1, #16
 80a37e0:	f000 fef2 	bl	80a45c8 <_ZdlPvj>
 80a37e4:	4620      	mov	r0, r4
 80a37e6:	bd10      	pop	{r4, pc}

080a37e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a37e8:	b508      	push	{r3, lr}
      { delete this; }
 80a37ea:	b108      	cbz	r0, 80a37f0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a37ec:	f7ff fff5 	bl	80a37da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a37f0:	bd08      	pop	{r3, pc}

080a37f2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a37f2:	2200      	movs	r2, #0
 80a37f4:	6002      	str	r2, [r0, #0]
 80a37f6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a37fa:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a37fc:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a37fe:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a3802:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3804:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3806:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a3808:	680c      	ldr	r4, [r1, #0]
 80a380a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a380c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a380e:	bd10      	pop	{r4, pc}

080a3810 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a3810:	b510      	push	{r4, lr}
 80a3812:	4604      	mov	r4, r0
    free((void*)msg_);
 80a3814:	6800      	ldr	r0, [r0, #0]
 80a3816:	f7ff f961 	bl	80a2adc <free>
}
 80a381a:	4620      	mov	r0, r4
 80a381c:	bd10      	pop	{r4, pc}

080a381e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a381e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a3820:	68c4      	ldr	r4, [r0, #12]
 80a3822:	b1f4      	cbz	r4, 80a3862 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a3824:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a3826:	2b02      	cmp	r3, #2
 80a3828:	d103      	bne.n	80a3832 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a382a:	f104 000c 	add.w	r0, r4, #12
 80a382e:	f7ff ffef 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a3832:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a3834:	b135      	cbz	r5, 80a3844 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3836:	4628      	mov	r0, r5
 80a3838:	f7fc fc77 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a383c:	2110      	movs	r1, #16
 80a383e:	4628      	mov	r0, r5
 80a3840:	f000 fec2 	bl	80a45c8 <_ZdlPvj>
 80a3844:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a3846:	b135      	cbz	r5, 80a3856 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a3848:	4628      	mov	r0, r5
 80a384a:	f7fc fc6e 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a384e:	2110      	movs	r1, #16
 80a3850:	4628      	mov	r0, r5
 80a3852:	f000 feb9 	bl	80a45c8 <_ZdlPvj>
 80a3856:	4620      	mov	r0, r4
 80a3858:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a385c:	2114      	movs	r1, #20
 80a385e:	f000 beb3 	b.w	80a45c8 <_ZdlPvj>
 80a3862:	bd38      	pop	{r3, r4, r5, pc}

080a3864 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 80a3864:	b510      	push	{r4, lr}
 80a3866:	b088      	sub	sp, #32
 80a3868:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a386a:	4668      	mov	r0, sp
 80a386c:	f7ff fcad 	bl	80a31ca <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 80a3870:	4669      	mov	r1, sp
 80a3872:	a804      	add	r0, sp, #16
 80a3874:	f7ff fccb 	bl	80a320e <_ZN6StringC1ERKS_>
 80a3878:	a804      	add	r0, sp, #16
 80a387a:	47a0      	blx	r4
 80a387c:	4604      	mov	r4, r0
 80a387e:	a804      	add	r0, sp, #16
 80a3880:	f7ff fc5c 	bl	80a313c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 80a3884:	4668      	mov	r0, sp
 80a3886:	f7ff fc59 	bl	80a313c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 80a388a:	4620      	mov	r0, r4
 80a388c:	b008      	add	sp, #32
 80a388e:	bd10      	pop	{r4, pc}

080a3890 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 80a3890:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3892:	4607      	mov	r7, r0
 80a3894:	460e      	mov	r6, r1
 80a3896:	4615      	mov	r5, r2
 80a3898:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 80a389a:	2410      	movs	r4, #16
 80a389c:	4622      	mov	r2, r4
 80a389e:	2100      	movs	r1, #0
 80a38a0:	4668      	mov	r0, sp
 80a38a2:	f002 faf8 	bl	80a5e96 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a38a6:	2200      	movs	r2, #0
 80a38a8:	4669      	mov	r1, sp
 80a38aa:	4610      	mov	r0, r2
         size = sizeof(*this);
 80a38ac:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 80a38b0:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 80a38b2:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 80a38b4:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 80a38b6:	f7ff f8e9 	bl	80a2a8c <spark_function>
}
 80a38ba:	b005      	add	sp, #20
 80a38bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a38be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a38be:	b513      	push	{r0, r1, r4, lr}
 80a38c0:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a38c2:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a38c6:	2300      	movs	r3, #0
 80a38c8:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a38ca:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a38cc:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a38ce:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a38d0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a38d2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a38d4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a38d6:	f7fd fa95 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a38da:	4620      	mov	r0, r4
 80a38dc:	b002      	add	sp, #8
 80a38de:	bd10      	pop	{r4, pc}

080a38e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a38e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a38e2:	460c      	mov	r4, r1
 80a38e4:	4606      	mov	r6, r0
 80a38e6:	460f      	mov	r7, r1
 80a38e8:	f854 3b04 	ldr.w	r3, [r4], #4
 80a38ec:	ad02      	add	r5, sp, #8
 80a38ee:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a38f2:	4621      	mov	r1, r4
 80a38f4:	a801      	add	r0, sp, #4
 80a38f6:	f7ff fe8f 	bl	80a3618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a38fa:	4629      	mov	r1, r5
 80a38fc:	4630      	mov	r0, r6
 80a38fe:	f7ff ffde 	bl	80a38be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3902:	a801      	add	r0, sp, #4
 80a3904:	f7fd fa7e 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3908:	4620      	mov	r0, r4
 80a390a:	f7fd fa7b 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a390e:	4638      	mov	r0, r7
 80a3910:	2108      	movs	r1, #8
 80a3912:	f000 fe59 	bl	80a45c8 <_ZdlPvj>
        return p;
    }
 80a3916:	4630      	mov	r0, r6
 80a3918:	b003      	add	sp, #12
 80a391a:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a391c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a391c:	b538      	push	{r3, r4, r5, lr}
 80a391e:	2300      	movs	r3, #0
 80a3920:	4604      	mov	r4, r0
 80a3922:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3924:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3926:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3928:	f7fc fbb9 	bl	80a009e <_Znwj>
 80a392c:	b128      	cbz	r0, 80a393a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a392e:	2301      	movs	r3, #1
 80a3930:	6043      	str	r3, [r0, #4]
 80a3932:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a3934:	4b02      	ldr	r3, [pc, #8]	; (80a3940 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a3936:	60c5      	str	r5, [r0, #12]
 80a3938:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a393a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a393c:	4620      	mov	r0, r4
 80a393e:	bd38      	pop	{r3, r4, r5, pc}
 80a3940:	080a64c0 	.word	0x080a64c0

080a3944 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3944:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3946:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3948:	b90a      	cbnz	r2, 80a394e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a394a:	f000 fe4e 	bl	80a45ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a394e:	68c3      	ldr	r3, [r0, #12]
    }
 80a3950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3954:	4718      	bx	r3

080a3956 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3956:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3958:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a395a:	f100 0110 	add.w	r1, r0, #16
 80a395e:	f7ff fff1 	bl	80a3944 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a3962:	bd08      	pop	{r3, pc}

080a3964 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3964:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3966:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3968:	b90a      	cbnz	r2, 80a396e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a396a:	f000 fe3e 	bl	80a45ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a396e:	68c3      	ldr	r3, [r0, #12]
    }
 80a3970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3974:	4718      	bx	r3

080a3976 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3976:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3978:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a397a:	f100 0110 	add.w	r1, r0, #16
 80a397e:	f7ff fff1 	bl	80a3964 <_ZNKSt8functionIFvRKbEEclES1_>
 80a3982:	bd08      	pop	{r3, pc}

080a3984 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3984:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3986:	2300      	movs	r3, #0
 80a3988:	6083      	str	r3, [r0, #8]
 80a398a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a398c:	4604      	mov	r4, r0
 80a398e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a3990:	b12b      	cbz	r3, 80a399e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3992:	2202      	movs	r2, #2
 80a3994:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3996:	68eb      	ldr	r3, [r5, #12]
 80a3998:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a399a:	68ab      	ldr	r3, [r5, #8]
 80a399c:	60a3      	str	r3, [r4, #8]
	}
    }
 80a399e:	4620      	mov	r0, r4
 80a39a0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a39a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a39a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a39a6:	b089      	sub	sp, #36	; 0x24
 80a39a8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a39aa:	4668      	mov	r0, sp
 80a39ac:	f7ff ff21 	bl	80a37f2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a39b0:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a39b4:	2300      	movs	r3, #0
 80a39b6:	f88d 3008 	strb.w	r3, [sp, #8]
 80a39ba:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a39be:	2b00      	cmp	r3, #0
 80a39c0:	d103      	bne.n	80a39ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a39c2:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a39c6:	2900      	cmp	r1, #0
 80a39c8:	d1f7      	bne.n	80a39ba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a39ca:	d002      	beq.n	80a39d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a39cc:	f88d 3008 	strb.w	r3, [sp, #8]
 80a39d0:	e063      	b.n	80a3a9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a39d2:	f114 050c 	adds.w	r5, r4, #12
 80a39d6:	d003      	beq.n	80a39e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a39d8:	4669      	mov	r1, sp
 80a39da:	4628      	mov	r0, r5
 80a39dc:	f7ff ff09 	bl	80a37f2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a39e0:	f3bf 8f5f 	dmb	sy
 80a39e4:	2301      	movs	r3, #1
 80a39e6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a39e8:	f3bf 8f5f 	dmb	sy
 80a39ec:	f104 0308 	add.w	r3, r4, #8
 80a39f0:	2000      	movs	r0, #0
 80a39f2:	e853 6f00 	ldrex	r6, [r3]
 80a39f6:	e843 0200 	strex	r2, r0, [r3]
 80a39fa:	2a00      	cmp	r2, #0
 80a39fc:	d1f9      	bne.n	80a39f2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a39fe:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a3a02:	2e00      	cmp	r6, #0
 80a3a04:	d049      	beq.n	80a3a9a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a3a06:	f7fe ffcd 	bl	80a29a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a3a0a:	b120      	cbz	r0, 80a3a16 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3a0c:	4629      	mov	r1, r5
 80a3a0e:	4630      	mov	r0, r6
 80a3a10:	f7ff ff98 	bl	80a3944 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a3a14:	e03a      	b.n	80a3a8c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3a16:	4631      	mov	r1, r6
 80a3a18:	a802      	add	r0, sp, #8
 80a3a1a:	f7ff ffb3 	bl	80a3984 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a3a1e:	68e0      	ldr	r0, [r4, #12]
 80a3a20:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a3a24:	b108      	cbz	r0, 80a3a2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a3a26:	f002 fa79 	bl	80a5f1c <strdup>
 80a3a2a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3a2c:	2010      	movs	r0, #16
 80a3a2e:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a3a32:	f7fc fb34 	bl	80a009e <_Znwj>
 80a3a36:	4605      	mov	r5, r0
 80a3a38:	b1e8      	cbz	r0, 80a3a76 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3a3a:	2700      	movs	r7, #0
 80a3a3c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3a3e:	2018      	movs	r0, #24
 80a3a40:	f7fc fb2d 	bl	80a009e <_Znwj>
 80a3a44:	4604      	mov	r4, r0
 80a3a46:	b188      	cbz	r0, 80a3a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3a48:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3a4a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3a4c:	a802      	add	r0, sp, #8
 80a3a4e:	f7ff fe06 	bl	80a365e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3a52:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a3a54:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3a56:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3a58:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a3a5a:	9204      	str	r2, [sp, #16]
 80a3a5c:	68e2      	ldr	r2, [r4, #12]
 80a3a5e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a3a60:	60e3      	str	r3, [r4, #12]
 80a3a62:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3a66:	9205      	str	r2, [sp, #20]
 80a3a68:	f7ff fec3 	bl	80a37f2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3a6c:	4b0d      	ldr	r3, [pc, #52]	; (80a3aa4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3a6e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3a70:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3a72:	4b0d      	ldr	r3, [pc, #52]	; (80a3aa8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a3a74:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a3a76:	a806      	add	r0, sp, #24
 80a3a78:	f7ff feca 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3a7c:	a802      	add	r0, sp, #8
 80a3a7e:	f7fc fb54 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3a82:	2200      	movs	r2, #0
 80a3a84:	4629      	mov	r1, r5
 80a3a86:	4809      	ldr	r0, [pc, #36]	; (80a3aac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a3a88:	f7fe ff94 	bl	80a29b4 <application_thread_invoke>
 80a3a8c:	4630      	mov	r0, r6
 80a3a8e:	f7fc fb4c 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a3a92:	2110      	movs	r1, #16
 80a3a94:	4630      	mov	r0, r6
 80a3a96:	f000 fd97 	bl	80a45c8 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a3a9a:	4668      	mov	r0, sp
 80a3a9c:	f7ff feb8 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
    }
 80a3aa0:	b009      	add	sp, #36	; 0x24
 80a3aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3aa4:	080a3957 	.word	0x080a3957
 80a3aa8:	080a3bcd 	.word	0x080a3bcd
 80a3aac:	080a4151 	.word	0x080a4151

080a3ab0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a3ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3ab4:	b08b      	sub	sp, #44	; 0x2c
 80a3ab6:	4606      	mov	r6, r0
 80a3ab8:	460f      	mov	r7, r1
 80a3aba:	4690      	mov	r8, r2
 80a3abc:	4699      	mov	r9, r3
 80a3abe:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a3ac2:	f7fe ffeb 	bl	80a2a9c <spark_cloud_flag_connected>
 80a3ac6:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a3ac8:	4683      	mov	fp, r0
 80a3aca:	bb30      	cbnz	r0, 80a3b1a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3acc:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a3ad0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3ad2:	a905      	add	r1, sp, #20
 80a3ad4:	4628      	mov	r0, r5
 80a3ad6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3ada:	f7ff fe8a 	bl	80a37f2 <_ZN8particle5ErrorC1EOS0_>
 80a3ade:	2014      	movs	r0, #20
 80a3ae0:	f7fc fadd 	bl	80a009e <_Znwj>
 80a3ae4:	4604      	mov	r4, r0
 80a3ae6:	b158      	cbz	r0, 80a3b00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a3ae8:	2302      	movs	r3, #2
 80a3aea:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3aec:	2301      	movs	r3, #1
 80a3aee:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3af0:	f8c0 b004 	str.w	fp, [r0, #4]
 80a3af4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a3af8:	4629      	mov	r1, r5
 80a3afa:	300c      	adds	r0, #12
 80a3afc:	f7ff fe79 	bl	80a37f2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a3b00:	4630      	mov	r0, r6
 80a3b02:	4621      	mov	r1, r4
 80a3b04:	f840 4b04 	str.w	r4, [r0], #4
 80a3b08:	f7ff ff08 	bl	80a391c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3b0c:	4628      	mov	r0, r5
 80a3b0e:	f7ff fe7f 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a3b12:	a805      	add	r0, sp, #20
 80a3b14:	f7ff fe7c 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
 80a3b18:	e052      	b.n	80a3bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3b1a:	2400      	movs	r4, #0
 80a3b1c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3b1e:	2014      	movs	r0, #20
 80a3b20:	606c      	str	r4, [r5, #4]
 80a3b22:	60ac      	str	r4, [r5, #8]
 80a3b24:	9307      	str	r3, [sp, #28]
 80a3b26:	f7fc faba 	bl	80a009e <_Znwj>
 80a3b2a:	4601      	mov	r1, r0
 80a3b2c:	b118      	cbz	r0, 80a3b36 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a3b2e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3b30:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3b32:	6044      	str	r4, [r0, #4]
 80a3b34:	6084      	str	r4, [r0, #8]
 80a3b36:	a804      	add	r0, sp, #16
 80a3b38:	9103      	str	r1, [sp, #12]
 80a3b3a:	f7ff feef 	bl	80a391c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a3b3e:	4b22      	ldr	r3, [pc, #136]	; (80a3bc8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a3b40:	2008      	movs	r0, #8
 80a3b42:	9308      	str	r3, [sp, #32]
 80a3b44:	f7fc faab 	bl	80a009e <_Znwj>
 80a3b48:	4604      	mov	r4, r0
 80a3b4a:	b128      	cbz	r0, 80a3b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3b4c:	9b03      	ldr	r3, [sp, #12]
 80a3b4e:	a904      	add	r1, sp, #16
 80a3b50:	f840 3b04 	str.w	r3, [r0], #4
 80a3b54:	f7ff fd60 	bl	80a3618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a3b58:	9500      	str	r5, [sp, #0]
 80a3b5a:	fa5f f38a 	uxtb.w	r3, sl
 80a3b5e:	464a      	mov	r2, r9
 80a3b60:	4641      	mov	r1, r8
 80a3b62:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a3b64:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a3b66:	f7fe ffa1 	bl	80a2aac <spark_send_event>
 80a3b6a:	b920      	cbnz	r0, 80a3b76 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a3b6c:	9b03      	ldr	r3, [sp, #12]
 80a3b6e:	785b      	ldrb	r3, [r3, #1]
 80a3b70:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a3b74:	b183      	cbz	r3, 80a3b98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a3b76:	9b03      	ldr	r3, [sp, #12]
 80a3b78:	a904      	add	r1, sp, #16
 80a3b7a:	a806      	add	r0, sp, #24
 80a3b7c:	9305      	str	r3, [sp, #20]
 80a3b7e:	f7ff fd4b 	bl	80a3618 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a3b82:	a905      	add	r1, sp, #20
 80a3b84:	4630      	mov	r0, r6
 80a3b86:	f7ff fe9a 	bl	80a38be <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3b8a:	a806      	add	r0, sp, #24
 80a3b8c:	f7fd f93a 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3b90:	a804      	add	r0, sp, #16
 80a3b92:	f7fd f937 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3b96:	e013      	b.n	80a3bc0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a3b98:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a3b9c:	a905      	add	r1, sp, #20
 80a3b9e:	a803      	add	r0, sp, #12
 80a3ba0:	9205      	str	r2, [sp, #20]
 80a3ba2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3ba6:	f7ff fefd 	bl	80a39a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3baa:	a805      	add	r0, sp, #20
 80a3bac:	f7ff fe30 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a3bb0:	a805      	add	r0, sp, #20
 80a3bb2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a3bb4:	f7ff fe94 	bl	80a38e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a3bb8:	a806      	add	r0, sp, #24
 80a3bba:	f7fd f923 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3bbe:	e7da      	b.n	80a3b76 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a3bc0:	4630      	mov	r0, r6
 80a3bc2:	b00b      	add	sp, #44	; 0x2c
 80a3bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3bc8:	080a3d3d 	.word	0x080a3d3d

080a3bcc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3bcc:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3bce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3bd0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3bd2:	d006      	beq.n	80a3be2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a3bd4:	2a03      	cmp	r2, #3
 80a3bd6:	d017      	beq.n	80a3c08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a3bd8:	2a01      	cmp	r2, #1
 80a3bda:	d122      	bne.n	80a3c22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3bdc:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3bde:	6003      	str	r3, [r0, #0]
	      break;
 80a3be0:	e01f      	b.n	80a3c22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3be2:	2018      	movs	r0, #24
 80a3be4:	680e      	ldr	r6, [r1, #0]
 80a3be6:	f7fc fa5a 	bl	80a009e <_Znwj>
 80a3bea:	4605      	mov	r5, r0
 80a3bec:	b150      	cbz	r0, 80a3c04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3bee:	4631      	mov	r1, r6
 80a3bf0:	f7ff fec8 	bl	80a3984 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a3bf4:	6930      	ldr	r0, [r6, #16]
 80a3bf6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a3bfa:	b108      	cbz	r0, 80a3c00 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a3bfc:	f002 f98e 	bl	80a5f1c <strdup>
 80a3c00:	6128      	str	r0, [r5, #16]
 80a3c02:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3c04:	6025      	str	r5, [r4, #0]
 80a3c06:	e00c      	b.n	80a3c22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3c08:	6804      	ldr	r4, [r0, #0]
 80a3c0a:	b154      	cbz	r4, 80a3c22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a3c0c:	f104 0010 	add.w	r0, r4, #16
 80a3c10:	f7ff fdfe 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3c14:	4620      	mov	r0, r4
 80a3c16:	f7fc fa88 	bl	80a012a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3c1a:	2118      	movs	r1, #24
 80a3c1c:	4620      	mov	r0, r4
 80a3c1e:	f000 fcd3 	bl	80a45c8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a3c22:	2000      	movs	r0, #0
 80a3c24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3c26 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3c26:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3c28:	2300      	movs	r3, #0
 80a3c2a:	6083      	str	r3, [r0, #8]
 80a3c2c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3c2e:	4604      	mov	r4, r0
 80a3c30:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a3c32:	b12b      	cbz	r3, 80a3c40 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3c34:	2202      	movs	r2, #2
 80a3c36:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3c38:	68eb      	ldr	r3, [r5, #12]
 80a3c3a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3c3c:	68ab      	ldr	r3, [r5, #8]
 80a3c3e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a3c40:	4620      	mov	r0, r4
 80a3c42:	bd38      	pop	{r3, r4, r5, pc}

080a3c44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3c44:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3c46:	b570      	push	{r4, r5, r6, lr}
 80a3c48:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3c4a:	d006      	beq.n	80a3c5a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a3c4c:	2a03      	cmp	r2, #3
 80a3c4e:	d011      	beq.n	80a3c74 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a3c50:	2a01      	cmp	r2, #1
 80a3c52:	d118      	bne.n	80a3c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3c54:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3c56:	6003      	str	r3, [r0, #0]
	      break;
 80a3c58:	e015      	b.n	80a3c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3c5a:	2014      	movs	r0, #20
 80a3c5c:	680e      	ldr	r6, [r1, #0]
 80a3c5e:	f7fc fa1e 	bl	80a009e <_Znwj>
 80a3c62:	4605      	mov	r5, r0
 80a3c64:	b120      	cbz	r0, 80a3c70 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3c66:	4631      	mov	r1, r6
 80a3c68:	f7ff ffdd 	bl	80a3c26 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a3c6c:	7c33      	ldrb	r3, [r6, #16]
 80a3c6e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3c70:	6025      	str	r5, [r4, #0]
 80a3c72:	e008      	b.n	80a3c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3c74:	6804      	ldr	r4, [r0, #0]
 80a3c76:	b134      	cbz	r4, 80a3c86 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3c78:	4620      	mov	r0, r4
 80a3c7a:	f7fc fa56 	bl	80a012a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3c7e:	2114      	movs	r1, #20
 80a3c80:	4620      	mov	r0, r4
 80a3c82:	f000 fca1 	bl	80a45c8 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a3c86:	2000      	movs	r0, #0
 80a3c88:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3c8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a3c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3c8e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a3c90:	f3bf 8f5f 	dmb	sy
 80a3c94:	b087      	sub	sp, #28
 80a3c96:	2300      	movs	r3, #0
 80a3c98:	e850 6f00 	ldrex	r6, [r0]
 80a3c9c:	e840 3200 	strex	r2, r3, [r0]
 80a3ca0:	2a00      	cmp	r2, #0
 80a3ca2:	d1f9      	bne.n	80a3c98 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a3ca4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a3ca8:	2e00      	cmp	r6, #0
 80a3caa:	d03f      	beq.n	80a3d2c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a3cac:	4618      	mov	r0, r3
 80a3cae:	f7fe fe79 	bl	80a29a4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a3cb2:	4607      	mov	r7, r0
 80a3cb4:	b120      	cbz	r0, 80a3cc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3cb6:	4621      	mov	r1, r4
 80a3cb8:	4630      	mov	r0, r6
 80a3cba:	f7ff fe53 	bl	80a3964 <_ZNKSt8functionIFvRKbEEclES1_>
 80a3cbe:	e02e      	b.n	80a3d1e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3cc0:	4631      	mov	r1, r6
 80a3cc2:	a801      	add	r0, sp, #4
 80a3cc4:	f7ff ffaf 	bl	80a3c26 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a3cc8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3cca:	2010      	movs	r0, #16
 80a3ccc:	f88d 3014 	strb.w	r3, [sp, #20]
 80a3cd0:	f7fc f9e5 	bl	80a009e <_Znwj>
 80a3cd4:	4605      	mov	r5, r0
 80a3cd6:	b1d0      	cbz	r0, 80a3d0e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3cd8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3cda:	2014      	movs	r0, #20
 80a3cdc:	f7fc f9df 	bl	80a009e <_Znwj>
 80a3ce0:	4604      	mov	r4, r0
 80a3ce2:	b178      	cbz	r0, 80a3d04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3ce4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3ce6:	4601      	mov	r1, r0
 80a3ce8:	a801      	add	r0, sp, #4
 80a3cea:	f7ff fcb8 	bl	80a365e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3cee:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a3cf0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3cf2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3cf4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a3cf6:	9203      	str	r2, [sp, #12]
 80a3cf8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3cfa:	60e3      	str	r3, [r4, #12]
 80a3cfc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3d00:	9204      	str	r2, [sp, #16]
 80a3d02:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3d04:	4b0a      	ldr	r3, [pc, #40]	; (80a3d30 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3d06:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3d08:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3d0a:	4b0a      	ldr	r3, [pc, #40]	; (80a3d34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a3d0c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3d0e:	a801      	add	r0, sp, #4
 80a3d10:	f7fc fa0b 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3d14:	2200      	movs	r2, #0
 80a3d16:	4629      	mov	r1, r5
 80a3d18:	4807      	ldr	r0, [pc, #28]	; (80a3d38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a3d1a:	f7fe fe4b 	bl	80a29b4 <application_thread_invoke>
 80a3d1e:	4630      	mov	r0, r6
 80a3d20:	f7fc fa03 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a3d24:	2110      	movs	r1, #16
 80a3d26:	4630      	mov	r0, r6
 80a3d28:	f000 fc4e 	bl	80a45c8 <_ZdlPvj>
        }
    }
 80a3d2c:	b007      	add	sp, #28
 80a3d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3d30:	080a3977 	.word	0x080a3977
 80a3d34:	080a3c45 	.word	0x080a3c45
 80a3d38:	080a4151 	.word	0x080a4151

080a3d3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a3d3c:	b530      	push	{r4, r5, lr}
 80a3d3e:	4604      	mov	r4, r0
 80a3d40:	b085      	sub	sp, #20
 80a3d42:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a3d44:	4668      	mov	r0, sp
 80a3d46:	4611      	mov	r1, r2
 80a3d48:	f7ff fdca 	bl	80a38e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a3d4c:	b17c      	cbz	r4, 80a3d6e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a3d4e:	b224      	sxth	r4, r4
 80a3d50:	4628      	mov	r0, r5
 80a3d52:	b10d      	cbz	r5, 80a3d58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a3d54:	f002 f8e2 	bl	80a5f1c <strdup>
 80a3d58:	9002      	str	r0, [sp, #8]
 80a3d5a:	a902      	add	r1, sp, #8
 80a3d5c:	4668      	mov	r0, sp
 80a3d5e:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a3d62:	f7ff fe1f 	bl	80a39a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3d66:	a802      	add	r0, sp, #8
 80a3d68:	f7ff fd52 	bl	80a3810 <_ZN8particle5ErrorD1Ev>
 80a3d6c:	e01d      	b.n	80a3daa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a3d6e:	f04f 0201 	mov.w	r2, #1
 80a3d72:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a3d74:	f88d 4008 	strb.w	r4, [sp, #8]
 80a3d78:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a3d7c:	42a3      	cmp	r3, r4
 80a3d7e:	d103      	bne.n	80a3d88 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a3d80:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a3d84:	2900      	cmp	r1, #0
 80a3d86:	d1f7      	bne.n	80a3d78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a3d88:	d002      	beq.n	80a3d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a3d8a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a3d8e:	e00c      	b.n	80a3daa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a3d90:	f110 010c 	adds.w	r1, r0, #12
 80a3d94:	f04f 0301 	mov.w	r3, #1
 80a3d98:	bf18      	it	ne
 80a3d9a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a3d9c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a3da0:	3004      	adds	r0, #4
 80a3da2:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a3da6:	f7ff ff71 	bl	80a3c8c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a3daa:	a801      	add	r0, sp, #4
 80a3dac:	f7fd f82a 	bl	80a0e04 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a3db0:	b005      	add	sp, #20
 80a3db2:	bd30      	pop	{r4, r5, pc}

080a3db4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a3db4:	4770      	bx	lr

080a3db6 <_ZN9IPAddressD0Ev>:
 80a3db6:	b510      	push	{r4, lr}
 80a3db8:	4604      	mov	r4, r0
 80a3dba:	2118      	movs	r1, #24
 80a3dbc:	f000 fc04 	bl	80a45c8 <_ZdlPvj>
 80a3dc0:	4620      	mov	r0, r4
 80a3dc2:	bd10      	pop	{r4, pc}

080a3dc4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a3dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3dc6:	460f      	mov	r7, r1
 80a3dc8:	f100 0608 	add.w	r6, r0, #8
 80a3dcc:	1d05      	adds	r5, r0, #4
 80a3dce:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3dd0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a3dd4:	220a      	movs	r2, #10
 80a3dd6:	4638      	mov	r0, r7
 80a3dd8:	f7ff fb21 	bl	80a341e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3ddc:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a3dde:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a3de0:	d007      	beq.n	80a3df2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a3de2:	2c00      	cmp	r4, #0
 80a3de4:	d0f4      	beq.n	80a3dd0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a3de6:	212e      	movs	r1, #46	; 0x2e
 80a3de8:	4638      	mov	r0, r7
 80a3dea:	f7ff fadf 	bl	80a33ac <_ZN5Print5printEc>
 80a3dee:	4404      	add	r4, r0
 80a3df0:	e7ee      	b.n	80a3dd0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a3df2:	4620      	mov	r0, r4
 80a3df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a3df8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a3df8:	b510      	push	{r4, lr}
 80a3dfa:	4604      	mov	r4, r0
 80a3dfc:	4b04      	ldr	r3, [pc, #16]	; (80a3e10 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a3dfe:	2211      	movs	r2, #17
 80a3e00:	f840 3b04 	str.w	r3, [r0], #4
 80a3e04:	2100      	movs	r1, #0
 80a3e06:	f002 f846 	bl	80a5e96 <memset>
{
    clear();
}
 80a3e0a:	4620      	mov	r0, r4
 80a3e0c:	bd10      	pop	{r4, pc}
 80a3e0e:	bf00      	nop
 80a3e10:	080a64dc 	.word	0x080a64dc

080a3e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a3e14:	4603      	mov	r3, r0
 80a3e16:	4a07      	ldr	r2, [pc, #28]	; (80a3e34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a3e18:	b510      	push	{r4, lr}
 80a3e1a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a3e1e:	f101 0210 	add.w	r2, r1, #16
 80a3e22:	f851 4b04 	ldr.w	r4, [r1], #4
 80a3e26:	4291      	cmp	r1, r2
 80a3e28:	f843 4b04 	str.w	r4, [r3], #4
 80a3e2c:	d1f9      	bne.n	80a3e22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a3e2e:	780a      	ldrb	r2, [r1, #0]
 80a3e30:	701a      	strb	r2, [r3, #0]
}
 80a3e32:	bd10      	pop	{r4, pc}
 80a3e34:	080a64dc 	.word	0x080a64dc

080a3e38 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3e38:	4a02      	ldr	r2, [pc, #8]	; (80a3e44 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a3e3a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a3e3c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a3e3e:	2204      	movs	r2, #4
 80a3e40:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a3e42:	4770      	bx	lr
 80a3e44:	080a64dc 	.word	0x080a64dc

080a3e48 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a3e48:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a3e4a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a3e4e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a3e52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a3e56:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a3e5a:	2304      	movs	r3, #4
 80a3e5c:	6041      	str	r1, [r0, #4]
 80a3e5e:	7503      	strb	r3, [r0, #20]
 80a3e60:	bd10      	pop	{r4, pc}
	...

080a3e64 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a3e64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3e66:	4d04      	ldr	r5, [pc, #16]	; (80a3e78 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a3e68:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a3e6a:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a3e6e:	9500      	str	r5, [sp, #0]
 80a3e70:	f7ff ffea 	bl	80a3e48 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a3e74:	b003      	add	sp, #12
 80a3e76:	bd30      	pop	{r4, r5, pc}
 80a3e78:	080a64dc 	.word	0x080a64dc

080a3e7c <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a3e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a3e7e:	780d      	ldrb	r5, [r1, #0]
 80a3e80:	788b      	ldrb	r3, [r1, #2]
 80a3e82:	784a      	ldrb	r2, [r1, #1]
 80a3e84:	78c9      	ldrb	r1, [r1, #3]
 80a3e86:	9100      	str	r1, [sp, #0]
 80a3e88:	4629      	mov	r1, r5
 80a3e8a:	f7ff ffdd 	bl	80a3e48 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a3e8e:	b003      	add	sp, #12
 80a3e90:	bd30      	pop	{r4, r5, pc}
	...

080a3e94 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a3e94:	b510      	push	{r4, lr}
 80a3e96:	4604      	mov	r4, r0
 80a3e98:	4b02      	ldr	r3, [pc, #8]	; (80a3ea4 <_ZN9IPAddressC1EPKh+0x10>)
 80a3e9a:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a3e9c:	f7ff ffee 	bl	80a3e7c <_ZN9IPAddressaSEPKh>
}
 80a3ea0:	4620      	mov	r0, r4
 80a3ea2:	bd10      	pop	{r4, pc}
 80a3ea4:	080a64dc 	.word	0x080a64dc

080a3ea8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a3ea8:	7441      	strb	r1, [r0, #17]
 80a3eaa:	4770      	bx	lr

080a3eac <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a3eac:	4770      	bx	lr

080a3eae <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a3eae:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a3eb0:	2100      	movs	r1, #0
 80a3eb2:	7c00      	ldrb	r0, [r0, #16]
 80a3eb4:	f7fe fd36 	bl	80a2924 <HAL_USB_USART_Receive_Data>
}
 80a3eb8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3ebc:	bf28      	it	cs
 80a3ebe:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3ec2:	bd08      	pop	{r3, pc}

080a3ec4 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a3ec4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a3ec6:	2101      	movs	r1, #1
 80a3ec8:	7c00      	ldrb	r0, [r0, #16]
 80a3eca:	f7fe fd2b 	bl	80a2924 <HAL_USB_USART_Receive_Data>
}
 80a3ece:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a3ed2:	bf28      	it	cs
 80a3ed4:	f04f 30ff 	movcs.w	r0, #4294967295
 80a3ed8:	bd08      	pop	{r3, pc}

080a3eda <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a3eda:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a3edc:	7c00      	ldrb	r0, [r0, #16]
 80a3ede:	f7fe fd19 	bl	80a2914 <HAL_USB_USART_Available_Data_For_Write>
}
 80a3ee2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3ee6:	bd08      	pop	{r3, pc}

080a3ee8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a3ee8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a3eea:	7c00      	ldrb	r0, [r0, #16]
 80a3eec:	f7fe fd0a 	bl	80a2904 <HAL_USB_USART_Available_Data>
}
 80a3ef0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a3ef4:	bd08      	pop	{r3, pc}

080a3ef6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a3ef6:	7c00      	ldrb	r0, [r0, #16]
 80a3ef8:	f7fe bd24 	b.w	80a2944 <HAL_USB_USART_Flush_Data>

080a3efc <_ZN9USBSerialD0Ev>:
 80a3efc:	b510      	push	{r4, lr}
 80a3efe:	4604      	mov	r4, r0
 80a3f00:	2114      	movs	r1, #20
 80a3f02:	f000 fb61 	bl	80a45c8 <_ZdlPvj>
 80a3f06:	4620      	mov	r0, r4
 80a3f08:	bd10      	pop	{r4, pc}

080a3f0a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3f0a:	b538      	push	{r3, r4, r5, lr}
 80a3f0c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3f0e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a3f10:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a3f12:	f7fe fcff 	bl	80a2914 <HAL_USB_USART_Available_Data_For_Write>
 80a3f16:	2800      	cmp	r0, #0
 80a3f18:	dc01      	bgt.n	80a3f1e <_ZN9USBSerial5writeEh+0x14>
 80a3f1a:	7c60      	ldrb	r0, [r4, #17]
 80a3f1c:	b128      	cbz	r0, 80a3f2a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a3f1e:	4629      	mov	r1, r5
 80a3f20:	7c20      	ldrb	r0, [r4, #16]
 80a3f22:	f7fe fd07 	bl	80a2934 <HAL_USB_USART_Send_Data>
 80a3f26:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a3f2a:	bd38      	pop	{r3, r4, r5, pc}

080a3f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a3f2c:	b510      	push	{r4, lr}
 80a3f2e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a3f30:	2300      	movs	r3, #0
 80a3f32:	6063      	str	r3, [r4, #4]
 80a3f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a3f38:	60a3      	str	r3, [r4, #8]
 80a3f3a:	4b05      	ldr	r3, [pc, #20]	; (80a3f50 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a3f3c:	4608      	mov	r0, r1
 80a3f3e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a3f40:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a3f42:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a3f44:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a3f46:	4611      	mov	r1, r2
 80a3f48:	f7fe fcd4 	bl	80a28f4 <HAL_USB_USART_Init>
}
 80a3f4c:	4620      	mov	r0, r4
 80a3f4e:	bd10      	pop	{r4, pc}
 80a3f50:	080a64f0 	.word	0x080a64f0

080a3f54 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a3f54:	b510      	push	{r4, lr}
 80a3f56:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3f58:	2214      	movs	r2, #20
 80a3f5a:	2100      	movs	r1, #0
 80a3f5c:	f001 ff9b 	bl	80a5e96 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3f60:	4b05      	ldr	r3, [pc, #20]	; (80a3f78 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3f62:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a3f64:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a3f66:	4b05      	ldr	r3, [pc, #20]	; (80a3f7c <_Z19acquireSerialBufferv+0x28>)
 80a3f68:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3f6a:	f240 1301 	movw	r3, #257	; 0x101
 80a3f6e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3f70:	2381      	movs	r3, #129	; 0x81
 80a3f72:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3f74:	bd10      	pop	{r4, pc}
 80a3f76:	bf00      	nop
 80a3f78:	20000331 	.word	0x20000331
 80a3f7c:	200002b0 	.word	0x200002b0

080a3f80 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a3f80:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3f82:	4d0e      	ldr	r5, [pc, #56]	; (80a3fbc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a3f84:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a3f86:	a801      	add	r0, sp, #4
 80a3f88:	f7ff ffe4 	bl	80a3f54 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a3f8c:	6829      	ldr	r1, [r5, #0]
 80a3f8e:	f011 0401 	ands.w	r4, r1, #1
 80a3f92:	d110      	bne.n	80a3fb6 <_Z16_fetch_usbserialv+0x36>
 80a3f94:	4628      	mov	r0, r5
 80a3f96:	f7fc f88a 	bl	80a00ae <__cxa_guard_acquire>
 80a3f9a:	b160      	cbz	r0, 80a3fb6 <_Z16_fetch_usbserialv+0x36>
 80a3f9c:	aa01      	add	r2, sp, #4
 80a3f9e:	4621      	mov	r1, r4
 80a3fa0:	4807      	ldr	r0, [pc, #28]	; (80a3fc0 <_Z16_fetch_usbserialv+0x40>)
 80a3fa2:	f7ff ffc3 	bl	80a3f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a3fa6:	4628      	mov	r0, r5
 80a3fa8:	f7fc f886 	bl	80a00b8 <__cxa_guard_release>
 80a3fac:	4a05      	ldr	r2, [pc, #20]	; (80a3fc4 <_Z16_fetch_usbserialv+0x44>)
 80a3fae:	4906      	ldr	r1, [pc, #24]	; (80a3fc8 <_Z16_fetch_usbserialv+0x48>)
 80a3fb0:	4803      	ldr	r0, [pc, #12]	; (80a3fc0 <_Z16_fetch_usbserialv+0x40>)
 80a3fb2:	f000 fafb 	bl	80a45ac <__aeabi_atexit>
	return _usbserial;
}
 80a3fb6:	4802      	ldr	r0, [pc, #8]	; (80a3fc0 <_Z16_fetch_usbserialv+0x40>)
 80a3fb8:	b007      	add	sp, #28
 80a3fba:	bd30      	pop	{r4, r5, pc}
 80a3fbc:	200002ac 	.word	0x200002ac
 80a3fc0:	20000434 	.word	0x20000434
 80a3fc4:	200000a4 	.word	0x200000a4
 80a3fc8:	080a3ead 	.word	0x080a3ead

080a3fcc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a3fcc:	b510      	push	{r4, lr}
 80a3fce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a3fd0:	2214      	movs	r2, #20
 80a3fd2:	2100      	movs	r1, #0
 80a3fd4:	f001 ff5f 	bl	80a5e96 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3fd8:	4b05      	ldr	r3, [pc, #20]	; (80a3ff0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a3fda:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a3fdc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a3fde:	4b05      	ldr	r3, [pc, #20]	; (80a3ff4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a3fe0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a3fe2:	f240 1301 	movw	r3, #257	; 0x101
 80a3fe6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a3fe8:	2381      	movs	r3, #129	; 0x81
 80a3fea:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a3fec:	bd10      	pop	{r4, pc}
 80a3fee:	bf00      	nop
 80a3ff0:	200004e4 	.word	0x200004e4
 80a3ff4:	2000044c 	.word	0x2000044c

080a3ff8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a3ff8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a3ffa:	4c0e      	ldr	r4, [pc, #56]	; (80a4034 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a3ffc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a3ffe:	a801      	add	r0, sp, #4
 80a4000:	f7ff ffe4 	bl	80a3fcc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4004:	6823      	ldr	r3, [r4, #0]
 80a4006:	07db      	lsls	r3, r3, #31
 80a4008:	d410      	bmi.n	80a402c <_Z17_fetch_usbserial1v+0x34>
 80a400a:	4620      	mov	r0, r4
 80a400c:	f7fc f84f 	bl	80a00ae <__cxa_guard_acquire>
 80a4010:	b160      	cbz	r0, 80a402c <_Z17_fetch_usbserial1v+0x34>
 80a4012:	aa01      	add	r2, sp, #4
 80a4014:	2101      	movs	r1, #1
 80a4016:	4808      	ldr	r0, [pc, #32]	; (80a4038 <_Z17_fetch_usbserial1v+0x40>)
 80a4018:	f7ff ff88 	bl	80a3f2c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a401c:	4620      	mov	r0, r4
 80a401e:	f7fc f84b 	bl	80a00b8 <__cxa_guard_release>
 80a4022:	4a06      	ldr	r2, [pc, #24]	; (80a403c <_Z17_fetch_usbserial1v+0x44>)
 80a4024:	4906      	ldr	r1, [pc, #24]	; (80a4040 <_Z17_fetch_usbserial1v+0x48>)
 80a4026:	4804      	ldr	r0, [pc, #16]	; (80a4038 <_Z17_fetch_usbserial1v+0x40>)
 80a4028:	f000 fac0 	bl	80a45ac <__aeabi_atexit>
  return _usbserial1;
}
 80a402c:	4802      	ldr	r0, [pc, #8]	; (80a4038 <_Z17_fetch_usbserial1v+0x40>)
 80a402e:	b006      	add	sp, #24
 80a4030:	bd10      	pop	{r4, pc}
 80a4032:	bf00      	nop
 80a4034:	20000448 	.word	0x20000448
 80a4038:	200004d0 	.word	0x200004d0
 80a403c:	200000a4 	.word	0x200000a4
 80a4040:	080a3ead 	.word	0x080a3ead

080a4044 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a4044:	f7fe bb0c 	b.w	80a2660 <HAL_Interrupts_Disable_All>

080a4048 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a4048:	f7fe bb02 	b.w	80a2650 <HAL_Interrupts_Enable_All>

080a404c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a404c:	4770      	bx	lr

080a404e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a404e:	7441      	strb	r1, [r0, #17]
 80a4050:	4770      	bx	lr

080a4052 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a4052:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a4054:	7c00      	ldrb	r0, [r0, #16]
 80a4056:	f7fe fbab 	bl	80a27b0 <HAL_USART_Available_Data_For_Write>
}
 80a405a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a405e:	bd08      	pop	{r3, pc}

080a4060 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a4060:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a4062:	7c00      	ldrb	r0, [r0, #16]
 80a4064:	f7fe fb7c 	bl	80a2760 <HAL_USART_Available_Data>
}
 80a4068:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a406c:	bd08      	pop	{r3, pc}

080a406e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a406e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a4070:	7c00      	ldrb	r0, [r0, #16]
 80a4072:	f7fe fb85 	bl	80a2780 <HAL_USART_Peek_Data>
}
 80a4076:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a407a:	bf28      	it	cs
 80a407c:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4080:	bd08      	pop	{r3, pc}

080a4082 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a4082:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a4084:	7c00      	ldrb	r0, [r0, #16]
 80a4086:	f7fe fb73 	bl	80a2770 <HAL_USART_Read_Data>
}
 80a408a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a408e:	bf28      	it	cs
 80a4090:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4094:	bd08      	pop	{r3, pc}

080a4096 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a4096:	7c00      	ldrb	r0, [r0, #16]
 80a4098:	f7fe bb7a 	b.w	80a2790 <HAL_USART_Flush_Data>

080a409c <_ZN11USARTSerialD0Ev>:
 80a409c:	b510      	push	{r4, lr}
 80a409e:	4604      	mov	r4, r0
 80a40a0:	2114      	movs	r1, #20
 80a40a2:	f000 fa91 	bl	80a45c8 <_ZdlPvj>
 80a40a6:	4620      	mov	r0, r4
 80a40a8:	bd10      	pop	{r4, pc}

080a40aa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a40aa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a40ac:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a40ae:	4604      	mov	r4, r0
 80a40b0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a40b2:	b925      	cbnz	r5, 80a40be <_ZN11USARTSerial5writeEh+0x14>
 80a40b4:	7c00      	ldrb	r0, [r0, #16]
 80a40b6:	f7fe fb7b 	bl	80a27b0 <HAL_USART_Available_Data_For_Write>
 80a40ba:	2800      	cmp	r0, #0
 80a40bc:	dd05      	ble.n	80a40ca <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a40be:	4631      	mov	r1, r6
 80a40c0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a40c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a40c6:	f7fe bb43 	b.w	80a2750 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a40ca:	4628      	mov	r0, r5
 80a40cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080a40d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a40d0:	b510      	push	{r4, lr}
 80a40d2:	4604      	mov	r4, r0
 80a40d4:	4608      	mov	r0, r1
 80a40d6:	4611      	mov	r1, r2
 80a40d8:	2200      	movs	r2, #0
 80a40da:	6062      	str	r2, [r4, #4]
 80a40dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a40e0:	60a2      	str	r2, [r4, #8]
 80a40e2:	4a05      	ldr	r2, [pc, #20]	; (80a40f8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a40e4:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a40e6:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a40e8:	2201      	movs	r2, #1
 80a40ea:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a40ec:	461a      	mov	r2, r3
 80a40ee:	f7fe fb27 	bl	80a2740 <HAL_USART_Init>
}
 80a40f2:	4620      	mov	r0, r4
 80a40f4:	bd10      	pop	{r4, pc}
 80a40f6:	bf00      	nop
 80a40f8:	080a6520 	.word	0x080a6520

080a40fc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a40fc:	7c00      	ldrb	r0, [r0, #16]
 80a40fe:	f7fe bb4f 	b.w	80a27a0 <HAL_USART_Is_Enabled>
	...

080a4104 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4104:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a4106:	4d0c      	ldr	r5, [pc, #48]	; (80a4138 <_Z22__fetch_global_Serial1v+0x34>)
 80a4108:	6829      	ldr	r1, [r5, #0]
 80a410a:	f011 0401 	ands.w	r4, r1, #1
 80a410e:	d111      	bne.n	80a4134 <_Z22__fetch_global_Serial1v+0x30>
 80a4110:	4628      	mov	r0, r5
 80a4112:	f7fb ffcc 	bl	80a00ae <__cxa_guard_acquire>
 80a4116:	b168      	cbz	r0, 80a4134 <_Z22__fetch_global_Serial1v+0x30>
 80a4118:	4a08      	ldr	r2, [pc, #32]	; (80a413c <_Z22__fetch_global_Serial1v+0x38>)
 80a411a:	4621      	mov	r1, r4
 80a411c:	4b08      	ldr	r3, [pc, #32]	; (80a4140 <_Z22__fetch_global_Serial1v+0x3c>)
 80a411e:	4809      	ldr	r0, [pc, #36]	; (80a4144 <_Z22__fetch_global_Serial1v+0x40>)
 80a4120:	f7ff ffd6 	bl	80a40d0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a4124:	4628      	mov	r0, r5
 80a4126:	f7fb ffc7 	bl	80a00b8 <__cxa_guard_release>
 80a412a:	4a07      	ldr	r2, [pc, #28]	; (80a4148 <_Z22__fetch_global_Serial1v+0x44>)
 80a412c:	4907      	ldr	r1, [pc, #28]	; (80a414c <_Z22__fetch_global_Serial1v+0x48>)
 80a412e:	4805      	ldr	r0, [pc, #20]	; (80a4144 <_Z22__fetch_global_Serial1v+0x40>)
 80a4130:	f000 fa3c 	bl	80a45ac <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a4134:	4803      	ldr	r0, [pc, #12]	; (80a4144 <_Z22__fetch_global_Serial1v+0x40>)
 80a4136:	bd38      	pop	{r3, r4, r5, pc}
 80a4138:	20000680 	.word	0x20000680
 80a413c:	20000684 	.word	0x20000684
 80a4140:	200005fc 	.word	0x200005fc
 80a4144:	200005e8 	.word	0x200005e8
 80a4148:	200000a4 	.word	0x200000a4
 80a414c:	080a404d 	.word	0x080a404d

080a4150 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a4150:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a4152:	6883      	ldr	r3, [r0, #8]
 80a4154:	4604      	mov	r4, r0
 80a4156:	b90b      	cbnz	r3, 80a415c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a4158:	f000 fa47 	bl	80a45ea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a415c:	68c3      	ldr	r3, [r0, #12]
 80a415e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a4160:	68a3      	ldr	r3, [r4, #8]
 80a4162:	b11b      	cbz	r3, 80a416c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a4164:	2203      	movs	r2, #3
 80a4166:	4621      	mov	r1, r4
 80a4168:	4620      	mov	r0, r4
 80a416a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a416c:	4620      	mov	r0, r4
}
 80a416e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a4172:	2110      	movs	r1, #16
 80a4174:	f000 ba28 	b.w	80a45c8 <_ZdlPvj>

080a4178 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a4178:	4770      	bx	lr

080a417a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a417a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a417c:	4606      	mov	r6, r0
 80a417e:	4615      	mov	r5, r2
 80a4180:	460c      	mov	r4, r1
 80a4182:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4184:	42bc      	cmp	r4, r7
 80a4186:	d006      	beq.n	80a4196 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a4188:	6833      	ldr	r3, [r6, #0]
 80a418a:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a418e:	689b      	ldr	r3, [r3, #8]
 80a4190:	4630      	mov	r0, r6
 80a4192:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a4194:	e7f6      	b.n	80a4184 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a4196:	4628      	mov	r0, r5
 80a4198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a419a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a419a:	2200      	movs	r2, #0
 80a419c:	7c00      	ldrb	r0, [r0, #16]
 80a419e:	f7fe bb2f 	b.w	80a2800 <HAL_I2C_Write_Data>

080a41a2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a41a2:	2100      	movs	r1, #0
 80a41a4:	7c00      	ldrb	r0, [r0, #16]
 80a41a6:	f7fe bb33 	b.w	80a2810 <HAL_I2C_Available_Data>

080a41aa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a41aa:	2100      	movs	r1, #0
 80a41ac:	7c00      	ldrb	r0, [r0, #16]
 80a41ae:	f7fe bb37 	b.w	80a2820 <HAL_I2C_Read_Data>

080a41b2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a41b2:	2100      	movs	r1, #0
 80a41b4:	7c00      	ldrb	r0, [r0, #16]
 80a41b6:	f7fe bb3b 	b.w	80a2830 <HAL_I2C_Peek_Data>

080a41ba <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a41ba:	2100      	movs	r1, #0
 80a41bc:	7c00      	ldrb	r0, [r0, #16]
 80a41be:	f7fe bb3f 	b.w	80a2840 <HAL_I2C_Flush_Data>

080a41c2 <_ZN7TwoWireD0Ev>:
 80a41c2:	b510      	push	{r4, lr}
 80a41c4:	4604      	mov	r4, r0
 80a41c6:	2114      	movs	r1, #20
 80a41c8:	f000 f9fe 	bl	80a45c8 <_ZdlPvj>
 80a41cc:	4620      	mov	r0, r4
 80a41ce:	bd10      	pop	{r4, pc}

080a41d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a41d0:	b510      	push	{r4, lr}
 80a41d2:	4604      	mov	r4, r0
 80a41d4:	4608      	mov	r0, r1
 80a41d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a41da:	60a3      	str	r3, [r4, #8]
 80a41dc:	4b04      	ldr	r3, [pc, #16]	; (80a41f0 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a41de:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a41e0:	7420      	strb	r0, [r4, #16]
 80a41e2:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a41e4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a41e6:	f7fe fb3b 	bl	80a2860 <HAL_I2C_Init>

}
 80a41ea:	4620      	mov	r0, r4
 80a41ec:	bd10      	pop	{r4, pc}
 80a41ee:	bf00      	nop
 80a41f0:	080a6550 	.word	0x080a6550

080a41f4 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a41f4:	2300      	movs	r3, #0
 80a41f6:	461a      	mov	r2, r3
 80a41f8:	4619      	mov	r1, r3
 80a41fa:	7c00      	ldrb	r0, [r0, #16]
 80a41fc:	f7fe bae0 	b.w	80a27c0 <HAL_I2C_Begin>

080a4200 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a4200:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a4202:	2400      	movs	r4, #0
 80a4204:	7c00      	ldrb	r0, [r0, #16]
 80a4206:	9400      	str	r4, [sp, #0]
 80a4208:	f7fe fae2 	bl	80a27d0 <HAL_I2C_Request_Data>
  return result;
}
 80a420c:	b2c0      	uxtb	r0, r0
 80a420e:	b002      	add	sp, #8
 80a4210:	bd10      	pop	{r4, pc}

080a4212 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a4212:	2301      	movs	r3, #1
 80a4214:	f7ff bff4 	b.w	80a4200 <_ZN7TwoWire11requestFromEhhh>

080a4218 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a4218:	2200      	movs	r2, #0
 80a421a:	7c00      	ldrb	r0, [r0, #16]
 80a421c:	f7fe bae0 	b.w	80a27e0 <HAL_I2C_Begin_Transmission>

080a4220 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a4220:	b2c9      	uxtb	r1, r1
 80a4222:	f7ff bff9 	b.w	80a4218 <_ZN7TwoWire17beginTransmissionEh>

080a4226 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a4226:	2200      	movs	r2, #0
 80a4228:	7c00      	ldrb	r0, [r0, #16]
 80a422a:	f7fe bae1 	b.w	80a27f0 <HAL_I2C_End_Transmission>

080a422e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a422e:	2101      	movs	r1, #1
 80a4230:	f7ff bff9 	b.w	80a4226 <_ZN7TwoWire15endTransmissionEh>

080a4234 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4234:	2100      	movs	r1, #0
 80a4236:	7c00      	ldrb	r0, [r0, #16]
 80a4238:	f7fe bb0a 	b.w	80a2850 <HAL_I2C_Is_Enabled>

080a423c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a423c:	2200      	movs	r2, #0
 80a423e:	4611      	mov	r1, r2
 80a4240:	6840      	ldr	r0, [r0, #4]
 80a4242:	f7fe bbeb 	b.w	80a2a1c <network_ready>

080a4246 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4246:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4248:	4616      	mov	r6, r2
 80a424a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a424c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a424e:	460f      	mov	r7, r1
 80a4250:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a4252:	2100      	movs	r1, #0
 80a4254:	a803      	add	r0, sp, #12
 80a4256:	f001 fe1e 	bl	80a5e96 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a425a:	4630      	mov	r0, r6
 80a425c:	f001 fe79 	bl	80a5f52 <strlen>
 80a4260:	2500      	movs	r5, #0
 80a4262:	9500      	str	r5, [sp, #0]
 80a4264:	b281      	uxth	r1, r0
 80a4266:	687b      	ldr	r3, [r7, #4]
 80a4268:	aa03      	add	r2, sp, #12
 80a426a:	4630      	mov	r0, r6
 80a426c:	f7fe fb7a 	bl	80a2964 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4270:	b120      	cbz	r0, 80a427c <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a4272:	4629      	mov	r1, r5
 80a4274:	4620      	mov	r0, r4
 80a4276:	f7ff fddf 	bl	80a3e38 <_ZN9IPAddressC1Em>
 80a427a:	e003      	b.n	80a4284 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a427c:	a903      	add	r1, sp, #12
 80a427e:	4620      	mov	r0, r4
 80a4280:	f7ff fdc8 	bl	80a3e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a4284:	4620      	mov	r0, r4
 80a4286:	b009      	add	sp, #36	; 0x24
 80a4288:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a428a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a428a:	2200      	movs	r2, #0
 80a428c:	4611      	mov	r1, r2
 80a428e:	6840      	ldr	r0, [r0, #4]
 80a4290:	f7fe bbe4 	b.w	80a2a5c <network_listening>

080a4294 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a4294:	2200      	movs	r2, #0
 80a4296:	4611      	mov	r1, r2
 80a4298:	6840      	ldr	r0, [r0, #4]
 80a429a:	f7fe bbef 	b.w	80a2a7c <network_get_listen_timeout>

080a429e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a429e:	2200      	movs	r2, #0
 80a42a0:	6840      	ldr	r0, [r0, #4]
 80a42a2:	f7fe bbe3 	b.w	80a2a6c <network_set_listen_timeout>

080a42a6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a42a6:	2200      	movs	r2, #0
 80a42a8:	f081 0101 	eor.w	r1, r1, #1
 80a42ac:	6840      	ldr	r0, [r0, #4]
 80a42ae:	f7fe bbcd 	b.w	80a2a4c <network_listen>

080a42b2 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a42b2:	2300      	movs	r3, #0
 80a42b4:	461a      	mov	r2, r3
 80a42b6:	4619      	mov	r1, r3
 80a42b8:	6840      	ldr	r0, [r0, #4]
 80a42ba:	f7fe bbbf 	b.w	80a2a3c <network_off>

080a42be <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a42be:	2200      	movs	r2, #0
 80a42c0:	4611      	mov	r1, r2
 80a42c2:	6840      	ldr	r0, [r0, #4]
 80a42c4:	f7fe bb9a 	b.w	80a29fc <network_connecting>

080a42c8 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a42c8:	2200      	movs	r2, #0
 80a42ca:	2102      	movs	r1, #2
 80a42cc:	6840      	ldr	r0, [r0, #4]
 80a42ce:	f7fe bb9d 	b.w	80a2a0c <network_disconnect>

080a42d2 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a42d2:	2300      	movs	r3, #0
 80a42d4:	461a      	mov	r2, r3
 80a42d6:	6840      	ldr	r0, [r0, #4]
 80a42d8:	f7fe bb88 	b.w	80a29ec <network_connect>

080a42dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a42dc:	4b02      	ldr	r3, [pc, #8]	; (80a42e8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a42de:	2204      	movs	r2, #4
 80a42e0:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a42e2:	4a02      	ldr	r2, [pc, #8]	; (80a42ec <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a42e4:	601a      	str	r2, [r3, #0]
 80a42e6:	4770      	bx	lr
 80a42e8:	20000708 	.word	0x20000708
 80a42ec:	080a6578 	.word	0x080a6578

080a42f0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a42f0:	2300      	movs	r3, #0
 80a42f2:	461a      	mov	r2, r3
 80a42f4:	6840      	ldr	r0, [r0, #4]
 80a42f6:	f7fe bb79 	b.w	80a29ec <network_connect>

080a42fa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a42fa:	2200      	movs	r2, #0
 80a42fc:	2102      	movs	r1, #2
 80a42fe:	6840      	ldr	r0, [r0, #4]
 80a4300:	f7fe bb84 	b.w	80a2a0c <network_disconnect>

080a4304 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4304:	2200      	movs	r2, #0
 80a4306:	4611      	mov	r1, r2
 80a4308:	6840      	ldr	r0, [r0, #4]
 80a430a:	f7fe bb77 	b.w	80a29fc <network_connecting>

080a430e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a430e:	2200      	movs	r2, #0
 80a4310:	4611      	mov	r1, r2
 80a4312:	6840      	ldr	r0, [r0, #4]
 80a4314:	f7fe bb82 	b.w	80a2a1c <network_ready>

080a4318 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4318:	2300      	movs	r3, #0
 80a431a:	461a      	mov	r2, r3
 80a431c:	4619      	mov	r1, r3
 80a431e:	6840      	ldr	r0, [r0, #4]
 80a4320:	f7fe bb84 	b.w	80a2a2c <network_on>

080a4324 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4324:	2300      	movs	r3, #0
 80a4326:	461a      	mov	r2, r3
 80a4328:	4619      	mov	r1, r3
 80a432a:	6840      	ldr	r0, [r0, #4]
 80a432c:	f7fe bb86 	b.w	80a2a3c <network_off>

080a4330 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4330:	2200      	movs	r2, #0
 80a4332:	f081 0101 	eor.w	r1, r1, #1
 80a4336:	6840      	ldr	r0, [r0, #4]
 80a4338:	f7fe bb88 	b.w	80a2a4c <network_listen>

080a433c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a433c:	2200      	movs	r2, #0
 80a433e:	6840      	ldr	r0, [r0, #4]
 80a4340:	f7fe bb94 	b.w	80a2a6c <network_set_listen_timeout>

080a4344 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4344:	2200      	movs	r2, #0
 80a4346:	4611      	mov	r1, r2
 80a4348:	6840      	ldr	r0, [r0, #4]
 80a434a:	f7fe bb97 	b.w	80a2a7c <network_get_listen_timeout>

080a434e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a434e:	2200      	movs	r2, #0
 80a4350:	4611      	mov	r1, r2
 80a4352:	6840      	ldr	r0, [r0, #4]
 80a4354:	f7fe bb82 	b.w	80a2a5c <network_listening>

080a4358 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a4358:	b570      	push	{r4, r5, r6, lr}
 80a435a:	4616      	mov	r6, r2
 80a435c:	b08e      	sub	sp, #56	; 0x38
 80a435e:	4604      	mov	r4, r0
    IPAddress addr;
 80a4360:	a808      	add	r0, sp, #32
 80a4362:	f7ff fd49 	bl	80a3df8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a4366:	2211      	movs	r2, #17
 80a4368:	2100      	movs	r1, #0
 80a436a:	a803      	add	r0, sp, #12
 80a436c:	f001 fd93 	bl	80a5e96 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a4370:	4630      	mov	r0, r6
 80a4372:	f001 fdee 	bl	80a5f52 <strlen>
 80a4376:	2500      	movs	r5, #0
 80a4378:	4b0a      	ldr	r3, [pc, #40]	; (80a43a4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a437a:	9500      	str	r5, [sp, #0]
 80a437c:	b281      	uxth	r1, r0
 80a437e:	685b      	ldr	r3, [r3, #4]
 80a4380:	aa03      	add	r2, sp, #12
 80a4382:	4630      	mov	r0, r6
 80a4384:	f7fe faee 	bl	80a2964 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a4388:	b120      	cbz	r0, 80a4394 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a438a:	4629      	mov	r1, r5
 80a438c:	4620      	mov	r0, r4
 80a438e:	f7ff fd53 	bl	80a3e38 <_ZN9IPAddressC1Em>
 80a4392:	e003      	b.n	80a439c <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a4394:	a903      	add	r1, sp, #12
 80a4396:	4620      	mov	r0, r4
 80a4398:	f7ff fd3c 	bl	80a3e14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a439c:	4620      	mov	r0, r4
 80a439e:	b00e      	add	sp, #56	; 0x38
 80a43a0:	bd70      	pop	{r4, r5, r6, pc}
 80a43a2:	bf00      	nop
 80a43a4:	20000708 	.word	0x20000708

080a43a8 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a43a8:	4b03      	ldr	r3, [pc, #12]	; (80a43b8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a43aa:	4a04      	ldr	r2, [pc, #16]	; (80a43bc <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a43ac:	2804      	cmp	r0, #4
 80a43ae:	bf0c      	ite	eq
 80a43b0:	4610      	moveq	r0, r2
 80a43b2:	4618      	movne	r0, r3
 80a43b4:	4770      	bx	lr
 80a43b6:	bf00      	nop
 80a43b8:	20000710 	.word	0x20000710
 80a43bc:	20000708 	.word	0x20000708

080a43c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a43c0:	4b02      	ldr	r3, [pc, #8]	; (80a43cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a43c2:	4a03      	ldr	r2, [pc, #12]	; (80a43d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a43c4:	601a      	str	r2, [r3, #0]
 80a43c6:	2200      	movs	r2, #0
 80a43c8:	605a      	str	r2, [r3, #4]
 80a43ca:	4770      	bx	lr
 80a43cc:	20000710 	.word	0x20000710
 80a43d0:	080a65ac 	.word	0x080a65ac

080a43d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a43d4:	b510      	push	{r4, lr}
 80a43d6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a43d8:	480f      	ldr	r0, [pc, #60]	; (80a4418 <pinAvailable+0x44>)
 80a43da:	f7fe fbd3 	bl	80a2b84 <_ZN8SPIClass9isEnabledEv>
 80a43de:	b128      	cbz	r0, 80a43ec <pinAvailable+0x18>
 80a43e0:	f1a4 030d 	sub.w	r3, r4, #13
 80a43e4:	2b02      	cmp	r3, #2
 80a43e6:	d801      	bhi.n	80a43ec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a43e8:	2000      	movs	r0, #0
 80a43ea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a43ec:	f000 f8be 	bl	80a456c <_Z19__fetch_global_Wirev>
 80a43f0:	f7ff ff20 	bl	80a4234 <_ZN7TwoWire9isEnabledEv>
 80a43f4:	b108      	cbz	r0, 80a43fa <pinAvailable+0x26>
 80a43f6:	2c01      	cmp	r4, #1
 80a43f8:	d9f6      	bls.n	80a43e8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a43fa:	f7ff fe83 	bl	80a4104 <_Z22__fetch_global_Serial1v>
 80a43fe:	f7ff fe7d 	bl	80a40fc <_ZN11USARTSerial9isEnabledEv>
 80a4402:	b118      	cbz	r0, 80a440c <pinAvailable+0x38>
 80a4404:	f1a4 0312 	sub.w	r3, r4, #18
 80a4408:	2b01      	cmp	r3, #1
 80a440a:	d9ed      	bls.n	80a43e8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a440c:	2c17      	cmp	r4, #23
 80a440e:	bf8c      	ite	hi
 80a4410:	2000      	movhi	r0, #0
 80a4412:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4414:	bd10      	pop	{r4, pc}
 80a4416:	bf00      	nop
 80a4418:	20000718 	.word	0x20000718

080a441c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a441c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a441e:	b538      	push	{r3, r4, r5, lr}
 80a4420:	4604      	mov	r4, r0
 80a4422:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4424:	d80a      	bhi.n	80a443c <pinMode+0x20>
 80a4426:	29ff      	cmp	r1, #255	; 0xff
 80a4428:	d008      	beq.n	80a443c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a442a:	f7ff ffd3 	bl	80a43d4 <pinAvailable>
 80a442e:	b128      	cbz	r0, 80a443c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4430:	4629      	mov	r1, r5
 80a4432:	4620      	mov	r0, r4
}
 80a4434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4438:	f7fe b8ea 	b.w	80a2610 <HAL_Pin_Mode>
 80a443c:	bd38      	pop	{r3, r4, r5, pc}

080a443e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a443e:	b538      	push	{r3, r4, r5, lr}
 80a4440:	4604      	mov	r4, r0
 80a4442:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4444:	f7fe f8ec 	bl	80a2620 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4448:	28ff      	cmp	r0, #255	; 0xff
 80a444a:	d010      	beq.n	80a446e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a444c:	2806      	cmp	r0, #6
 80a444e:	d804      	bhi.n	80a445a <digitalWrite+0x1c>
 80a4450:	234d      	movs	r3, #77	; 0x4d
 80a4452:	fa23 f000 	lsr.w	r0, r3, r0
 80a4456:	07c3      	lsls	r3, r0, #31
 80a4458:	d409      	bmi.n	80a446e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a445a:	4620      	mov	r0, r4
 80a445c:	f7ff ffba 	bl	80a43d4 <pinAvailable>
 80a4460:	b128      	cbz	r0, 80a446e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a4462:	4629      	mov	r1, r5
 80a4464:	4620      	mov	r0, r4
}
 80a4466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a446a:	f7fe b8e1 	b.w	80a2630 <HAL_GPIO_Write>
 80a446e:	bd38      	pop	{r3, r4, r5, pc}

080a4470 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4470:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a4472:	4c0c      	ldr	r4, [pc, #48]	; (80a44a4 <_GLOBAL__sub_I_SPI+0x34>)
 80a4474:	4e0c      	ldr	r6, [pc, #48]	; (80a44a8 <_GLOBAL__sub_I_SPI+0x38>)
 80a4476:	4d0d      	ldr	r5, [pc, #52]	; (80a44ac <_GLOBAL__sub_I_SPI+0x3c>)
 80a4478:	2100      	movs	r1, #0
 80a447a:	4620      	mov	r0, r4
 80a447c:	f7fe fb6e 	bl	80a2b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4480:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a4482:	4c0b      	ldr	r4, [pc, #44]	; (80a44b0 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a4484:	4632      	mov	r2, r6
 80a4486:	4629      	mov	r1, r5
 80a4488:	f000 f890 	bl	80a45ac <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a448c:	2101      	movs	r1, #1
 80a448e:	4620      	mov	r0, r4
 80a4490:	f7fe fb64 	bl	80a2b5c <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a4494:	4632      	mov	r2, r6
 80a4496:	4629      	mov	r1, r5
 80a4498:	4620      	mov	r0, r4
 80a449a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a449e:	f000 b885 	b.w	80a45ac <__aeabi_atexit>
 80a44a2:	bf00      	nop
 80a44a4:	20000718 	.word	0x20000718
 80a44a8:	200000a4 	.word	0x200000a4
 80a44ac:	080a2b4d 	.word	0x080a2b4d
 80a44b0:	20000728 	.word	0x20000728

080a44b4 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a44b4:	b530      	push	{r4, r5, lr}
 80a44b6:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a44b8:	4d1b      	ldr	r5, [pc, #108]	; (80a4528 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a44ba:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 80a44bc:	6820      	ldr	r0, [r4, #0]
 80a44be:	f7fe f8ef 	bl	80a26a0 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a44c2:	f7fe f8fd 	bl	80a26c0 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a44c6:	682b      	ldr	r3, [r5, #0]
 80a44c8:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 80a44ca:	1ac0      	subs	r0, r0, r3
 80a44cc:	4290      	cmp	r0, r2
 80a44ce:	d3f5      	bcc.n	80a44bc <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 80a44d0:	6823      	ldr	r3, [r4, #0]
 80a44d2:	b333      	cbz	r3, 80a4522 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 80a44d4:	68e3      	ldr	r3, [r4, #12]
 80a44d6:	b323      	cbz	r3, 80a4522 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a44d8:	1d25      	adds	r5, r4, #4
 80a44da:	6923      	ldr	r3, [r4, #16]
 80a44dc:	4628      	mov	r0, r5
 80a44de:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a44e0:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a44e2:	a904      	add	r1, sp, #16
 80a44e4:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a44e6:	9302      	str	r3, [sp, #8]
 80a44e8:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a44ea:	f7ff f8b8 	bl	80a365e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a44ee:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a44f0:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80a44f2:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a44f4:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a44f6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a44f8:	9a07      	ldr	r2, [sp, #28]
 80a44fa:	4629      	mov	r1, r5
 80a44fc:	a804      	add	r0, sp, #16
 80a44fe:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4500:	9307      	str	r3, [sp, #28]
 80a4502:	f7ff f8ac 	bl	80a365e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4506:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a4508:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a450a:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a450c:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a450e:	9206      	str	r2, [sp, #24]
 80a4510:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4512:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80a4514:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4516:	9207      	str	r2, [sp, #28]
 80a4518:	f7fb fe07 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a451c:	4668      	mov	r0, sp
 80a451e:	f7fb fe04 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80a4522:	b009      	add	sp, #36	; 0x24
 80a4524:	bd30      	pop	{r4, r5, pc}
 80a4526:	bf00      	nop
 80a4528:	20000738 	.word	0x20000738

080a452c <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80a452c:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80a452e:	f7ff ffc1 	bl	80a44b4 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80a4532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80a4536:	2000      	movs	r0, #0
 80a4538:	f7fe b8ea 	b.w	80a2710 <os_thread_cleanup>

080a453c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a453c:	b513      	push	{r0, r1, r4, lr}
 80a453e:	4c08      	ldr	r4, [pc, #32]	; (80a4560 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4540:	2300      	movs	r3, #0
 80a4542:	461a      	mov	r2, r3
 80a4544:	4619      	mov	r1, r3
 80a4546:	9300      	str	r3, [sp, #0]
 80a4548:	4620      	mov	r0, r4
 80a454a:	f7ff fc8b 	bl	80a3e64 <_ZN9IPAddressC1Ehhhh>
 80a454e:	4620      	mov	r0, r4
 80a4550:	4a04      	ldr	r2, [pc, #16]	; (80a4564 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a4552:	4905      	ldr	r1, [pc, #20]	; (80a4568 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a4554:	b002      	add	sp, #8
 80a4556:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a455a:	f000 b827 	b.w	80a45ac <__aeabi_atexit>
 80a455e:	bf00      	nop
 80a4560:	2000073c 	.word	0x2000073c
 80a4564:	200000a4 	.word	0x200000a4
 80a4568:	080a3db5 	.word	0x080a3db5

080a456c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a456c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a456e:	4d0b      	ldr	r5, [pc, #44]	; (80a459c <_Z19__fetch_global_Wirev+0x30>)
 80a4570:	6829      	ldr	r1, [r5, #0]
 80a4572:	f011 0401 	ands.w	r4, r1, #1
 80a4576:	d10f      	bne.n	80a4598 <_Z19__fetch_global_Wirev+0x2c>
 80a4578:	4628      	mov	r0, r5
 80a457a:	f7fb fd98 	bl	80a00ae <__cxa_guard_acquire>
 80a457e:	b158      	cbz	r0, 80a4598 <_Z19__fetch_global_Wirev+0x2c>
 80a4580:	4621      	mov	r1, r4
 80a4582:	4807      	ldr	r0, [pc, #28]	; (80a45a0 <_Z19__fetch_global_Wirev+0x34>)
 80a4584:	f7ff fe24 	bl	80a41d0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a4588:	4628      	mov	r0, r5
 80a458a:	f7fb fd95 	bl	80a00b8 <__cxa_guard_release>
 80a458e:	4a05      	ldr	r2, [pc, #20]	; (80a45a4 <_Z19__fetch_global_Wirev+0x38>)
 80a4590:	4905      	ldr	r1, [pc, #20]	; (80a45a8 <_Z19__fetch_global_Wirev+0x3c>)
 80a4592:	4803      	ldr	r0, [pc, #12]	; (80a45a0 <_Z19__fetch_global_Wirev+0x34>)
 80a4594:	f000 f80a 	bl	80a45ac <__aeabi_atexit>
	return wire;
}
 80a4598:	4801      	ldr	r0, [pc, #4]	; (80a45a0 <_Z19__fetch_global_Wirev+0x34>)
 80a459a:	bd38      	pop	{r3, r4, r5, pc}
 80a459c:	20000754 	.word	0x20000754
 80a45a0:	20000758 	.word	0x20000758
 80a45a4:	200000a4 	.word	0x200000a4
 80a45a8:	080a4179 	.word	0x080a4179

080a45ac <__aeabi_atexit>:
 80a45ac:	460b      	mov	r3, r1
 80a45ae:	4601      	mov	r1, r0
 80a45b0:	4618      	mov	r0, r3
 80a45b2:	f001 bc57 	b.w	80a5e64 <__cxa_atexit>
	...

080a45b8 <_ZSt15get_new_handlerv>:
 80a45b8:	4b02      	ldr	r3, [pc, #8]	; (80a45c4 <_ZSt15get_new_handlerv+0xc>)
 80a45ba:	6818      	ldr	r0, [r3, #0]
 80a45bc:	f3bf 8f5f 	dmb	sy
 80a45c0:	4770      	bx	lr
 80a45c2:	bf00      	nop
 80a45c4:	2000076c 	.word	0x2000076c

080a45c8 <_ZdlPvj>:
 80a45c8:	f7fb bd6d 	b.w	80a00a6 <_ZdlPv>

080a45cc <_ZnwjRKSt9nothrow_t>:
 80a45cc:	b510      	push	{r4, lr}
 80a45ce:	2800      	cmp	r0, #0
 80a45d0:	bf14      	ite	ne
 80a45d2:	4604      	movne	r4, r0
 80a45d4:	2401      	moveq	r4, #1
 80a45d6:	4620      	mov	r0, r4
 80a45d8:	f7fe fa78 	bl	80a2acc <malloc>
 80a45dc:	b920      	cbnz	r0, 80a45e8 <_ZnwjRKSt9nothrow_t+0x1c>
 80a45de:	f7ff ffeb 	bl	80a45b8 <_ZSt15get_new_handlerv>
 80a45e2:	b108      	cbz	r0, 80a45e8 <_ZnwjRKSt9nothrow_t+0x1c>
 80a45e4:	4780      	blx	r0
 80a45e6:	e7f6      	b.n	80a45d6 <_ZnwjRKSt9nothrow_t+0xa>
 80a45e8:	bd10      	pop	{r4, pc}

080a45ea <_ZSt25__throw_bad_function_callv>:
 80a45ea:	b508      	push	{r3, lr}
 80a45ec:	f7fe fa96 	bl	80a2b1c <abort>

080a45f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a45f0:	4b18      	ldr	r3, [pc, #96]	; (80a4654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a45f2:	681a      	ldr	r2, [r3, #0]
 80a45f4:	07d1      	lsls	r1, r2, #31
 80a45f6:	bf5c      	itt	pl
 80a45f8:	2201      	movpl	r2, #1
 80a45fa:	601a      	strpl	r2, [r3, #0]
 80a45fc:	4b16      	ldr	r3, [pc, #88]	; (80a4658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a45fe:	681a      	ldr	r2, [r3, #0]
 80a4600:	07d2      	lsls	r2, r2, #31
 80a4602:	bf5c      	itt	pl
 80a4604:	2201      	movpl	r2, #1
 80a4606:	601a      	strpl	r2, [r3, #0]
 80a4608:	4b14      	ldr	r3, [pc, #80]	; (80a465c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a460a:	681a      	ldr	r2, [r3, #0]
 80a460c:	07d0      	lsls	r0, r2, #31
 80a460e:	bf5c      	itt	pl
 80a4610:	2201      	movpl	r2, #1
 80a4612:	601a      	strpl	r2, [r3, #0]
 80a4614:	4b12      	ldr	r3, [pc, #72]	; (80a4660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4616:	681a      	ldr	r2, [r3, #0]
 80a4618:	07d1      	lsls	r1, r2, #31
 80a461a:	bf5c      	itt	pl
 80a461c:	2201      	movpl	r2, #1
 80a461e:	601a      	strpl	r2, [r3, #0]
 80a4620:	4b10      	ldr	r3, [pc, #64]	; (80a4664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4622:	681a      	ldr	r2, [r3, #0]
 80a4624:	07d2      	lsls	r2, r2, #31
 80a4626:	bf5c      	itt	pl
 80a4628:	2201      	movpl	r2, #1
 80a462a:	601a      	strpl	r2, [r3, #0]
 80a462c:	4b0e      	ldr	r3, [pc, #56]	; (80a4668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a462e:	681a      	ldr	r2, [r3, #0]
 80a4630:	07d0      	lsls	r0, r2, #31
 80a4632:	bf5c      	itt	pl
 80a4634:	2201      	movpl	r2, #1
 80a4636:	601a      	strpl	r2, [r3, #0]
 80a4638:	4b0c      	ldr	r3, [pc, #48]	; (80a466c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a463a:	681a      	ldr	r2, [r3, #0]
 80a463c:	07d1      	lsls	r1, r2, #31
 80a463e:	bf5c      	itt	pl
 80a4640:	2201      	movpl	r2, #1
 80a4642:	601a      	strpl	r2, [r3, #0]
 80a4644:	4b0a      	ldr	r3, [pc, #40]	; (80a4670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4646:	681a      	ldr	r2, [r3, #0]
 80a4648:	07d2      	lsls	r2, r2, #31
 80a464a:	bf5c      	itt	pl
 80a464c:	2201      	movpl	r2, #1
 80a464e:	601a      	strpl	r2, [r3, #0]
 80a4650:	4770      	bx	lr
 80a4652:	bf00      	nop
 80a4654:	2000078c 	.word	0x2000078c
 80a4658:	20000788 	.word	0x20000788
 80a465c:	20000784 	.word	0x20000784
 80a4660:	20000780 	.word	0x20000780
 80a4664:	2000077c 	.word	0x2000077c
 80a4668:	20000778 	.word	0x20000778
 80a466c:	20000774 	.word	0x20000774
 80a4670:	20000770 	.word	0x20000770

080a4674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a4674:	4b24      	ldr	r3, [pc, #144]	; (80a4708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a4676:	681a      	ldr	r2, [r3, #0]
 80a4678:	07d0      	lsls	r0, r2, #31
 80a467a:	bf5c      	itt	pl
 80a467c:	2201      	movpl	r2, #1
 80a467e:	601a      	strpl	r2, [r3, #0]
 80a4680:	4b22      	ldr	r3, [pc, #136]	; (80a470c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a4682:	681a      	ldr	r2, [r3, #0]
 80a4684:	07d1      	lsls	r1, r2, #31
 80a4686:	bf5c      	itt	pl
 80a4688:	2201      	movpl	r2, #1
 80a468a:	601a      	strpl	r2, [r3, #0]
 80a468c:	4b20      	ldr	r3, [pc, #128]	; (80a4710 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a468e:	681a      	ldr	r2, [r3, #0]
 80a4690:	07d2      	lsls	r2, r2, #31
 80a4692:	bf5c      	itt	pl
 80a4694:	2201      	movpl	r2, #1
 80a4696:	601a      	strpl	r2, [r3, #0]
 80a4698:	4b1e      	ldr	r3, [pc, #120]	; (80a4714 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a469a:	681a      	ldr	r2, [r3, #0]
 80a469c:	07d0      	lsls	r0, r2, #31
 80a469e:	bf5c      	itt	pl
 80a46a0:	2201      	movpl	r2, #1
 80a46a2:	601a      	strpl	r2, [r3, #0]
 80a46a4:	4b1c      	ldr	r3, [pc, #112]	; (80a4718 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a46a6:	681a      	ldr	r2, [r3, #0]
 80a46a8:	07d1      	lsls	r1, r2, #31
 80a46aa:	bf5c      	itt	pl
 80a46ac:	2201      	movpl	r2, #1
 80a46ae:	601a      	strpl	r2, [r3, #0]
 80a46b0:	4b1a      	ldr	r3, [pc, #104]	; (80a471c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a46b2:	681a      	ldr	r2, [r3, #0]
 80a46b4:	07d2      	lsls	r2, r2, #31
 80a46b6:	bf5c      	itt	pl
 80a46b8:	2201      	movpl	r2, #1
 80a46ba:	601a      	strpl	r2, [r3, #0]
 80a46bc:	4b18      	ldr	r3, [pc, #96]	; (80a4720 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a46be:	681a      	ldr	r2, [r3, #0]
 80a46c0:	07d0      	lsls	r0, r2, #31
 80a46c2:	bf5c      	itt	pl
 80a46c4:	2201      	movpl	r2, #1
 80a46c6:	601a      	strpl	r2, [r3, #0]
 80a46c8:	4b16      	ldr	r3, [pc, #88]	; (80a4724 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a46ca:	681a      	ldr	r2, [r3, #0]
 80a46cc:	07d1      	lsls	r1, r2, #31
 80a46ce:	bf5c      	itt	pl
 80a46d0:	2201      	movpl	r2, #1
 80a46d2:	601a      	strpl	r2, [r3, #0]
 80a46d4:	4b14      	ldr	r3, [pc, #80]	; (80a4728 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a46d6:	681a      	ldr	r2, [r3, #0]
 80a46d8:	07d2      	lsls	r2, r2, #31
 80a46da:	bf5c      	itt	pl
 80a46dc:	2201      	movpl	r2, #1
 80a46de:	601a      	strpl	r2, [r3, #0]
 80a46e0:	4b12      	ldr	r3, [pc, #72]	; (80a472c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a46e2:	681a      	ldr	r2, [r3, #0]
 80a46e4:	07d0      	lsls	r0, r2, #31
 80a46e6:	bf5c      	itt	pl
 80a46e8:	2201      	movpl	r2, #1
 80a46ea:	601a      	strpl	r2, [r3, #0]
 80a46ec:	4b10      	ldr	r3, [pc, #64]	; (80a4730 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a46ee:	681a      	ldr	r2, [r3, #0]
 80a46f0:	07d1      	lsls	r1, r2, #31
 80a46f2:	bf5c      	itt	pl
 80a46f4:	2201      	movpl	r2, #1
 80a46f6:	601a      	strpl	r2, [r3, #0]
 80a46f8:	4b0e      	ldr	r3, [pc, #56]	; (80a4734 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a46fa:	681a      	ldr	r2, [r3, #0]
 80a46fc:	07d2      	lsls	r2, r2, #31
 80a46fe:	bf5c      	itt	pl
 80a4700:	2201      	movpl	r2, #1
 80a4702:	601a      	strpl	r2, [r3, #0]
 80a4704:	4770      	bx	lr
 80a4706:	bf00      	nop
 80a4708:	200007bc 	.word	0x200007bc
 80a470c:	200007b8 	.word	0x200007b8
 80a4710:	200007b4 	.word	0x200007b4
 80a4714:	200007b0 	.word	0x200007b0
 80a4718:	200007ac 	.word	0x200007ac
 80a471c:	200007a8 	.word	0x200007a8
 80a4720:	200007a4 	.word	0x200007a4
 80a4724:	200007a0 	.word	0x200007a0
 80a4728:	2000079c 	.word	0x2000079c
 80a472c:	20000798 	.word	0x20000798
 80a4730:	20000794 	.word	0x20000794
 80a4734:	20000790 	.word	0x20000790

080a4738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4738:	4b24      	ldr	r3, [pc, #144]	; (80a47cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a473a:	681a      	ldr	r2, [r3, #0]
 80a473c:	07d0      	lsls	r0, r2, #31
 80a473e:	bf5c      	itt	pl
 80a4740:	2201      	movpl	r2, #1
 80a4742:	601a      	strpl	r2, [r3, #0]
 80a4744:	4b22      	ldr	r3, [pc, #136]	; (80a47d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a4746:	681a      	ldr	r2, [r3, #0]
 80a4748:	07d1      	lsls	r1, r2, #31
 80a474a:	bf5c      	itt	pl
 80a474c:	2201      	movpl	r2, #1
 80a474e:	601a      	strpl	r2, [r3, #0]
 80a4750:	4b20      	ldr	r3, [pc, #128]	; (80a47d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a4752:	681a      	ldr	r2, [r3, #0]
 80a4754:	07d2      	lsls	r2, r2, #31
 80a4756:	bf5c      	itt	pl
 80a4758:	2201      	movpl	r2, #1
 80a475a:	601a      	strpl	r2, [r3, #0]
 80a475c:	4b1e      	ldr	r3, [pc, #120]	; (80a47d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a475e:	681a      	ldr	r2, [r3, #0]
 80a4760:	07d0      	lsls	r0, r2, #31
 80a4762:	bf5c      	itt	pl
 80a4764:	2201      	movpl	r2, #1
 80a4766:	601a      	strpl	r2, [r3, #0]
 80a4768:	4b1c      	ldr	r3, [pc, #112]	; (80a47dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a476a:	681a      	ldr	r2, [r3, #0]
 80a476c:	07d1      	lsls	r1, r2, #31
 80a476e:	bf5c      	itt	pl
 80a4770:	2201      	movpl	r2, #1
 80a4772:	601a      	strpl	r2, [r3, #0]
 80a4774:	4b1a      	ldr	r3, [pc, #104]	; (80a47e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a4776:	681a      	ldr	r2, [r3, #0]
 80a4778:	07d2      	lsls	r2, r2, #31
 80a477a:	bf5c      	itt	pl
 80a477c:	2201      	movpl	r2, #1
 80a477e:	601a      	strpl	r2, [r3, #0]
 80a4780:	4b18      	ldr	r3, [pc, #96]	; (80a47e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a4782:	681a      	ldr	r2, [r3, #0]
 80a4784:	07d0      	lsls	r0, r2, #31
 80a4786:	bf5c      	itt	pl
 80a4788:	2201      	movpl	r2, #1
 80a478a:	601a      	strpl	r2, [r3, #0]
 80a478c:	4b16      	ldr	r3, [pc, #88]	; (80a47e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a478e:	681a      	ldr	r2, [r3, #0]
 80a4790:	07d1      	lsls	r1, r2, #31
 80a4792:	bf5c      	itt	pl
 80a4794:	2201      	movpl	r2, #1
 80a4796:	601a      	strpl	r2, [r3, #0]
 80a4798:	4b14      	ldr	r3, [pc, #80]	; (80a47ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a479a:	681a      	ldr	r2, [r3, #0]
 80a479c:	07d2      	lsls	r2, r2, #31
 80a479e:	bf5c      	itt	pl
 80a47a0:	2201      	movpl	r2, #1
 80a47a2:	601a      	strpl	r2, [r3, #0]
 80a47a4:	4b12      	ldr	r3, [pc, #72]	; (80a47f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a47a6:	681a      	ldr	r2, [r3, #0]
 80a47a8:	07d0      	lsls	r0, r2, #31
 80a47aa:	bf5c      	itt	pl
 80a47ac:	2201      	movpl	r2, #1
 80a47ae:	601a      	strpl	r2, [r3, #0]
 80a47b0:	4b10      	ldr	r3, [pc, #64]	; (80a47f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a47b2:	681a      	ldr	r2, [r3, #0]
 80a47b4:	07d1      	lsls	r1, r2, #31
 80a47b6:	bf5c      	itt	pl
 80a47b8:	2201      	movpl	r2, #1
 80a47ba:	601a      	strpl	r2, [r3, #0]
 80a47bc:	4b0e      	ldr	r3, [pc, #56]	; (80a47f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a47be:	681a      	ldr	r2, [r3, #0]
 80a47c0:	07d2      	lsls	r2, r2, #31
 80a47c2:	bf5c      	itt	pl
 80a47c4:	2201      	movpl	r2, #1
 80a47c6:	601a      	strpl	r2, [r3, #0]
 80a47c8:	4770      	bx	lr
 80a47ca:	bf00      	nop
 80a47cc:	200007ec 	.word	0x200007ec
 80a47d0:	200007e8 	.word	0x200007e8
 80a47d4:	200007e4 	.word	0x200007e4
 80a47d8:	200007e0 	.word	0x200007e0
 80a47dc:	200007dc 	.word	0x200007dc
 80a47e0:	200007d8 	.word	0x200007d8
 80a47e4:	200007d4 	.word	0x200007d4
 80a47e8:	200007d0 	.word	0x200007d0
 80a47ec:	200007cc 	.word	0x200007cc
 80a47f0:	200007c8 	.word	0x200007c8
 80a47f4:	200007c4 	.word	0x200007c4
 80a47f8:	200007c0 	.word	0x200007c0

080a47fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a47fc:	4b18      	ldr	r3, [pc, #96]	; (80a4860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a47fe:	681a      	ldr	r2, [r3, #0]
 80a4800:	07d1      	lsls	r1, r2, #31
 80a4802:	bf5c      	itt	pl
 80a4804:	2201      	movpl	r2, #1
 80a4806:	601a      	strpl	r2, [r3, #0]
 80a4808:	4b16      	ldr	r3, [pc, #88]	; (80a4864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a480a:	681a      	ldr	r2, [r3, #0]
 80a480c:	07d2      	lsls	r2, r2, #31
 80a480e:	bf5c      	itt	pl
 80a4810:	2201      	movpl	r2, #1
 80a4812:	601a      	strpl	r2, [r3, #0]
 80a4814:	4b14      	ldr	r3, [pc, #80]	; (80a4868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4816:	681a      	ldr	r2, [r3, #0]
 80a4818:	07d0      	lsls	r0, r2, #31
 80a481a:	bf5c      	itt	pl
 80a481c:	2201      	movpl	r2, #1
 80a481e:	601a      	strpl	r2, [r3, #0]
 80a4820:	4b12      	ldr	r3, [pc, #72]	; (80a486c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4822:	681a      	ldr	r2, [r3, #0]
 80a4824:	07d1      	lsls	r1, r2, #31
 80a4826:	bf5c      	itt	pl
 80a4828:	2201      	movpl	r2, #1
 80a482a:	601a      	strpl	r2, [r3, #0]
 80a482c:	4b10      	ldr	r3, [pc, #64]	; (80a4870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a482e:	681a      	ldr	r2, [r3, #0]
 80a4830:	07d2      	lsls	r2, r2, #31
 80a4832:	bf5c      	itt	pl
 80a4834:	2201      	movpl	r2, #1
 80a4836:	601a      	strpl	r2, [r3, #0]
 80a4838:	4b0e      	ldr	r3, [pc, #56]	; (80a4874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a483a:	681a      	ldr	r2, [r3, #0]
 80a483c:	07d0      	lsls	r0, r2, #31
 80a483e:	bf5c      	itt	pl
 80a4840:	2201      	movpl	r2, #1
 80a4842:	601a      	strpl	r2, [r3, #0]
 80a4844:	4b0c      	ldr	r3, [pc, #48]	; (80a4878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4846:	681a      	ldr	r2, [r3, #0]
 80a4848:	07d1      	lsls	r1, r2, #31
 80a484a:	bf5c      	itt	pl
 80a484c:	2201      	movpl	r2, #1
 80a484e:	601a      	strpl	r2, [r3, #0]
 80a4850:	4b0a      	ldr	r3, [pc, #40]	; (80a487c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4852:	681a      	ldr	r2, [r3, #0]
 80a4854:	07d2      	lsls	r2, r2, #31
 80a4856:	bf5c      	itt	pl
 80a4858:	2201      	movpl	r2, #1
 80a485a:	601a      	strpl	r2, [r3, #0]
 80a485c:	4770      	bx	lr
 80a485e:	bf00      	nop
 80a4860:	2000080c 	.word	0x2000080c
 80a4864:	20000808 	.word	0x20000808
 80a4868:	20000804 	.word	0x20000804
 80a486c:	20000800 	.word	0x20000800
 80a4870:	200007fc 	.word	0x200007fc
 80a4874:	200007f8 	.word	0x200007f8
 80a4878:	200007f4 	.word	0x200007f4
 80a487c:	200007f0 	.word	0x200007f0

080a4880 <floor>:
 80a4880:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a4884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4888:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a488c:	2e13      	cmp	r6, #19
 80a488e:	460b      	mov	r3, r1
 80a4890:	4604      	mov	r4, r0
 80a4892:	460d      	mov	r5, r1
 80a4894:	4688      	mov	r8, r1
 80a4896:	4607      	mov	r7, r0
 80a4898:	dc1c      	bgt.n	80a48d4 <floor+0x54>
 80a489a:	2e00      	cmp	r6, #0
 80a489c:	db3f      	blt.n	80a491e <floor+0x9e>
 80a489e:	4a3a      	ldr	r2, [pc, #232]	; (80a4988 <floor+0x108>)
 80a48a0:	4686      	mov	lr, r0
 80a48a2:	fa42 f906 	asr.w	r9, r2, r6
 80a48a6:	ea01 0209 	and.w	r2, r1, r9
 80a48aa:	4302      	orrs	r2, r0
 80a48ac:	d017      	beq.n	80a48de <floor+0x5e>
 80a48ae:	a334      	add	r3, pc, #208	; (adr r3, 80a4980 <floor+0x100>)
 80a48b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a48b4:	f000 faee 	bl	80a4e94 <__adddf3>
 80a48b8:	2200      	movs	r2, #0
 80a48ba:	2300      	movs	r3, #0
 80a48bc:	f000 ff2c 	bl	80a5718 <__aeabi_dcmpgt>
 80a48c0:	b120      	cbz	r0, 80a48cc <floor+0x4c>
 80a48c2:	2d00      	cmp	r5, #0
 80a48c4:	db40      	blt.n	80a4948 <floor+0xc8>
 80a48c6:	ea28 0509 	bic.w	r5, r8, r9
 80a48ca:	2700      	movs	r7, #0
 80a48cc:	4638      	mov	r0, r7
 80a48ce:	4629      	mov	r1, r5
 80a48d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a48d4:	2e33      	cmp	r6, #51	; 0x33
 80a48d6:	dd06      	ble.n	80a48e6 <floor+0x66>
 80a48d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a48dc:	d02f      	beq.n	80a493e <floor+0xbe>
 80a48de:	4620      	mov	r0, r4
 80a48e0:	4619      	mov	r1, r3
 80a48e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a48e6:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a48ea:	f04f 39ff 	mov.w	r9, #4294967295
 80a48ee:	fa29 f902 	lsr.w	r9, r9, r2
 80a48f2:	ea10 0f09 	tst.w	r0, r9
 80a48f6:	d0f2      	beq.n	80a48de <floor+0x5e>
 80a48f8:	a321      	add	r3, pc, #132	; (adr r3, 80a4980 <floor+0x100>)
 80a48fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a48fe:	f000 fac9 	bl	80a4e94 <__adddf3>
 80a4902:	2200      	movs	r2, #0
 80a4904:	2300      	movs	r3, #0
 80a4906:	f000 ff07 	bl	80a5718 <__aeabi_dcmpgt>
 80a490a:	2800      	cmp	r0, #0
 80a490c:	d0de      	beq.n	80a48cc <floor+0x4c>
 80a490e:	2d00      	cmp	r5, #0
 80a4910:	db20      	blt.n	80a4954 <floor+0xd4>
 80a4912:	4645      	mov	r5, r8
 80a4914:	ea27 0709 	bic.w	r7, r7, r9
 80a4918:	4638      	mov	r0, r7
 80a491a:	4629      	mov	r1, r5
 80a491c:	e7d8      	b.n	80a48d0 <floor+0x50>
 80a491e:	a318      	add	r3, pc, #96	; (adr r3, 80a4980 <floor+0x100>)
 80a4920:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4924:	f000 fab6 	bl	80a4e94 <__adddf3>
 80a4928:	2200      	movs	r2, #0
 80a492a:	2300      	movs	r3, #0
 80a492c:	f000 fef4 	bl	80a5718 <__aeabi_dcmpgt>
 80a4930:	2800      	cmp	r0, #0
 80a4932:	d0cb      	beq.n	80a48cc <floor+0x4c>
 80a4934:	2d00      	cmp	r5, #0
 80a4936:	db18      	blt.n	80a496a <floor+0xea>
 80a4938:	2700      	movs	r7, #0
 80a493a:	463d      	mov	r5, r7
 80a493c:	e7c6      	b.n	80a48cc <floor+0x4c>
 80a493e:	4602      	mov	r2, r0
 80a4940:	460b      	mov	r3, r1
 80a4942:	f000 faa7 	bl	80a4e94 <__adddf3>
 80a4946:	e7cc      	b.n	80a48e2 <floor+0x62>
 80a4948:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a494c:	fa43 f606 	asr.w	r6, r3, r6
 80a4950:	44b0      	add	r8, r6
 80a4952:	e7b8      	b.n	80a48c6 <floor+0x46>
 80a4954:	2e14      	cmp	r6, #20
 80a4956:	d010      	beq.n	80a497a <floor+0xfa>
 80a4958:	2301      	movs	r3, #1
 80a495a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a495e:	fa03 f606 	lsl.w	r6, r3, r6
 80a4962:	1937      	adds	r7, r6, r4
 80a4964:	bf28      	it	cs
 80a4966:	4498      	addcs	r8, r3
 80a4968:	e7d3      	b.n	80a4912 <floor+0x92>
 80a496a:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a496e:	4b07      	ldr	r3, [pc, #28]	; (80a498c <floor+0x10c>)
 80a4970:	4322      	orrs	r2, r4
 80a4972:	bf18      	it	ne
 80a4974:	461d      	movne	r5, r3
 80a4976:	2700      	movs	r7, #0
 80a4978:	e7a8      	b.n	80a48cc <floor+0x4c>
 80a497a:	f105 0801 	add.w	r8, r5, #1
 80a497e:	e7c8      	b.n	80a4912 <floor+0x92>
 80a4980:	8800759c 	.word	0x8800759c
 80a4984:	7e37e43c 	.word	0x7e37e43c
 80a4988:	000fffff 	.word	0x000fffff
 80a498c:	bff00000 	.word	0xbff00000

080a4990 <log>:
 80a4990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4994:	b08a      	sub	sp, #40	; 0x28
 80a4996:	4604      	mov	r4, r0
 80a4998:	460d      	mov	r5, r1
 80a499a:	f000 f879 	bl	80a4a90 <__ieee754_log>
 80a499e:	4b37      	ldr	r3, [pc, #220]	; (80a4a7c <log+0xec>)
 80a49a0:	4606      	mov	r6, r0
 80a49a2:	f993 8000 	ldrsb.w	r8, [r3]
 80a49a6:	460f      	mov	r7, r1
 80a49a8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a49ac:	d00d      	beq.n	80a49ca <log+0x3a>
 80a49ae:	4622      	mov	r2, r4
 80a49b0:	462b      	mov	r3, r5
 80a49b2:	4620      	mov	r0, r4
 80a49b4:	4629      	mov	r1, r5
 80a49b6:	f000 feb9 	bl	80a572c <__aeabi_dcmpun>
 80a49ba:	b930      	cbnz	r0, 80a49ca <log+0x3a>
 80a49bc:	2200      	movs	r2, #0
 80a49be:	2300      	movs	r3, #0
 80a49c0:	4620      	mov	r0, r4
 80a49c2:	4629      	mov	r1, r5
 80a49c4:	f000 fea8 	bl	80a5718 <__aeabi_dcmpgt>
 80a49c8:	b120      	cbz	r0, 80a49d4 <log+0x44>
 80a49ca:	4630      	mov	r0, r6
 80a49cc:	4639      	mov	r1, r7
 80a49ce:	b00a      	add	sp, #40	; 0x28
 80a49d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a49d4:	4b2a      	ldr	r3, [pc, #168]	; (80a4a80 <log+0xf0>)
 80a49d6:	9008      	str	r0, [sp, #32]
 80a49d8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a49dc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a49e0:	9301      	str	r3, [sp, #4]
 80a49e2:	f1b8 0f00 	cmp.w	r8, #0
 80a49e6:	d119      	bne.n	80a4a1c <log+0x8c>
 80a49e8:	4f26      	ldr	r7, [pc, #152]	; (80a4a84 <log+0xf4>)
 80a49ea:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a49ee:	4620      	mov	r0, r4
 80a49f0:	4629      	mov	r1, r5
 80a49f2:	2200      	movs	r2, #0
 80a49f4:	2300      	movs	r3, #0
 80a49f6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a49fa:	f000 fe65 	bl	80a56c8 <__aeabi_dcmpeq>
 80a49fe:	2800      	cmp	r0, #0
 80a4a00:	d034      	beq.n	80a4a6c <log+0xdc>
 80a4a02:	2302      	movs	r3, #2
 80a4a04:	9300      	str	r3, [sp, #0]
 80a4a06:	4668      	mov	r0, sp
 80a4a08:	f000 fa36 	bl	80a4e78 <matherr>
 80a4a0c:	b1a8      	cbz	r0, 80a4a3a <log+0xaa>
 80a4a0e:	9b08      	ldr	r3, [sp, #32]
 80a4a10:	b9c3      	cbnz	r3, 80a4a44 <log+0xb4>
 80a4a12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a4a16:	b00a      	add	sp, #40	; 0x28
 80a4a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4a1c:	4f1a      	ldr	r7, [pc, #104]	; (80a4a88 <log+0xf8>)
 80a4a1e:	2600      	movs	r6, #0
 80a4a20:	4620      	mov	r0, r4
 80a4a22:	4629      	mov	r1, r5
 80a4a24:	2200      	movs	r2, #0
 80a4a26:	2300      	movs	r3, #0
 80a4a28:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a4a2c:	f000 fe4c 	bl	80a56c8 <__aeabi_dcmpeq>
 80a4a30:	b168      	cbz	r0, 80a4a4e <log+0xbe>
 80a4a32:	2302      	movs	r3, #2
 80a4a34:	4598      	cmp	r8, r3
 80a4a36:	9300      	str	r3, [sp, #0]
 80a4a38:	d1e5      	bne.n	80a4a06 <log+0x76>
 80a4a3a:	f7fe f87f 	bl	80a2b3c <__errno>
 80a4a3e:	2322      	movs	r3, #34	; 0x22
 80a4a40:	6003      	str	r3, [r0, #0]
 80a4a42:	e7e4      	b.n	80a4a0e <log+0x7e>
 80a4a44:	f7fe f87a 	bl	80a2b3c <__errno>
 80a4a48:	9b08      	ldr	r3, [sp, #32]
 80a4a4a:	6003      	str	r3, [r0, #0]
 80a4a4c:	e7e1      	b.n	80a4a12 <log+0x82>
 80a4a4e:	2301      	movs	r3, #1
 80a4a50:	f1b8 0f02 	cmp.w	r8, #2
 80a4a54:	9300      	str	r3, [sp, #0]
 80a4a56:	d10b      	bne.n	80a4a70 <log+0xe0>
 80a4a58:	f7fe f870 	bl	80a2b3c <__errno>
 80a4a5c:	2321      	movs	r3, #33	; 0x21
 80a4a5e:	6003      	str	r3, [r0, #0]
 80a4a60:	480a      	ldr	r0, [pc, #40]	; (80a4a8c <log+0xfc>)
 80a4a62:	f000 fa0b 	bl	80a4e7c <nan>
 80a4a66:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a4a6a:	e7d0      	b.n	80a4a0e <log+0x7e>
 80a4a6c:	2301      	movs	r3, #1
 80a4a6e:	9300      	str	r3, [sp, #0]
 80a4a70:	4668      	mov	r0, sp
 80a4a72:	f000 fa01 	bl	80a4e78 <matherr>
 80a4a76:	2800      	cmp	r0, #0
 80a4a78:	d1f2      	bne.n	80a4a60 <log+0xd0>
 80a4a7a:	e7ed      	b.n	80a4a58 <log+0xc8>
 80a4a7c:	20000038 	.word	0x20000038
 80a4a80:	080a65dc 	.word	0x080a65dc
 80a4a84:	c7efffff 	.word	0xc7efffff
 80a4a88:	fff00000 	.word	0xfff00000
 80a4a8c:	080a65e0 	.word	0x080a65e0

080a4a90 <__ieee754_log>:
 80a4a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4a94:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4a98:	b085      	sub	sp, #20
 80a4a9a:	4606      	mov	r6, r0
 80a4a9c:	460f      	mov	r7, r1
 80a4a9e:	460b      	mov	r3, r1
 80a4aa0:	da5a      	bge.n	80a4b58 <__ieee754_log+0xc8>
 80a4aa2:	4602      	mov	r2, r0
 80a4aa4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a4aa8:	4322      	orrs	r2, r4
 80a4aaa:	f000 80f7 	beq.w	80a4c9c <__ieee754_log+0x20c>
 80a4aae:	2900      	cmp	r1, #0
 80a4ab0:	f2c0 8179 	blt.w	80a4da6 <__ieee754_log+0x316>
 80a4ab4:	2200      	movs	r2, #0
 80a4ab6:	4bd6      	ldr	r3, [pc, #856]	; (80a4e10 <__ieee754_log+0x380>)
 80a4ab8:	f000 fb9e 	bl	80a51f8 <__aeabi_dmul>
 80a4abc:	460b      	mov	r3, r1
 80a4abe:	460f      	mov	r7, r1
 80a4ac0:	49d4      	ldr	r1, [pc, #848]	; (80a4e14 <__ieee754_log+0x384>)
 80a4ac2:	4606      	mov	r6, r0
 80a4ac4:	428b      	cmp	r3, r1
 80a4ac6:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a4aca:	dc49      	bgt.n	80a4b60 <__ieee754_log+0xd0>
 80a4acc:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a4ad0:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a4ad4:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a4ad8:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a4adc:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a4ae0:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a4ae4:	151b      	asrs	r3, r3, #20
 80a4ae6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a4aea:	ea41 0705 	orr.w	r7, r1, r5
 80a4aee:	189c      	adds	r4, r3, r2
 80a4af0:	4630      	mov	r0, r6
 80a4af2:	2200      	movs	r2, #0
 80a4af4:	4bc8      	ldr	r3, [pc, #800]	; (80a4e18 <__ieee754_log+0x388>)
 80a4af6:	4639      	mov	r1, r7
 80a4af8:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a4afc:	f000 f9c8 	bl	80a4e90 <__aeabi_dsub>
 80a4b00:	1cab      	adds	r3, r5, #2
 80a4b02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4b06:	2b02      	cmp	r3, #2
 80a4b08:	4682      	mov	sl, r0
 80a4b0a:	468b      	mov	fp, r1
 80a4b0c:	f04f 0200 	mov.w	r2, #0
 80a4b10:	dc2f      	bgt.n	80a4b72 <__ieee754_log+0xe2>
 80a4b12:	2300      	movs	r3, #0
 80a4b14:	f000 fdd8 	bl	80a56c8 <__aeabi_dcmpeq>
 80a4b18:	2800      	cmp	r0, #0
 80a4b1a:	f000 80c8 	beq.w	80a4cae <__ieee754_log+0x21e>
 80a4b1e:	2c00      	cmp	r4, #0
 80a4b20:	f000 814a 	beq.w	80a4db8 <__ieee754_log+0x328>
 80a4b24:	4620      	mov	r0, r4
 80a4b26:	f000 fb01 	bl	80a512c <__aeabi_i2d>
 80a4b2a:	a3a5      	add	r3, pc, #660	; (adr r3, 80a4dc0 <__ieee754_log+0x330>)
 80a4b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b30:	4606      	mov	r6, r0
 80a4b32:	460f      	mov	r7, r1
 80a4b34:	f000 fb60 	bl	80a51f8 <__aeabi_dmul>
 80a4b38:	a3a3      	add	r3, pc, #652	; (adr r3, 80a4dc8 <__ieee754_log+0x338>)
 80a4b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4b3e:	4604      	mov	r4, r0
 80a4b40:	460d      	mov	r5, r1
 80a4b42:	4630      	mov	r0, r6
 80a4b44:	4639      	mov	r1, r7
 80a4b46:	f000 fb57 	bl	80a51f8 <__aeabi_dmul>
 80a4b4a:	4602      	mov	r2, r0
 80a4b4c:	460b      	mov	r3, r1
 80a4b4e:	4620      	mov	r0, r4
 80a4b50:	4629      	mov	r1, r5
 80a4b52:	f000 f99f 	bl	80a4e94 <__adddf3>
 80a4b56:	e009      	b.n	80a4b6c <__ieee754_log+0xdc>
 80a4b58:	49ae      	ldr	r1, [pc, #696]	; (80a4e14 <__ieee754_log+0x384>)
 80a4b5a:	2200      	movs	r2, #0
 80a4b5c:	428b      	cmp	r3, r1
 80a4b5e:	ddb5      	ble.n	80a4acc <__ieee754_log+0x3c>
 80a4b60:	4632      	mov	r2, r6
 80a4b62:	463b      	mov	r3, r7
 80a4b64:	4630      	mov	r0, r6
 80a4b66:	4639      	mov	r1, r7
 80a4b68:	f000 f994 	bl	80a4e94 <__adddf3>
 80a4b6c:	b005      	add	sp, #20
 80a4b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4b72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4b76:	f000 f98d 	bl	80a4e94 <__adddf3>
 80a4b7a:	4602      	mov	r2, r0
 80a4b7c:	460b      	mov	r3, r1
 80a4b7e:	4650      	mov	r0, sl
 80a4b80:	4659      	mov	r1, fp
 80a4b82:	f000 fc63 	bl	80a544c <__aeabi_ddiv>
 80a4b86:	4606      	mov	r6, r0
 80a4b88:	4620      	mov	r0, r4
 80a4b8a:	460f      	mov	r7, r1
 80a4b8c:	f000 face 	bl	80a512c <__aeabi_i2d>
 80a4b90:	4632      	mov	r2, r6
 80a4b92:	e9cd 0100 	strd	r0, r1, [sp]
 80a4b96:	463b      	mov	r3, r7
 80a4b98:	4630      	mov	r0, r6
 80a4b9a:	4639      	mov	r1, r7
 80a4b9c:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a4ba0:	f000 fb2a 	bl	80a51f8 <__aeabi_dmul>
 80a4ba4:	4602      	mov	r2, r0
 80a4ba6:	460b      	mov	r3, r1
 80a4ba8:	4680      	mov	r8, r0
 80a4baa:	4689      	mov	r9, r1
 80a4bac:	f000 fb24 	bl	80a51f8 <__aeabi_dmul>
 80a4bb0:	a387      	add	r3, pc, #540	; (adr r3, 80a4dd0 <__ieee754_log+0x340>)
 80a4bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bb6:	4606      	mov	r6, r0
 80a4bb8:	460f      	mov	r7, r1
 80a4bba:	f000 fb1d 	bl	80a51f8 <__aeabi_dmul>
 80a4bbe:	a386      	add	r3, pc, #536	; (adr r3, 80a4dd8 <__ieee754_log+0x348>)
 80a4bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bc4:	f000 f966 	bl	80a4e94 <__adddf3>
 80a4bc8:	4632      	mov	r2, r6
 80a4bca:	463b      	mov	r3, r7
 80a4bcc:	f000 fb14 	bl	80a51f8 <__aeabi_dmul>
 80a4bd0:	a383      	add	r3, pc, #524	; (adr r3, 80a4de0 <__ieee754_log+0x350>)
 80a4bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bd6:	f000 f95d 	bl	80a4e94 <__adddf3>
 80a4bda:	4632      	mov	r2, r6
 80a4bdc:	463b      	mov	r3, r7
 80a4bde:	f000 fb0b 	bl	80a51f8 <__aeabi_dmul>
 80a4be2:	a381      	add	r3, pc, #516	; (adr r3, 80a4de8 <__ieee754_log+0x358>)
 80a4be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4be8:	f000 f954 	bl	80a4e94 <__adddf3>
 80a4bec:	4642      	mov	r2, r8
 80a4bee:	464b      	mov	r3, r9
 80a4bf0:	f000 fb02 	bl	80a51f8 <__aeabi_dmul>
 80a4bf4:	a37e      	add	r3, pc, #504	; (adr r3, 80a4df0 <__ieee754_log+0x360>)
 80a4bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4bfa:	4680      	mov	r8, r0
 80a4bfc:	4689      	mov	r9, r1
 80a4bfe:	4630      	mov	r0, r6
 80a4c00:	4639      	mov	r1, r7
 80a4c02:	f000 faf9 	bl	80a51f8 <__aeabi_dmul>
 80a4c06:	a37c      	add	r3, pc, #496	; (adr r3, 80a4df8 <__ieee754_log+0x368>)
 80a4c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c0c:	f000 f942 	bl	80a4e94 <__adddf3>
 80a4c10:	4632      	mov	r2, r6
 80a4c12:	463b      	mov	r3, r7
 80a4c14:	f000 faf0 	bl	80a51f8 <__aeabi_dmul>
 80a4c18:	a379      	add	r3, pc, #484	; (adr r3, 80a4e00 <__ieee754_log+0x370>)
 80a4c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c1e:	f000 f939 	bl	80a4e94 <__adddf3>
 80a4c22:	4632      	mov	r2, r6
 80a4c24:	463b      	mov	r3, r7
 80a4c26:	f000 fae7 	bl	80a51f8 <__aeabi_dmul>
 80a4c2a:	460b      	mov	r3, r1
 80a4c2c:	4602      	mov	r2, r0
 80a4c2e:	4649      	mov	r1, r9
 80a4c30:	4640      	mov	r0, r8
 80a4c32:	f000 f92f 	bl	80a4e94 <__adddf3>
 80a4c36:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a4c3a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a4c3e:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a4c42:	3551      	adds	r5, #81	; 0x51
 80a4c44:	431d      	orrs	r5, r3
 80a4c46:	2d00      	cmp	r5, #0
 80a4c48:	4680      	mov	r8, r0
 80a4c4a:	4689      	mov	r9, r1
 80a4c4c:	dd56      	ble.n	80a4cfc <__ieee754_log+0x26c>
 80a4c4e:	2200      	movs	r2, #0
 80a4c50:	4b72      	ldr	r3, [pc, #456]	; (80a4e1c <__ieee754_log+0x38c>)
 80a4c52:	4650      	mov	r0, sl
 80a4c54:	4659      	mov	r1, fp
 80a4c56:	f000 facf 	bl	80a51f8 <__aeabi_dmul>
 80a4c5a:	4652      	mov	r2, sl
 80a4c5c:	465b      	mov	r3, fp
 80a4c5e:	f000 facb 	bl	80a51f8 <__aeabi_dmul>
 80a4c62:	4606      	mov	r6, r0
 80a4c64:	460f      	mov	r7, r1
 80a4c66:	2c00      	cmp	r4, #0
 80a4c68:	d168      	bne.n	80a4d3c <__ieee754_log+0x2ac>
 80a4c6a:	4632      	mov	r2, r6
 80a4c6c:	463b      	mov	r3, r7
 80a4c6e:	4640      	mov	r0, r8
 80a4c70:	4649      	mov	r1, r9
 80a4c72:	f000 f90f 	bl	80a4e94 <__adddf3>
 80a4c76:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4c7a:	f000 fabd 	bl	80a51f8 <__aeabi_dmul>
 80a4c7e:	4602      	mov	r2, r0
 80a4c80:	460b      	mov	r3, r1
 80a4c82:	4630      	mov	r0, r6
 80a4c84:	4639      	mov	r1, r7
 80a4c86:	f000 f903 	bl	80a4e90 <__aeabi_dsub>
 80a4c8a:	4602      	mov	r2, r0
 80a4c8c:	460b      	mov	r3, r1
 80a4c8e:	4650      	mov	r0, sl
 80a4c90:	4659      	mov	r1, fp
 80a4c92:	f000 f8fd 	bl	80a4e90 <__aeabi_dsub>
 80a4c96:	b005      	add	sp, #20
 80a4c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4c9c:	2200      	movs	r2, #0
 80a4c9e:	2300      	movs	r3, #0
 80a4ca0:	2000      	movs	r0, #0
 80a4ca2:	495f      	ldr	r1, [pc, #380]	; (80a4e20 <__ieee754_log+0x390>)
 80a4ca4:	f000 fbd2 	bl	80a544c <__aeabi_ddiv>
 80a4ca8:	b005      	add	sp, #20
 80a4caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4cae:	a356      	add	r3, pc, #344	; (adr r3, 80a4e08 <__ieee754_log+0x378>)
 80a4cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4cb4:	4650      	mov	r0, sl
 80a4cb6:	4659      	mov	r1, fp
 80a4cb8:	f000 fa9e 	bl	80a51f8 <__aeabi_dmul>
 80a4cbc:	4602      	mov	r2, r0
 80a4cbe:	460b      	mov	r3, r1
 80a4cc0:	2000      	movs	r0, #0
 80a4cc2:	4956      	ldr	r1, [pc, #344]	; (80a4e1c <__ieee754_log+0x38c>)
 80a4cc4:	f000 f8e4 	bl	80a4e90 <__aeabi_dsub>
 80a4cc8:	4652      	mov	r2, sl
 80a4cca:	4606      	mov	r6, r0
 80a4ccc:	460f      	mov	r7, r1
 80a4cce:	465b      	mov	r3, fp
 80a4cd0:	4650      	mov	r0, sl
 80a4cd2:	4659      	mov	r1, fp
 80a4cd4:	f000 fa90 	bl	80a51f8 <__aeabi_dmul>
 80a4cd8:	4602      	mov	r2, r0
 80a4cda:	460b      	mov	r3, r1
 80a4cdc:	4630      	mov	r0, r6
 80a4cde:	4639      	mov	r1, r7
 80a4ce0:	f000 fa8a 	bl	80a51f8 <__aeabi_dmul>
 80a4ce4:	4606      	mov	r6, r0
 80a4ce6:	460f      	mov	r7, r1
 80a4ce8:	2c00      	cmp	r4, #0
 80a4cea:	f040 809b 	bne.w	80a4e24 <__ieee754_log+0x394>
 80a4cee:	4602      	mov	r2, r0
 80a4cf0:	460b      	mov	r3, r1
 80a4cf2:	4650      	mov	r0, sl
 80a4cf4:	4659      	mov	r1, fp
 80a4cf6:	f000 f8cb 	bl	80a4e90 <__aeabi_dsub>
 80a4cfa:	e737      	b.n	80a4b6c <__ieee754_log+0xdc>
 80a4cfc:	2c00      	cmp	r4, #0
 80a4cfe:	f000 80a5 	beq.w	80a4e4c <__ieee754_log+0x3bc>
 80a4d02:	a32f      	add	r3, pc, #188	; (adr r3, 80a4dc0 <__ieee754_log+0x330>)
 80a4d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d08:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4d0c:	f000 fa74 	bl	80a51f8 <__aeabi_dmul>
 80a4d10:	4642      	mov	r2, r8
 80a4d12:	464b      	mov	r3, r9
 80a4d14:	4604      	mov	r4, r0
 80a4d16:	460d      	mov	r5, r1
 80a4d18:	4650      	mov	r0, sl
 80a4d1a:	4659      	mov	r1, fp
 80a4d1c:	f000 f8b8 	bl	80a4e90 <__aeabi_dsub>
 80a4d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4d24:	f000 fa68 	bl	80a51f8 <__aeabi_dmul>
 80a4d28:	a327      	add	r3, pc, #156	; (adr r3, 80a4dc8 <__ieee754_log+0x338>)
 80a4d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d2e:	4606      	mov	r6, r0
 80a4d30:	460f      	mov	r7, r1
 80a4d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4d36:	f000 fa5f 	bl	80a51f8 <__aeabi_dmul>
 80a4d3a:	e021      	b.n	80a4d80 <__ieee754_log+0x2f0>
 80a4d3c:	a320      	add	r3, pc, #128	; (adr r3, 80a4dc0 <__ieee754_log+0x330>)
 80a4d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d42:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4d46:	f000 fa57 	bl	80a51f8 <__aeabi_dmul>
 80a4d4a:	4632      	mov	r2, r6
 80a4d4c:	463b      	mov	r3, r7
 80a4d4e:	4604      	mov	r4, r0
 80a4d50:	460d      	mov	r5, r1
 80a4d52:	4640      	mov	r0, r8
 80a4d54:	4649      	mov	r1, r9
 80a4d56:	f000 f89d 	bl	80a4e94 <__adddf3>
 80a4d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4d5e:	f000 fa4b 	bl	80a51f8 <__aeabi_dmul>
 80a4d62:	a319      	add	r3, pc, #100	; (adr r3, 80a4dc8 <__ieee754_log+0x338>)
 80a4d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4d68:	4680      	mov	r8, r0
 80a4d6a:	4689      	mov	r9, r1
 80a4d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a4d70:	f000 fa42 	bl	80a51f8 <__aeabi_dmul>
 80a4d74:	4602      	mov	r2, r0
 80a4d76:	460b      	mov	r3, r1
 80a4d78:	4640      	mov	r0, r8
 80a4d7a:	4649      	mov	r1, r9
 80a4d7c:	f000 f88a 	bl	80a4e94 <__adddf3>
 80a4d80:	4602      	mov	r2, r0
 80a4d82:	460b      	mov	r3, r1
 80a4d84:	4630      	mov	r0, r6
 80a4d86:	4639      	mov	r1, r7
 80a4d88:	f000 f882 	bl	80a4e90 <__aeabi_dsub>
 80a4d8c:	4652      	mov	r2, sl
 80a4d8e:	465b      	mov	r3, fp
 80a4d90:	f000 f87e 	bl	80a4e90 <__aeabi_dsub>
 80a4d94:	4602      	mov	r2, r0
 80a4d96:	460b      	mov	r3, r1
 80a4d98:	4620      	mov	r0, r4
 80a4d9a:	4629      	mov	r1, r5
 80a4d9c:	f000 f878 	bl	80a4e90 <__aeabi_dsub>
 80a4da0:	b005      	add	sp, #20
 80a4da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4da6:	4602      	mov	r2, r0
 80a4da8:	460b      	mov	r3, r1
 80a4daa:	f000 f871 	bl	80a4e90 <__aeabi_dsub>
 80a4dae:	2200      	movs	r2, #0
 80a4db0:	2300      	movs	r3, #0
 80a4db2:	f000 fb4b 	bl	80a544c <__aeabi_ddiv>
 80a4db6:	e6d9      	b.n	80a4b6c <__ieee754_log+0xdc>
 80a4db8:	2000      	movs	r0, #0
 80a4dba:	2100      	movs	r1, #0
 80a4dbc:	e6d6      	b.n	80a4b6c <__ieee754_log+0xdc>
 80a4dbe:	bf00      	nop
 80a4dc0:	fee00000 	.word	0xfee00000
 80a4dc4:	3fe62e42 	.word	0x3fe62e42
 80a4dc8:	35793c76 	.word	0x35793c76
 80a4dcc:	3dea39ef 	.word	0x3dea39ef
 80a4dd0:	df3e5244 	.word	0xdf3e5244
 80a4dd4:	3fc2f112 	.word	0x3fc2f112
 80a4dd8:	96cb03de 	.word	0x96cb03de
 80a4ddc:	3fc74664 	.word	0x3fc74664
 80a4de0:	94229359 	.word	0x94229359
 80a4de4:	3fd24924 	.word	0x3fd24924
 80a4de8:	55555593 	.word	0x55555593
 80a4dec:	3fe55555 	.word	0x3fe55555
 80a4df0:	d078c69f 	.word	0xd078c69f
 80a4df4:	3fc39a09 	.word	0x3fc39a09
 80a4df8:	1d8e78af 	.word	0x1d8e78af
 80a4dfc:	3fcc71c5 	.word	0x3fcc71c5
 80a4e00:	9997fa04 	.word	0x9997fa04
 80a4e04:	3fd99999 	.word	0x3fd99999
 80a4e08:	55555555 	.word	0x55555555
 80a4e0c:	3fd55555 	.word	0x3fd55555
 80a4e10:	43500000 	.word	0x43500000
 80a4e14:	7fefffff 	.word	0x7fefffff
 80a4e18:	3ff00000 	.word	0x3ff00000
 80a4e1c:	3fe00000 	.word	0x3fe00000
 80a4e20:	c3500000 	.word	0xc3500000
 80a4e24:	4620      	mov	r0, r4
 80a4e26:	f000 f981 	bl	80a512c <__aeabi_i2d>
 80a4e2a:	a30f      	add	r3, pc, #60	; (adr r3, 80a4e68 <__ieee754_log+0x3d8>)
 80a4e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4e30:	4680      	mov	r8, r0
 80a4e32:	4689      	mov	r9, r1
 80a4e34:	f000 f9e0 	bl	80a51f8 <__aeabi_dmul>
 80a4e38:	a30d      	add	r3, pc, #52	; (adr r3, 80a4e70 <__ieee754_log+0x3e0>)
 80a4e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4e3e:	4604      	mov	r4, r0
 80a4e40:	460d      	mov	r5, r1
 80a4e42:	4640      	mov	r0, r8
 80a4e44:	4649      	mov	r1, r9
 80a4e46:	f000 f9d7 	bl	80a51f8 <__aeabi_dmul>
 80a4e4a:	e799      	b.n	80a4d80 <__ieee754_log+0x2f0>
 80a4e4c:	4602      	mov	r2, r0
 80a4e4e:	460b      	mov	r3, r1
 80a4e50:	4650      	mov	r0, sl
 80a4e52:	4659      	mov	r1, fp
 80a4e54:	f000 f81c 	bl	80a4e90 <__aeabi_dsub>
 80a4e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4e5c:	f000 f9cc 	bl	80a51f8 <__aeabi_dmul>
 80a4e60:	e713      	b.n	80a4c8a <__ieee754_log+0x1fa>
 80a4e62:	bf00      	nop
 80a4e64:	f3af 8000 	nop.w
 80a4e68:	fee00000 	.word	0xfee00000
 80a4e6c:	3fe62e42 	.word	0x3fe62e42
 80a4e70:	35793c76 	.word	0x35793c76
 80a4e74:	3dea39ef 	.word	0x3dea39ef

080a4e78 <matherr>:
 80a4e78:	2000      	movs	r0, #0
 80a4e7a:	4770      	bx	lr

080a4e7c <nan>:
 80a4e7c:	2000      	movs	r0, #0
 80a4e7e:	4901      	ldr	r1, [pc, #4]	; (80a4e84 <nan+0x8>)
 80a4e80:	4770      	bx	lr
 80a4e82:	bf00      	nop
 80a4e84:	7ff80000 	.word	0x7ff80000

080a4e88 <__aeabi_drsub>:
 80a4e88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a4e8c:	e002      	b.n	80a4e94 <__adddf3>
 80a4e8e:	bf00      	nop

080a4e90 <__aeabi_dsub>:
 80a4e90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a4e94 <__adddf3>:
 80a4e94:	b530      	push	{r4, r5, lr}
 80a4e96:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a4e9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a4e9e:	ea94 0f05 	teq	r4, r5
 80a4ea2:	bf08      	it	eq
 80a4ea4:	ea90 0f02 	teqeq	r0, r2
 80a4ea8:	bf1f      	itttt	ne
 80a4eaa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a4eae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a4eb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a4eb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a4eba:	f000 80e2 	beq.w	80a5082 <__adddf3+0x1ee>
 80a4ebe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a4ec2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a4ec6:	bfb8      	it	lt
 80a4ec8:	426d      	neglt	r5, r5
 80a4eca:	dd0c      	ble.n	80a4ee6 <__adddf3+0x52>
 80a4ecc:	442c      	add	r4, r5
 80a4ece:	ea80 0202 	eor.w	r2, r0, r2
 80a4ed2:	ea81 0303 	eor.w	r3, r1, r3
 80a4ed6:	ea82 0000 	eor.w	r0, r2, r0
 80a4eda:	ea83 0101 	eor.w	r1, r3, r1
 80a4ede:	ea80 0202 	eor.w	r2, r0, r2
 80a4ee2:	ea81 0303 	eor.w	r3, r1, r3
 80a4ee6:	2d36      	cmp	r5, #54	; 0x36
 80a4ee8:	bf88      	it	hi
 80a4eea:	bd30      	pophi	{r4, r5, pc}
 80a4eec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a4ef0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a4ef4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a4ef8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a4efc:	d002      	beq.n	80a4f04 <__adddf3+0x70>
 80a4efe:	4240      	negs	r0, r0
 80a4f00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a4f04:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a4f08:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a4f0c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a4f10:	d002      	beq.n	80a4f18 <__adddf3+0x84>
 80a4f12:	4252      	negs	r2, r2
 80a4f14:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a4f18:	ea94 0f05 	teq	r4, r5
 80a4f1c:	f000 80a7 	beq.w	80a506e <__adddf3+0x1da>
 80a4f20:	f1a4 0401 	sub.w	r4, r4, #1
 80a4f24:	f1d5 0e20 	rsbs	lr, r5, #32
 80a4f28:	db0d      	blt.n	80a4f46 <__adddf3+0xb2>
 80a4f2a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a4f2e:	fa22 f205 	lsr.w	r2, r2, r5
 80a4f32:	1880      	adds	r0, r0, r2
 80a4f34:	f141 0100 	adc.w	r1, r1, #0
 80a4f38:	fa03 f20e 	lsl.w	r2, r3, lr
 80a4f3c:	1880      	adds	r0, r0, r2
 80a4f3e:	fa43 f305 	asr.w	r3, r3, r5
 80a4f42:	4159      	adcs	r1, r3
 80a4f44:	e00e      	b.n	80a4f64 <__adddf3+0xd0>
 80a4f46:	f1a5 0520 	sub.w	r5, r5, #32
 80a4f4a:	f10e 0e20 	add.w	lr, lr, #32
 80a4f4e:	2a01      	cmp	r2, #1
 80a4f50:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a4f54:	bf28      	it	cs
 80a4f56:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a4f5a:	fa43 f305 	asr.w	r3, r3, r5
 80a4f5e:	18c0      	adds	r0, r0, r3
 80a4f60:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a4f64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a4f68:	d507      	bpl.n	80a4f7a <__adddf3+0xe6>
 80a4f6a:	f04f 0e00 	mov.w	lr, #0
 80a4f6e:	f1dc 0c00 	rsbs	ip, ip, #0
 80a4f72:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a4f76:	eb6e 0101 	sbc.w	r1, lr, r1
 80a4f7a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4f7e:	d31b      	bcc.n	80a4fb8 <__adddf3+0x124>
 80a4f80:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a4f84:	d30c      	bcc.n	80a4fa0 <__adddf3+0x10c>
 80a4f86:	0849      	lsrs	r1, r1, #1
 80a4f88:	ea5f 0030 	movs.w	r0, r0, rrx
 80a4f8c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a4f90:	f104 0401 	add.w	r4, r4, #1
 80a4f94:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a4f98:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a4f9c:	f080 809a 	bcs.w	80a50d4 <__adddf3+0x240>
 80a4fa0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a4fa4:	bf08      	it	eq
 80a4fa6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a4faa:	f150 0000 	adcs.w	r0, r0, #0
 80a4fae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a4fb2:	ea41 0105 	orr.w	r1, r1, r5
 80a4fb6:	bd30      	pop	{r4, r5, pc}
 80a4fb8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a4fbc:	4140      	adcs	r0, r0
 80a4fbe:	eb41 0101 	adc.w	r1, r1, r1
 80a4fc2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a4fc6:	f1a4 0401 	sub.w	r4, r4, #1
 80a4fca:	d1e9      	bne.n	80a4fa0 <__adddf3+0x10c>
 80a4fcc:	f091 0f00 	teq	r1, #0
 80a4fd0:	bf04      	itt	eq
 80a4fd2:	4601      	moveq	r1, r0
 80a4fd4:	2000      	moveq	r0, #0
 80a4fd6:	fab1 f381 	clz	r3, r1
 80a4fda:	bf08      	it	eq
 80a4fdc:	3320      	addeq	r3, #32
 80a4fde:	f1a3 030b 	sub.w	r3, r3, #11
 80a4fe2:	f1b3 0220 	subs.w	r2, r3, #32
 80a4fe6:	da0c      	bge.n	80a5002 <__adddf3+0x16e>
 80a4fe8:	320c      	adds	r2, #12
 80a4fea:	dd08      	ble.n	80a4ffe <__adddf3+0x16a>
 80a4fec:	f102 0c14 	add.w	ip, r2, #20
 80a4ff0:	f1c2 020c 	rsb	r2, r2, #12
 80a4ff4:	fa01 f00c 	lsl.w	r0, r1, ip
 80a4ff8:	fa21 f102 	lsr.w	r1, r1, r2
 80a4ffc:	e00c      	b.n	80a5018 <__adddf3+0x184>
 80a4ffe:	f102 0214 	add.w	r2, r2, #20
 80a5002:	bfd8      	it	le
 80a5004:	f1c2 0c20 	rsble	ip, r2, #32
 80a5008:	fa01 f102 	lsl.w	r1, r1, r2
 80a500c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5010:	bfdc      	itt	le
 80a5012:	ea41 010c 	orrle.w	r1, r1, ip
 80a5016:	4090      	lslle	r0, r2
 80a5018:	1ae4      	subs	r4, r4, r3
 80a501a:	bfa2      	ittt	ge
 80a501c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a5020:	4329      	orrge	r1, r5
 80a5022:	bd30      	popge	{r4, r5, pc}
 80a5024:	ea6f 0404 	mvn.w	r4, r4
 80a5028:	3c1f      	subs	r4, #31
 80a502a:	da1c      	bge.n	80a5066 <__adddf3+0x1d2>
 80a502c:	340c      	adds	r4, #12
 80a502e:	dc0e      	bgt.n	80a504e <__adddf3+0x1ba>
 80a5030:	f104 0414 	add.w	r4, r4, #20
 80a5034:	f1c4 0220 	rsb	r2, r4, #32
 80a5038:	fa20 f004 	lsr.w	r0, r0, r4
 80a503c:	fa01 f302 	lsl.w	r3, r1, r2
 80a5040:	ea40 0003 	orr.w	r0, r0, r3
 80a5044:	fa21 f304 	lsr.w	r3, r1, r4
 80a5048:	ea45 0103 	orr.w	r1, r5, r3
 80a504c:	bd30      	pop	{r4, r5, pc}
 80a504e:	f1c4 040c 	rsb	r4, r4, #12
 80a5052:	f1c4 0220 	rsb	r2, r4, #32
 80a5056:	fa20 f002 	lsr.w	r0, r0, r2
 80a505a:	fa01 f304 	lsl.w	r3, r1, r4
 80a505e:	ea40 0003 	orr.w	r0, r0, r3
 80a5062:	4629      	mov	r1, r5
 80a5064:	bd30      	pop	{r4, r5, pc}
 80a5066:	fa21 f004 	lsr.w	r0, r1, r4
 80a506a:	4629      	mov	r1, r5
 80a506c:	bd30      	pop	{r4, r5, pc}
 80a506e:	f094 0f00 	teq	r4, #0
 80a5072:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a5076:	bf06      	itte	eq
 80a5078:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a507c:	3401      	addeq	r4, #1
 80a507e:	3d01      	subne	r5, #1
 80a5080:	e74e      	b.n	80a4f20 <__adddf3+0x8c>
 80a5082:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5086:	bf18      	it	ne
 80a5088:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a508c:	d029      	beq.n	80a50e2 <__adddf3+0x24e>
 80a508e:	ea94 0f05 	teq	r4, r5
 80a5092:	bf08      	it	eq
 80a5094:	ea90 0f02 	teqeq	r0, r2
 80a5098:	d005      	beq.n	80a50a6 <__adddf3+0x212>
 80a509a:	ea54 0c00 	orrs.w	ip, r4, r0
 80a509e:	bf04      	itt	eq
 80a50a0:	4619      	moveq	r1, r3
 80a50a2:	4610      	moveq	r0, r2
 80a50a4:	bd30      	pop	{r4, r5, pc}
 80a50a6:	ea91 0f03 	teq	r1, r3
 80a50aa:	bf1e      	ittt	ne
 80a50ac:	2100      	movne	r1, #0
 80a50ae:	2000      	movne	r0, #0
 80a50b0:	bd30      	popne	{r4, r5, pc}
 80a50b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a50b6:	d105      	bne.n	80a50c4 <__adddf3+0x230>
 80a50b8:	0040      	lsls	r0, r0, #1
 80a50ba:	4149      	adcs	r1, r1
 80a50bc:	bf28      	it	cs
 80a50be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a50c2:	bd30      	pop	{r4, r5, pc}
 80a50c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a50c8:	bf3c      	itt	cc
 80a50ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a50ce:	bd30      	popcc	{r4, r5, pc}
 80a50d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a50d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a50d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a50dc:	f04f 0000 	mov.w	r0, #0
 80a50e0:	bd30      	pop	{r4, r5, pc}
 80a50e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a50e6:	bf1a      	itte	ne
 80a50e8:	4619      	movne	r1, r3
 80a50ea:	4610      	movne	r0, r2
 80a50ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a50f0:	bf1c      	itt	ne
 80a50f2:	460b      	movne	r3, r1
 80a50f4:	4602      	movne	r2, r0
 80a50f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a50fa:	bf06      	itte	eq
 80a50fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5100:	ea91 0f03 	teqeq	r1, r3
 80a5104:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5108:	bd30      	pop	{r4, r5, pc}
 80a510a:	bf00      	nop

080a510c <__aeabi_ui2d>:
 80a510c:	f090 0f00 	teq	r0, #0
 80a5110:	bf04      	itt	eq
 80a5112:	2100      	moveq	r1, #0
 80a5114:	4770      	bxeq	lr
 80a5116:	b530      	push	{r4, r5, lr}
 80a5118:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a511c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5120:	f04f 0500 	mov.w	r5, #0
 80a5124:	f04f 0100 	mov.w	r1, #0
 80a5128:	e750      	b.n	80a4fcc <__adddf3+0x138>
 80a512a:	bf00      	nop

080a512c <__aeabi_i2d>:
 80a512c:	f090 0f00 	teq	r0, #0
 80a5130:	bf04      	itt	eq
 80a5132:	2100      	moveq	r1, #0
 80a5134:	4770      	bxeq	lr
 80a5136:	b530      	push	{r4, r5, lr}
 80a5138:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a513c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5140:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5144:	bf48      	it	mi
 80a5146:	4240      	negmi	r0, r0
 80a5148:	f04f 0100 	mov.w	r1, #0
 80a514c:	e73e      	b.n	80a4fcc <__adddf3+0x138>
 80a514e:	bf00      	nop

080a5150 <__aeabi_f2d>:
 80a5150:	0042      	lsls	r2, r0, #1
 80a5152:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a5156:	ea4f 0131 	mov.w	r1, r1, rrx
 80a515a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a515e:	bf1f      	itttt	ne
 80a5160:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a5164:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5168:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a516c:	4770      	bxne	lr
 80a516e:	f092 0f00 	teq	r2, #0
 80a5172:	bf14      	ite	ne
 80a5174:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a5178:	4770      	bxeq	lr
 80a517a:	b530      	push	{r4, r5, lr}
 80a517c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a5180:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5184:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5188:	e720      	b.n	80a4fcc <__adddf3+0x138>
 80a518a:	bf00      	nop

080a518c <__aeabi_ul2d>:
 80a518c:	ea50 0201 	orrs.w	r2, r0, r1
 80a5190:	bf08      	it	eq
 80a5192:	4770      	bxeq	lr
 80a5194:	b530      	push	{r4, r5, lr}
 80a5196:	f04f 0500 	mov.w	r5, #0
 80a519a:	e00a      	b.n	80a51b2 <__aeabi_l2d+0x16>

080a519c <__aeabi_l2d>:
 80a519c:	ea50 0201 	orrs.w	r2, r0, r1
 80a51a0:	bf08      	it	eq
 80a51a2:	4770      	bxeq	lr
 80a51a4:	b530      	push	{r4, r5, lr}
 80a51a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a51aa:	d502      	bpl.n	80a51b2 <__aeabi_l2d+0x16>
 80a51ac:	4240      	negs	r0, r0
 80a51ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a51b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a51b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a51ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a51be:	f43f aedc 	beq.w	80a4f7a <__adddf3+0xe6>
 80a51c2:	f04f 0203 	mov.w	r2, #3
 80a51c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a51ca:	bf18      	it	ne
 80a51cc:	3203      	addne	r2, #3
 80a51ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a51d2:	bf18      	it	ne
 80a51d4:	3203      	addne	r2, #3
 80a51d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a51da:	f1c2 0320 	rsb	r3, r2, #32
 80a51de:	fa00 fc03 	lsl.w	ip, r0, r3
 80a51e2:	fa20 f002 	lsr.w	r0, r0, r2
 80a51e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80a51ea:	ea40 000e 	orr.w	r0, r0, lr
 80a51ee:	fa21 f102 	lsr.w	r1, r1, r2
 80a51f2:	4414      	add	r4, r2
 80a51f4:	e6c1      	b.n	80a4f7a <__adddf3+0xe6>
 80a51f6:	bf00      	nop

080a51f8 <__aeabi_dmul>:
 80a51f8:	b570      	push	{r4, r5, r6, lr}
 80a51fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a51fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5202:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5206:	bf1d      	ittte	ne
 80a5208:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a520c:	ea94 0f0c 	teqne	r4, ip
 80a5210:	ea95 0f0c 	teqne	r5, ip
 80a5214:	f000 f8de 	bleq	80a53d4 <__aeabi_dmul+0x1dc>
 80a5218:	442c      	add	r4, r5
 80a521a:	ea81 0603 	eor.w	r6, r1, r3
 80a521e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5222:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5226:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a522a:	bf18      	it	ne
 80a522c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5230:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5238:	d038      	beq.n	80a52ac <__aeabi_dmul+0xb4>
 80a523a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a523e:	f04f 0500 	mov.w	r5, #0
 80a5242:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5246:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a524a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a524e:	f04f 0600 	mov.w	r6, #0
 80a5252:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a5256:	f09c 0f00 	teq	ip, #0
 80a525a:	bf18      	it	ne
 80a525c:	f04e 0e01 	orrne.w	lr, lr, #1
 80a5260:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a5264:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a5268:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a526c:	d204      	bcs.n	80a5278 <__aeabi_dmul+0x80>
 80a526e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a5272:	416d      	adcs	r5, r5
 80a5274:	eb46 0606 	adc.w	r6, r6, r6
 80a5278:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a527c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a5280:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a5284:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a5288:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a528c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a5290:	bf88      	it	hi
 80a5292:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5296:	d81e      	bhi.n	80a52d6 <__aeabi_dmul+0xde>
 80a5298:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a529c:	bf08      	it	eq
 80a529e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a52a2:	f150 0000 	adcs.w	r0, r0, #0
 80a52a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a52aa:	bd70      	pop	{r4, r5, r6, pc}
 80a52ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a52b0:	ea46 0101 	orr.w	r1, r6, r1
 80a52b4:	ea40 0002 	orr.w	r0, r0, r2
 80a52b8:	ea81 0103 	eor.w	r1, r1, r3
 80a52bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a52c0:	bfc2      	ittt	gt
 80a52c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a52c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a52ca:	bd70      	popgt	{r4, r5, r6, pc}
 80a52cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a52d0:	f04f 0e00 	mov.w	lr, #0
 80a52d4:	3c01      	subs	r4, #1
 80a52d6:	f300 80ab 	bgt.w	80a5430 <__aeabi_dmul+0x238>
 80a52da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a52de:	bfde      	ittt	le
 80a52e0:	2000      	movle	r0, #0
 80a52e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a52e6:	bd70      	pople	{r4, r5, r6, pc}
 80a52e8:	f1c4 0400 	rsb	r4, r4, #0
 80a52ec:	3c20      	subs	r4, #32
 80a52ee:	da35      	bge.n	80a535c <__aeabi_dmul+0x164>
 80a52f0:	340c      	adds	r4, #12
 80a52f2:	dc1b      	bgt.n	80a532c <__aeabi_dmul+0x134>
 80a52f4:	f104 0414 	add.w	r4, r4, #20
 80a52f8:	f1c4 0520 	rsb	r5, r4, #32
 80a52fc:	fa00 f305 	lsl.w	r3, r0, r5
 80a5300:	fa20 f004 	lsr.w	r0, r0, r4
 80a5304:	fa01 f205 	lsl.w	r2, r1, r5
 80a5308:	ea40 0002 	orr.w	r0, r0, r2
 80a530c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5310:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5314:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5318:	fa21 f604 	lsr.w	r6, r1, r4
 80a531c:	eb42 0106 	adc.w	r1, r2, r6
 80a5320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5324:	bf08      	it	eq
 80a5326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a532a:	bd70      	pop	{r4, r5, r6, pc}
 80a532c:	f1c4 040c 	rsb	r4, r4, #12
 80a5330:	f1c4 0520 	rsb	r5, r4, #32
 80a5334:	fa00 f304 	lsl.w	r3, r0, r4
 80a5338:	fa20 f005 	lsr.w	r0, r0, r5
 80a533c:	fa01 f204 	lsl.w	r2, r1, r4
 80a5340:	ea40 0002 	orr.w	r0, r0, r2
 80a5344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5348:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a534c:	f141 0100 	adc.w	r1, r1, #0
 80a5350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5354:	bf08      	it	eq
 80a5356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a535a:	bd70      	pop	{r4, r5, r6, pc}
 80a535c:	f1c4 0520 	rsb	r5, r4, #32
 80a5360:	fa00 f205 	lsl.w	r2, r0, r5
 80a5364:	ea4e 0e02 	orr.w	lr, lr, r2
 80a5368:	fa20 f304 	lsr.w	r3, r0, r4
 80a536c:	fa01 f205 	lsl.w	r2, r1, r5
 80a5370:	ea43 0302 	orr.w	r3, r3, r2
 80a5374:	fa21 f004 	lsr.w	r0, r1, r4
 80a5378:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a537c:	fa21 f204 	lsr.w	r2, r1, r4
 80a5380:	ea20 0002 	bic.w	r0, r0, r2
 80a5384:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a5388:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a538c:	bf08      	it	eq
 80a538e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a5392:	bd70      	pop	{r4, r5, r6, pc}
 80a5394:	f094 0f00 	teq	r4, #0
 80a5398:	d10f      	bne.n	80a53ba <__aeabi_dmul+0x1c2>
 80a539a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a539e:	0040      	lsls	r0, r0, #1
 80a53a0:	eb41 0101 	adc.w	r1, r1, r1
 80a53a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a53a8:	bf08      	it	eq
 80a53aa:	3c01      	subeq	r4, #1
 80a53ac:	d0f7      	beq.n	80a539e <__aeabi_dmul+0x1a6>
 80a53ae:	ea41 0106 	orr.w	r1, r1, r6
 80a53b2:	f095 0f00 	teq	r5, #0
 80a53b6:	bf18      	it	ne
 80a53b8:	4770      	bxne	lr
 80a53ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a53be:	0052      	lsls	r2, r2, #1
 80a53c0:	eb43 0303 	adc.w	r3, r3, r3
 80a53c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a53c8:	bf08      	it	eq
 80a53ca:	3d01      	subeq	r5, #1
 80a53cc:	d0f7      	beq.n	80a53be <__aeabi_dmul+0x1c6>
 80a53ce:	ea43 0306 	orr.w	r3, r3, r6
 80a53d2:	4770      	bx	lr
 80a53d4:	ea94 0f0c 	teq	r4, ip
 80a53d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a53dc:	bf18      	it	ne
 80a53de:	ea95 0f0c 	teqne	r5, ip
 80a53e2:	d00c      	beq.n	80a53fe <__aeabi_dmul+0x206>
 80a53e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a53e8:	bf18      	it	ne
 80a53ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a53ee:	d1d1      	bne.n	80a5394 <__aeabi_dmul+0x19c>
 80a53f0:	ea81 0103 	eor.w	r1, r1, r3
 80a53f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a53f8:	f04f 0000 	mov.w	r0, #0
 80a53fc:	bd70      	pop	{r4, r5, r6, pc}
 80a53fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5402:	bf06      	itte	eq
 80a5404:	4610      	moveq	r0, r2
 80a5406:	4619      	moveq	r1, r3
 80a5408:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a540c:	d019      	beq.n	80a5442 <__aeabi_dmul+0x24a>
 80a540e:	ea94 0f0c 	teq	r4, ip
 80a5412:	d102      	bne.n	80a541a <__aeabi_dmul+0x222>
 80a5414:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5418:	d113      	bne.n	80a5442 <__aeabi_dmul+0x24a>
 80a541a:	ea95 0f0c 	teq	r5, ip
 80a541e:	d105      	bne.n	80a542c <__aeabi_dmul+0x234>
 80a5420:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5424:	bf1c      	itt	ne
 80a5426:	4610      	movne	r0, r2
 80a5428:	4619      	movne	r1, r3
 80a542a:	d10a      	bne.n	80a5442 <__aeabi_dmul+0x24a>
 80a542c:	ea81 0103 	eor.w	r1, r1, r3
 80a5430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5434:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5438:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a543c:	f04f 0000 	mov.w	r0, #0
 80a5440:	bd70      	pop	{r4, r5, r6, pc}
 80a5442:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5446:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a544a:	bd70      	pop	{r4, r5, r6, pc}

080a544c <__aeabi_ddiv>:
 80a544c:	b570      	push	{r4, r5, r6, lr}
 80a544e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5452:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5456:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a545a:	bf1d      	ittte	ne
 80a545c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a5460:	ea94 0f0c 	teqne	r4, ip
 80a5464:	ea95 0f0c 	teqne	r5, ip
 80a5468:	f000 f8a7 	bleq	80a55ba <__aeabi_ddiv+0x16e>
 80a546c:	eba4 0405 	sub.w	r4, r4, r5
 80a5470:	ea81 0e03 	eor.w	lr, r1, r3
 80a5474:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5478:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a547c:	f000 8088 	beq.w	80a5590 <__aeabi_ddiv+0x144>
 80a5480:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a5484:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a5488:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a548c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a5490:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a5494:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a5498:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a549c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a54a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a54a4:	429d      	cmp	r5, r3
 80a54a6:	bf08      	it	eq
 80a54a8:	4296      	cmpeq	r6, r2
 80a54aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a54ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a54b2:	d202      	bcs.n	80a54ba <__aeabi_ddiv+0x6e>
 80a54b4:	085b      	lsrs	r3, r3, #1
 80a54b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80a54ba:	1ab6      	subs	r6, r6, r2
 80a54bc:	eb65 0503 	sbc.w	r5, r5, r3
 80a54c0:	085b      	lsrs	r3, r3, #1
 80a54c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a54c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a54ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a54ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80a54d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a54d6:	bf22      	ittt	cs
 80a54d8:	1ab6      	subcs	r6, r6, r2
 80a54da:	4675      	movcs	r5, lr
 80a54dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80a54e0:	085b      	lsrs	r3, r3, #1
 80a54e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80a54e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80a54ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a54ee:	bf22      	ittt	cs
 80a54f0:	1ab6      	subcs	r6, r6, r2
 80a54f2:	4675      	movcs	r5, lr
 80a54f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a54f8:	085b      	lsrs	r3, r3, #1
 80a54fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80a54fe:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5502:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5506:	bf22      	ittt	cs
 80a5508:	1ab6      	subcs	r6, r6, r2
 80a550a:	4675      	movcs	r5, lr
 80a550c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5510:	085b      	lsrs	r3, r3, #1
 80a5512:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5516:	ebb6 0e02 	subs.w	lr, r6, r2
 80a551a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a551e:	bf22      	ittt	cs
 80a5520:	1ab6      	subcs	r6, r6, r2
 80a5522:	4675      	movcs	r5, lr
 80a5524:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5528:	ea55 0e06 	orrs.w	lr, r5, r6
 80a552c:	d018      	beq.n	80a5560 <__aeabi_ddiv+0x114>
 80a552e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5532:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5536:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a553a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a553e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5542:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5546:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a554a:	d1c0      	bne.n	80a54ce <__aeabi_ddiv+0x82>
 80a554c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5550:	d10b      	bne.n	80a556a <__aeabi_ddiv+0x11e>
 80a5552:	ea41 0100 	orr.w	r1, r1, r0
 80a5556:	f04f 0000 	mov.w	r0, #0
 80a555a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a555e:	e7b6      	b.n	80a54ce <__aeabi_ddiv+0x82>
 80a5560:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5564:	bf04      	itt	eq
 80a5566:	4301      	orreq	r1, r0
 80a5568:	2000      	moveq	r0, #0
 80a556a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a556e:	bf88      	it	hi
 80a5570:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a5574:	f63f aeaf 	bhi.w	80a52d6 <__aeabi_dmul+0xde>
 80a5578:	ebb5 0c03 	subs.w	ip, r5, r3
 80a557c:	bf04      	itt	eq
 80a557e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a5582:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a5586:	f150 0000 	adcs.w	r0, r0, #0
 80a558a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a558e:	bd70      	pop	{r4, r5, r6, pc}
 80a5590:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a5594:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a5598:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a559c:	bfc2      	ittt	gt
 80a559e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a55a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a55a6:	bd70      	popgt	{r4, r5, r6, pc}
 80a55a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a55ac:	f04f 0e00 	mov.w	lr, #0
 80a55b0:	3c01      	subs	r4, #1
 80a55b2:	e690      	b.n	80a52d6 <__aeabi_dmul+0xde>
 80a55b4:	ea45 0e06 	orr.w	lr, r5, r6
 80a55b8:	e68d      	b.n	80a52d6 <__aeabi_dmul+0xde>
 80a55ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a55be:	ea94 0f0c 	teq	r4, ip
 80a55c2:	bf08      	it	eq
 80a55c4:	ea95 0f0c 	teqeq	r5, ip
 80a55c8:	f43f af3b 	beq.w	80a5442 <__aeabi_dmul+0x24a>
 80a55cc:	ea94 0f0c 	teq	r4, ip
 80a55d0:	d10a      	bne.n	80a55e8 <__aeabi_ddiv+0x19c>
 80a55d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a55d6:	f47f af34 	bne.w	80a5442 <__aeabi_dmul+0x24a>
 80a55da:	ea95 0f0c 	teq	r5, ip
 80a55de:	f47f af25 	bne.w	80a542c <__aeabi_dmul+0x234>
 80a55e2:	4610      	mov	r0, r2
 80a55e4:	4619      	mov	r1, r3
 80a55e6:	e72c      	b.n	80a5442 <__aeabi_dmul+0x24a>
 80a55e8:	ea95 0f0c 	teq	r5, ip
 80a55ec:	d106      	bne.n	80a55fc <__aeabi_ddiv+0x1b0>
 80a55ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a55f2:	f43f aefd 	beq.w	80a53f0 <__aeabi_dmul+0x1f8>
 80a55f6:	4610      	mov	r0, r2
 80a55f8:	4619      	mov	r1, r3
 80a55fa:	e722      	b.n	80a5442 <__aeabi_dmul+0x24a>
 80a55fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5600:	bf18      	it	ne
 80a5602:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5606:	f47f aec5 	bne.w	80a5394 <__aeabi_dmul+0x19c>
 80a560a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a560e:	f47f af0d 	bne.w	80a542c <__aeabi_dmul+0x234>
 80a5612:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5616:	f47f aeeb 	bne.w	80a53f0 <__aeabi_dmul+0x1f8>
 80a561a:	e712      	b.n	80a5442 <__aeabi_dmul+0x24a>

080a561c <__gedf2>:
 80a561c:	f04f 3cff 	mov.w	ip, #4294967295
 80a5620:	e006      	b.n	80a5630 <__cmpdf2+0x4>
 80a5622:	bf00      	nop

080a5624 <__ledf2>:
 80a5624:	f04f 0c01 	mov.w	ip, #1
 80a5628:	e002      	b.n	80a5630 <__cmpdf2+0x4>
 80a562a:	bf00      	nop

080a562c <__cmpdf2>:
 80a562c:	f04f 0c01 	mov.w	ip, #1
 80a5630:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5634:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5638:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a563c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5640:	bf18      	it	ne
 80a5642:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5646:	d01b      	beq.n	80a5680 <__cmpdf2+0x54>
 80a5648:	b001      	add	sp, #4
 80a564a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a564e:	bf0c      	ite	eq
 80a5650:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a5654:	ea91 0f03 	teqne	r1, r3
 80a5658:	bf02      	ittt	eq
 80a565a:	ea90 0f02 	teqeq	r0, r2
 80a565e:	2000      	moveq	r0, #0
 80a5660:	4770      	bxeq	lr
 80a5662:	f110 0f00 	cmn.w	r0, #0
 80a5666:	ea91 0f03 	teq	r1, r3
 80a566a:	bf58      	it	pl
 80a566c:	4299      	cmppl	r1, r3
 80a566e:	bf08      	it	eq
 80a5670:	4290      	cmpeq	r0, r2
 80a5672:	bf2c      	ite	cs
 80a5674:	17d8      	asrcs	r0, r3, #31
 80a5676:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a567a:	f040 0001 	orr.w	r0, r0, #1
 80a567e:	4770      	bx	lr
 80a5680:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5684:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5688:	d102      	bne.n	80a5690 <__cmpdf2+0x64>
 80a568a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a568e:	d107      	bne.n	80a56a0 <__cmpdf2+0x74>
 80a5690:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5694:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5698:	d1d6      	bne.n	80a5648 <__cmpdf2+0x1c>
 80a569a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a569e:	d0d3      	beq.n	80a5648 <__cmpdf2+0x1c>
 80a56a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a56a4:	4770      	bx	lr
 80a56a6:	bf00      	nop

080a56a8 <__aeabi_cdrcmple>:
 80a56a8:	4684      	mov	ip, r0
 80a56aa:	4610      	mov	r0, r2
 80a56ac:	4662      	mov	r2, ip
 80a56ae:	468c      	mov	ip, r1
 80a56b0:	4619      	mov	r1, r3
 80a56b2:	4663      	mov	r3, ip
 80a56b4:	e000      	b.n	80a56b8 <__aeabi_cdcmpeq>
 80a56b6:	bf00      	nop

080a56b8 <__aeabi_cdcmpeq>:
 80a56b8:	b501      	push	{r0, lr}
 80a56ba:	f7ff ffb7 	bl	80a562c <__cmpdf2>
 80a56be:	2800      	cmp	r0, #0
 80a56c0:	bf48      	it	mi
 80a56c2:	f110 0f00 	cmnmi.w	r0, #0
 80a56c6:	bd01      	pop	{r0, pc}

080a56c8 <__aeabi_dcmpeq>:
 80a56c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a56cc:	f7ff fff4 	bl	80a56b8 <__aeabi_cdcmpeq>
 80a56d0:	bf0c      	ite	eq
 80a56d2:	2001      	moveq	r0, #1
 80a56d4:	2000      	movne	r0, #0
 80a56d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80a56da:	bf00      	nop

080a56dc <__aeabi_dcmplt>:
 80a56dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a56e0:	f7ff ffea 	bl	80a56b8 <__aeabi_cdcmpeq>
 80a56e4:	bf34      	ite	cc
 80a56e6:	2001      	movcc	r0, #1
 80a56e8:	2000      	movcs	r0, #0
 80a56ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80a56ee:	bf00      	nop

080a56f0 <__aeabi_dcmple>:
 80a56f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a56f4:	f7ff ffe0 	bl	80a56b8 <__aeabi_cdcmpeq>
 80a56f8:	bf94      	ite	ls
 80a56fa:	2001      	movls	r0, #1
 80a56fc:	2000      	movhi	r0, #0
 80a56fe:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5702:	bf00      	nop

080a5704 <__aeabi_dcmpge>:
 80a5704:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5708:	f7ff ffce 	bl	80a56a8 <__aeabi_cdrcmple>
 80a570c:	bf94      	ite	ls
 80a570e:	2001      	movls	r0, #1
 80a5710:	2000      	movhi	r0, #0
 80a5712:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5716:	bf00      	nop

080a5718 <__aeabi_dcmpgt>:
 80a5718:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a571c:	f7ff ffc4 	bl	80a56a8 <__aeabi_cdrcmple>
 80a5720:	bf34      	ite	cc
 80a5722:	2001      	movcc	r0, #1
 80a5724:	2000      	movcs	r0, #0
 80a5726:	f85d fb08 	ldr.w	pc, [sp], #8
 80a572a:	bf00      	nop

080a572c <__aeabi_dcmpun>:
 80a572c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5730:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5734:	d102      	bne.n	80a573c <__aeabi_dcmpun+0x10>
 80a5736:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a573a:	d10a      	bne.n	80a5752 <__aeabi_dcmpun+0x26>
 80a573c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5744:	d102      	bne.n	80a574c <__aeabi_dcmpun+0x20>
 80a5746:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a574a:	d102      	bne.n	80a5752 <__aeabi_dcmpun+0x26>
 80a574c:	f04f 0000 	mov.w	r0, #0
 80a5750:	4770      	bx	lr
 80a5752:	f04f 0001 	mov.w	r0, #1
 80a5756:	4770      	bx	lr

080a5758 <__aeabi_d2iz>:
 80a5758:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a575c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5760:	d215      	bcs.n	80a578e <__aeabi_d2iz+0x36>
 80a5762:	d511      	bpl.n	80a5788 <__aeabi_d2iz+0x30>
 80a5764:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5768:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a576c:	d912      	bls.n	80a5794 <__aeabi_d2iz+0x3c>
 80a576e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5772:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5776:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a577a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a577e:	fa23 f002 	lsr.w	r0, r3, r2
 80a5782:	bf18      	it	ne
 80a5784:	4240      	negne	r0, r0
 80a5786:	4770      	bx	lr
 80a5788:	f04f 0000 	mov.w	r0, #0
 80a578c:	4770      	bx	lr
 80a578e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5792:	d105      	bne.n	80a57a0 <__aeabi_d2iz+0x48>
 80a5794:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5798:	bf08      	it	eq
 80a579a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a579e:	4770      	bx	lr
 80a57a0:	f04f 0000 	mov.w	r0, #0
 80a57a4:	4770      	bx	lr
 80a57a6:	bf00      	nop

080a57a8 <__aeabi_d2uiz>:
 80a57a8:	004a      	lsls	r2, r1, #1
 80a57aa:	d211      	bcs.n	80a57d0 <__aeabi_d2uiz+0x28>
 80a57ac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a57b0:	d211      	bcs.n	80a57d6 <__aeabi_d2uiz+0x2e>
 80a57b2:	d50d      	bpl.n	80a57d0 <__aeabi_d2uiz+0x28>
 80a57b4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a57b8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a57bc:	d40e      	bmi.n	80a57dc <__aeabi_d2uiz+0x34>
 80a57be:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a57c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a57c6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a57ca:	fa23 f002 	lsr.w	r0, r3, r2
 80a57ce:	4770      	bx	lr
 80a57d0:	f04f 0000 	mov.w	r0, #0
 80a57d4:	4770      	bx	lr
 80a57d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a57da:	d102      	bne.n	80a57e2 <__aeabi_d2uiz+0x3a>
 80a57dc:	f04f 30ff 	mov.w	r0, #4294967295
 80a57e0:	4770      	bx	lr
 80a57e2:	f04f 0000 	mov.w	r0, #0
 80a57e6:	4770      	bx	lr

080a57e8 <__aeabi_d2f>:
 80a57e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a57ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a57f0:	bf24      	itt	cs
 80a57f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a57f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a57fa:	d90d      	bls.n	80a5818 <__aeabi_d2f+0x30>
 80a57fc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5800:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5804:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5808:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a580c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5810:	bf08      	it	eq
 80a5812:	f020 0001 	biceq.w	r0, r0, #1
 80a5816:	4770      	bx	lr
 80a5818:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a581c:	d121      	bne.n	80a5862 <__aeabi_d2f+0x7a>
 80a581e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5822:	bfbc      	itt	lt
 80a5824:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5828:	4770      	bxlt	lr
 80a582a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a582e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5832:	f1c2 0218 	rsb	r2, r2, #24
 80a5836:	f1c2 0c20 	rsb	ip, r2, #32
 80a583a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a583e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5842:	bf18      	it	ne
 80a5844:	f040 0001 	orrne.w	r0, r0, #1
 80a5848:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a584c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5850:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5854:	ea40 000c 	orr.w	r0, r0, ip
 80a5858:	fa23 f302 	lsr.w	r3, r3, r2
 80a585c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5860:	e7cc      	b.n	80a57fc <__aeabi_d2f+0x14>
 80a5862:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5866:	d107      	bne.n	80a5878 <__aeabi_d2f+0x90>
 80a5868:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a586c:	bf1e      	ittt	ne
 80a586e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5872:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5876:	4770      	bxne	lr
 80a5878:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a587c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5880:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5884:	4770      	bx	lr
 80a5886:	bf00      	nop

080a5888 <__aeabi_frsub>:
 80a5888:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a588c:	e002      	b.n	80a5894 <__addsf3>
 80a588e:	bf00      	nop

080a5890 <__aeabi_fsub>:
 80a5890:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5894 <__addsf3>:
 80a5894:	0042      	lsls	r2, r0, #1
 80a5896:	bf1f      	itttt	ne
 80a5898:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a589c:	ea92 0f03 	teqne	r2, r3
 80a58a0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a58a4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a58a8:	d06a      	beq.n	80a5980 <__addsf3+0xec>
 80a58aa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a58ae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a58b2:	bfc1      	itttt	gt
 80a58b4:	18d2      	addgt	r2, r2, r3
 80a58b6:	4041      	eorgt	r1, r0
 80a58b8:	4048      	eorgt	r0, r1
 80a58ba:	4041      	eorgt	r1, r0
 80a58bc:	bfb8      	it	lt
 80a58be:	425b      	neglt	r3, r3
 80a58c0:	2b19      	cmp	r3, #25
 80a58c2:	bf88      	it	hi
 80a58c4:	4770      	bxhi	lr
 80a58c6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a58ca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a58ce:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a58d2:	bf18      	it	ne
 80a58d4:	4240      	negne	r0, r0
 80a58d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a58da:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a58de:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a58e2:	bf18      	it	ne
 80a58e4:	4249      	negne	r1, r1
 80a58e6:	ea92 0f03 	teq	r2, r3
 80a58ea:	d03f      	beq.n	80a596c <__addsf3+0xd8>
 80a58ec:	f1a2 0201 	sub.w	r2, r2, #1
 80a58f0:	fa41 fc03 	asr.w	ip, r1, r3
 80a58f4:	eb10 000c 	adds.w	r0, r0, ip
 80a58f8:	f1c3 0320 	rsb	r3, r3, #32
 80a58fc:	fa01 f103 	lsl.w	r1, r1, r3
 80a5900:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5904:	d502      	bpl.n	80a590c <__addsf3+0x78>
 80a5906:	4249      	negs	r1, r1
 80a5908:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a590c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5910:	d313      	bcc.n	80a593a <__addsf3+0xa6>
 80a5912:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5916:	d306      	bcc.n	80a5926 <__addsf3+0x92>
 80a5918:	0840      	lsrs	r0, r0, #1
 80a591a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a591e:	f102 0201 	add.w	r2, r2, #1
 80a5922:	2afe      	cmp	r2, #254	; 0xfe
 80a5924:	d251      	bcs.n	80a59ca <__addsf3+0x136>
 80a5926:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a592a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a592e:	bf08      	it	eq
 80a5930:	f020 0001 	biceq.w	r0, r0, #1
 80a5934:	ea40 0003 	orr.w	r0, r0, r3
 80a5938:	4770      	bx	lr
 80a593a:	0049      	lsls	r1, r1, #1
 80a593c:	eb40 0000 	adc.w	r0, r0, r0
 80a5940:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5944:	f1a2 0201 	sub.w	r2, r2, #1
 80a5948:	d1ed      	bne.n	80a5926 <__addsf3+0x92>
 80a594a:	fab0 fc80 	clz	ip, r0
 80a594e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5952:	ebb2 020c 	subs.w	r2, r2, ip
 80a5956:	fa00 f00c 	lsl.w	r0, r0, ip
 80a595a:	bfaa      	itet	ge
 80a595c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5960:	4252      	neglt	r2, r2
 80a5962:	4318      	orrge	r0, r3
 80a5964:	bfbc      	itt	lt
 80a5966:	40d0      	lsrlt	r0, r2
 80a5968:	4318      	orrlt	r0, r3
 80a596a:	4770      	bx	lr
 80a596c:	f092 0f00 	teq	r2, #0
 80a5970:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5974:	bf06      	itte	eq
 80a5976:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a597a:	3201      	addeq	r2, #1
 80a597c:	3b01      	subne	r3, #1
 80a597e:	e7b5      	b.n	80a58ec <__addsf3+0x58>
 80a5980:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5984:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5988:	bf18      	it	ne
 80a598a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a598e:	d021      	beq.n	80a59d4 <__addsf3+0x140>
 80a5990:	ea92 0f03 	teq	r2, r3
 80a5994:	d004      	beq.n	80a59a0 <__addsf3+0x10c>
 80a5996:	f092 0f00 	teq	r2, #0
 80a599a:	bf08      	it	eq
 80a599c:	4608      	moveq	r0, r1
 80a599e:	4770      	bx	lr
 80a59a0:	ea90 0f01 	teq	r0, r1
 80a59a4:	bf1c      	itt	ne
 80a59a6:	2000      	movne	r0, #0
 80a59a8:	4770      	bxne	lr
 80a59aa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a59ae:	d104      	bne.n	80a59ba <__addsf3+0x126>
 80a59b0:	0040      	lsls	r0, r0, #1
 80a59b2:	bf28      	it	cs
 80a59b4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a59b8:	4770      	bx	lr
 80a59ba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a59be:	bf3c      	itt	cc
 80a59c0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a59c4:	4770      	bxcc	lr
 80a59c6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a59ca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a59ce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a59d2:	4770      	bx	lr
 80a59d4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a59d8:	bf16      	itet	ne
 80a59da:	4608      	movne	r0, r1
 80a59dc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a59e0:	4601      	movne	r1, r0
 80a59e2:	0242      	lsls	r2, r0, #9
 80a59e4:	bf06      	itte	eq
 80a59e6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a59ea:	ea90 0f01 	teqeq	r0, r1
 80a59ee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a59f2:	4770      	bx	lr

080a59f4 <__aeabi_ui2f>:
 80a59f4:	f04f 0300 	mov.w	r3, #0
 80a59f8:	e004      	b.n	80a5a04 <__aeabi_i2f+0x8>
 80a59fa:	bf00      	nop

080a59fc <__aeabi_i2f>:
 80a59fc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5a00:	bf48      	it	mi
 80a5a02:	4240      	negmi	r0, r0
 80a5a04:	ea5f 0c00 	movs.w	ip, r0
 80a5a08:	bf08      	it	eq
 80a5a0a:	4770      	bxeq	lr
 80a5a0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5a10:	4601      	mov	r1, r0
 80a5a12:	f04f 0000 	mov.w	r0, #0
 80a5a16:	e01c      	b.n	80a5a52 <__aeabi_l2f+0x2a>

080a5a18 <__aeabi_ul2f>:
 80a5a18:	ea50 0201 	orrs.w	r2, r0, r1
 80a5a1c:	bf08      	it	eq
 80a5a1e:	4770      	bxeq	lr
 80a5a20:	f04f 0300 	mov.w	r3, #0
 80a5a24:	e00a      	b.n	80a5a3c <__aeabi_l2f+0x14>
 80a5a26:	bf00      	nop

080a5a28 <__aeabi_l2f>:
 80a5a28:	ea50 0201 	orrs.w	r2, r0, r1
 80a5a2c:	bf08      	it	eq
 80a5a2e:	4770      	bxeq	lr
 80a5a30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5a34:	d502      	bpl.n	80a5a3c <__aeabi_l2f+0x14>
 80a5a36:	4240      	negs	r0, r0
 80a5a38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5a3c:	ea5f 0c01 	movs.w	ip, r1
 80a5a40:	bf02      	ittt	eq
 80a5a42:	4684      	moveq	ip, r0
 80a5a44:	4601      	moveq	r1, r0
 80a5a46:	2000      	moveq	r0, #0
 80a5a48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5a4c:	bf08      	it	eq
 80a5a4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5a52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5a56:	fabc f28c 	clz	r2, ip
 80a5a5a:	3a08      	subs	r2, #8
 80a5a5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5a60:	db10      	blt.n	80a5a84 <__aeabi_l2f+0x5c>
 80a5a62:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5a66:	4463      	add	r3, ip
 80a5a68:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5a6c:	f1c2 0220 	rsb	r2, r2, #32
 80a5a70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5a74:	fa20 f202 	lsr.w	r2, r0, r2
 80a5a78:	eb43 0002 	adc.w	r0, r3, r2
 80a5a7c:	bf08      	it	eq
 80a5a7e:	f020 0001 	biceq.w	r0, r0, #1
 80a5a82:	4770      	bx	lr
 80a5a84:	f102 0220 	add.w	r2, r2, #32
 80a5a88:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5a8c:	f1c2 0220 	rsb	r2, r2, #32
 80a5a90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5a94:	fa21 f202 	lsr.w	r2, r1, r2
 80a5a98:	eb43 0002 	adc.w	r0, r3, r2
 80a5a9c:	bf08      	it	eq
 80a5a9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5aa2:	4770      	bx	lr

080a5aa4 <__aeabi_fmul>:
 80a5aa4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5aa8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5aac:	bf1e      	ittt	ne
 80a5aae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5ab2:	ea92 0f0c 	teqne	r2, ip
 80a5ab6:	ea93 0f0c 	teqne	r3, ip
 80a5aba:	d06f      	beq.n	80a5b9c <__aeabi_fmul+0xf8>
 80a5abc:	441a      	add	r2, r3
 80a5abe:	ea80 0c01 	eor.w	ip, r0, r1
 80a5ac2:	0240      	lsls	r0, r0, #9
 80a5ac4:	bf18      	it	ne
 80a5ac6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5aca:	d01e      	beq.n	80a5b0a <__aeabi_fmul+0x66>
 80a5acc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5ad0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5ad4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5ad8:	fba0 3101 	umull	r3, r1, r0, r1
 80a5adc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5ae0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5ae4:	bf3e      	ittt	cc
 80a5ae6:	0049      	lslcc	r1, r1, #1
 80a5ae8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5aec:	005b      	lslcc	r3, r3, #1
 80a5aee:	ea40 0001 	orr.w	r0, r0, r1
 80a5af2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5af6:	2afd      	cmp	r2, #253	; 0xfd
 80a5af8:	d81d      	bhi.n	80a5b36 <__aeabi_fmul+0x92>
 80a5afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5afe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5b02:	bf08      	it	eq
 80a5b04:	f020 0001 	biceq.w	r0, r0, #1
 80a5b08:	4770      	bx	lr
 80a5b0a:	f090 0f00 	teq	r0, #0
 80a5b0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5b12:	bf08      	it	eq
 80a5b14:	0249      	lsleq	r1, r1, #9
 80a5b16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5b1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5b1e:	3a7f      	subs	r2, #127	; 0x7f
 80a5b20:	bfc2      	ittt	gt
 80a5b22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5b26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5b2a:	4770      	bxgt	lr
 80a5b2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5b30:	f04f 0300 	mov.w	r3, #0
 80a5b34:	3a01      	subs	r2, #1
 80a5b36:	dc5d      	bgt.n	80a5bf4 <__aeabi_fmul+0x150>
 80a5b38:	f112 0f19 	cmn.w	r2, #25
 80a5b3c:	bfdc      	itt	le
 80a5b3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5b42:	4770      	bxle	lr
 80a5b44:	f1c2 0200 	rsb	r2, r2, #0
 80a5b48:	0041      	lsls	r1, r0, #1
 80a5b4a:	fa21 f102 	lsr.w	r1, r1, r2
 80a5b4e:	f1c2 0220 	rsb	r2, r2, #32
 80a5b52:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5b56:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5b5a:	f140 0000 	adc.w	r0, r0, #0
 80a5b5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5b62:	bf08      	it	eq
 80a5b64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5b68:	4770      	bx	lr
 80a5b6a:	f092 0f00 	teq	r2, #0
 80a5b6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5b72:	bf02      	ittt	eq
 80a5b74:	0040      	lsleq	r0, r0, #1
 80a5b76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5b7a:	3a01      	subeq	r2, #1
 80a5b7c:	d0f9      	beq.n	80a5b72 <__aeabi_fmul+0xce>
 80a5b7e:	ea40 000c 	orr.w	r0, r0, ip
 80a5b82:	f093 0f00 	teq	r3, #0
 80a5b86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5b8a:	bf02      	ittt	eq
 80a5b8c:	0049      	lsleq	r1, r1, #1
 80a5b8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5b92:	3b01      	subeq	r3, #1
 80a5b94:	d0f9      	beq.n	80a5b8a <__aeabi_fmul+0xe6>
 80a5b96:	ea41 010c 	orr.w	r1, r1, ip
 80a5b9a:	e78f      	b.n	80a5abc <__aeabi_fmul+0x18>
 80a5b9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5ba0:	ea92 0f0c 	teq	r2, ip
 80a5ba4:	bf18      	it	ne
 80a5ba6:	ea93 0f0c 	teqne	r3, ip
 80a5baa:	d00a      	beq.n	80a5bc2 <__aeabi_fmul+0x11e>
 80a5bac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5bb0:	bf18      	it	ne
 80a5bb2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5bb6:	d1d8      	bne.n	80a5b6a <__aeabi_fmul+0xc6>
 80a5bb8:	ea80 0001 	eor.w	r0, r0, r1
 80a5bbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5bc0:	4770      	bx	lr
 80a5bc2:	f090 0f00 	teq	r0, #0
 80a5bc6:	bf17      	itett	ne
 80a5bc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5bcc:	4608      	moveq	r0, r1
 80a5bce:	f091 0f00 	teqne	r1, #0
 80a5bd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5bd6:	d014      	beq.n	80a5c02 <__aeabi_fmul+0x15e>
 80a5bd8:	ea92 0f0c 	teq	r2, ip
 80a5bdc:	d101      	bne.n	80a5be2 <__aeabi_fmul+0x13e>
 80a5bde:	0242      	lsls	r2, r0, #9
 80a5be0:	d10f      	bne.n	80a5c02 <__aeabi_fmul+0x15e>
 80a5be2:	ea93 0f0c 	teq	r3, ip
 80a5be6:	d103      	bne.n	80a5bf0 <__aeabi_fmul+0x14c>
 80a5be8:	024b      	lsls	r3, r1, #9
 80a5bea:	bf18      	it	ne
 80a5bec:	4608      	movne	r0, r1
 80a5bee:	d108      	bne.n	80a5c02 <__aeabi_fmul+0x15e>
 80a5bf0:	ea80 0001 	eor.w	r0, r0, r1
 80a5bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5bf8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5bfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5c00:	4770      	bx	lr
 80a5c02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5c06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5c0a:	4770      	bx	lr

080a5c0c <__aeabi_fdiv>:
 80a5c0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5c10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5c14:	bf1e      	ittt	ne
 80a5c16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5c1a:	ea92 0f0c 	teqne	r2, ip
 80a5c1e:	ea93 0f0c 	teqne	r3, ip
 80a5c22:	d069      	beq.n	80a5cf8 <__aeabi_fdiv+0xec>
 80a5c24:	eba2 0203 	sub.w	r2, r2, r3
 80a5c28:	ea80 0c01 	eor.w	ip, r0, r1
 80a5c2c:	0249      	lsls	r1, r1, #9
 80a5c2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5c32:	d037      	beq.n	80a5ca4 <__aeabi_fdiv+0x98>
 80a5c34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5c38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5c3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5c40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5c44:	428b      	cmp	r3, r1
 80a5c46:	bf38      	it	cc
 80a5c48:	005b      	lslcc	r3, r3, #1
 80a5c4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5c4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5c52:	428b      	cmp	r3, r1
 80a5c54:	bf24      	itt	cs
 80a5c56:	1a5b      	subcs	r3, r3, r1
 80a5c58:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5c5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5c60:	bf24      	itt	cs
 80a5c62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5c66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5c6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5c6e:	bf24      	itt	cs
 80a5c70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5c74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5c78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5c7c:	bf24      	itt	cs
 80a5c7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5c82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5c86:	011b      	lsls	r3, r3, #4
 80a5c88:	bf18      	it	ne
 80a5c8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5c8e:	d1e0      	bne.n	80a5c52 <__aeabi_fdiv+0x46>
 80a5c90:	2afd      	cmp	r2, #253	; 0xfd
 80a5c92:	f63f af50 	bhi.w	80a5b36 <__aeabi_fmul+0x92>
 80a5c96:	428b      	cmp	r3, r1
 80a5c98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5c9c:	bf08      	it	eq
 80a5c9e:	f020 0001 	biceq.w	r0, r0, #1
 80a5ca2:	4770      	bx	lr
 80a5ca4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5ca8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5cac:	327f      	adds	r2, #127	; 0x7f
 80a5cae:	bfc2      	ittt	gt
 80a5cb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5cb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5cb8:	4770      	bxgt	lr
 80a5cba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5cbe:	f04f 0300 	mov.w	r3, #0
 80a5cc2:	3a01      	subs	r2, #1
 80a5cc4:	e737      	b.n	80a5b36 <__aeabi_fmul+0x92>
 80a5cc6:	f092 0f00 	teq	r2, #0
 80a5cca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5cce:	bf02      	ittt	eq
 80a5cd0:	0040      	lsleq	r0, r0, #1
 80a5cd2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5cd6:	3a01      	subeq	r2, #1
 80a5cd8:	d0f9      	beq.n	80a5cce <__aeabi_fdiv+0xc2>
 80a5cda:	ea40 000c 	orr.w	r0, r0, ip
 80a5cde:	f093 0f00 	teq	r3, #0
 80a5ce2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5ce6:	bf02      	ittt	eq
 80a5ce8:	0049      	lsleq	r1, r1, #1
 80a5cea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5cee:	3b01      	subeq	r3, #1
 80a5cf0:	d0f9      	beq.n	80a5ce6 <__aeabi_fdiv+0xda>
 80a5cf2:	ea41 010c 	orr.w	r1, r1, ip
 80a5cf6:	e795      	b.n	80a5c24 <__aeabi_fdiv+0x18>
 80a5cf8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5cfc:	ea92 0f0c 	teq	r2, ip
 80a5d00:	d108      	bne.n	80a5d14 <__aeabi_fdiv+0x108>
 80a5d02:	0242      	lsls	r2, r0, #9
 80a5d04:	f47f af7d 	bne.w	80a5c02 <__aeabi_fmul+0x15e>
 80a5d08:	ea93 0f0c 	teq	r3, ip
 80a5d0c:	f47f af70 	bne.w	80a5bf0 <__aeabi_fmul+0x14c>
 80a5d10:	4608      	mov	r0, r1
 80a5d12:	e776      	b.n	80a5c02 <__aeabi_fmul+0x15e>
 80a5d14:	ea93 0f0c 	teq	r3, ip
 80a5d18:	d104      	bne.n	80a5d24 <__aeabi_fdiv+0x118>
 80a5d1a:	024b      	lsls	r3, r1, #9
 80a5d1c:	f43f af4c 	beq.w	80a5bb8 <__aeabi_fmul+0x114>
 80a5d20:	4608      	mov	r0, r1
 80a5d22:	e76e      	b.n	80a5c02 <__aeabi_fmul+0x15e>
 80a5d24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5d28:	bf18      	it	ne
 80a5d2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5d2e:	d1ca      	bne.n	80a5cc6 <__aeabi_fdiv+0xba>
 80a5d30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a5d34:	f47f af5c 	bne.w	80a5bf0 <__aeabi_fmul+0x14c>
 80a5d38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a5d3c:	f47f af3c 	bne.w	80a5bb8 <__aeabi_fmul+0x114>
 80a5d40:	e75f      	b.n	80a5c02 <__aeabi_fmul+0x15e>
 80a5d42:	bf00      	nop

080a5d44 <__gesf2>:
 80a5d44:	f04f 3cff 	mov.w	ip, #4294967295
 80a5d48:	e006      	b.n	80a5d58 <__cmpsf2+0x4>
 80a5d4a:	bf00      	nop

080a5d4c <__lesf2>:
 80a5d4c:	f04f 0c01 	mov.w	ip, #1
 80a5d50:	e002      	b.n	80a5d58 <__cmpsf2+0x4>
 80a5d52:	bf00      	nop

080a5d54 <__cmpsf2>:
 80a5d54:	f04f 0c01 	mov.w	ip, #1
 80a5d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5d5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5d60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5d64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5d68:	bf18      	it	ne
 80a5d6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5d6e:	d011      	beq.n	80a5d94 <__cmpsf2+0x40>
 80a5d70:	b001      	add	sp, #4
 80a5d72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a5d76:	bf18      	it	ne
 80a5d78:	ea90 0f01 	teqne	r0, r1
 80a5d7c:	bf58      	it	pl
 80a5d7e:	ebb2 0003 	subspl.w	r0, r2, r3
 80a5d82:	bf88      	it	hi
 80a5d84:	17c8      	asrhi	r0, r1, #31
 80a5d86:	bf38      	it	cc
 80a5d88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a5d8c:	bf18      	it	ne
 80a5d8e:	f040 0001 	orrne.w	r0, r0, #1
 80a5d92:	4770      	bx	lr
 80a5d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5d98:	d102      	bne.n	80a5da0 <__cmpsf2+0x4c>
 80a5d9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5d9e:	d105      	bne.n	80a5dac <__cmpsf2+0x58>
 80a5da0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5da4:	d1e4      	bne.n	80a5d70 <__cmpsf2+0x1c>
 80a5da6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5daa:	d0e1      	beq.n	80a5d70 <__cmpsf2+0x1c>
 80a5dac:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a5db0:	4770      	bx	lr
 80a5db2:	bf00      	nop

080a5db4 <__aeabi_cfrcmple>:
 80a5db4:	4684      	mov	ip, r0
 80a5db6:	4608      	mov	r0, r1
 80a5db8:	4661      	mov	r1, ip
 80a5dba:	e7ff      	b.n	80a5dbc <__aeabi_cfcmpeq>

080a5dbc <__aeabi_cfcmpeq>:
 80a5dbc:	b50f      	push	{r0, r1, r2, r3, lr}
 80a5dbe:	f7ff ffc9 	bl	80a5d54 <__cmpsf2>
 80a5dc2:	2800      	cmp	r0, #0
 80a5dc4:	bf48      	it	mi
 80a5dc6:	f110 0f00 	cmnmi.w	r0, #0
 80a5dca:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a5dcc <__aeabi_fcmpeq>:
 80a5dcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5dd0:	f7ff fff4 	bl	80a5dbc <__aeabi_cfcmpeq>
 80a5dd4:	bf0c      	ite	eq
 80a5dd6:	2001      	moveq	r0, #1
 80a5dd8:	2000      	movne	r0, #0
 80a5dda:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5dde:	bf00      	nop

080a5de0 <__aeabi_fcmplt>:
 80a5de0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5de4:	f7ff ffea 	bl	80a5dbc <__aeabi_cfcmpeq>
 80a5de8:	bf34      	ite	cc
 80a5dea:	2001      	movcc	r0, #1
 80a5dec:	2000      	movcs	r0, #0
 80a5dee:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5df2:	bf00      	nop

080a5df4 <__aeabi_fcmple>:
 80a5df4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5df8:	f7ff ffe0 	bl	80a5dbc <__aeabi_cfcmpeq>
 80a5dfc:	bf94      	ite	ls
 80a5dfe:	2001      	movls	r0, #1
 80a5e00:	2000      	movhi	r0, #0
 80a5e02:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5e06:	bf00      	nop

080a5e08 <__aeabi_fcmpge>:
 80a5e08:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5e0c:	f7ff ffd2 	bl	80a5db4 <__aeabi_cfrcmple>
 80a5e10:	bf94      	ite	ls
 80a5e12:	2001      	movls	r0, #1
 80a5e14:	2000      	movhi	r0, #0
 80a5e16:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5e1a:	bf00      	nop

080a5e1c <__aeabi_fcmpgt>:
 80a5e1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5e20:	f7ff ffc8 	bl	80a5db4 <__aeabi_cfrcmple>
 80a5e24:	bf34      	ite	cc
 80a5e26:	2001      	movcc	r0, #1
 80a5e28:	2000      	movcs	r0, #0
 80a5e2a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5e2e:	bf00      	nop

080a5e30 <__aeabi_fcmpun>:
 80a5e30:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a5e34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5e38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5e3c:	d102      	bne.n	80a5e44 <__aeabi_fcmpun+0x14>
 80a5e3e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a5e42:	d108      	bne.n	80a5e56 <__aeabi_fcmpun+0x26>
 80a5e44:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a5e48:	d102      	bne.n	80a5e50 <__aeabi_fcmpun+0x20>
 80a5e4a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a5e4e:	d102      	bne.n	80a5e56 <__aeabi_fcmpun+0x26>
 80a5e50:	f04f 0000 	mov.w	r0, #0
 80a5e54:	4770      	bx	lr
 80a5e56:	f04f 0001 	mov.w	r0, #1
 80a5e5a:	4770      	bx	lr

080a5e5c <atol>:
 80a5e5c:	220a      	movs	r2, #10
 80a5e5e:	2100      	movs	r1, #0
 80a5e60:	f000 b906 	b.w	80a6070 <strtol>

080a5e64 <__cxa_atexit>:
 80a5e64:	b510      	push	{r4, lr}
 80a5e66:	4c05      	ldr	r4, [pc, #20]	; (80a5e7c <__cxa_atexit+0x18>)
 80a5e68:	4613      	mov	r3, r2
 80a5e6a:	b12c      	cbz	r4, 80a5e78 <__cxa_atexit+0x14>
 80a5e6c:	460a      	mov	r2, r1
 80a5e6e:	4601      	mov	r1, r0
 80a5e70:	2002      	movs	r0, #2
 80a5e72:	f3af 8000 	nop.w
 80a5e76:	bd10      	pop	{r4, pc}
 80a5e78:	4620      	mov	r0, r4
 80a5e7a:	bd10      	pop	{r4, pc}
 80a5e7c:	00000000 	.word	0x00000000

080a5e80 <memcpy>:
 80a5e80:	b510      	push	{r4, lr}
 80a5e82:	1e43      	subs	r3, r0, #1
 80a5e84:	440a      	add	r2, r1
 80a5e86:	4291      	cmp	r1, r2
 80a5e88:	d004      	beq.n	80a5e94 <memcpy+0x14>
 80a5e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a5e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a5e92:	e7f8      	b.n	80a5e86 <memcpy+0x6>
 80a5e94:	bd10      	pop	{r4, pc}

080a5e96 <memset>:
 80a5e96:	4603      	mov	r3, r0
 80a5e98:	4402      	add	r2, r0
 80a5e9a:	4293      	cmp	r3, r2
 80a5e9c:	d002      	beq.n	80a5ea4 <memset+0xe>
 80a5e9e:	f803 1b01 	strb.w	r1, [r3], #1
 80a5ea2:	e7fa      	b.n	80a5e9a <memset+0x4>
 80a5ea4:	4770      	bx	lr
	...

080a5ea8 <srand>:
 80a5ea8:	b538      	push	{r3, r4, r5, lr}
 80a5eaa:	4b12      	ldr	r3, [pc, #72]	; (80a5ef4 <srand+0x4c>)
 80a5eac:	4605      	mov	r5, r0
 80a5eae:	681c      	ldr	r4, [r3, #0]
 80a5eb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5eb2:	b9d3      	cbnz	r3, 80a5eea <srand+0x42>
 80a5eb4:	2018      	movs	r0, #24
 80a5eb6:	f7fc fe09 	bl	80a2acc <malloc>
 80a5eba:	f243 330e 	movw	r3, #13070	; 0x330e
 80a5ebe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a5ec0:	8003      	strh	r3, [r0, #0]
 80a5ec2:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a5ec6:	8043      	strh	r3, [r0, #2]
 80a5ec8:	f241 2334 	movw	r3, #4660	; 0x1234
 80a5ecc:	8083      	strh	r3, [r0, #4]
 80a5ece:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a5ed2:	80c3      	strh	r3, [r0, #6]
 80a5ed4:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a5ed8:	8103      	strh	r3, [r0, #8]
 80a5eda:	2305      	movs	r3, #5
 80a5edc:	8143      	strh	r3, [r0, #10]
 80a5ede:	230b      	movs	r3, #11
 80a5ee0:	8183      	strh	r3, [r0, #12]
 80a5ee2:	2201      	movs	r2, #1
 80a5ee4:	2300      	movs	r3, #0
 80a5ee6:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a5eea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a5eec:	2200      	movs	r2, #0
 80a5eee:	611d      	str	r5, [r3, #16]
 80a5ef0:	615a      	str	r2, [r3, #20]
 80a5ef2:	bd38      	pop	{r3, r4, r5, pc}
 80a5ef4:	200000a0 	.word	0x200000a0

080a5ef8 <strcmp>:
 80a5ef8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a5efc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a5f00:	2a01      	cmp	r2, #1
 80a5f02:	bf28      	it	cs
 80a5f04:	429a      	cmpcs	r2, r3
 80a5f06:	d0f7      	beq.n	80a5ef8 <strcmp>
 80a5f08:	1ad0      	subs	r0, r2, r3
 80a5f0a:	4770      	bx	lr

080a5f0c <strcpy>:
 80a5f0c:	4603      	mov	r3, r0
 80a5f0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a5f12:	f803 2b01 	strb.w	r2, [r3], #1
 80a5f16:	2a00      	cmp	r2, #0
 80a5f18:	d1f9      	bne.n	80a5f0e <strcpy+0x2>
 80a5f1a:	4770      	bx	lr

080a5f1c <strdup>:
 80a5f1c:	4b02      	ldr	r3, [pc, #8]	; (80a5f28 <strdup+0xc>)
 80a5f1e:	4601      	mov	r1, r0
 80a5f20:	6818      	ldr	r0, [r3, #0]
 80a5f22:	f000 b803 	b.w	80a5f2c <_strdup_r>
 80a5f26:	bf00      	nop
 80a5f28:	200000a0 	.word	0x200000a0

080a5f2c <_strdup_r>:
 80a5f2c:	b570      	push	{r4, r5, r6, lr}
 80a5f2e:	4606      	mov	r6, r0
 80a5f30:	4608      	mov	r0, r1
 80a5f32:	460c      	mov	r4, r1
 80a5f34:	f000 f80d 	bl	80a5f52 <strlen>
 80a5f38:	1c45      	adds	r5, r0, #1
 80a5f3a:	4629      	mov	r1, r5
 80a5f3c:	4630      	mov	r0, r6
 80a5f3e:	f7fc fdf5 	bl	80a2b2c <_malloc_r>
 80a5f42:	4606      	mov	r6, r0
 80a5f44:	b118      	cbz	r0, 80a5f4e <_strdup_r+0x22>
 80a5f46:	462a      	mov	r2, r5
 80a5f48:	4621      	mov	r1, r4
 80a5f4a:	f7ff ff99 	bl	80a5e80 <memcpy>
 80a5f4e:	4630      	mov	r0, r6
 80a5f50:	bd70      	pop	{r4, r5, r6, pc}

080a5f52 <strlen>:
 80a5f52:	4603      	mov	r3, r0
 80a5f54:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a5f58:	2a00      	cmp	r2, #0
 80a5f5a:	d1fb      	bne.n	80a5f54 <strlen+0x2>
 80a5f5c:	1a18      	subs	r0, r3, r0
 80a5f5e:	3801      	subs	r0, #1
 80a5f60:	4770      	bx	lr
	...

080a5f64 <_strtol_r>:
 80a5f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a5f68:	460f      	mov	r7, r1
 80a5f6a:	4680      	mov	r8, r0
 80a5f6c:	483f      	ldr	r0, [pc, #252]	; (80a606c <_strtol_r+0x108>)
 80a5f6e:	f8d0 9000 	ldr.w	r9, [r0]
 80a5f72:	463d      	mov	r5, r7
 80a5f74:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a5f78:	eb09 0004 	add.w	r0, r9, r4
 80a5f7c:	7840      	ldrb	r0, [r0, #1]
 80a5f7e:	f000 0008 	and.w	r0, r0, #8
 80a5f82:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a5f86:	b108      	cbz	r0, 80a5f8c <_strtol_r+0x28>
 80a5f88:	462f      	mov	r7, r5
 80a5f8a:	e7f2      	b.n	80a5f72 <_strtol_r+0xe>
 80a5f8c:	2c2d      	cmp	r4, #45	; 0x2d
 80a5f8e:	d103      	bne.n	80a5f98 <_strtol_r+0x34>
 80a5f90:	1cbd      	adds	r5, r7, #2
 80a5f92:	787c      	ldrb	r4, [r7, #1]
 80a5f94:	2601      	movs	r6, #1
 80a5f96:	e003      	b.n	80a5fa0 <_strtol_r+0x3c>
 80a5f98:	2c2b      	cmp	r4, #43	; 0x2b
 80a5f9a:	bf04      	itt	eq
 80a5f9c:	787c      	ldrbeq	r4, [r7, #1]
 80a5f9e:	1cbd      	addeq	r5, r7, #2
 80a5fa0:	b113      	cbz	r3, 80a5fa8 <_strtol_r+0x44>
 80a5fa2:	2b10      	cmp	r3, #16
 80a5fa4:	d10a      	bne.n	80a5fbc <_strtol_r+0x58>
 80a5fa6:	e05b      	b.n	80a6060 <_strtol_r+0xfc>
 80a5fa8:	2c30      	cmp	r4, #48	; 0x30
 80a5faa:	d157      	bne.n	80a605c <_strtol_r+0xf8>
 80a5fac:	7828      	ldrb	r0, [r5, #0]
 80a5fae:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a5fb2:	2858      	cmp	r0, #88	; 0x58
 80a5fb4:	d14d      	bne.n	80a6052 <_strtol_r+0xee>
 80a5fb6:	786c      	ldrb	r4, [r5, #1]
 80a5fb8:	2310      	movs	r3, #16
 80a5fba:	3502      	adds	r5, #2
 80a5fbc:	2e00      	cmp	r6, #0
 80a5fbe:	bf14      	ite	ne
 80a5fc0:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a5fc4:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a5fc8:	fbbc faf3 	udiv	sl, ip, r3
 80a5fcc:	2700      	movs	r7, #0
 80a5fce:	4638      	mov	r0, r7
 80a5fd0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a5fd4:	eb09 0e04 	add.w	lr, r9, r4
 80a5fd8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a5fdc:	f01e 0f04 	tst.w	lr, #4
 80a5fe0:	d001      	beq.n	80a5fe6 <_strtol_r+0x82>
 80a5fe2:	3c30      	subs	r4, #48	; 0x30
 80a5fe4:	e00b      	b.n	80a5ffe <_strtol_r+0x9a>
 80a5fe6:	f01e 0e03 	ands.w	lr, lr, #3
 80a5fea:	d01b      	beq.n	80a6024 <_strtol_r+0xc0>
 80a5fec:	f1be 0f01 	cmp.w	lr, #1
 80a5ff0:	bf0c      	ite	eq
 80a5ff2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a5ff6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a5ffa:	ebce 0404 	rsb	r4, lr, r4
 80a5ffe:	42a3      	cmp	r3, r4
 80a6000:	dd10      	ble.n	80a6024 <_strtol_r+0xc0>
 80a6002:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a6006:	d00a      	beq.n	80a601e <_strtol_r+0xba>
 80a6008:	4550      	cmp	r0, sl
 80a600a:	d806      	bhi.n	80a601a <_strtol_r+0xb6>
 80a600c:	d101      	bne.n	80a6012 <_strtol_r+0xae>
 80a600e:	4564      	cmp	r4, ip
 80a6010:	dc03      	bgt.n	80a601a <_strtol_r+0xb6>
 80a6012:	fb03 4000 	mla	r0, r3, r0, r4
 80a6016:	2701      	movs	r7, #1
 80a6018:	e001      	b.n	80a601e <_strtol_r+0xba>
 80a601a:	f04f 37ff 	mov.w	r7, #4294967295
 80a601e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6022:	e7d7      	b.n	80a5fd4 <_strtol_r+0x70>
 80a6024:	1c7b      	adds	r3, r7, #1
 80a6026:	d10c      	bne.n	80a6042 <_strtol_r+0xde>
 80a6028:	2e00      	cmp	r6, #0
 80a602a:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a602e:	bf14      	ite	ne
 80a6030:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a6034:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a6038:	f8c8 3000 	str.w	r3, [r8]
 80a603c:	b92a      	cbnz	r2, 80a604a <_strtol_r+0xe6>
 80a603e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6042:	b106      	cbz	r6, 80a6046 <_strtol_r+0xe2>
 80a6044:	4240      	negs	r0, r0
 80a6046:	b172      	cbz	r2, 80a6066 <_strtol_r+0x102>
 80a6048:	b107      	cbz	r7, 80a604c <_strtol_r+0xe8>
 80a604a:	1e69      	subs	r1, r5, #1
 80a604c:	6011      	str	r1, [r2, #0]
 80a604e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a6052:	2430      	movs	r4, #48	; 0x30
 80a6054:	2b00      	cmp	r3, #0
 80a6056:	d1b1      	bne.n	80a5fbc <_strtol_r+0x58>
 80a6058:	2308      	movs	r3, #8
 80a605a:	e7af      	b.n	80a5fbc <_strtol_r+0x58>
 80a605c:	230a      	movs	r3, #10
 80a605e:	e7ad      	b.n	80a5fbc <_strtol_r+0x58>
 80a6060:	2c30      	cmp	r4, #48	; 0x30
 80a6062:	d0a3      	beq.n	80a5fac <_strtol_r+0x48>
 80a6064:	e7aa      	b.n	80a5fbc <_strtol_r+0x58>
 80a6066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a606a:	bf00      	nop
 80a606c:	2000003c 	.word	0x2000003c

080a6070 <strtol>:
 80a6070:	4613      	mov	r3, r2
 80a6072:	460a      	mov	r2, r1
 80a6074:	4601      	mov	r1, r0
 80a6076:	4802      	ldr	r0, [pc, #8]	; (80a6080 <strtol+0x10>)
 80a6078:	6800      	ldr	r0, [r0, #0]
 80a607a:	f7ff bf73 	b.w	80a5f64 <_strtol_r>
 80a607e:	bf00      	nop
 80a6080:	200000a0 	.word	0x200000a0

080a6084 <dynalib_user>:
 80a6084:	080a0021 080a0061 080a008d 080a0091     !...a...........
 80a6094:	00000000                                ....

080a6098 <_ZL5psiFS>:
 80a6098:	00001388 0000012c 0000012c 00000000     ....,...,.......
 80a60a8:	000001f4 00000000 00000000 00000000     ................
 80a60b8:	77707061 57007464 4d005346 45545341     appwdt.WFS.MASTE
 80a60c8:	232f0052 3a002f00 32302500 00260078     R./#./.:.%02x.&.
 80a60d8:	74617473 30317375 38314400 61323242     status10.D18B22a
 80a60e8:	65726464 73657373 53465700 4e4f432f     ddresses.WFS/CON
 80a60f8:	4c4f5254 58542f31 57003156 432f5346     TROL1/TXV1.WFS/C
 80a6108:	52544e4f 2f314c4f 32565854 53465700     ONTROL1/TXV2.WFS
 80a6118:	4e4f432f 4c4f5254 61642f31 7265706d     /CONTROL1/damper
 80a6128:	00315f31 2f534657 544e4f43 314c4f52     1_1.WFS/CONTROL1
 80a6138:	6d61642f 31726570 5700325f 432f5346     /damper1_2.WFS/C
 80a6148:	52544e4f 2f314c4f 706d6164 5f327265     ONTROL1/damper2_
 80a6158:	46570031 4f432f53 4f52544e 642f314c     1.WFS/CONTROL1/d
 80a6168:	65706d61 325f3272 53465700 4e4f432f     amper2_2.WFS/CON
 80a6178:	4c4f5254 6e492f31 61697469 657a696c     TROL1/Initialize
 80a6188:	706d6554 53465700 4e4f432f 4c4f5254     Temp.WFS/CONTROL
 80a6198:	65642f31 736f7266 57003174 432f5346     1/defrost1.WFS/C
 80a61a8:	52544e4f 2f314c4f 72666564 3274736f     ONTROL1/defrost2
 80a61b8:	46454400 54534f52 45440031 534f5246     .DEFROST1.DEFROS
 80a61c8:	6f003254 666f006e 65640066 69746361     T2.on.off.deacti
 80a61d8:	65746176 676f7400 00656c67 70696c66     vate.toggle.flip
 80a61e8:	6c657200 6f007961 75707475 61620074     .relay.output.ba
 80a61f8:	61006b6e 25006c6c 2666322e 66322e25     nk.all.%.2f&%.2f
 80a6208:	322e2526 2e252666 25266632 2666322e     &%.2f&%.2f&%.2f&
 80a6218:	66322e25 322e2526 2e252666 25266632     %.2f&%.2f&%.2f&%
 80a6228:	2666322e 66322e25 322e2526 2e252666     .2f&%.2f&%.2f&%.
 80a6238:	64006632 4d455473 25005350 2666322e     2f.dsTEMPS.%.2f&
 80a6248:	66322e25 322e2526 2e252666 25266632     %.2f&%.2f&%.2f&%
 80a6258:	2666322e 26643425 26643425 26643425     .2f&%4d&%4d&%4d&
 80a6268:	26643425 26643425 00643425 705f7364     %4d&%4d&%4d.ds_p
 80a6278:	34006973 76787400 78740031 63003276     si.4.txv1.txv2.c
 80a6288:	632e6363 72617361 6e2e6169 00007465     cc.casaria.net..
 80a6298:	000000ff 000000ff 74746553 20676e69     ........Setting 
 80a62a8:	204d5750 20726f66 2044454c 6f742000     PWM for LED . to
 80a62b8:	2d200020 4100203e 6d657474 6e697470      . -> .Attemptin
 80a62c8:	6f742067 74657320 65726620 45002071     g to set freq .E
 80a62d8:	6d697473 64657461 65727020 6163732d     stimated pre-sca
 80a62e8:	203a656c 6e694600 70206c61 732d6572     le: .Final pre-s
 80a62f8:	656c6163 0000203a 54514d04 06000454     cale: ...MQTT...
 80a6308:	7349514d 00037064                       MQIsdp..

080a6310 <_ZTV8SPIClass>:
	...
 80a6318:	080a2b4d 080a2b4f                       M+..O+..

080a6320 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a6328:	080a2c97 080a2c9d 080a30b7 080a2cab     .,...,...0...,..
 80a6338:	080a2c99                                .,..

080a633c <_ZTV9TCPClient>:
	...
 80a6344:	080a1e09 080a1e3d 080a2c53 080a2c6d     ....=...S,..m,..
 80a6354:	080a2db5 080a2d1f 080a2cf1 080a2c95     .-...-...,...,..
 80a6364:	080a2e61 080a30d1 080a2d53 080a2e2d     a....0..S-..-...
 80a6374:	080a2faf 080a3001 080a2c7d 080a2f73     ./...0..},..s/..
 80a6384:	080a2cd1 69726977 5400676e 6c435043     .,..wiring.TCPCl
 80a6394:	746e6569 636f7320 3d74656b 6e007825     ient socket=%x.n
 80a63a4:	6f006e61 2e006676 666e6900 75616200     an.ovf...inf.bau
 80a63b4:	65530064 6c616972 42535500 69726553     d.Serial.USBSeri
 80a63c4:	00316c61 65707974 72617000 63006d61     al1.type.param.c
 80a63d4:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
 80a63e4:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
 80a63f4:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
 80a6404:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
 80a6414:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
 80a6424:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
 80a6434:	00642500 2800202c 00203a29 63005b20     .%d., .(): . [.c
 80a6444:	2065646f 2500203d 65640069 6c696174     ode = .%i.detail
 80a6454:	203d2073 000a0d00 66006e6c 6f63006e     s = ....ln.fn.co
 80a6464:	64006564 69617465 6f6e006c 7400656e     de.detail.none.t
 80a6474:	65636172 666e6900 6177006f 65006e72     race.info.warn.e
 80a6484:	726f7272 6e617000 5a006369 302b2500     rror.panic.Z.%+0
 80a6494:	253a6433 00753230 252d5925 64252d6d     3d:%02u.%Y-%m-%d
 80a64a4:	3a482554 253a4d25 007a2553 74637361     T%H:%M:%S%z.asct
 80a64b4:	00656d69                                ime.

080a64b8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a64c0:	080a37d5 080a37db 080a381f 080a37e9     .7...7...8...7..
 80a64d0:	080a37d7                                .7..

080a64d4 <_ZTV9IPAddress>:
	...
 80a64dc:	080a3dc5 080a3db5 080a3db7              .=...=...=..

080a64e8 <_ZTV9USBSerial>:
	...
 80a64f0:	080a3ead 080a3efd 080a3f0b 080a3359     .>...>...?..Y3..
 80a6500:	080a3ee9 080a3eaf 080a3ec5 080a3ef7     .>...>...>...>..
 80a6510:	080a3edb 080a3ea9                       .>...>..

080a6518 <_ZTV11USARTSerial>:
	...
 80a6520:	080a404d 080a409d 080a40ab 080a3359     M@...@...@..Y3..
 80a6530:	080a4061 080a4083 080a406f 080a4097     a@...@..o@...@..
 80a6540:	080a404f 080a4053                       O@..S@..

080a6548 <_ZTV7TwoWire>:
	...
 80a6550:	080a4179 080a41c3 080a419b 080a417b     yA...A...A..{A..
 80a6560:	080a41a3 080a41ab 080a41b3 080a41bb     .A...A...A...A..

080a6570 <_ZTVN5spark9WiFiClassE>:
	...
 80a6578:	080a42d3 080a42c9 080a42bf 080a423d     .B...B...B..=B..
 80a6588:	080a360d 080a42b3 080a42a7 080a429f     .6...B...B...B..
 80a6598:	080a4295 080a428b 080a4247              .B...B..GB..

080a65a4 <_ZTVN5spark12NetworkClassE>:
	...
 80a65ac:	080a42f1 080a42fb 080a4305 080a430f     .B...B...C...C..
 80a65bc:	080a4319 080a4325 080a4331 080a433d     .C..%C..1C..=C..
 80a65cc:	080a4345 080a434f 080a4359              EC..OC..YC..

080a65d8 <_ZSt7nothrow>:
 80a65d8:	00000000 00676f6c 00000000              ....log.....

080a65e4 <_ctype_>:
 80a65e4:	20202000 20202020 28282020 20282828     .         ((((( 
 80a65f4:	20202020 20202020 20202020 20202020                     
 80a6604:	10108820 10101010 10101010 10101010      ...............
 80a6614:	04040410 04040404 10040404 10101010     ................
 80a6624:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a6634:	01010101 01010101 01010101 10101010     ................
 80a6644:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a6654:	02020202 02020202 02020202 10101010     ................
 80a6664:	00000020 00000000 00000000 00000000      ...............
	...

080a66e8 <__sf_fake_stdin>:
	...

080a6708 <__sf_fake_stdout>:
	...

080a6728 <__sf_fake_stderr>:
	...
 80a6748:	00000043                                         C.

080a674a <link_const_variable_data_end>:
	...

080a674c <link_constructors_location>:
 80a674c:	080a136d 	.word	0x080a136d
 80a6750:	080a1485 	.word	0x080a1485
 80a6754:	080a17b5 	.word	0x080a17b5
 80a6758:	080a17b9 	.word	0x080a17b9
 80a675c:	080a17e9 	.word	0x080a17e9
 80a6760:	080a19e5 	.word	0x080a19e5
 80a6764:	080a1b3d 	.word	0x080a1b3d
 80a6768:	080a1e05 	.word	0x080a1e05
 80a676c:	080a25fb 	.word	0x080a25fb
 80a6770:	080a2b9d 	.word	0x080a2b9d
 80a6774:	080a3629 	.word	0x080a3629
 80a6778:	080a3639 	.word	0x080a3639
 80a677c:	080a3681 	.word	0x080a3681
 80a6780:	080a42dd 	.word	0x080a42dd
 80a6784:	080a43c1 	.word	0x080a43c1
 80a6788:	080a4471 	.word	0x080a4471
 80a678c:	080a453d 	.word	0x080a453d
 80a6790:	080a45f1 	.word	0x080a45f1
 80a6794:	080a4675 	.word	0x080a4675
 80a6798:	080a4739 	.word	0x080a4739
 80a679c:	080a47fd 	.word	0x080a47fd
