
c:/Users/casaria3/Documents/workbench/wfs-virgin/wfs-virgin/target/1.4.0/photon/wfs-virgin.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  080a0018  080a0018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006b60  080a0020  080a0020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000064  40024000  080a6b80  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000b0  20000000  080a6be4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000800  200000b0  200000b0  000400b0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a6c94  080a6c94  00036c94  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a6cbc  080a6cbc  00036cbc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00108dfc  00000000  00000000  00036cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000176a2  00000000  00000000  0013fabc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ccad  00000000  00000000  0015715e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b28  00000000  00000000  00173e0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004200  00000000  00000000  00176933  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000308af  00000000  00000000  0017ab33  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00037703  00000000  00000000  001ab3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b150c  00000000  00000000  001e2ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000dc18  00000000  00000000  00293ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0020:	4809      	ldr	r0, [pc, #36]	; (80a0048 <module_user_pre_init+0x28>)
 80a0022:	490a      	ldr	r1, [pc, #40]	; (80a004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0026:	4288      	cmp	r0, r1
 80a0028:	d005      	beq.n	80a0036 <module_user_pre_init+0x16>
 80a002a:	4a09      	ldr	r2, [pc, #36]	; (80a0050 <module_user_pre_init+0x30>)
 80a002c:	4282      	cmp	r2, r0
 80a002e:	d002      	beq.n	80a0036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a0030:	1a12      	subs	r2, r2, r0
 80a0032:	f006 f8cd 	bl	80a61d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0036:	4807      	ldr	r0, [pc, #28]	; (80a0054 <module_user_pre_init+0x34>)
 80a0038:	4a07      	ldr	r2, [pc, #28]	; (80a0058 <module_user_pre_init+0x38>)
 80a003a:	2100      	movs	r1, #0
 80a003c:	1a12      	subs	r2, r2, r0
 80a003e:	f006 f8d2 	bl	80a61e6 <memset>
    return &link_heap_start;
}
 80a0042:	4806      	ldr	r0, [pc, #24]	; (80a005c <module_user_pre_init+0x3c>)
 80a0044:	bd08      	pop	{r3, pc}
 80a0046:	bf00      	nop
 80a0048:	20000000 	.word	0x20000000
 80a004c:	080a6be4 	.word	0x080a6be4
 80a0050:	200000b0 	.word	0x200000b0
 80a0054:	200000b0 	.word	0x200000b0
 80a0058:	200008b0 	.word	0x200008b0
 80a005c:	200008b0 	.word	0x200008b0

080a0060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a0060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a0062:	f003 fd5f 	bl	80a3b24 <module_user_init_hook>
 80a0066:	4b07      	ldr	r3, [pc, #28]	; (80a0084 <module_user_init+0x24>)
 80a0068:	4c07      	ldr	r4, [pc, #28]	; (80a0088 <module_user_init+0x28>)
 80a006a:	461e      	mov	r6, r3
 80a006c:	1ae4      	subs	r4, r4, r3
 80a006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0070:	2500      	movs	r5, #0
 80a0072:	42a5      	cmp	r5, r4
 80a0074:	d004      	beq.n	80a0080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a007c:	3501      	adds	r5, #1
 80a007e:	e7f8      	b.n	80a0072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a0080:	bd70      	pop	{r4, r5, r6, pc}
 80a0082:	bf00      	nop
 80a0084:	080a6b20 	.word	0x080a6b20
 80a0088:	080a6b74 	.word	0x080a6b74

080a008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a008c:	f000 bf24 	b.w	80a0ed8 <setup>

080a0090 <module_user_loop>:
}

void module_user_loop() {
 80a0090:	b508      	push	{r3, lr}
    loop();
 80a0092:	f001 f91d 	bl	80a12d0 <loop>
    _post_loop();
}
 80a0096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a009a:	f003 bd05 	b.w	80a3aa8 <_post_loop>

080a009e <_Znwj>:
 80a009e:	f002 bee1 	b.w	80a2e64 <malloc>

080a00a2 <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 80a00a2:	f002 bedf 	b.w	80a2e64 <malloc>

080a00a6 <_ZdlPv>:
 80a00a6:	f002 bee5 	b.w	80a2e74 <free>

080a00aa <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80a00aa:	f002 bee3 	b.w	80a2e74 <free>

080a00ae <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00ae:	7800      	ldrb	r0, [r0, #0]
 80a00b0:	fab0 f080 	clz	r0, r0
 80a00b4:	0940      	lsrs	r0, r0, #5
 80a00b6:	4770      	bx	lr

080a00b8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00b8:	2301      	movs	r3, #1
 80a00ba:	7003      	strb	r3, [r0, #0]
 80a00bc:	4770      	bx	lr

080a00be <_Z12qoscallback1j>:



// QOS ack callback.
// if application use QOS1 or QOS2, MQTT server sendback ack message id.
void qoscallback1(unsigned int messageid) {
 80a00be:	4770      	bx	lr

080a00c0 <_ZNSt17_Function_handlerIFvvEPS0_E9_M_invokeERKSt9_Any_data>:

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
 80a00c0:	6803      	ldr	r3, [r0, #0]
 80a00c2:	4718      	bx	r3

080a00c4 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a00c4:	2a01      	cmp	r2, #1
 80a00c6:	d002      	beq.n	80a00ce <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xa>
 80a00c8:	2a02      	cmp	r2, #2
 80a00ca:	d002      	beq.n	80a00d2 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0xe>
 80a00cc:	e004      	b.n	80a00d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a00ce:	6001      	str	r1, [r0, #0]
	      break;
 80a00d0:	e002      	b.n	80a00d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
	// Clone a location-invariant function object that fits within
	// an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
	{
	  new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80a00d2:	680b      	ldr	r3, [r1, #0]
 80a00d4:	b100      	cbz	r0, 80a00d8 <_ZNSt14_Function_base13_Base_managerIPFvvEE10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x14>
 80a00d6:	6003      	str	r3, [r0, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a00d8:	2000      	movs	r0, #0
 80a00da:	4770      	bx	lr

080a00dc <__tcf_0>:


const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo[nSENSORS]; //[(1 * nSENSORS)+1];
 80a00dc:	b538      	push	{r3, r4, r5, lr}
 80a00de:	4d06      	ldr	r5, [pc, #24]	; (80a00f8 <__tcf_0+0x1c>)
 80a00e0:	2400      	movs	r4, #0
 80a00e2:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80a00e6:	4428      	add	r0, r5
 80a00e8:	3c10      	subs	r4, #16
 80a00ea:	f003 f9f3 	bl	80a34d4 <_ZN6StringD1Ev>
 80a00ee:	f114 0fc0 	cmn.w	r4, #192	; 0xc0
 80a00f2:	d1f6      	bne.n	80a00e2 <__tcf_0+0x6>
 80a00f4:	bd38      	pop	{r3, r4, r5, pc}
 80a00f6:	bf00      	nop
 80a00f8:	200001d4 	.word	0x200001d4

080a00fc <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a00fc:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
 80a00fe:	2301      	movs	r3, #1
 80a0100:	7403      	strb	r3, [r0, #16]
        if (th->func) {
 80a0102:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
 80a0104:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
 80a0106:	b10b      	cbz	r3, 80a010c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
 80a0108:	68c0      	ldr	r0, [r0, #12]
 80a010a:	e006      	b.n	80a011a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a010c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
 80a010e:	b128      	cbz	r0, 80a011c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0110:	6883      	ldr	r3, [r0, #8]
 80a0112:	b90b      	cbnz	r3, 80a0118 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
 80a0114:	f004 fc11 	bl	80a493a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0118:	68c3      	ldr	r3, [r0, #12]
 80a011a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
 80a011c:	2301      	movs	r3, #1
 80a011e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
 80a0120:	2000      	movs	r0, #0
    }
 80a0122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
 80a0126:	f002 bcd7 	b.w	80a2ad8 <os_thread_exit>

080a012a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a012a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a012c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a012e:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0130:	b113      	cbz	r3, 80a0138 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0132:	2203      	movs	r2, #3
 80a0134:	4601      	mov	r1, r0
 80a0136:	4798      	blx	r3
    }
 80a0138:	4620      	mov	r0, r4
 80a013a:	bd10      	pop	{r4, pc}

080a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.12>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
 80a013c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a013e:	4604      	mov	r4, r0
 80a0140:	b170      	cbz	r0, 80a0160 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.12+0x24>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a0142:	6805      	ldr	r5, [r0, #0]
 80a0144:	b135      	cbz	r5, 80a0154 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.12+0x18>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0146:	4628      	mov	r0, r5
 80a0148:	f7ff ffef 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a014c:	2110      	movs	r1, #16
 80a014e:	4628      	mov	r0, r5
 80a0150:	f004 fbe2 	bl	80a4918 <_ZdlPvj>
 80a0154:	4620      	mov	r0, r4
      }
 80a0156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
 80a015a:	2114      	movs	r1, #20
 80a015c:	f004 bbdc 	b.w	80a4918 <_ZdlPvj>
 80a0160:	bd38      	pop	{r3, r4, r5, pc}

080a0162 <_ZN19ApplicationWatchdogD1Ev>:
#include "timer_hal.h"

#if PLATFORM_THREADING


class ApplicationWatchdog
 80a0162:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0164:	6943      	ldr	r3, [r0, #20]
 80a0166:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
 80a0168:	b1bb      	cbz	r3, 80a019a <_ZN19ApplicationWatchdogD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
 80a016a:	6858      	ldr	r0, [r3, #4]
 80a016c:	f002 fc94 	bl	80a2a98 <os_thread_is_current>
 80a0170:	b978      	cbnz	r0, 80a0192 <_ZN19ApplicationWatchdogD1Ev+0x30>
 80a0172:	6963      	ldr	r3, [r4, #20]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
 80a0174:	7c5a      	ldrb	r2, [r3, #17]
 80a0176:	b912      	cbnz	r2, 80a017e <_ZN19ApplicationWatchdogD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
 80a0178:	6858      	ldr	r0, [r3, #4]
 80a017a:	f002 fc95 	bl	80a2aa8 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
 80a017e:	6963      	ldr	r3, [r4, #20]
 80a0180:	6858      	ldr	r0, [r3, #4]
 80a0182:	f002 fc99 	bl	80a2ab8 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0186:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a0188:	2300      	movs	r3, #0
 80a018a:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a018c:	b128      	cbz	r0, 80a019a <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__p);
 80a018e:	f7ff ffd5 	bl	80a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.12>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
 80a0192:	6960      	ldr	r0, [r4, #20]
 80a0194:	b108      	cbz	r0, 80a019a <_ZN19ApplicationWatchdogD1Ev+0x38>
	  get_deleter()(__ptr);
 80a0196:	f7ff ffd1 	bl	80a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.12>
 80a019a:	1d20      	adds	r0, r4, #4
 80a019c:	f7ff ffc5 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a01a0:	4620      	mov	r0, r4
 80a01a2:	bd10      	pop	{r4, pc}

080a01a4 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 80a01a4:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a01a6:	f002 fc47 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a01aa:	4b01      	ldr	r3, [pc, #4]	; (80a01b0 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 80a01ac:	6018      	str	r0, [r3, #0]
 80a01ae:	bd08      	pop	{r3, pc}
 80a01b0:	200007d8 	.word	0x200007d8

080a01b4 <_ZN19ApplicationWatchdogC1EjPFvvEj>:
		checkin();
	}

    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
 80a01b4:	b530      	push	{r4, r5, lr}
 80a01b6:	461d      	mov	r5, r3
 80a01b8:	b087      	sub	sp, #28
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a01ba:	2300      	movs	r3, #0
 80a01bc:	4604      	mov	r4, r0
 80a01be:	9304      	str	r3, [sp, #16]
      function(_Functor __f)
      : _Function_base()
      {
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
 80a01c0:	b122      	cbz	r2, 80a01cc <_ZN19ApplicationWatchdogC1EjPFvvEj+0x18>
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a01c2:	4b21      	ldr	r3, [pc, #132]	; (80a0248 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x94>)
	  { return true; }

      private:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }
 80a01c4:	9202      	str	r2, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a01c6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a01c8:	4b20      	ldr	r3, [pc, #128]	; (80a024c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x98>)
 80a01ca:	9304      	str	r3, [sp, #16]
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a01cc:	2300      	movs	r3, #0
 80a01ce:	60e3      	str	r3, [r4, #12]
 80a01d0:	9b04      	ldr	r3, [sp, #16]
    static const unsigned DEFAULT_STACK_SIZE = 512;

	ApplicationWatchdog(unsigned timeout_ms, std::function<void(void)> fn, unsigned stack_size=DEFAULT_STACK_SIZE) :
		timeout(timeout_ms),
		timeout_fn(fn),
		thread("appwdt", start, this, OS_THREAD_PRIORITY_CRITICAL, stack_size)
 80a01d2:	6021      	str	r1, [r4, #0]
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a01d4:	b13b      	cbz	r3, 80a01e6 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x32>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a01d6:	2202      	movs	r2, #2
 80a01d8:	a902      	add	r1, sp, #8
 80a01da:	1d20      	adds	r0, r4, #4
 80a01dc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a01de:	9b05      	ldr	r3, [sp, #20]
 80a01e0:	6123      	str	r3, [r4, #16]
	  _M_manager = __x._M_manager;
 80a01e2:	9b04      	ldr	r3, [sp, #16]
 80a01e4:	60e3      	str	r3, [r4, #12]
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
 80a01e6:	491a      	ldr	r1, [pc, #104]	; (80a0250 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x9c>)
 80a01e8:	2014      	movs	r0, #20
 80a01ea:	f004 fb97 	bl	80a491c <_ZnwjRKSt9nothrow_t>
 80a01ee:	b130      	cbz	r0, 80a01fe <_ZN19ApplicationWatchdogC1EjPFvvEj+0x4a>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80a01f0:	2300      	movs	r3, #0
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
 80a01f2:	7403      	strb	r3, [r0, #16]
 80a01f4:	6003      	str	r3, [r0, #0]
 80a01f6:	6043      	str	r3, [r0, #4]
 80a01f8:	6083      	str	r3, [r0, #8]
 80a01fa:	60c3      	str	r3, [r0, #12]
 80a01fc:	7443      	strb	r3, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a01fe:	6160      	str	r0, [r4, #20]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
 80a0200:	b1a0      	cbz	r0, 80a022c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
            goto error;
        }
        d_->func = function;
 80a0202:	4b14      	ldr	r3, [pc, #80]	; (80a0254 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa0>)
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0204:	2209      	movs	r2, #9
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
 80a0206:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
 80a0208:	6963      	ldr	r3, [r4, #20]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a020a:	4913      	ldr	r1, [pc, #76]	; (80a0258 <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
 80a020c:	60dc      	str	r4, [r3, #12]
 80a020e:	6960      	ldr	r0, [r4, #20]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
 80a0210:	4b12      	ldr	r3, [pc, #72]	; (80a025c <_ZN19ApplicationWatchdogC1EjPFvvEj+0xa8>)
 80a0212:	e88d 0021 	stmia.w	sp, {r0, r5}
 80a0216:	3004      	adds	r0, #4
 80a0218:	f002 fc36 	bl	80a2a88 <os_thread_create>
 80a021c:	b930      	cbnz	r0, 80a022c <_ZN19ApplicationWatchdogC1EjPFvvEj+0x78>
 80a021e:	6963      	ldr	r3, [r4, #20]
            goto error;
        }
        while (!d_->started) {
 80a0220:	7c1b      	ldrb	r3, [r3, #16]
 80a0222:	b94b      	cbnz	r3, 80a0238 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
 80a0224:	2001      	movs	r0, #1
 80a0226:	f002 fbf7 	bl	80a2a18 <HAL_Delay_Milliseconds>
 80a022a:	e7f8      	b.n	80a021e <_ZN19ApplicationWatchdogC1EjPFvvEj+0x6a>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a022c:	6960      	ldr	r0, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a022e:	2300      	movs	r3, #0
 80a0230:	6163      	str	r3, [r4, #20]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
 80a0232:	b108      	cbz	r0, 80a0238 <_ZN19ApplicationWatchdogC1EjPFvvEj+0x84>
	  get_deleter()(__p);
 80a0234:	f7ff ff82 	bl	80a013c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.12>
	{
		checkin();
 80a0238:	f7ff ffb4 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a023c:	a802      	add	r0, sp, #8
 80a023e:	f7ff ff74 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
    // This constuctor helps to resolve overloaded function types, such as System.reset(), which is not always
    // possible in case of std::function
    ApplicationWatchdog(unsigned timeout_ms, void (*fn)(), unsigned stack_size=DEFAULT_STACK_SIZE) :
        ApplicationWatchdog(timeout_ms, std::function<void()>(fn), stack_size)
    {
    }
 80a0242:	4620      	mov	r0, r4
 80a0244:	b007      	add	sp, #28
 80a0246:	bd30      	pop	{r4, r5, pc}
 80a0248:	080a00c1 	.word	0x080a00c1
 80a024c:	080a00c5 	.word	0x080a00c5
 80a0250:	080a69ac 	.word	0x080a69ac
 80a0254:	080a487d 	.word	0x080a487d
 80a0258:	080a642c 	.word	0x080a642c
 80a025c:	080a00fd 	.word	0x080a00fd

080a0260 <_Z12MQTTConnect1v>:

  //Particle.publish("TOPIC", String(topic));
}
  

void MQTTConnect1(){
 80a0260:	b500      	push	{lr}
// connect to the server
 digitalWrite(MQTT_LED, LOW);
 80a0262:	2100      	movs	r1, #0

  //Particle.publish("TOPIC", String(topic));
}
  

void MQTTConnect1(){
 80a0264:	b08d      	sub	sp, #52	; 0x34
// connect to the server
 digitalWrite(MQTT_LED, LOW);
 80a0266:	2007      	movs	r0, #7
 80a0268:	f004 fa91 	bl	80a478e <digitalWrite>
 wd.checkin();
 80a026c:	f7ff ff9a 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
 MQTTclient1.connect(String(SubscribeTopic)+String(UNIT));
 80a0270:	4921      	ldr	r1, [pc, #132]	; (80a02f8 <_Z12MQTTConnect1v+0x98>)
 80a0272:	4668      	mov	r0, sp
 80a0274:	f003 f975 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0278:	4669      	mov	r1, sp
 80a027a:	a808      	add	r0, sp, #32
 80a027c:	f003 f993 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a0280:	491e      	ldr	r1, [pc, #120]	; (80a02fc <_Z12MQTTConnect1v+0x9c>)
 80a0282:	a804      	add	r0, sp, #16
 80a0284:	f003 f96d 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0288:	a904      	add	r1, sp, #16
 80a028a:	a808      	add	r0, sp, #32
 80a028c:	f003 f9d5 	bl	80a363a <_ZplRK15StringSumHelperRK6String>
 80a0290:	6801      	ldr	r1, [r0, #0]
 80a0292:	481b      	ldr	r0, [pc, #108]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a0294:	f002 f988 	bl	80a25a8 <_ZN4MQTT7connectEPKc>
 80a0298:	a804      	add	r0, sp, #16
 80a029a:	f003 f91b 	bl	80a34d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a029e:	a808      	add	r0, sp, #32
 80a02a0:	f003 f918 	bl	80a34d4 <_ZN6StringD1Ev>
 80a02a4:	4668      	mov	r0, sp
 80a02a6:	f003 f915 	bl	80a34d4 <_ZN6StringD1Ev>
  // add qos callback. If don't add qoscallback, ACK message from MQTT server is ignored.
 MQTTclient1.addQosCallback(qoscallback1);
 80a02aa:	4815      	ldr	r0, [pc, #84]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a02ac:	4915      	ldr	r1, [pc, #84]	; (80a0304 <_Z12MQTTConnect1v+0xa4>)
 80a02ae:	f001 ffcf 	bl	80a2250 <_ZN4MQTT14addQosCallbackEPFvjE>
        // publish/subscribe
    if (MQTTclient1.isConnected()) {
 80a02b2:	4813      	ldr	r0, [pc, #76]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a02b4:	f002 f893 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a02b8:	b1d0      	cbz	r0, 80a02f0 <_Z12MQTTConnect1v+0x90>
        digitalWrite(MQTT_LED, HIGH);    
 80a02ba:	2101      	movs	r1, #1
 80a02bc:	2007      	movs	r0, #7
 80a02be:	f004 fa66 	bl	80a478e <digitalWrite>
        MQTTclient1.subscribe(String(SubscribeTopic)+"/#", MQTT::QOS2);
 80a02c2:	490d      	ldr	r1, [pc, #52]	; (80a02f8 <_Z12MQTTConnect1v+0x98>)
 80a02c4:	a808      	add	r0, sp, #32
 80a02c6:	f003 f94c 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a02ca:	a908      	add	r1, sp, #32
 80a02cc:	a804      	add	r0, sp, #16
 80a02ce:	f003 f96a 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a02d2:	490d      	ldr	r1, [pc, #52]	; (80a0308 <_Z12MQTTConnect1v+0xa8>)
 80a02d4:	a804      	add	r0, sp, #16
 80a02d6:	f003 f9bc 	bl	80a3652 <_ZplRK15StringSumHelperPKc>
 80a02da:	2202      	movs	r2, #2
 80a02dc:	6801      	ldr	r1, [r0, #0]
 80a02de:	4808      	ldr	r0, [pc, #32]	; (80a0300 <_Z12MQTTConnect1v+0xa0>)
 80a02e0:	f002 fb0c 	bl	80a28fc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a02e4:	a804      	add	r0, sp, #16
 80a02e6:	f003 f8f5 	bl	80a34d4 <_ZN6StringD1Ev>
 80a02ea:	a808      	add	r0, sp, #32
 80a02ec:	f003 f8f2 	bl	80a34d4 <_ZN6StringD1Ev>
    }

}
 80a02f0:	b00d      	add	sp, #52	; 0x34
 80a02f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80a02f6:	bf00      	nop
 80a02f8:	080a6433 	.word	0x080a6433
 80a02fc:	080a6437 	.word	0x080a6437
 80a0300:	20000138 	.word	0x20000138
 80a0304:	080a00bf 	.word	0x080a00bf
 80a0308:	080a643e 	.word	0x080a643e

080a030c <_Z11MQTTpublish6StringPKc>:
    }
    */
}


void MQTTpublish(String subTopic, const char* payload) {
 80a030c:	b570      	push	{r4, r5, r6, lr}
 80a030e:	4605      	mov	r5, r0
 80a0310:	b092      	sub	sp, #72	; 0x48
    uint16_t messageid;
    if (MQTTclient1.isConnected()) {
 80a0312:	4821      	ldr	r0, [pc, #132]	; (80a0398 <_Z11MQTTpublish6StringPKc+0x8c>)
    }
    */
}


void MQTTpublish(String subTopic, const char* payload) {
 80a0314:	460c      	mov	r4, r1
    uint16_t messageid;
    if (MQTTclient1.isConnected()) {
 80a0316:	f002 f862 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a031a:	2800      	cmp	r0, #0
 80a031c:	d039      	beq.n	80a0392 <_Z11MQTTpublish6StringPKc+0x86>
          } else {
            memcpy(state,"CLOSED", 7); 
        }
            
      */
        MQTTclient1.publish(String(SubscribeTopic)+"/"+String(UNIT)+"/"+subTopic, (uint8_t*)payload, strlen(payload), true, MQTT::QOS2, false, &messageid);
 80a031e:	491f      	ldr	r1, [pc, #124]	; (80a039c <_Z11MQTTpublish6StringPKc+0x90>)
 80a0320:	a80a      	add	r0, sp, #40	; 0x28
 80a0322:	f003 f91e 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80a0326:	a90a      	add	r1, sp, #40	; 0x28
 80a0328:	a806      	add	r0, sp, #24
 80a032a:	f003 f93c 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a032e:	491c      	ldr	r1, [pc, #112]	; (80a03a0 <_Z11MQTTpublish6StringPKc+0x94>)
 80a0330:	a806      	add	r0, sp, #24
 80a0332:	f003 f98e 	bl	80a3652 <_ZplRK15StringSumHelperPKc>
 80a0336:	4606      	mov	r6, r0
 80a0338:	491a      	ldr	r1, [pc, #104]	; (80a03a4 <_Z11MQTTpublish6StringPKc+0x98>)
 80a033a:	a80e      	add	r0, sp, #56	; 0x38
 80a033c:	f003 f911 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0340:	a90e      	add	r1, sp, #56	; 0x38
 80a0342:	4630      	mov	r0, r6
 80a0344:	f003 f979 	bl	80a363a <_ZplRK15StringSumHelperRK6String>
 80a0348:	4915      	ldr	r1, [pc, #84]	; (80a03a0 <_Z11MQTTpublish6StringPKc+0x94>)
 80a034a:	f003 f982 	bl	80a3652 <_ZplRK15StringSumHelperPKc>
 80a034e:	4629      	mov	r1, r5
 80a0350:	f003 f973 	bl	80a363a <_ZplRK15StringSumHelperRK6String>
 80a0354:	4605      	mov	r5, r0
 80a0356:	4620      	mov	r0, r4
 80a0358:	f005 ffa3 	bl	80a62a2 <strlen>
 80a035c:	f10d 0316 	add.w	r3, sp, #22
 80a0360:	9303      	str	r3, [sp, #12]
 80a0362:	2101      	movs	r1, #1
 80a0364:	2202      	movs	r2, #2
 80a0366:	2300      	movs	r3, #0
 80a0368:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
 80a036c:	4603      	mov	r3, r0
 80a036e:	4622      	mov	r2, r4
 80a0370:	6829      	ldr	r1, [r5, #0]
 80a0372:	4809      	ldr	r0, [pc, #36]	; (80a0398 <_Z11MQTTpublish6StringPKc+0x8c>)
 80a0374:	f002 f928 	bl	80a25c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
 80a0378:	a80e      	add	r0, sp, #56	; 0x38
 80a037a:	f003 f8ab 	bl	80a34d4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a037e:	a806      	add	r0, sp, #24
 80a0380:	f003 f8a8 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0384:	a80a      	add	r0, sp, #40	; 0x28
 80a0386:	f003 f8a5 	bl	80a34d4 <_ZN6StringD1Ev>
        
         // save QoS2 message id as global parameter.
        qos2messageid1 = messageid;
 80a038a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80a038e:	4b06      	ldr	r3, [pc, #24]	; (80a03a8 <_Z11MQTTpublish6StringPKc+0x9c>)
 80a0390:	801a      	strh	r2, [r3, #0]
    }
}
 80a0392:	b012      	add	sp, #72	; 0x48
 80a0394:	bd70      	pop	{r4, r5, r6, pc}
 80a0396:	bf00      	nop
 80a0398:	20000138 	.word	0x20000138
 80a039c:	080a6433 	.word	0x080a6433
 80a03a0:	080a6441 	.word	0x080a6441
 80a03a4:	080a6437 	.word	0x080a6437
 80a03a8:	20000190 	.word	0x20000190

080a03ac <_Z7cmdTXV26String>:
  }
  return 1;
}

int cmdTXV2(String command)
{
 80a03ac:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos = command.toInt();
 80a03ae:	f003 f97a 	bl	80a36a6 <_ZNK6String5toIntEv>
  if (TXVpos <= 4095)
 80a03b2:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
}

int cmdTXV2(String command)
{
  int TXVpos;
  TXVpos = command.toInt();
 80a03b6:	4604      	mov	r4, r0
  if (TXVpos <= 4095)
 80a03b8:	da05      	bge.n	80a03c6 <_Z7cmdTXV26String+0x1a>
  {
    damper.setVal(txv2, TXVpos);
 80a03ba:	b282      	uxth	r2, r0
 80a03bc:	2300      	movs	r3, #0
 80a03be:	2108      	movs	r1, #8
 80a03c0:	4802      	ldr	r0, [pc, #8]	; (80a03cc <_Z7cmdTXV26String+0x20>)
 80a03c2:	f001 fdd9 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>

  } 
  return TXVpos;
}
 80a03c6:	4620      	mov	r0, r4
 80a03c8:	bd10      	pop	{r4, pc}
 80a03ca:	bf00      	nop
 80a03cc:	200001c0 	.word	0x200001c0

080a03d0 <_Z7cmdTXV16String>:

int cmdTXV1(String command)
{
 80a03d0:	b510      	push	{r4, lr}
  int TXVpos;
  TXVpos = command.toInt();
 80a03d2:	f003 f968 	bl	80a36a6 <_ZNK6String5toIntEv>
  if (TXVpos <= 4095)
 80a03d6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
}

int cmdTXV1(String command)
{
  int TXVpos;
  TXVpos = command.toInt();
 80a03da:	4604      	mov	r4, r0
  if (TXVpos <= 4095)
 80a03dc:	da05      	bge.n	80a03ea <_Z7cmdTXV16String+0x1a>
  {
    damper.setVal(txv1, TXVpos);
 80a03de:	b282      	uxth	r2, r0
 80a03e0:	2300      	movs	r3, #0
 80a03e2:	2104      	movs	r1, #4
 80a03e4:	4802      	ldr	r0, [pc, #8]	; (80a03f0 <_Z7cmdTXV16String+0x20>)
 80a03e6:	f001 fdc7 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
  }
  return TXVpos; 
}
 80a03ea:	4620      	mov	r0, r4
 80a03ec:	bd10      	pop	{r4, pc}
 80a03ee:	bf00      	nop
 80a03f0:	200001c0 	.word	0x200001c0

080a03f4 <_Z12relayOff8574v>:
  relayOn8574();
  return 0;
}

void relayOff8574()
{
 80a03f4:	b510      	push	{r4, lr}
  Wire.begin();
 80a03f6:	f004 fa61 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a03fa:	f004 f8a3 	bl	80a4544 <_ZN7TwoWire5beginEv>
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
  // SeAdressslect GPIO as input
  relayMap = 0xff;
 80a03fe:	4c0a      	ldr	r4, [pc, #40]	; (80a0428 <_Z12relayOff8574v+0x34>)

void relayOff8574()
{
  Wire.begin();
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
 80a0400:	f004 fa5c 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0404:	2124      	movs	r1, #36	; 0x24
 80a0406:	f004 f8b3 	bl	80a4570 <_ZN7TwoWire17beginTransmissionEi>
  // SeAdressslect GPIO as input
  relayMap = 0xff;
 80a040a:	23ff      	movs	r3, #255	; 0xff
 80a040c:	7023      	strb	r3, [r4, #0]

  Wire.write(relayMap); //Wire.write(0xff);
 80a040e:	f004 fa55 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0412:	6803      	ldr	r3, [r0, #0]
 80a0414:	7821      	ldrb	r1, [r4, #0]
 80a0416:	689b      	ldr	r3, [r3, #8]
 80a0418:	4798      	blx	r3

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a041a:	f004 fa4f 	bl	80a48bc <_Z19__fetch_global_Wirev>
}
 80a041e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  Wire.write(relayMap); //Wire.write(0xff);

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a0422:	f004 b8ac 	b.w	80a457e <_ZN7TwoWire15endTransmissionEv>
 80a0426:	bf00      	nop
 80a0428:	2000003c 	.word	0x2000003c

080a042c <_Z11relayOn8574v>:
}
void relayOn8574()
{
 80a042c:	b510      	push	{r4, lr}
  Wire.begin();
 80a042e:	f004 fa45 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0432:	f004 f887 	bl	80a4544 <_ZN7TwoWire5beginEv>
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
  // Select GPIO as input
  relayMap = 0x00;
 80a0436:	4c0a      	ldr	r4, [pc, #40]	; (80a0460 <_Z11relayOn8574v+0x34>)
}
void relayOn8574()
{
  Wire.begin();
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
 80a0438:	f004 fa40 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a043c:	2124      	movs	r1, #36	; 0x24
 80a043e:	f004 f897 	bl	80a4570 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input
  relayMap = 0x00;
 80a0442:	2300      	movs	r3, #0
 80a0444:	7023      	strb	r3, [r4, #0]
  Wire.write(relayMap); //Wire.write(0xff);
 80a0446:	f004 fa39 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a044a:	6803      	ldr	r3, [r0, #0]
 80a044c:	7821      	ldrb	r1, [r4, #0]
 80a044e:	689b      	ldr	r3, [r3, #8]
 80a0450:	4798      	blx	r3

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a0452:	f004 fa33 	bl	80a48bc <_Z19__fetch_global_Wirev>
}
 80a0456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  relayMap = 0x00;
  Wire.write(relayMap); //Wire.write(0xff);

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a045a:	f004 b890 	b.w	80a457e <_ZN7TwoWire15endTransmissionEv>
 80a045e:	bf00      	nop
 80a0460:	2000003c 	.word	0x2000003c

080a0464 <_Z12cmdTempReset6String>:
  if (DefrostLevel2==0) cmdStopDefrost2("0");
  return DefrostLevel2;
}

int cmdTempReset(String command)
{
 80a0464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HaltTemp = TRUE;
 80a0468:	4d2a      	ldr	r5, [pc, #168]	; (80a0514 <_Z12cmdTempReset6String+0xb0>)
 80a046a:	2301      	movs	r3, #1
  if (DefrostLevel2==0) cmdStopDefrost2("0");
  return DefrostLevel2;
}

int cmdTempReset(String command)
{
 80a046c:	b085      	sub	sp, #20
  HaltTemp = TRUE;
 80a046e:	702b      	strb	r3, [r5, #0]
  relayOff8574();
 80a0470:	f7ff ffc0 	bl	80a03f4 <_Z12relayOff8574v>
  delay(6000);
 80a0474:	f241 7070 	movw	r0, #6000	; 0x1770
 80a0478:	f003 fabc 	bl	80a39f4 <delay>
 80a047c:	462e      	mov	r6, r5
  //Particle.process();
  //find all temp sensors
  for (int i = 0 ; i < nSENSORS; i++) 
       sz18B20AddressInfo[i]="";
 80a047e:	4d26      	ldr	r5, [pc, #152]	; (80a0518 <_Z12cmdTempReset6String+0xb4>)

int cmdTempReset(String command)
{
  HaltTemp = TRUE;
  relayOff8574();
  delay(6000);
 80a0480:	2400      	movs	r4, #0
  //Particle.process();
  //find all temp sensors
  for (int i = 0 ; i < nSENSORS; i++) 
       sz18B20AddressInfo[i]="";
 80a0482:	1928      	adds	r0, r5, r4
 80a0484:	4925      	ldr	r1, [pc, #148]	; (80a051c <_Z12cmdTempReset6String+0xb8>)
 80a0486:	3410      	adds	r4, #16
 80a0488:	f003 f898 	bl	80a35bc <_ZN6StringaSEPKc>
  HaltTemp = TRUE;
  relayOff8574();
  delay(6000);
  //Particle.process();
  //find all temp sensors
  for (int i = 0 ; i < nSENSORS; i++) 
 80a048c:	2cc0      	cmp	r4, #192	; 0xc0
 80a048e:	4f22      	ldr	r7, [pc, #136]	; (80a0518 <_Z12cmdTempReset6String+0xb4>)
 80a0490:	d1f7      	bne.n	80a0482 <_Z12cmdTempReset6String+0x1e>
       sz18B20AddressInfo[i]="";
  wd.checkin();
 80a0492:	f7ff fe87 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
  delay(10);
 80a0496:	200a      	movs	r0, #10
 80a0498:	f003 faac 	bl	80a39f4 <delay>
  ds18b20.resetsearch();
 80a049c:	4820      	ldr	r0, [pc, #128]	; (80a0520 <_Z12cmdTempReset6String+0xbc>)
 80a049e:	f001 fb9a 	bl	80a1bd6 <_ZN7DS18B2011resetsearchEv>
  delay(100); // initialise for sensor search
 80a04a2:	2064      	movs	r0, #100	; 0x64
 80a04a4:	f003 faa6 	bl	80a39f4 <delay>

  for (int i = 0; i < nSENSORS; i++)
  {                                     // try to read the sensor addre
    ds18b20.search(sensorAddresses[i]); // and if available store
 80a04a8:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80a052c <_Z12cmdTempReset6String+0xc8>
  wd.checkin();
  delay(10);
  ds18b20.resetsearch();
  delay(100); // initialise for sensor search

  for (int i = 0; i < nSENSORS; i++)
 80a04ac:	2400      	movs	r4, #0
  {                                     // try to read the sensor addre
    ds18b20.search(sensorAddresses[i]); // and if available store
    //String address((char*)sensorAddresses[i]);
    delay(52);
    celsius[i] = 0;
 80a04ae:	2500      	movs	r5, #0
  ds18b20.resetsearch();
  delay(100); // initialise for sensor search

  for (int i = 0; i < nSENSORS; i++)
  {                                     // try to read the sensor addre
    ds18b20.search(sensorAddresses[i]); // and if available store
 80a04b0:	eb09 01c4 	add.w	r1, r9, r4, lsl #3
 80a04b4:	481a      	ldr	r0, [pc, #104]	; (80a0520 <_Z12cmdTempReset6String+0xbc>)
 80a04b6:	f001 fb72 	bl	80a1b9e <_ZN7DS18B206searchEPh>
    //String address((char*)sensorAddresses[i]);
    delay(52);
 80a04ba:	2034      	movs	r0, #52	; 0x34
 80a04bc:	f003 fa9a 	bl	80a39f4 <delay>
    celsius[i] = 0;
 80a04c0:	4b18      	ldr	r3, [pc, #96]	; (80a0524 <_Z12cmdTempReset6String+0xc0>)
 80a04c2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80a052c <_Z12cmdTempReset6String+0xc8>
 80a04c6:	f843 5024 	str.w	r5, [r3, r4, lsl #2]
  wd.checkin();
  delay(10);
  ds18b20.resetsearch();
  delay(100); // initialise for sensor search

  for (int i = 0; i < nSENSORS; i++)
 80a04ca:	3401      	adds	r4, #1
 80a04cc:	2c0c      	cmp	r4, #12
 80a04ce:	d1ef      	bne.n	80a04b0 <_Z12cmdTempReset6String+0x4c>
    //String address((char*)sensorAddresses[i]);
    delay(52);
    celsius[i] = 0;
      //wd.checkin();
  }
  wd.checkin();
 80a04d0:	f7ff fe68 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
 80a04d4:	2400      	movs	r4, #0
 80a04d6:	eb07 0944 	add.w	r9, r7, r4, lsl #1
 80a04da:	2500      	movs	r5, #0
  for (int i = 0; i< nSENSORS; i++){
      for (int x=0; x < 8; x++){
        sz18B20AddressInfo[i].concat(String::format("%02x", sensorAddresses[i][x]) );
 80a04dc:	eb08 0305 	add.w	r3, r8, r5
 80a04e0:	5d1a      	ldrb	r2, [r3, r4]
 80a04e2:	4911      	ldr	r1, [pc, #68]	; (80a0528 <_Z12cmdTempReset6String+0xc4>)
 80a04e4:	4668      	mov	r0, sp
 80a04e6:	f003 f8e3 	bl	80a36b0 <_ZN6String6formatEPKcz>
 80a04ea:	4669      	mov	r1, sp
 80a04ec:	4648      	mov	r0, r9
 80a04ee:	f003 f8a0 	bl	80a3632 <_ZN6String6concatERKS_>
    celsius[i] = 0;
      //wd.checkin();
  }
  wd.checkin();
  for (int i = 0; i< nSENSORS; i++){
      for (int x=0; x < 8; x++){
 80a04f2:	3501      	adds	r5, #1
        sz18B20AddressInfo[i].concat(String::format("%02x", sensorAddresses[i][x]) );
 80a04f4:	4668      	mov	r0, sp
 80a04f6:	f002 ffed 	bl	80a34d4 <_ZN6StringD1Ev>
    celsius[i] = 0;
      //wd.checkin();
  }
  wd.checkin();
  for (int i = 0; i< nSENSORS; i++){
      for (int x=0; x < 8; x++){
 80a04fa:	2d08      	cmp	r5, #8
 80a04fc:	d1ee      	bne.n	80a04dc <_Z12cmdTempReset6String+0x78>
 80a04fe:	3408      	adds	r4, #8
    delay(52);
    celsius[i] = 0;
      //wd.checkin();
  }
  wd.checkin();
  for (int i = 0; i< nSENSORS; i++){
 80a0500:	2c60      	cmp	r4, #96	; 0x60
 80a0502:	d1e8      	bne.n	80a04d6 <_Z12cmdTempReset6String+0x72>
      for (int x=0; x < 8; x++){
        sz18B20AddressInfo[i].concat(String::format("%02x", sensorAddresses[i][x]) );
      }
  }
  HaltTemp = FALSE;
 80a0504:	2400      	movs	r4, #0
 80a0506:	7034      	strb	r4, [r6, #0]
  relayOn8574();
 80a0508:	f7ff ff90 	bl	80a042c <_Z11relayOn8574v>
  return 0;
}
 80a050c:	4620      	mov	r0, r4
 80a050e:	b005      	add	sp, #20
 80a0510:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a0514:	20000192 	.word	0x20000192
 80a0518:	200001d4 	.word	0x200001d4
 80a051c:	080a682c 	.word	0x080a682c
 80a0520:	200002e8 	.word	0x200002e8
 80a0524:	20000004 	.word	0x20000004
 80a0528:	080a6443 	.word	0x080a6443
 80a052c:	40024000 	.word	0x40024000

080a0530 <_Z7getTempPh>:
  // char szInfo[200];
}


double getTemp(uint8_t addr[8])
{
 80a0530:	b570      	push	{r4, r5, r6, lr}
 80a0532:	4606      	mov	r6, r0
  double _temp;
  int i = 0;
 80a0534:	2400      	movs	r4, #0

  do {
    _temp = ds18b20.getTemperature(addr);
 80a0536:	2200      	movs	r2, #0
 80a0538:	4631      	mov	r1, r6
 80a053a:	480a      	ldr	r0, [pc, #40]	; (80a0564 <_Z7getTempPh+0x34>)
 80a053c:	f001 fb4e 	bl	80a1bdc <_ZN7DS18B2014getTemperatureEPhb>
 80a0540:	4605      	mov	r5, r0
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);
 80a0542:	4808      	ldr	r0, [pc, #32]	; (80a0564 <_Z7getTempPh+0x34>)
 80a0544:	f001 fc04 	bl	80a1d50 <_ZN7DS18B208crcCheckEv>
 80a0548:	b928      	cbnz	r0, 80a0556 <_Z7getTempPh+0x26>
 80a054a:	3401      	adds	r4, #1
 80a054c:	2c04      	cmp	r4, #4
 80a054e:	d1f2      	bne.n	80a0536 <_Z7getTempPh+0x6>
    //_temp = ds18b20.convertToFahrenheit(_temp);
    // Serial.println(_temp);
  }
  else
  {
    _temp = -99;
 80a0550:	2000      	movs	r0, #0
 80a0552:	4905      	ldr	r1, [pc, #20]	; (80a0568 <_Z7getTempPh+0x38>)
 80a0554:	bd70      	pop	{r4, r5, r6, pc}

  do {
    _temp = ds18b20.getTemperature(addr);
  } while (!ds18b20.crcCheck() && MAXRETRY > i++);

  if (i < MAXRETRY)
 80a0556:	2c03      	cmp	r4, #3
 80a0558:	d0fa      	beq.n	80a0550 <_Z7getTempPh+0x20>
{
  double _temp;
  int i = 0;

  do {
    _temp = ds18b20.getTemperature(addr);
 80a055a:	4628      	mov	r0, r5
 80a055c:	f004 ffa0 	bl	80a54a0 <__aeabi_f2d>
  {
    _temp = -99;
    // Serial.println("Invalid reading");
  }
  return _temp;
}
 80a0560:	bd70      	pop	{r4, r5, r6, pc}
 80a0562:	bf00      	nop
 80a0564:	200002e8 	.word	0x200002e8
 80a0568:	c058c000 	.word	0xc058c000

080a056c <_Z13publishStatusv>:
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%4d&%4d&%4d&%4d&%4d&%4d", psi[0], psi[1], psi[2], psi[3], psi[4], d11, d12, d21, d22, tx1,tx2);
  Particle.publish("ds_psi", szInfo, PRIVATE);
}

void publishStatus()
{
 80a056c:	b530      	push	{r4, r5, lr}


  status10 = 0;
  status10 = status10  |  (((bool)HaltTemp) << 0);
  status10 = status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 ) << 1);
 80a056e:	4a17      	ldr	r2, [pc, #92]	; (80a05cc <_Z13publishStatusv+0x60>)
void publishStatus()
{


  status10 = 0;
  status10 = status10  |  (((bool)HaltTemp) << 0);
 80a0570:	4b17      	ldr	r3, [pc, #92]	; (80a05d0 <_Z13publishStatusv+0x64>)
  status10 = status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 ) << 1);
 80a0572:	6812      	ldr	r2, [r2, #0]
void publishStatus()
{


  status10 = 0;
  status10 = status10  |  (((bool)HaltTemp) << 0);
 80a0574:	781b      	ldrb	r3, [r3, #0]
  status10 = status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 ) << 1);
 80a0576:	2a00      	cmp	r2, #0
 80a0578:	bfcc      	ite	gt
 80a057a:	2202      	movgt	r2, #2
 80a057c:	2200      	movle	r2, #0
 80a057e:	4313      	orrs	r3, r2
  status10 = status10  |  (((DefrostLevel2 >= 1) ? 1 : 0 ) << 2);
 80a0580:	4a14      	ldr	r2, [pc, #80]	; (80a05d4 <_Z13publishStatusv+0x68>)
  
  if (status10 != prevStatus10){
 80a0582:	4d15      	ldr	r5, [pc, #84]	; (80a05d8 <_Z13publishStatusv+0x6c>)


  status10 = 0;
  status10 = status10  |  (((bool)HaltTemp) << 0);
  status10 = status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 ) << 1);
  status10 = status10  |  (((DefrostLevel2 >= 1) ? 1 : 0 ) << 2);
 80a0584:	6812      	ldr	r2, [r2, #0]
 80a0586:	4c15      	ldr	r4, [pc, #84]	; (80a05dc <_Z13publishStatusv+0x70>)
 80a0588:	2a00      	cmp	r2, #0
 80a058a:	bfcc      	ite	gt
 80a058c:	2204      	movgt	r2, #4
 80a058e:	2200      	movle	r2, #0
 80a0590:	4313      	orrs	r3, r2
  
  if (status10 != prevStatus10){
 80a0592:	682a      	ldr	r2, [r5, #0]
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%4d&%4d&%4d&%4d&%4d&%4d", psi[0], psi[1], psi[2], psi[3], psi[4], d11, d12, d21, d22, tx1,tx2);
  Particle.publish("ds_psi", szInfo, PRIVATE);
}

void publishStatus()
{
 80a0594:	b089      	sub	sp, #36	; 0x24
  status10 = 0;
  status10 = status10  |  (((bool)HaltTemp) << 0);
  status10 = status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 ) << 1);
  status10 = status10  |  (((DefrostLevel2 >= 1) ? 1 : 0 ) << 2);
  
  if (status10 != prevStatus10){
 80a0596:	4293      	cmp	r3, r2


  status10 = 0;
  status10 = status10  |  (((bool)HaltTemp) << 0);
  status10 = status10  |  (((DefrostLevel1 >= 1) ? 1 : 0 ) << 1);
  status10 = status10  |  (((DefrostLevel2 >= 1) ? 1 : 0 ) << 2);
 80a0598:	6023      	str	r3, [r4, #0]
  
  if (status10 != prevStatus10){
 80a059a:	d014      	beq.n	80a05c6 <_Z13publishStatusv+0x5a>
    MQTTpublish("status10", String(status10, BIN));
 80a059c:	4910      	ldr	r1, [pc, #64]	; (80a05e0 <_Z13publishStatusv+0x74>)
 80a059e:	4668      	mov	r0, sp
 80a05a0:	f002 ffdf 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a05a4:	2202      	movs	r2, #2
 80a05a6:	6821      	ldr	r1, [r4, #0]
 80a05a8:	a804      	add	r0, sp, #16
 80a05aa:	f003 f818 	bl	80a35de <_ZN6StringC1Eih>
 80a05ae:	9904      	ldr	r1, [sp, #16]
 80a05b0:	4668      	mov	r0, sp
 80a05b2:	f7ff feab 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a05b6:	a804      	add	r0, sp, #16
 80a05b8:	f002 ff8c 	bl	80a34d4 <_ZN6StringD1Ev>
 80a05bc:	4668      	mov	r0, sp
 80a05be:	f002 ff89 	bl	80a34d4 <_ZN6StringD1Ev>
    prevStatus10 = status10;
 80a05c2:	6823      	ldr	r3, [r4, #0]
 80a05c4:	602b      	str	r3, [r5, #0]
  }
}
 80a05c6:	b009      	add	sp, #36	; 0x24
 80a05c8:	bd30      	pop	{r4, r5, pc}
 80a05ca:	bf00      	nop
 80a05cc:	200002b8 	.word	0x200002b8
 80a05d0:	20000192 	.word	0x20000192
 80a05d4:	200002bc 	.word	0x200002bc
 80a05d8:	2000012c 	.word	0x2000012c
 80a05dc:	20000294 	.word	0x20000294
 80a05e0:	080a6448 	.word	0x080a6448

080a05e4 <_Z23publishOneWireAddressesv>:

void publishOneWireAddresses()
{
 80a05e4:	b530      	push	{r4, r5, lr}
 // Particle.publish("ds_18B20Addr", sz18B20AddressInfo, PRIVATE);
    for(int i= 0; i<nSENSORS; i++){
        MQTTpublish(String::format("D18B22address%d", i), String::format("%s",sz18B20AddressInfo[i]));
 80a05e6:	4d18      	ldr	r5, [pc, #96]	; (80a0648 <_Z23publishOneWireAddressesv+0x64>)
    prevStatus10 = status10;
  }
}

void publishOneWireAddresses()
{
 80a05e8:	b089      	sub	sp, #36	; 0x24
 // Particle.publish("ds_18B20Addr", sz18B20AddressInfo, PRIVATE);
    for(int i= 0; i<nSENSORS; i++){
 80a05ea:	2400      	movs	r4, #0
        MQTTpublish(String::format("D18B22address%d", i), String::format("%s",sz18B20AddressInfo[i]));
 80a05ec:	4622      	mov	r2, r4
 80a05ee:	4917      	ldr	r1, [pc, #92]	; (80a064c <_Z23publishOneWireAddressesv+0x68>)
 80a05f0:	4668      	mov	r0, sp
 80a05f2:	f003 f85d 	bl	80a36b0 <_ZN6String6formatEPKcz>
 80a05f6:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 80a05fa:	4915      	ldr	r1, [pc, #84]	; (80a0650 <_Z23publishOneWireAddressesv+0x6c>)
 80a05fc:	a804      	add	r0, sp, #16
 80a05fe:	f003 f857 	bl	80a36b0 <_ZN6String6formatEPKcz>
 80a0602:	9904      	ldr	r1, [sp, #16]
 80a0604:	4668      	mov	r0, sp
 80a0606:	f7ff fe81 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a060a:	a804      	add	r0, sp, #16
 80a060c:	f002 ff62 	bl	80a34d4 <_ZN6StringD1Ev>
}

void publishOneWireAddresses()
{
 // Particle.publish("ds_18B20Addr", sz18B20AddressInfo, PRIVATE);
    for(int i= 0; i<nSENSORS; i++){
 80a0610:	3401      	adds	r4, #1
        MQTTpublish(String::format("D18B22address%d", i), String::format("%s",sz18B20AddressInfo[i]));
 80a0612:	4668      	mov	r0, sp
 80a0614:	f002 ff5e 	bl	80a34d4 <_ZN6StringD1Ev>
}

void publishOneWireAddresses()
{
 // Particle.publish("ds_18B20Addr", sz18B20AddressInfo, PRIVATE);
    for(int i= 0; i<nSENSORS; i++){
 80a0618:	2c0c      	cmp	r4, #12
 80a061a:	d1e7      	bne.n	80a05ec <_Z23publishOneWireAddressesv+0x8>
        MQTTpublish(String::format("D18B22address%d", i), String::format("%s",sz18B20AddressInfo[i]));
    }
        MQTTpublish("status10", String(status10, BIN));
 80a061c:	490d      	ldr	r1, [pc, #52]	; (80a0654 <_Z23publishOneWireAddressesv+0x70>)
 80a061e:	a804      	add	r0, sp, #16
 80a0620:	f002 ff9f 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0624:	4b0c      	ldr	r3, [pc, #48]	; (80a0658 <_Z23publishOneWireAddressesv+0x74>)
 80a0626:	2202      	movs	r2, #2
 80a0628:	6819      	ldr	r1, [r3, #0]
 80a062a:	4668      	mov	r0, sp
 80a062c:	f002 ffd7 	bl	80a35de <_ZN6StringC1Eih>
 80a0630:	9900      	ldr	r1, [sp, #0]
 80a0632:	a804      	add	r0, sp, #16
 80a0634:	f7ff fe6a 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a0638:	4668      	mov	r0, sp
 80a063a:	f002 ff4b 	bl	80a34d4 <_ZN6StringD1Ev>
 80a063e:	a804      	add	r0, sp, #16
 80a0640:	f002 ff48 	bl	80a34d4 <_ZN6StringD1Ev>


}
 80a0644:	b009      	add	sp, #36	; 0x24
 80a0646:	bd30      	pop	{r4, r5, pc}
 80a0648:	200001d4 	.word	0x200001d4
 80a064c:	080a6451 	.word	0x080a6451
 80a0650:	080a6461 	.word	0x080a6461
 80a0654:	080a6448 	.word	0x080a6448
 80a0658:	20000294 	.word	0x20000294

080a065c <_Z5bitophhi>:
    Wire.endTransmission();
  }
}
byte bitop(byte b1, byte b2, int op)
{
  switch (op)
 80a065c:	2a02      	cmp	r2, #2
 80a065e:	d005      	beq.n	80a066c <_Z5bitophhi+0x10>
 80a0660:	2a03      	cmp	r2, #3
 80a0662:	d006      	beq.n	80a0672 <_Z5bitophhi+0x16>
 80a0664:	2a01      	cmp	r2, #1
 80a0666:	d106      	bne.n	80a0676 <_Z5bitophhi+0x1a>
  {
  case 1:
    return b1 | b2;
 80a0668:	4308      	orrs	r0, r1
 80a066a:	4770      	bx	lr
  case 2:
    return b1 & ~b2;
 80a066c:	ea20 0001 	bic.w	r0, r0, r1
 80a0670:	4770      	bx	lr
  case 3:
    return b1 ^ b2;
 80a0672:	4048      	eors	r0, r1
 80a0674:	4770      	bx	lr
  }
  return 0;
 80a0676:	2000      	movs	r0, #0
}
 80a0678:	4770      	bx	lr
	...

080a067c <_Z7relayOpii>:
  return dutyCycle;
}

void relayOp(int relay, int op)
{
  if (relay > 8)
 80a067c:	2808      	cmp	r0, #8
  damper.setVal(damperNum, dutyCycle);
  return dutyCycle;
}

void relayOp(int relay, int op)
{
 80a067e:	b570      	push	{r4, r5, r6, lr}
 80a0680:	4604      	mov	r4, r0
 80a0682:	460e      	mov	r6, r1
  if (relay > 8)
 80a0684:	dc1a      	bgt.n	80a06bc <_Z7relayOpii+0x40>
  {
  }
  else
  {
    byte rbit = (1 << (relay - 1));
    Wire.beginTransmission(Addr8574);
 80a0686:	f004 f919 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a068a:	2124      	movs	r1, #36	; 0x24
 80a068c:	f003 ff70 	bl	80a4570 <_ZN7TwoWire17beginTransmissionEi>
    // Select GPIO as input
    //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
    //Wire.write(0x00);
    // Stop I2C transmission
    relayMap = bitop(relayMap, rbit, op);
 80a0690:	4d0b      	ldr	r5, [pc, #44]	; (80a06c0 <_Z7relayOpii+0x44>)
 80a0692:	3c01      	subs	r4, #1
 80a0694:	2101      	movs	r1, #1
 80a0696:	40a1      	lsls	r1, r4
 80a0698:	4632      	mov	r2, r6
 80a069a:	7828      	ldrb	r0, [r5, #0]
 80a069c:	b2c9      	uxtb	r1, r1
 80a069e:	f7ff ffdd 	bl	80a065c <_Z5bitophhi>
 80a06a2:	7028      	strb	r0, [r5, #0]
    Wire.write(relayMap);
 80a06a4:	f004 f90a 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a06a8:	6803      	ldr	r3, [r0, #0]
 80a06aa:	7829      	ldrb	r1, [r5, #0]
 80a06ac:	689b      	ldr	r3, [r3, #8]
 80a06ae:	4798      	blx	r3
    Wire.endTransmission();
 80a06b0:	f004 f904 	bl	80a48bc <_Z19__fetch_global_Wirev>
  }
}
 80a06b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
    //Wire.write(0x00);
    // Stop I2C transmission
    relayMap = bitop(relayMap, rbit, op);
    Wire.write(relayMap);
    Wire.endTransmission();
 80a06b8:	f003 bf61 	b.w	80a457e <_ZN7TwoWire15endTransmissionEv>
 80a06bc:	bd70      	pop	{r4, r5, r6, pc}
 80a06be:	bf00      	nop
 80a06c0:	2000003c 	.word	0x2000003c

080a06c4 <_Z11turnOnRelayi>:
  return 0;
}

void turnOnRelay(int relay)
{
  relayOp(relay, 2);
 80a06c4:	2102      	movs	r1, #2
 80a06c6:	f7ff bfd9 	b.w	80a067c <_Z7relayOpii>

080a06ca <_Z12turnOffRelayi>:
}
void turnOffRelay(int relay)
{
  relayOp(relay, 1);
 80a06ca:	2101      	movs	r1, #1
 80a06cc:	f7ff bfd6 	b.w	80a067c <_Z7relayOpii>

080a06d0 <_Z15PerformDefrost2i>:
  // Stop I2C transmission
  Wire.endTransmission();
}

void PerformDefrost2(int advanceToState)
{
 80a06d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static int defstate = 0, prevDefstate=0;
  static uint32_t msStartTime = 0;
  static uint16_t damper1=3000;
  static uint16_t damper2=3000;
  static uint16_t txvValue= 3800;
  if ((defstate != prevDefstate ) || (advanceToState != 0)) {
 80a06d4:	4b82      	ldr	r3, [pc, #520]	; (80a08e0 <_Z15PerformDefrost2i+0x210>)
 80a06d6:	4c83      	ldr	r4, [pc, #524]	; (80a08e4 <_Z15PerformDefrost2i+0x214>)
 80a06d8:	681a      	ldr	r2, [r3, #0]
 80a06da:	6821      	ldr	r1, [r4, #0]
  // Stop I2C transmission
  Wire.endTransmission();
}

void PerformDefrost2(int advanceToState)
{
 80a06dc:	b088      	sub	sp, #32
  static int defstate = 0, prevDefstate=0;
  static uint32_t msStartTime = 0;
  static uint16_t damper1=3000;
  static uint16_t damper2=3000;
  static uint16_t txvValue= 3800;
  if ((defstate != prevDefstate ) || (advanceToState != 0)) {
 80a06de:	4291      	cmp	r1, r2
  // Stop I2C transmission
  Wire.endTransmission();
}

void PerformDefrost2(int advanceToState)
{
 80a06e0:	4606      	mov	r6, r0
 80a06e2:	461d      	mov	r5, r3
  static int defstate = 0, prevDefstate=0;
  static uint32_t msStartTime = 0;
  static uint16_t damper1=3000;
  static uint16_t damper2=3000;
  static uint16_t txvValue= 3800;
  if ((defstate != prevDefstate ) || (advanceToState != 0)) {
 80a06e4:	d100      	bne.n	80a06e8 <_Z15PerformDefrost2i+0x18>
 80a06e6:	b1f8      	cbz	r0, 80a0728 <_Z15PerformDefrost2i+0x58>
     MQTTpublish("defrost2State", String::format("defstate: %d  Elapsed: %d ", defstate, msStartTime - millis() ));
 80a06e8:	497f      	ldr	r1, [pc, #508]	; (80a08e8 <_Z15PerformDefrost2i+0x218>)
 80a06ea:	a804      	add	r0, sp, #16
 80a06ec:	f002 ff39 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a06f0:	4b7e      	ldr	r3, [pc, #504]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a06f2:	6827      	ldr	r7, [r4, #0]
 80a06f4:	f8d3 8000 	ldr.w	r8, [r3]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a06f8:	f002 f99e 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
 80a06fc:	463a      	mov	r2, r7
 80a06fe:	ebc0 0308 	rsb	r3, r0, r8
 80a0702:	497b      	ldr	r1, [pc, #492]	; (80a08f0 <_Z15PerformDefrost2i+0x220>)
 80a0704:	4668      	mov	r0, sp
 80a0706:	f002 ffd3 	bl	80a36b0 <_ZN6String6formatEPKcz>
 80a070a:	9900      	ldr	r1, [sp, #0]
 80a070c:	a804      	add	r0, sp, #16
 80a070e:	f7ff fdfd 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a0712:	4668      	mov	r0, sp
 80a0714:	f002 fede 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0718:	a804      	add	r0, sp, #16
 80a071a:	f002 fedb 	bl	80a34d4 <_ZN6StringD1Ev>
    prevDefstate = defstate;
 80a071e:	6823      	ldr	r3, [r4, #0]
 80a0720:	602b      	str	r3, [r5, #0]
  }
  if (advanceToState !=0) defstate = advanceToState;
 80a0722:	b10e      	cbz	r6, 80a0728 <_Z15PerformDefrost2i+0x58>
 80a0724:	4b6f      	ldr	r3, [pc, #444]	; (80a08e4 <_Z15PerformDefrost2i+0x214>)
 80a0726:	601e      	str	r6, [r3, #0]
  switch (defstate)
 80a0728:	6823      	ldr	r3, [r4, #0]
 80a072a:	2b0b      	cmp	r3, #11
 80a072c:	f200 80d5 	bhi.w	80a08da <_Z15PerformDefrost2i+0x20a>
 80a0730:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0734:	0013000c 	.word	0x0013000c
 80a0738:	006e0066 	.word	0x006e0066
 80a073c:	007b0079 	.word	0x007b0079
 80a0740:	00d30083 	.word	0x00d30083
 80a0744:	00aa0094 	.word	0x00aa0094
 80a0748:	00bc00ae 	.word	0x00bc00ae
  {
  case 0:

    if (DefrostLevel2 > 0 ) defstate = 1;
 80a074c:	4b69      	ldr	r3, [pc, #420]	; (80a08f4 <_Z15PerformDefrost2i+0x224>)
 80a074e:	681b      	ldr	r3, [r3, #0]
 80a0750:	2b00      	cmp	r3, #0
 80a0752:	f340 80c2 	ble.w	80a08da <_Z15PerformDefrost2i+0x20a>
 80a0756:	2301      	movs	r3, #1
 80a0758:	e0a6      	b.n	80a08a8 <_Z15PerformDefrost2i+0x1d8>
    break;
  case 1:
    damper1 = damper.getVal(damper2_1);
 80a075a:	2100      	movs	r1, #0
 80a075c:	4866      	ldr	r0, [pc, #408]	; (80a08f8 <_Z15PerformDefrost2i+0x228>)
 80a075e:	f001 fbb2 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a0762:	4b66      	ldr	r3, [pc, #408]	; (80a08fc <_Z15PerformDefrost2i+0x22c>)
    damper2 = damper.getVal(damper2_2);
 80a0764:	2101      	movs	r1, #1
  case 0:

    if (DefrostLevel2 > 0 ) defstate = 1;
    break;
  case 1:
    damper1 = damper.getVal(damper2_1);
 80a0766:	8018      	strh	r0, [r3, #0]
    damper2 = damper.getVal(damper2_2);
 80a0768:	4863      	ldr	r0, [pc, #396]	; (80a08f8 <_Z15PerformDefrost2i+0x228>)
 80a076a:	f001 fbac 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a076e:	4b64      	ldr	r3, [pc, #400]	; (80a0900 <_Z15PerformDefrost2i+0x230>)
    txvValue = damper.getVal(txv2);
 80a0770:	2108      	movs	r1, #8

    if (DefrostLevel2 > 0 ) defstate = 1;
    break;
  case 1:
    damper1 = damper.getVal(damper2_1);
    damper2 = damper.getVal(damper2_2);
 80a0772:	8018      	strh	r0, [r3, #0]
    txvValue = damper.getVal(txv2);
 80a0774:	4860      	ldr	r0, [pc, #384]	; (80a08f8 <_Z15PerformDefrost2i+0x228>)
 80a0776:	f001 fba6 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a077a:	f002 f95d 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    msStartTime = millis();
 80a077e:	4d5b      	ldr	r5, [pc, #364]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a0780:	6028      	str	r0, [r5, #0]
    turnOffRelay(RelayCool2);
 80a0782:	2005      	movs	r0, #5
 80a0784:	f7ff ffa1 	bl	80a06ca <_Z12turnOffRelayi>
    turnOffRelay(RelayFan2);
 80a0788:	2007      	movs	r0, #7
 80a078a:	f7ff ff9e 	bl	80a06ca <_Z12turnOffRelayi>
    turnOffRelay(RelayBypassDamper2);
 80a078e:	2006      	movs	r0, #6
 80a0790:	f7ff ff9b 	bl	80a06ca <_Z12turnOffRelayi>
    InReverse2 = !InReverse2;
 80a0794:	4a5b      	ldr	r2, [pc, #364]	; (80a0904 <_Z15PerformDefrost2i+0x234>)
 80a0796:	7813      	ldrb	r3, [r2, #0]
 80a0798:	f083 0301 	eor.w	r3, r3, #1
 80a079c:	7013      	strb	r3, [r2, #0]
    if (InReverse2)
 80a079e:	b11b      	cbz	r3, 80a07a8 <_Z15PerformDefrost2i+0xd8>
 80a07a0:	f002 f94a 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
      msStartReverse2 = millis();
 80a07a4:	4b58      	ldr	r3, [pc, #352]	; (80a0908 <_Z15PerformDefrost2i+0x238>)
 80a07a6:	6018      	str	r0, [r3, #0]
    if (DefrostLevel2 >= 3)
 80a07a8:	4b52      	ldr	r3, [pc, #328]	; (80a08f4 <_Z15PerformDefrost2i+0x224>)
    {
      msStartTime = msStartTime - 2000;
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a07aa:	2101      	movs	r1, #1
 80a07ac:	461e      	mov	r6, r3
    turnOffRelay(RelayFan2);
    turnOffRelay(RelayBypassDamper2);
    InReverse2 = !InReverse2;
    if (InReverse2)
      msStartReverse2 = millis();
    if (DefrostLevel2 >= 3)
 80a07ae:	681a      	ldr	r2, [r3, #0]
    {
      msStartTime = msStartTime - 2000;
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a07b0:	4851      	ldr	r0, [pc, #324]	; (80a08f8 <_Z15PerformDefrost2i+0x228>)
    turnOffRelay(RelayFan2);
    turnOffRelay(RelayBypassDamper2);
    InReverse2 = !InReverse2;
    if (InReverse2)
      msStartReverse2 = millis();
    if (DefrostLevel2 >= 3)
 80a07b2:	2a02      	cmp	r2, #2
    {
      msStartTime = msStartTime - 2000;
 80a07b4:	bfc8      	it	gt
 80a07b6:	682b      	ldrgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a07b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    InReverse2 = !InReverse2;
    if (InReverse2)
      msStartReverse2 = millis();
    if (DefrostLevel2 >= 3)
    {
      msStartTime = msStartTime - 2000;
 80a07bc:	bfc4      	itt	gt
 80a07be:	f5a3 63fa 	subgt.w	r3, r3, #2000	; 0x7d0
 80a07c2:	602b      	strgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper2_2, 500);
 80a07c4:	2300      	movs	r3, #0
 80a07c6:	f001 fbd7 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper2_1, 500);
 80a07ca:	2300      	movs	r3, #0
 80a07cc:	4619      	mov	r1, r3
 80a07ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a07d2:	4849      	ldr	r0, [pc, #292]	; (80a08f8 <_Z15PerformDefrost2i+0x228>)
 80a07d4:	f001 fbd0 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    MQTTpublish("defrost2",String(DefrostLevel2,DEC));
 80a07d8:	494c      	ldr	r1, [pc, #304]	; (80a090c <_Z15PerformDefrost2i+0x23c>)
 80a07da:	a804      	add	r0, sp, #16
 80a07dc:	f002 fec1 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a07e0:	220a      	movs	r2, #10
 80a07e2:	6831      	ldr	r1, [r6, #0]
 80a07e4:	4668      	mov	r0, sp
 80a07e6:	f002 fefa 	bl	80a35de <_ZN6StringC1Eih>
 80a07ea:	9900      	ldr	r1, [sp, #0]
 80a07ec:	a804      	add	r0, sp, #16
 80a07ee:	f7ff fd8d 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a07f2:	4668      	mov	r0, sp
 80a07f4:	f002 fe6e 	bl	80a34d4 <_ZN6StringD1Ev>
 80a07f8:	a804      	add	r0, sp, #16
 80a07fa:	f002 fe6b 	bl	80a34d4 <_ZN6StringD1Ev>
 80a07fe:	e051      	b.n	80a08a4 <_Z15PerformDefrost2i+0x1d4>
 80a0800:	f002 f91a 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    defstate++;
    break;
  case 2:

    if (millis() > (msStartTime + 25000))
 80a0804:	4b39      	ldr	r3, [pc, #228]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a0806:	681b      	ldr	r3, [r3, #0]
 80a0808:	f503 43c3 	add.w	r3, r3, #24960	; 0x6180
 80a080c:	3328      	adds	r3, #40	; 0x28
 80a080e:	e047      	b.n	80a08a0 <_Z15PerformDefrost2i+0x1d0>
      defstate++;
    break;
  case 3:
    turnOnRelay(RelayFan2);
 80a0810:	2007      	movs	r0, #7
 80a0812:	f7ff ff57 	bl	80a06c4 <_Z11turnOnRelayi>
 80a0816:	f002 f90f 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 29000))
 80a081a:	4b34      	ldr	r3, [pc, #208]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a081c:	681b      	ldr	r3, [r3, #0]
 80a081e:	f503 43e2 	add.w	r3, r3, #28928	; 0x7100
 80a0822:	3348      	adds	r3, #72	; 0x48
 80a0824:	e03c      	b.n	80a08a0 <_Z15PerformDefrost2i+0x1d0>
      defstate++;
    break;
  case 4:

    defstate++;
 80a0826:	2305      	movs	r3, #5
 80a0828:	e03e      	b.n	80a08a8 <_Z15PerformDefrost2i+0x1d8>
 80a082a:	f002 f905 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    break;
  case 5:

    if (millis() > (msStartTime + 55000)) defstate++;
 80a082e:	4b2f      	ldr	r3, [pc, #188]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
 80a0836:	33d8      	adds	r3, #216	; 0xd8
 80a0838:	e032      	b.n	80a08a0 <_Z15PerformDefrost2i+0x1d0>
    break;
  case 6:
    turnOnRelay(RelayFan2);
 80a083a:	2007      	movs	r0, #7
 80a083c:	f7ff ff42 	bl	80a06c4 <_Z11turnOnRelayi>
    turnOnRelay(RelayCool2);
 80a0840:	2005      	movs	r0, #5
 80a0842:	f7ff ff3f 	bl	80a06c4 <_Z11turnOnRelayi>
 80a0846:	f002 f8f7 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
   
    if (millis() > (msStartTime + 65000)) defstate = 8;
 80a084a:	4b28      	ldr	r3, [pc, #160]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a084c:	681b      	ldr	r3, [r3, #0]
 80a084e:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80a0852:	33e8      	adds	r3, #232	; 0xe8
 80a0854:	4298      	cmp	r0, r3
 80a0856:	d940      	bls.n	80a08da <_Z15PerformDefrost2i+0x20a>
 80a0858:	2308      	movs	r3, #8
 80a085a:	e025      	b.n	80a08a8 <_Z15PerformDefrost2i+0x1d8>
  break;
  case 8:
    damper.setVal(damper2_2, damper2);
 80a085c:	4a28      	ldr	r2, [pc, #160]	; (80a0900 <_Z15PerformDefrost2i+0x230>)
 80a085e:	2300      	movs	r3, #0
 80a0860:	8812      	ldrh	r2, [r2, #0]
 80a0862:	2101      	movs	r1, #1
 80a0864:	4824      	ldr	r0, [pc, #144]	; (80a08f8 <_Z15PerformDefrost2i+0x228>)
 80a0866:	f001 fb87 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper2_1, damper1);
 80a086a:	4a24      	ldr	r2, [pc, #144]	; (80a08fc <_Z15PerformDefrost2i+0x22c>)
 80a086c:	2300      	movs	r3, #0
 80a086e:	4619      	mov	r1, r3
 80a0870:	8812      	ldrh	r2, [r2, #0]
 80a0872:	4821      	ldr	r0, [pc, #132]	; (80a08f8 <_Z15PerformDefrost2i+0x228>)
 80a0874:	f001 fb80 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0878:	f002 f8de 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 75000)) defstate++;    
 80a087c:	4b1b      	ldr	r3, [pc, #108]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a087e:	681b      	ldr	r3, [r3, #0]
 80a0880:	f503 3392 	add.w	r3, r3, #74752	; 0x12400
 80a0884:	33f8      	adds	r3, #248	; 0xf8
 80a0886:	e00b      	b.n	80a08a0 <_Z15PerformDefrost2i+0x1d0>
  break;
  case 9:
    turnOnRelay(RelayBypassDamper2);
 80a0888:	2006      	movs	r0, #6
 80a088a:	f7ff ff1b 	bl	80a06c4 <_Z11turnOnRelayi>
 80a088e:	e009      	b.n	80a08a4 <_Z15PerformDefrost2i+0x1d4>
 80a0890:	f002 f8d2 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    defstate++;
    break;
  case 10:
    if (millis() > (msStartTime + 95000))
 80a0894:	4b15      	ldr	r3, [pc, #84]	; (80a08ec <_Z15PerformDefrost2i+0x21c>)
 80a0896:	681b      	ldr	r3, [r3, #0]
 80a0898:	f503 33b9 	add.w	r3, r3, #94720	; 0x17200
 80a089c:	f503 738c 	add.w	r3, r3, #280	; 0x118
 80a08a0:	4298      	cmp	r0, r3
 80a08a2:	d91a      	bls.n	80a08da <_Z15PerformDefrost2i+0x20a>
      defstate++;
 80a08a4:	6823      	ldr	r3, [r4, #0]
 80a08a6:	3301      	adds	r3, #1
 80a08a8:	6023      	str	r3, [r4, #0]
 80a08aa:	e016      	b.n	80a08da <_Z15PerformDefrost2i+0x20a>

    break;
  case 11:

    DefrostLevel2 = 0;
 80a08ac:	4d11      	ldr	r5, [pc, #68]	; (80a08f4 <_Z15PerformDefrost2i+0x224>)
 80a08ae:	2300      	movs	r3, #0
    defstate = 0;
    MQTTpublish("defrost2",String(DefrostLevel2,DEC));
 80a08b0:	4916      	ldr	r1, [pc, #88]	; (80a090c <_Z15PerformDefrost2i+0x23c>)
 80a08b2:	a804      	add	r0, sp, #16
      defstate++;

    break;
  case 11:

    DefrostLevel2 = 0;
 80a08b4:	602b      	str	r3, [r5, #0]
    defstate = 0;
 80a08b6:	6023      	str	r3, [r4, #0]
    MQTTpublish("defrost2",String(DefrostLevel2,DEC));
 80a08b8:	f002 fe53 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a08bc:	220a      	movs	r2, #10
 80a08be:	6829      	ldr	r1, [r5, #0]
 80a08c0:	4668      	mov	r0, sp
 80a08c2:	f002 fe8c 	bl	80a35de <_ZN6StringC1Eih>
 80a08c6:	9900      	ldr	r1, [sp, #0]
 80a08c8:	a804      	add	r0, sp, #16
 80a08ca:	f7ff fd1f 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a08ce:	4668      	mov	r0, sp
 80a08d0:	f002 fe00 	bl	80a34d4 <_ZN6StringD1Ev>
 80a08d4:	a804      	add	r0, sp, #16
 80a08d6:	f002 fdfd 	bl	80a34d4 <_ZN6StringD1Ev>

  }
}
 80a08da:	b008      	add	sp, #32
 80a08dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a08e0:	200000e8 	.word	0x200000e8
 80a08e4:	200000c0 	.word	0x200000c0
 80a08e8:	080a6464 	.word	0x080a6464
 80a08ec:	200000bc 	.word	0x200000bc
 80a08f0:	080a6472 	.word	0x080a6472
 80a08f4:	200002bc 	.word	0x200002bc
 80a08f8:	200001c0 	.word	0x200001c0
 80a08fc:	20000000 	.word	0x20000000
 80a0900:	20000002 	.word	0x20000002
 80a0904:	200000b4 	.word	0x200000b4
 80a0908:	200000f0 	.word	0x200000f0
 80a090c:	080a6559 	.word	0x080a6559

080a0910 <_Z15cmdStopDefrost26String>:
   //msDefrost2 = millis() + defrostTimer -100000;
  return 0;
}

int cmdStopDefrost2(String command)
{
 80a0910:	b510      	push	{r4, lr}
  turnOnRelay(RelayCool2);
 80a0912:	2005      	movs	r0, #5
   //msDefrost2 = millis() + defrostTimer -100000;
  return 0;
}

int cmdStopDefrost2(String command)
{
 80a0914:	b088      	sub	sp, #32
  turnOnRelay(RelayCool2);
 80a0916:	f7ff fed5 	bl	80a06c4 <_Z11turnOnRelayi>
  turnOnRelay(RelayFan2);
 80a091a:	2007      	movs	r0, #7
 80a091c:	f7ff fed2 	bl	80a06c4 <_Z11turnOnRelayi>
  turnOnRelay(RelayBypassDamper2);
 80a0920:	2006      	movs	r0, #6
 80a0922:	f7ff fecf 	bl	80a06c4 <_Z11turnOnRelayi>
  InReverse2 = 0;
 80a0926:	4b0e      	ldr	r3, [pc, #56]	; (80a0960 <_Z15cmdStopDefrost26String+0x50>)
 80a0928:	2400      	movs	r4, #0
  MQTTpublish("defrost2",String(DefrostLevel2,DEC));
 80a092a:	490e      	ldr	r1, [pc, #56]	; (80a0964 <_Z15cmdStopDefrost26String+0x54>)
 80a092c:	a804      	add	r0, sp, #16
int cmdStopDefrost2(String command)
{
  turnOnRelay(RelayCool2);
  turnOnRelay(RelayFan2);
  turnOnRelay(RelayBypassDamper2);
  InReverse2 = 0;
 80a092e:	701c      	strb	r4, [r3, #0]
  MQTTpublish("defrost2",String(DefrostLevel2,DEC));
 80a0930:	f002 fe17 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0934:	4b0c      	ldr	r3, [pc, #48]	; (80a0968 <_Z15cmdStopDefrost26String+0x58>)
 80a0936:	220a      	movs	r2, #10
 80a0938:	6819      	ldr	r1, [r3, #0]
 80a093a:	4668      	mov	r0, sp
 80a093c:	f002 fe4f 	bl	80a35de <_ZN6StringC1Eih>
 80a0940:	9900      	ldr	r1, [sp, #0]
 80a0942:	a804      	add	r0, sp, #16
 80a0944:	f7ff fce2 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a0948:	4668      	mov	r0, sp
 80a094a:	f002 fdc3 	bl	80a34d4 <_ZN6StringD1Ev>
 80a094e:	a804      	add	r0, sp, #16
 80a0950:	f002 fdc0 	bl	80a34d4 <_ZN6StringD1Ev>

    
  PerformDefrost2(8);
 80a0954:	2008      	movs	r0, #8
 80a0956:	f7ff febb 	bl	80a06d0 <_Z15PerformDefrost2i>
  return 0;
}
 80a095a:	4620      	mov	r0, r4
 80a095c:	b008      	add	sp, #32
 80a095e:	bd10      	pop	{r4, pc}
 80a0960:	200000b4 	.word	0x200000b4
 80a0964:	080a6559 	.word	0x080a6559
 80a0968:	200002bc 	.word	0x200002bc

080a096c <_Z11cmdDefrost26String>:

int cmdDefrost2(String szDefrost2)
{
 80a096c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  DefrostLevel2 = szDefrost2.toInt();
 80a096e:	f002 fe9a 	bl	80a36a6 <_ZNK6String5toIntEv>
 80a0972:	4b08      	ldr	r3, [pc, #32]	; (80a0994 <_Z11cmdDefrost26String+0x28>)
 80a0974:	6018      	str	r0, [r3, #0]
 80a0976:	461c      	mov	r4, r3
  if (DefrostLevel2==0) cmdStopDefrost2("0");
 80a0978:	b948      	cbnz	r0, 80a098e <_Z11cmdDefrost26String+0x22>
 80a097a:	4907      	ldr	r1, [pc, #28]	; (80a0998 <_Z11cmdDefrost26String+0x2c>)
 80a097c:	4668      	mov	r0, sp
 80a097e:	f002 fdf0 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0982:	4668      	mov	r0, sp
 80a0984:	f7ff ffc4 	bl	80a0910 <_Z15cmdStopDefrost26String>
 80a0988:	4668      	mov	r0, sp
 80a098a:	f002 fda3 	bl	80a34d4 <_ZN6StringD1Ev>
  return DefrostLevel2;
}
 80a098e:	6820      	ldr	r0, [r4, #0]
 80a0990:	b004      	add	sp, #16
 80a0992:	bd10      	pop	{r4, pc}
 80a0994:	200002bc 	.word	0x200002bc
 80a0998:	080a644f 	.word	0x080a644f

080a099c <_Z15PerformDefrost1i>:

  }
}

void PerformDefrost1(int advanceToState)
{
 80a099c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  static int defstate = 0, prevDefstate= 0;
  static uint32_t msStartTime = 0;
  static uint16_t damper1=3000;
  static uint16_t damper2=3000;
  static uint16_t txv1Value=3000;
  if ((defstate != prevDefstate ) || (advanceToState != 0)) {
 80a09a0:	4baa      	ldr	r3, [pc, #680]	; (80a0c4c <_Z15PerformDefrost1i+0x2b0>)
 80a09a2:	4cab      	ldr	r4, [pc, #684]	; (80a0c50 <_Z15PerformDefrost1i+0x2b4>)
 80a09a4:	681a      	ldr	r2, [r3, #0]
 80a09a6:	6821      	ldr	r1, [r4, #0]

  }
}

void PerformDefrost1(int advanceToState)
{
 80a09a8:	b088      	sub	sp, #32
  static int defstate = 0, prevDefstate= 0;
  static uint32_t msStartTime = 0;
  static uint16_t damper1=3000;
  static uint16_t damper2=3000;
  static uint16_t txv1Value=3000;
  if ((defstate != prevDefstate ) || (advanceToState != 0)) {
 80a09aa:	4291      	cmp	r1, r2

  }
}

void PerformDefrost1(int advanceToState)
{
 80a09ac:	4606      	mov	r6, r0
 80a09ae:	461d      	mov	r5, r3
  static int defstate = 0, prevDefstate= 0;
  static uint32_t msStartTime = 0;
  static uint16_t damper1=3000;
  static uint16_t damper2=3000;
  static uint16_t txv1Value=3000;
  if ((defstate != prevDefstate ) || (advanceToState != 0)) {
 80a09b0:	d100      	bne.n	80a09b4 <_Z15PerformDefrost1i+0x18>
 80a09b2:	b1f8      	cbz	r0, 80a09f4 <_Z15PerformDefrost1i+0x58>
     MQTTpublish("defros1State", String::format("defstate: %d  Elapsed: %d ", defstate, msStartTime - millis() ));
 80a09b4:	49a7      	ldr	r1, [pc, #668]	; (80a0c54 <_Z15PerformDefrost1i+0x2b8>)
 80a09b6:	a804      	add	r0, sp, #16
 80a09b8:	f002 fdd3 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a09bc:	4ba6      	ldr	r3, [pc, #664]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
 80a09be:	6827      	ldr	r7, [r4, #0]
 80a09c0:	f8d3 8000 	ldr.w	r8, [r3]
 80a09c4:	f002 f838 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
 80a09c8:	463a      	mov	r2, r7
 80a09ca:	ebc0 0308 	rsb	r3, r0, r8
 80a09ce:	49a3      	ldr	r1, [pc, #652]	; (80a0c5c <_Z15PerformDefrost1i+0x2c0>)
 80a09d0:	4668      	mov	r0, sp
 80a09d2:	f002 fe6d 	bl	80a36b0 <_ZN6String6formatEPKcz>
 80a09d6:	9900      	ldr	r1, [sp, #0]
 80a09d8:	a804      	add	r0, sp, #16
 80a09da:	f7ff fc97 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a09de:	4668      	mov	r0, sp
 80a09e0:	f002 fd78 	bl	80a34d4 <_ZN6StringD1Ev>
 80a09e4:	a804      	add	r0, sp, #16
 80a09e6:	f002 fd75 	bl	80a34d4 <_ZN6StringD1Ev>
    prevDefstate = defstate;
 80a09ea:	6823      	ldr	r3, [r4, #0]
 80a09ec:	602b      	str	r3, [r5, #0]
  }
  if (advanceToState !=0) defstate = advanceToState;
 80a09ee:	b10e      	cbz	r6, 80a09f4 <_Z15PerformDefrost1i+0x58>
 80a09f0:	4b97      	ldr	r3, [pc, #604]	; (80a0c50 <_Z15PerformDefrost1i+0x2b4>)
 80a09f2:	601e      	str	r6, [r3, #0]
  switch (defstate)
 80a09f4:	6823      	ldr	r3, [r4, #0]
 80a09f6:	2b0a      	cmp	r3, #10
 80a09f8:	f200 8125 	bhi.w	80a0c46 <_Z15PerformDefrost1i+0x2aa>
 80a09fc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80a0a00:	0012000b 	.word	0x0012000b
 80a0a04:	0089006f 	.word	0x0089006f
 80a0a08:	00950123 	.word	0x00950123
 80a0a0c:	00a9009f 	.word	0x00a9009f
 80a0a10:	00ef00c6 	.word	0x00ef00c6
 80a0a14:	010c      	.short	0x010c
  {
  case 0:
    if (DefrostLevel1 > 0) defstate = 1;
 80a0a16:	4b92      	ldr	r3, [pc, #584]	; (80a0c60 <_Z15PerformDefrost1i+0x2c4>)
 80a0a18:	681b      	ldr	r3, [r3, #0]
 80a0a1a:	2b00      	cmp	r3, #0
 80a0a1c:	f340 8113 	ble.w	80a0c46 <_Z15PerformDefrost1i+0x2aa>
 80a0a20:	2301      	movs	r3, #1
 80a0a22:	e0da      	b.n	80a0bda <_Z15PerformDefrost1i+0x23e>
    break;
  case 1:
    txv1Value = damper.getVal(txv1);
 80a0a24:	2104      	movs	r1, #4
 80a0a26:	488f      	ldr	r0, [pc, #572]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0a28:	f001 fa4d 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a0a2c:	4b8e      	ldr	r3, [pc, #568]	; (80a0c68 <_Z15PerformDefrost1i+0x2cc>)
    damper1 = damper.getVal(damper1_1);
 80a0a2e:	2102      	movs	r1, #2
  {
  case 0:
    if (DefrostLevel1 > 0) defstate = 1;
    break;
  case 1:
    txv1Value = damper.getVal(txv1);
 80a0a30:	8018      	strh	r0, [r3, #0]
    damper1 = damper.getVal(damper1_1);
 80a0a32:	488c      	ldr	r0, [pc, #560]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0a34:	f001 fa47 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a0a38:	4b8c      	ldr	r3, [pc, #560]	; (80a0c6c <_Z15PerformDefrost1i+0x2d0>)
    damper2 = damper.getVal(damper1_2);
 80a0a3a:	2103      	movs	r1, #3
  case 0:
    if (DefrostLevel1 > 0) defstate = 1;
    break;
  case 1:
    txv1Value = damper.getVal(txv1);
    damper1 = damper.getVal(damper1_1);
 80a0a3c:	8018      	strh	r0, [r3, #0]
    damper2 = damper.getVal(damper1_2);
 80a0a3e:	4889      	ldr	r0, [pc, #548]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0a40:	f001 fa41 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a0a44:	4b8a      	ldr	r3, [pc, #552]	; (80a0c70 <_Z15PerformDefrost1i+0x2d4>)
    msStartTime = millis();
 80a0a46:	4d84      	ldr	r5, [pc, #528]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
    if (DefrostLevel1 > 0) defstate = 1;
    break;
  case 1:
    txv1Value = damper.getVal(txv1);
    damper1 = damper.getVal(damper1_1);
    damper2 = damper.getVal(damper1_2);
 80a0a48:	8018      	strh	r0, [r3, #0]
 80a0a4a:	f001 fff5 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    msStartTime = millis();
    damper.setVal(txv1, 4095);
 80a0a4e:	2300      	movs	r3, #0
 80a0a50:	f640 72ff 	movw	r2, #4095	; 0xfff
 80a0a54:	2104      	movs	r1, #4
    break;
  case 1:
    txv1Value = damper.getVal(txv1);
    damper1 = damper.getVal(damper1_1);
    damper2 = damper.getVal(damper1_2);
    msStartTime = millis();
 80a0a56:	6028      	str	r0, [r5, #0]
    damper.setVal(txv1, 4095);
 80a0a58:	4882      	ldr	r0, [pc, #520]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0a5a:	f001 fa8d 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    turnOffRelay(RelayCool1);
 80a0a5e:	2003      	movs	r0, #3
 80a0a60:	f7ff fe33 	bl	80a06ca <_Z12turnOffRelayi>
    turnOffRelay(RelayFan1);
 80a0a64:	2002      	movs	r0, #2
 80a0a66:	f7ff fe30 	bl	80a06ca <_Z12turnOffRelayi>
    turnOffRelay(RelayBypassDamper1);
 80a0a6a:	2004      	movs	r0, #4
 80a0a6c:	f7ff fe2d 	bl	80a06ca <_Z12turnOffRelayi>
    InReverse1 = !InReverse1;
 80a0a70:	4a80      	ldr	r2, [pc, #512]	; (80a0c74 <_Z15PerformDefrost1i+0x2d8>)
 80a0a72:	7813      	ldrb	r3, [r2, #0]
 80a0a74:	f083 0301 	eor.w	r3, r3, #1
 80a0a78:	7013      	strb	r3, [r2, #0]
    if (InReverse1)
 80a0a7a:	b11b      	cbz	r3, 80a0a84 <_Z15PerformDefrost1i+0xe8>
 80a0a7c:	f001 ffdc 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
      msStartReverse1 = millis();
 80a0a80:	4b7d      	ldr	r3, [pc, #500]	; (80a0c78 <_Z15PerformDefrost1i+0x2dc>)
 80a0a82:	6018      	str	r0, [r3, #0]
    if (DefrostLevel1 >= 2)
 80a0a84:	4b76      	ldr	r3, [pc, #472]	; (80a0c60 <_Z15PerformDefrost1i+0x2c4>)
    {
      msStartTime = msStartTime - 25000;
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0a86:	2103      	movs	r1, #3
 80a0a88:	461e      	mov	r6, r3
    turnOffRelay(RelayFan1);
    turnOffRelay(RelayBypassDamper1);
    InReverse1 = !InReverse1;
    if (InReverse1)
      msStartReverse1 = millis();
    if (DefrostLevel1 >= 2)
 80a0a8a:	681a      	ldr	r2, [r3, #0]
    {
      msStartTime = msStartTime - 25000;
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0a8c:	4875      	ldr	r0, [pc, #468]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
    turnOffRelay(RelayFan1);
    turnOffRelay(RelayBypassDamper1);
    InReverse1 = !InReverse1;
    if (InReverse1)
      msStartReverse1 = millis();
    if (DefrostLevel1 >= 2)
 80a0a8e:	2a01      	cmp	r2, #1
    {
      msStartTime = msStartTime - 25000;
 80a0a90:	bfc8      	it	gt
 80a0a92:	682b      	ldrgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0a94:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    InReverse1 = !InReverse1;
    if (InReverse1)
      msStartReverse1 = millis();
    if (DefrostLevel1 >= 2)
    {
      msStartTime = msStartTime - 25000;
 80a0a98:	bfc2      	ittt	gt
 80a0a9a:	f5a3 43c3 	subgt.w	r3, r3, #24960	; 0x6180
 80a0a9e:	3b28      	subgt	r3, #40	; 0x28
 80a0aa0:	602b      	strgt	r3, [r5, #0]
    }
    //wait for dampers
    damper.setVal(damper1_2, 500);
 80a0aa2:	2300      	movs	r3, #0
 80a0aa4:	f001 fa68 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_1, 500);
 80a0aa8:	2300      	movs	r3, #0
 80a0aaa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80a0aae:	2102      	movs	r1, #2
 80a0ab0:	486c      	ldr	r0, [pc, #432]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0ab2:	f001 fa61 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    MQTTpublish("defrost1",String(DefrostLevel1,DEC));
 80a0ab6:	4971      	ldr	r1, [pc, #452]	; (80a0c7c <_Z15PerformDefrost1i+0x2e0>)
 80a0ab8:	a804      	add	r0, sp, #16
 80a0aba:	f002 fd52 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0abe:	220a      	movs	r2, #10
 80a0ac0:	6831      	ldr	r1, [r6, #0]
 80a0ac2:	4668      	mov	r0, sp
 80a0ac4:	f002 fd8b 	bl	80a35de <_ZN6StringC1Eih>
 80a0ac8:	9900      	ldr	r1, [sp, #0]
 80a0aca:	a804      	add	r0, sp, #16
 80a0acc:	f7ff fc1e 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a0ad0:	4668      	mov	r0, sp
 80a0ad2:	f002 fcff 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0ad6:	a804      	add	r0, sp, #16
 80a0ad8:	f002 fcfc 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0adc:	e07b      	b.n	80a0bd6 <_Z15PerformDefrost1i+0x23a>
    defstate++;
    break;
  case 2:
    if (psi[4] > 425) turnOffRelay(RelayCompr1); 
 80a0ade:	4b68      	ldr	r3, [pc, #416]	; (80a0c80 <_Z15PerformDefrost1i+0x2e4>)
 80a0ae0:	4968      	ldr	r1, [pc, #416]	; (80a0c84 <_Z15PerformDefrost1i+0x2e8>)
 80a0ae2:	6918      	ldr	r0, [r3, #16]
 80a0ae4:	f005 fb42 	bl	80a616c <__aeabi_fcmpgt>
 80a0ae8:	b110      	cbz	r0, 80a0af0 <_Z15PerformDefrost1i+0x154>
 80a0aea:	2001      	movs	r0, #1
 80a0aec:	f7ff fded 	bl	80a06ca <_Z12turnOffRelayi>
 80a0af0:	f001 ffa2 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 5000)){
 80a0af4:	4b58      	ldr	r3, [pc, #352]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
 80a0af6:	681b      	ldr	r3, [r3, #0]
 80a0af8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 80a0afc:	3308      	adds	r3, #8
 80a0afe:	4298      	cmp	r0, r3
 80a0b00:	f240 80a1 	bls.w	80a0c46 <_Z15PerformDefrost1i+0x2aa>
      defstate++;
 80a0b04:	6823      	ldr	r3, [r4, #0]
      turnOffRelay(RelayCompr1);
 80a0b06:	2001      	movs	r0, #1
    defstate++;
    break;
  case 2:
    if (psi[4] > 425) turnOffRelay(RelayCompr1); 
    if (millis() > (msStartTime + 5000)){
      defstate++;
 80a0b08:	3301      	adds	r3, #1
 80a0b0a:	6023      	str	r3, [r4, #0]
      turnOffRelay(RelayCompr1);
 80a0b0c:	f7ff fddd 	bl	80a06ca <_Z12turnOffRelayi>
 80a0b10:	e099      	b.n	80a0c46 <_Z15PerformDefrost1i+0x2aa>
 80a0b12:	f001 ff91 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    } 
    break;
  case 3:
    //wait for damprt clodse with fan off/compressor off
    if (millis() > (msStartTime + 65000))
 80a0b16:	4b50      	ldr	r3, [pc, #320]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
 80a0b18:	681b      	ldr	r3, [r3, #0]
 80a0b1a:	f503 437d 	add.w	r3, r3, #64768	; 0xfd00
 80a0b1e:	33e8      	adds	r3, #232	; 0xe8
 80a0b20:	4298      	cmp	r0, r3
 80a0b22:	f240 8090 	bls.w	80a0c46 <_Z15PerformDefrost1i+0x2aa>
      defstate = 5;
 80a0b26:	2305      	movs	r3, #5
 80a0b28:	e057      	b.n	80a0bda <_Z15PerformDefrost1i+0x23e>
    break;
  case 5:;
    turnOnRelay(RelayFan1);
 80a0b2a:	2002      	movs	r0, #2
 80a0b2c:	f7ff fdca 	bl	80a06c4 <_Z11turnOnRelayi>
    turnOffRelay(RelayCool1);  //reverse heat - cool
 80a0b30:	2003      	movs	r0, #3
 80a0b32:	f7ff fdca 	bl	80a06ca <_Z12turnOffRelayi>
    turnOnRelay(RelayCompr1);
 80a0b36:	2001      	movs	r0, #1
 80a0b38:	f7ff fdc4 	bl	80a06c4 <_Z11turnOnRelayi>
 80a0b3c:	e04b      	b.n	80a0bd6 <_Z15PerformDefrost1i+0x23a>
 80a0b3e:	f001 ff7b 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    defstate++;
    break;
  case 6:
      //run in reverse with dampers clsoed, bypass open
      if (millis() > (msStartTime + 125000 + DefrostLevel1 * 10000)) defstate++;
 80a0b42:	4b47      	ldr	r3, [pc, #284]	; (80a0c60 <_Z15PerformDefrost1i+0x2c4>)
 80a0b44:	681a      	ldr	r2, [r3, #0]
 80a0b46:	4b44      	ldr	r3, [pc, #272]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
 80a0b48:	681b      	ldr	r3, [r3, #0]
 80a0b4a:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80a0b4e:	3348      	adds	r3, #72	; 0x48
 80a0b50:	e03b      	b.n	80a0bca <_Z15PerformDefrost1i+0x22e>
    break;
  case 7:
      // back to cooling mode
      turnOnRelay(RelayFan1);
 80a0b52:	2002      	movs	r0, #2
 80a0b54:	f7ff fdb6 	bl	80a06c4 <_Z11turnOnRelayi>
      turnOnRelay(RelayCool1);
 80a0b58:	2003      	movs	r0, #3
 80a0b5a:	f7ff fdb3 	bl	80a06c4 <_Z11turnOnRelayi>
      InReverse1 = FALSE;
 80a0b5e:	4b45      	ldr	r3, [pc, #276]	; (80a0c74 <_Z15PerformDefrost1i+0x2d8>)
 80a0b60:	2500      	movs	r5, #0
      turnOnRelay(RelayCompr1);
 80a0b62:	2001      	movs	r0, #1
    break;
  case 7:
      // back to cooling mode
      turnOnRelay(RelayFan1);
      turnOnRelay(RelayCool1);
      InReverse1 = FALSE;
 80a0b64:	701d      	strb	r5, [r3, #0]
      turnOnRelay(RelayCompr1);
 80a0b66:	f7ff fdad 	bl	80a06c4 <_Z11turnOnRelayi>
      damper.setVal(txv1,txv1Value);
 80a0b6a:	4a3f      	ldr	r2, [pc, #252]	; (80a0c68 <_Z15PerformDefrost1i+0x2cc>)
 80a0b6c:	462b      	mov	r3, r5
 80a0b6e:	8812      	ldrh	r2, [r2, #0]
 80a0b70:	2104      	movs	r1, #4
 80a0b72:	483c      	ldr	r0, [pc, #240]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0b74:	f001 fa00 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0b78:	f001 ff5e 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
      if (millis() > (msStartTime + 165000 + DefrostLevel1 * 10000)) defstate++;      
 80a0b7c:	4b38      	ldr	r3, [pc, #224]	; (80a0c60 <_Z15PerformDefrost1i+0x2c4>)
 80a0b7e:	681a      	ldr	r2, [r3, #0]
 80a0b80:	4b35      	ldr	r3, [pc, #212]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
 80a0b82:	681b      	ldr	r3, [r3, #0]
 80a0b84:	f503 3321 	add.w	r3, r3, #164864	; 0x28400
 80a0b88:	3388      	adds	r3, #136	; 0x88
 80a0b8a:	e01e      	b.n	80a0bca <_Z15PerformDefrost1i+0x22e>
    break;
  case 8:
    //restore dampers to previous position
    //restore txv 
    damper.setVal(damper1_2, damper2);
 80a0b8c:	4a38      	ldr	r2, [pc, #224]	; (80a0c70 <_Z15PerformDefrost1i+0x2d4>)
 80a0b8e:	2300      	movs	r3, #0
 80a0b90:	8812      	ldrh	r2, [r2, #0]
 80a0b92:	2103      	movs	r1, #3
 80a0b94:	4833      	ldr	r0, [pc, #204]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0b96:	f001 f9ef 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(damper1_1, damper1);
 80a0b9a:	4a34      	ldr	r2, [pc, #208]	; (80a0c6c <_Z15PerformDefrost1i+0x2d0>)
 80a0b9c:	2300      	movs	r3, #0
 80a0b9e:	8812      	ldrh	r2, [r2, #0]
 80a0ba0:	2102      	movs	r1, #2
 80a0ba2:	4830      	ldr	r0, [pc, #192]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0ba4:	f001 f9e8 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
    damper.setVal(txv1,txv1Value);
 80a0ba8:	4a2f      	ldr	r2, [pc, #188]	; (80a0c68 <_Z15PerformDefrost1i+0x2cc>)
 80a0baa:	2300      	movs	r3, #0
 80a0bac:	8812      	ldrh	r2, [r2, #0]
 80a0bae:	2104      	movs	r1, #4
 80a0bb0:	482c      	ldr	r0, [pc, #176]	; (80a0c64 <_Z15PerformDefrost1i+0x2c8>)
 80a0bb2:	f001 f9e1 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0bb6:	f001 ff3f 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 200000  + DefrostLevel1 * 10000)) defstate++;
 80a0bba:	4b29      	ldr	r3, [pc, #164]	; (80a0c60 <_Z15PerformDefrost1i+0x2c4>)
 80a0bbc:	681a      	ldr	r2, [r3, #0]
 80a0bbe:	4b26      	ldr	r3, [pc, #152]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
 80a0bc0:	681b      	ldr	r3, [r3, #0]
 80a0bc2:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 80a0bc6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80a0bca:	f242 7110 	movw	r1, #10000	; 0x2710
 80a0bce:	fb01 3302 	mla	r3, r1, r2, r3
 80a0bd2:	4298      	cmp	r0, r3
 80a0bd4:	d937      	bls.n	80a0c46 <_Z15PerformDefrost1i+0x2aa>
 80a0bd6:	6823      	ldr	r3, [r4, #0]
 80a0bd8:	3301      	adds	r3, #1
 80a0bda:	6023      	str	r3, [r4, #0]
 80a0bdc:	e033      	b.n	80a0c46 <_Z15PerformDefrost1i+0x2aa>
    break;
  case 9:
    turnOnRelay(RelayBypassDamper1);
 80a0bde:	2004      	movs	r0, #4
 80a0be0:	f7ff fd70 	bl	80a06c4 <_Z11turnOnRelayi>
 80a0be4:	f001 ff28 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > (msStartTime + 220000  + DefrostLevel1 * 10000)) {
 80a0be8:	f242 7110 	movw	r1, #10000	; 0x2710
 80a0bec:	4b1c      	ldr	r3, [pc, #112]	; (80a0c60 <_Z15PerformDefrost1i+0x2c4>)
 80a0bee:	681a      	ldr	r2, [r3, #0]
 80a0bf0:	4b19      	ldr	r3, [pc, #100]	; (80a0c58 <_Z15PerformDefrost1i+0x2bc>)
 80a0bf2:	681b      	ldr	r3, [r3, #0]
 80a0bf4:	f503 3356 	add.w	r3, r3, #219136	; 0x35800
 80a0bf8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80a0bfc:	fb01 3302 	mla	r3, r1, r2, r3
 80a0c00:	4298      	cmp	r0, r3
 80a0c02:	d920      	bls.n	80a0c46 <_Z15PerformDefrost1i+0x2aa>
      defstate++;
 80a0c04:	6823      	ldr	r3, [r4, #0]
      turnOnRelay(RelayCompr1);
 80a0c06:	2001      	movs	r0, #1
    if (millis() > (msStartTime + 200000  + DefrostLevel1 * 10000)) defstate++;
    break;
  case 9:
    turnOnRelay(RelayBypassDamper1);
    if (millis() > (msStartTime + 220000  + DefrostLevel1 * 10000)) {
      defstate++;
 80a0c08:	3301      	adds	r3, #1
 80a0c0a:	6023      	str	r3, [r4, #0]
      turnOnRelay(RelayCompr1);
 80a0c0c:	f7ff fd5a 	bl	80a06c4 <_Z11turnOnRelayi>
      turnOnRelay(RelayFan1);
 80a0c10:	2002      	movs	r0, #2
 80a0c12:	f7ff fd57 	bl	80a06c4 <_Z11turnOnRelayi>
 80a0c16:	e016      	b.n	80a0c46 <_Z15PerformDefrost1i+0x2aa>
    }
    break;
  case 10:
    DefrostLevel1 = 0;
 80a0c18:	4d11      	ldr	r5, [pc, #68]	; (80a0c60 <_Z15PerformDefrost1i+0x2c4>)
 80a0c1a:	2300      	movs	r3, #0
    defstate = 0;
    MQTTpublish("defrost1",String(DefrostLevel1,DEC));
 80a0c1c:	4917      	ldr	r1, [pc, #92]	; (80a0c7c <_Z15PerformDefrost1i+0x2e0>)
 80a0c1e:	a804      	add	r0, sp, #16
      turnOnRelay(RelayCompr1);
      turnOnRelay(RelayFan1);
    }
    break;
  case 10:
    DefrostLevel1 = 0;
 80a0c20:	602b      	str	r3, [r5, #0]
    defstate = 0;
 80a0c22:	6023      	str	r3, [r4, #0]
    MQTTpublish("defrost1",String(DefrostLevel1,DEC));
 80a0c24:	f002 fc9d 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0c28:	220a      	movs	r2, #10
 80a0c2a:	6829      	ldr	r1, [r5, #0]
 80a0c2c:	4668      	mov	r0, sp
 80a0c2e:	f002 fcd6 	bl	80a35de <_ZN6StringC1Eih>
 80a0c32:	9900      	ldr	r1, [sp, #0]
 80a0c34:	a804      	add	r0, sp, #16
 80a0c36:	f7ff fb69 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a0c3a:	4668      	mov	r0, sp
 80a0c3c:	f002 fc4a 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0c40:	a804      	add	r0, sp, #16
 80a0c42:	f002 fc47 	bl	80a34d4 <_ZN6StringD1Ev>

  }
}
 80a0c46:	b008      	add	sp, #32
 80a0c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0c4c:	2000019c 	.word	0x2000019c
 80a0c50:	200000cc 	.word	0x200000cc
 80a0c54:	080a648d 	.word	0x080a648d
 80a0c58:	20000134 	.word	0x20000134
 80a0c5c:	080a6472 	.word	0x080a6472
 80a0c60:	200002b8 	.word	0x200002b8
 80a0c64:	200001c0 	.word	0x200001c0
 80a0c68:	2000003a 	.word	0x2000003a
 80a0c6c:	20000034 	.word	0x20000034
 80a0c70:	20000036 	.word	0x20000036
 80a0c74:	200001b4 	.word	0x200001b4
 80a0c78:	200000ec 	.word	0x200000ec
 80a0c7c:	080a6543 	.word	0x080a6543
 80a0c80:	200002c8 	.word	0x200002c8
 80a0c84:	43d48000 	.word	0x43d48000

080a0c88 <_Z15cmdStopDefrost16String>:
  if (DefrostLevel1==0) cmdStopDefrost1("0");
  return DefrostLevel1;
}

int cmdStopDefrost1(String command)
{
 80a0c88:	b510      	push	{r4, lr}
  turnOnRelay(RelayCool1);
 80a0c8a:	2003      	movs	r0, #3
  if (DefrostLevel1==0) cmdStopDefrost1("0");
  return DefrostLevel1;
}

int cmdStopDefrost1(String command)
{
 80a0c8c:	b088      	sub	sp, #32
  turnOnRelay(RelayCool1);
 80a0c8e:	f7ff fd19 	bl	80a06c4 <_Z11turnOnRelayi>
  turnOnRelay(RelayFan1);
 80a0c92:	2002      	movs	r0, #2
 80a0c94:	f7ff fd16 	bl	80a06c4 <_Z11turnOnRelayi>
  turnOnRelay(RelayBypassDamper1);
 80a0c98:	2004      	movs	r0, #4
 80a0c9a:	f7ff fd13 	bl	80a06c4 <_Z11turnOnRelayi>
  InReverse1 = 0;
 80a0c9e:	4b0e      	ldr	r3, [pc, #56]	; (80a0cd8 <_Z15cmdStopDefrost16String+0x50>)
 80a0ca0:	2400      	movs	r4, #0
  MQTTpublish("defrost1",String(DefrostLevel1,DEC));
 80a0ca2:	490e      	ldr	r1, [pc, #56]	; (80a0cdc <_Z15cmdStopDefrost16String+0x54>)
 80a0ca4:	a804      	add	r0, sp, #16
int cmdStopDefrost1(String command)
{
  turnOnRelay(RelayCool1);
  turnOnRelay(RelayFan1);
  turnOnRelay(RelayBypassDamper1);
  InReverse1 = 0;
 80a0ca6:	701c      	strb	r4, [r3, #0]
  MQTTpublish("defrost1",String(DefrostLevel1,DEC));
 80a0ca8:	f002 fc5b 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0cac:	4b0c      	ldr	r3, [pc, #48]	; (80a0ce0 <_Z15cmdStopDefrost16String+0x58>)
 80a0cae:	220a      	movs	r2, #10
 80a0cb0:	6819      	ldr	r1, [r3, #0]
 80a0cb2:	4668      	mov	r0, sp
 80a0cb4:	f002 fc93 	bl	80a35de <_ZN6StringC1Eih>
 80a0cb8:	9900      	ldr	r1, [sp, #0]
 80a0cba:	a804      	add	r0, sp, #16
 80a0cbc:	f7ff fb26 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a0cc0:	4668      	mov	r0, sp
 80a0cc2:	f002 fc07 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0cc6:	a804      	add	r0, sp, #16
 80a0cc8:	f002 fc04 	bl	80a34d4 <_ZN6StringD1Ev>
  
  PerformDefrost1(8);
 80a0ccc:	2008      	movs	r0, #8
 80a0cce:	f7ff fe65 	bl	80a099c <_Z15PerformDefrost1i>
   //msDefrost2 = millis() + defrostTimer -100000;
  return 0;
}
 80a0cd2:	4620      	mov	r0, r4
 80a0cd4:	b008      	add	sp, #32
 80a0cd6:	bd10      	pop	{r4, pc}
 80a0cd8:	200001b4 	.word	0x200001b4
 80a0cdc:	080a6543 	.word	0x080a6543
 80a0ce0:	200002b8 	.word	0x200002b8

080a0ce4 <_Z11cmdDefrost16String>:
  }
  return TXVpos; 
}

int cmdDefrost1(String szDefrost1)
{
 80a0ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  DefrostLevel1 = szDefrost1.toInt();
 80a0ce6:	f002 fcde 	bl	80a36a6 <_ZNK6String5toIntEv>
 80a0cea:	4b08      	ldr	r3, [pc, #32]	; (80a0d0c <_Z11cmdDefrost16String+0x28>)
 80a0cec:	6018      	str	r0, [r3, #0]
 80a0cee:	461c      	mov	r4, r3
  if (DefrostLevel1==0) cmdStopDefrost1("0");
 80a0cf0:	b948      	cbnz	r0, 80a0d06 <_Z11cmdDefrost16String+0x22>
 80a0cf2:	4907      	ldr	r1, [pc, #28]	; (80a0d10 <_Z11cmdDefrost16String+0x2c>)
 80a0cf4:	4668      	mov	r0, sp
 80a0cf6:	f002 fc34 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0cfa:	4668      	mov	r0, sp
 80a0cfc:	f7ff ffc4 	bl	80a0c88 <_Z15cmdStopDefrost16String>
 80a0d00:	4668      	mov	r0, sp
 80a0d02:	f002 fbe7 	bl	80a34d4 <_ZN6StringD1Ev>
  return DefrostLevel1;
}
 80a0d06:	6820      	ldr	r0, [r4, #0]
 80a0d08:	b004      	add	sp, #16
 80a0d0a:	bd10      	pop	{r4, pc}
 80a0d0c:	200002b8 	.word	0x200002b8
 80a0d10:	080a644f 	.word	0x080a644f

080a0d14 <_Z13MQTTcallback1PcPhj>:
static byte relayMap = 0xFF;

void dummy(){
}

void MQTTcallback1(char* topic, byte* payload, unsigned int length){
 80a0d14:	b5b0      	push	{r4, r5, r7, lr}
 80a0d16:	4615      	mov	r5, r2
 80a0d18:	4604      	mov	r4, r0
    char p[length + 1];
 80a0d1a:	f102 0308 	add.w	r3, r2, #8
static byte relayMap = 0xFF;

void dummy(){
}

void MQTTcallback1(char* topic, byte* payload, unsigned int length){
 80a0d1e:	b088      	sub	sp, #32
    char p[length + 1];
 80a0d20:	f023 0307 	bic.w	r3, r3, #7
static byte relayMap = 0xFF;

void dummy(){
}

void MQTTcallback1(char* topic, byte* payload, unsigned int length){
 80a0d24:	af00      	add	r7, sp, #0
    char p[length + 1];
 80a0d26:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(p, payload, length);
 80a0d2a:	4668      	mov	r0, sp
 80a0d2c:	f005 fa50 	bl	80a61d0 <memcpy>
    p[length] = NULL;
 80a0d30:	2300      	movs	r3, #0
    String message(p);
 80a0d32:	4669      	mov	r1, sp
 80a0d34:	4638      	mov	r0, r7
}

void MQTTcallback1(char* topic, byte* payload, unsigned int length){
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
 80a0d36:	f80d 3005 	strb.w	r3, [sp, r5]
    String message(p);
 80a0d3a:	f002 fc12 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
    wd.checkin(); // resets the AWDT count
 80a0d3e:	f7ff fa31 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
        
    //message.getBytes(payload,length); does not work
    //message.toCharArray(ColorMode,length+1);
  if (strcmp(topic,"WFS/CONTROL1/TXV1") == 0){
 80a0d42:	494b      	ldr	r1, [pc, #300]	; (80a0e70 <_Z13MQTTcallback1PcPhj+0x15c>)
 80a0d44:	4620      	mov	r0, r4
 80a0d46:	f005 fa7f 	bl	80a6248 <strcmp>
 80a0d4a:	b948      	cbnz	r0, 80a0d60 <_Z13MQTTcallback1PcPhj+0x4c>
      cmdTXV1(message);
 80a0d4c:	4639      	mov	r1, r7
 80a0d4e:	f107 0010 	add.w	r0, r7, #16
 80a0d52:	f002 fc28 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a0d56:	f107 0010 	add.w	r0, r7, #16
 80a0d5a:	f7ff fb39 	bl	80a03d0 <_Z7cmdTXV16String>
 80a0d5e:	e00d      	b.n	80a0d7c <_Z13MQTTcallback1PcPhj+0x68>
  } 
  else if (strcmp(topic,"WFS/CONTROL1/TXV2") == 0){
 80a0d60:	4944      	ldr	r1, [pc, #272]	; (80a0e74 <_Z13MQTTcallback1PcPhj+0x160>)
 80a0d62:	4620      	mov	r0, r4
 80a0d64:	f005 fa70 	bl	80a6248 <strcmp>
 80a0d68:	b968      	cbnz	r0, 80a0d86 <_Z13MQTTcallback1PcPhj+0x72>
      cmdTXV2(message);
 80a0d6a:	4639      	mov	r1, r7
 80a0d6c:	f107 0010 	add.w	r0, r7, #16
 80a0d70:	f002 fc19 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a0d74:	f107 0010 	add.w	r0, r7, #16
 80a0d78:	f7ff fb18 	bl	80a03ac <_Z7cmdTXV26String>
 80a0d7c:	f107 0010 	add.w	r0, r7, #16
 80a0d80:	f002 fba8 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0d84:	e06e      	b.n	80a0e64 <_Z13MQTTcallback1PcPhj+0x150>
  }
  else if ( (strcmp(topic,"WFS/CONTROL1/damper1_1") == 0))
 80a0d86:	493c      	ldr	r1, [pc, #240]	; (80a0e78 <_Z13MQTTcallback1PcPhj+0x164>)
 80a0d88:	4620      	mov	r0, r4
 80a0d8a:	f005 fa5d 	bl	80a6248 <strcmp>
 80a0d8e:	4605      	mov	r5, r0
 80a0d90:	b930      	cbnz	r0, 80a0da0 <_Z13MQTTcallback1PcPhj+0x8c>
  {
     damper.setVal(damper1_1, message.toInt());
 80a0d92:	4638      	mov	r0, r7
 80a0d94:	f002 fc87 	bl	80a36a6 <_ZNK6String5toIntEv>
 80a0d98:	462b      	mov	r3, r5
 80a0d9a:	b282      	uxth	r2, r0
 80a0d9c:	2102      	movs	r1, #2
 80a0d9e:	e00b      	b.n	80a0db8 <_Z13MQTTcallback1PcPhj+0xa4>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/damper1_2") == 0))
 80a0da0:	4936      	ldr	r1, [pc, #216]	; (80a0e7c <_Z13MQTTcallback1PcPhj+0x168>)
 80a0da2:	4620      	mov	r0, r4
 80a0da4:	f005 fa50 	bl	80a6248 <strcmp>
 80a0da8:	4605      	mov	r5, r0
 80a0daa:	b948      	cbnz	r0, 80a0dc0 <_Z13MQTTcallback1PcPhj+0xac>
  {
     damper.setVal(damper1_2, message.toInt());
 80a0dac:	4638      	mov	r0, r7
 80a0dae:	f002 fc7a 	bl	80a36a6 <_ZNK6String5toIntEv>
 80a0db2:	462b      	mov	r3, r5
 80a0db4:	b282      	uxth	r2, r0
 80a0db6:	2103      	movs	r1, #3
 80a0db8:	4831      	ldr	r0, [pc, #196]	; (80a0e80 <_Z13MQTTcallback1PcPhj+0x16c>)
 80a0dba:	f001 f8dd 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
 80a0dbe:	e051      	b.n	80a0e64 <_Z13MQTTcallback1PcPhj+0x150>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/damper2_1") == 0))
 80a0dc0:	4930      	ldr	r1, [pc, #192]	; (80a0e84 <_Z13MQTTcallback1PcPhj+0x170>)
 80a0dc2:	4620      	mov	r0, r4
 80a0dc4:	f005 fa40 	bl	80a6248 <strcmp>
 80a0dc8:	4605      	mov	r5, r0
 80a0dca:	b930      	cbnz	r0, 80a0dda <_Z13MQTTcallback1PcPhj+0xc6>
  {
     damper.setVal(damper2_1, message.toInt());
 80a0dcc:	4638      	mov	r0, r7
 80a0dce:	f002 fc6a 	bl	80a36a6 <_ZNK6String5toIntEv>
 80a0dd2:	462b      	mov	r3, r5
 80a0dd4:	b282      	uxth	r2, r0
 80a0dd6:	4629      	mov	r1, r5
 80a0dd8:	e7ee      	b.n	80a0db8 <_Z13MQTTcallback1PcPhj+0xa4>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/damper2_2") == 0))
 80a0dda:	492b      	ldr	r1, [pc, #172]	; (80a0e88 <_Z13MQTTcallback1PcPhj+0x174>)
 80a0ddc:	4620      	mov	r0, r4
 80a0dde:	f005 fa33 	bl	80a6248 <strcmp>
 80a0de2:	4605      	mov	r5, r0
 80a0de4:	b930      	cbnz	r0, 80a0df4 <_Z13MQTTcallback1PcPhj+0xe0>
  {
     damper.setVal(damper2_2, message.toInt());
 80a0de6:	4638      	mov	r0, r7
 80a0de8:	f002 fc5d 	bl	80a36a6 <_ZNK6String5toIntEv>
 80a0dec:	462b      	mov	r3, r5
 80a0dee:	b282      	uxth	r2, r0
 80a0df0:	2101      	movs	r1, #1
 80a0df2:	e7e1      	b.n	80a0db8 <_Z13MQTTcallback1PcPhj+0xa4>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/InitializeTemp") == 0))
 80a0df4:	4925      	ldr	r1, [pc, #148]	; (80a0e8c <_Z13MQTTcallback1PcPhj+0x178>)
 80a0df6:	4620      	mov	r0, r4
 80a0df8:	f005 fa26 	bl	80a6248 <strcmp>
 80a0dfc:	b968      	cbnz	r0, 80a0e1a <_Z13MQTTcallback1PcPhj+0x106>
  {
     cmdTempReset(message);
 80a0dfe:	4639      	mov	r1, r7
 80a0e00:	f107 0010 	add.w	r0, r7, #16
 80a0e04:	f002 fbcf 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a0e08:	f107 0010 	add.w	r0, r7, #16
 80a0e0c:	f7ff fb2a 	bl	80a0464 <_Z12cmdTempReset6String>
 80a0e10:	f107 0010 	add.w	r0, r7, #16
 80a0e14:	f002 fb5e 	bl	80a34d4 <_ZN6StringD1Ev>
 80a0e18:	e022      	b.n	80a0e60 <_Z13MQTTcallback1PcPhj+0x14c>
     publishOneWireAddresses();
  }  
    else if ( (strcmp(topic,"WFS/CONTROL1/defrost1") == 0))
 80a0e1a:	491d      	ldr	r1, [pc, #116]	; (80a0e90 <_Z13MQTTcallback1PcPhj+0x17c>)
 80a0e1c:	4620      	mov	r0, r4
 80a0e1e:	f005 fa13 	bl	80a6248 <strcmp>
 80a0e22:	b948      	cbnz	r0, 80a0e38 <_Z13MQTTcallback1PcPhj+0x124>
  {
     cmdDefrost1(message);
 80a0e24:	4639      	mov	r1, r7
 80a0e26:	f107 0010 	add.w	r0, r7, #16
 80a0e2a:	f002 fbbc 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a0e2e:	f107 0010 	add.w	r0, r7, #16
 80a0e32:	f7ff ff57 	bl	80a0ce4 <_Z11cmdDefrost16String>
 80a0e36:	e7a1      	b.n	80a0d7c <_Z13MQTTcallback1PcPhj+0x68>
  }    
    else if ( (strcmp(topic,"WFS/CONTROL1/defrost2") == 0))
 80a0e38:	4916      	ldr	r1, [pc, #88]	; (80a0e94 <_Z13MQTTcallback1PcPhj+0x180>)
 80a0e3a:	4620      	mov	r0, r4
 80a0e3c:	f005 fa04 	bl	80a6248 <strcmp>
 80a0e40:	b948      	cbnz	r0, 80a0e56 <_Z13MQTTcallback1PcPhj+0x142>
  {
     cmdDefrost2(message);
 80a0e42:	4639      	mov	r1, r7
 80a0e44:	f107 0010 	add.w	r0, r7, #16
 80a0e48:	f002 fbad 	bl	80a35a6 <_ZN6StringC1ERKS_>
 80a0e4c:	f107 0010 	add.w	r0, r7, #16
 80a0e50:	f7ff fd8c 	bl	80a096c <_Z11cmdDefrost26String>
 80a0e54:	e792      	b.n	80a0d7c <_Z13MQTTcallback1PcPhj+0x68>
  }
    else if ( (strcmp(topic,"WFS/CONTROL1/statusRequest") == 0))
 80a0e56:	4910      	ldr	r1, [pc, #64]	; (80a0e98 <_Z13MQTTcallback1PcPhj+0x184>)
 80a0e58:	4620      	mov	r0, r4
 80a0e5a:	f005 f9f5 	bl	80a6248 <strcmp>
 80a0e5e:	b908      	cbnz	r0, 80a0e64 <_Z13MQTTcallback1PcPhj+0x150>
  {
          publishOneWireAddresses();
 80a0e60:	f7ff fbc0 	bl	80a05e4 <_Z23publishOneWireAddressesv>

void MQTTcallback1(char* topic, byte* payload, unsigned int length){
    char p[length + 1];
    memcpy(p, payload, length);
    p[length] = NULL;
    String message(p);
 80a0e64:	4638      	mov	r0, r7
 80a0e66:	f002 fb35 	bl	80a34d4 <_ZN6StringD1Ev>
  {
          publishOneWireAddresses();
  }

  //Particle.publish("TOPIC", String(topic));
}
 80a0e6a:	3720      	adds	r7, #32
 80a0e6c:	46bd      	mov	sp, r7
 80a0e6e:	bdb0      	pop	{r4, r5, r7, pc}
 80a0e70:	080a649a 	.word	0x080a649a
 80a0e74:	080a64ac 	.word	0x080a64ac
 80a0e78:	080a64be 	.word	0x080a64be
 80a0e7c:	080a64d5 	.word	0x080a64d5
 80a0e80:	200001c0 	.word	0x200001c0
 80a0e84:	080a64ec 	.word	0x080a64ec
 80a0e88:	080a6503 	.word	0x080a6503
 80a0e8c:	080a651a 	.word	0x080a651a
 80a0e90:	080a6536 	.word	0x080a6536
 80a0e94:	080a654c 	.word	0x080a654c
 80a0e98:	080a6562 	.word	0x080a6562

080a0e9c <_Z9Relay8574hb>:
{
  relayOp(relay, 3);
}

void Relay8574(byte bitnum, boolean value)
{
 80a0e9c:	b508      	push	{r3, lr}
  static bool toggle;

  Wire.beginTransmission(Addr8574);
 80a0e9e:	f003 fd0d 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0ea2:	2124      	movs	r1, #36	; 0x24
 80a0ea4:	f003 fb64 	bl	80a4570 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input
  //(toggle) ? Wire.write(0x55) : Wire.write(0xAA);
  //Wire.write(0x00);
  // Stop I2C transmission
  Wire.write(0x00);
 80a0ea8:	f003 fd08 	bl	80a48bc <_Z19__fetch_global_Wirev>
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 80a0eac:	6803      	ldr	r3, [r0, #0]
 80a0eae:	2100      	movs	r1, #0
 80a0eb0:	689b      	ldr	r3, [r3, #8]
 80a0eb2:	4798      	blx	r3
  relayMap = 0x00;
 80a0eb4:	4b06      	ldr	r3, [pc, #24]	; (80a0ed0 <_Z9Relay8574hb+0x34>)
 80a0eb6:	2200      	movs	r2, #0
 80a0eb8:	701a      	strb	r2, [r3, #0]
  Wire.endTransmission();
 80a0eba:	f003 fcff 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0ebe:	f003 fb5e 	bl	80a457e <_ZN7TwoWire15endTransmissionEv>
  toggle = !toggle;
 80a0ec2:	4a04      	ldr	r2, [pc, #16]	; (80a0ed4 <_Z9Relay8574hb+0x38>)
 80a0ec4:	7813      	ldrb	r3, [r2, #0]
 80a0ec6:	f083 0301 	eor.w	r3, r3, #1
 80a0eca:	7013      	strb	r3, [r2, #0]
 80a0ecc:	bd08      	pop	{r3, pc}
 80a0ece:	bf00      	nop
 80a0ed0:	2000003c 	.word	0x2000003c
 80a0ed4:	20000128 	.word	0x20000128

080a0ed8 <setup>:
}

STARTUP(System.enableFeature(FEATURE_RESET_INFO));

void setup(void)
{
 80a0ed8:	b530      	push	{r4, r5, lr}
 80a0eda:	b085      	sub	sp, #20
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a0edc:	2500      	movs	r5, #0
 80a0ede:	ac04      	add	r4, sp, #16
 80a0ee0:	f844 5d10 	str.w	r5, [r4, #-16]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0ee4:	462a      	mov	r2, r5
 80a0ee6:	4629      	mov	r1, r5
 80a0ee8:	4620      	mov	r0, r4
 80a0eea:	f001 fdc5 	bl	80a2a78 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a0eee:	9b00      	ldr	r3, [sp, #0]

   if (System.resetReason() == RESET_REASON_PANIC) {
 80a0ef0:	2b82      	cmp	r3, #130	; 0x82
 80a0ef2:	d102      	bne.n	80a0efa <setup+0x22>
    static void dfu(bool persist=false);
    static void reset(void);
    static void reset(uint32_t data);

    static void enterSafeMode(void) {
        HAL_Core_Enter_Safe_Mode(NULL);
 80a0ef4:	4628      	mov	r0, r5
 80a0ef6:	f001 fda7 	bl	80a2a48 <HAL_Core_Enter_Safe_Mode>

  // Particle.variable("Bank_1", b1status);
  // Particle.variable("Bank_2", b2status);
  //Particle.variable("Input Status", b4status);
  //relays.turnOffAllRelays();
  pinMode(pinLED, OUTPUT);
 80a0efa:	2101      	movs	r1, #1
 80a0efc:	2007      	movs	r0, #7
 80a0efe:	f003 fc35 	bl	80a476c <pinMode>
  //delay(500);
  // Start serial communication and set baud rate = 9600
  //Serial.begin(9600);
  // Set variable

  damper.begin();          // This calls Wire.begin()
 80a0f02:	4824      	ldr	r0, [pc, #144]	; (80a0f94 <setup+0xbc>)
 80a0f04:	f001 f8a2 	bl	80a204c <_ZN16Adafruit_PCA96855beginEv>
  damper.setPWMFreq(1500); // Maximum PWM frequency is 1600
 80a0f08:	4923      	ldr	r1, [pc, #140]	; (80a0f98 <setup+0xc0>)
 80a0f0a:	4822      	ldr	r0, [pc, #136]	; (80a0f94 <setup+0xbc>)
 80a0f0c:	f001 f8ac 	bl	80a2068 <_ZN16Adafruit_PCA968510setPWMFreqEf>

  damper.setVal(damper2_2, 3000);
 80a0f10:	2300      	movs	r3, #0
 80a0f12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0f16:	2101      	movs	r1, #1
 80a0f18:	481e      	ldr	r0, [pc, #120]	; (80a0f94 <setup+0xbc>)
 80a0f1a:	f001 f82d 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
  damper.setVal(damper2_1, 2900);  
 80a0f1e:	2300      	movs	r3, #0
 80a0f20:	4619      	mov	r1, r3
 80a0f22:	f640 3254 	movw	r2, #2900	; 0xb54
 80a0f26:	481b      	ldr	r0, [pc, #108]	; (80a0f94 <setup+0xbc>)
 80a0f28:	f001 f826 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
  damper.setVal(damper1_2, 3000);
 80a0f2c:	2300      	movs	r3, #0
 80a0f2e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80a0f32:	2103      	movs	r1, #3
 80a0f34:	4817      	ldr	r0, [pc, #92]	; (80a0f94 <setup+0xbc>)
 80a0f36:	f001 f81f 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
  damper.setVal(damper1_1, 2900);                             
 80a0f3a:	f640 3254 	movw	r2, #2900	; 0xb54
 80a0f3e:	2300      	movs	r3, #0
 80a0f40:	2102      	movs	r1, #2
 80a0f42:	4814      	ldr	r0, [pc, #80]	; (80a0f94 <setup+0xbc>)
 80a0f44:	f001 f818 	bl	80a1f78 <_ZN16Adafruit_PCA96856setValEhtb>
  // Selct configuration command
  // Continuous conversion mode, Channel-1, 12-bit resolution
  //Wire.write(0x10);
  // Stop I2C Transmission
  //Wire.endTransmission();
  Wire.begin();
 80a0f48:	f003 fcb8 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0f4c:	f003 fafa 	bl	80a4544 <_ZN7TwoWire5beginEv>
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
  // Select GPIO as input
  relayMap = 0xFF;
 80a0f50:	4d12      	ldr	r5, [pc, #72]	; (80a0f9c <setup+0xc4>)
  //Wire.write(0x10);
  // Stop I2C Transmission
  //Wire.endTransmission();
  Wire.begin();
  //Wire.reset();
  Wire.beginTransmission(Addr8574);
 80a0f52:	f003 fcb3 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0f56:	2124      	movs	r1, #36	; 0x24
 80a0f58:	f003 fb0a 	bl	80a4570 <_ZN7TwoWire17beginTransmissionEi>
  // Select GPIO as input
  relayMap = 0xFF;
 80a0f5c:	23ff      	movs	r3, #255	; 0xff
 80a0f5e:	702b      	strb	r3, [r5, #0]
  Wire.write(relayMap); //Wire.write(0xff);13
 80a0f60:	f003 fcac 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0f64:	6803      	ldr	r3, [r0, #0]
 80a0f66:	7829      	ldrb	r1, [r5, #0]
 80a0f68:	689b      	ldr	r3, [r3, #8]
 80a0f6a:	4798      	blx	r3
  Relay8574(1, 1);
 80a0f6c:	2101      	movs	r1, #1
 80a0f6e:	4608      	mov	r0, r1
 80a0f70:	f7ff ff94 	bl	80a0e9c <_Z9Relay8574hb>

  // All relafys turn off
  // Stop I2C transmission
  Wire.endTransmission();
 80a0f74:	f003 fca2 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0f78:	f003 fb01 	bl	80a457e <_ZN7TwoWire15endTransmissionEv>

  cmdTempReset("");
 80a0f7c:	4908      	ldr	r1, [pc, #32]	; (80a0fa0 <setup+0xc8>)
 80a0f7e:	4620      	mov	r0, r4
 80a0f80:	f002 faef 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a0f84:	4620      	mov	r0, r4
 80a0f86:	f7ff fa6d 	bl	80a0464 <_Z12cmdTempReset6String>
 80a0f8a:	4620      	mov	r0, r4
 80a0f8c:	f002 faa2 	bl	80a34d4 <_ZN6StringD1Ev>

  //turnOffRelay(RelayCompr2);
  //turnOffRelay(RelayFan2);
}
 80a0f90:	b005      	add	sp, #20
 80a0f92:	bd30      	pop	{r4, r5, pc}
 80a0f94:	200001c0 	.word	0x200001c0
 80a0f98:	44bb8000 	.word	0x44bb8000
 80a0f9c:	2000003c 	.word	0x2000003c
 80a0fa0:	080a682c 	.word	0x080a682c

080a0fa4 <_Z6getMCPv>:
  }
  wd.checkin(); // resets the AWDT count
 }


void getMCP(){
 80a0fa4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  // https://www.controleverything.com/content/Analog-Digital-Converters?sku=MCP3428_I2CADC#tabs-0-product_tabset-2

  byte error;
  int8_t address;

  address = mcp1.devAddr;
 80a0fa8:	4b3c      	ldr	r3, [pc, #240]	; (80a109c <_Z6getMCPv+0xf8>)
 80a0faa:	f993 400e 	ldrsb.w	r4, [r3, #14]
  // The i2c_scanner uses the  return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
 80a0fae:	f003 fc85 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0fb2:	4621      	mov	r1, r4
 80a0fb4:	f003 fadc 	bl	80a4570 <_ZN7TwoWire17beginTransmissionEi>
  error = Wire.endTransmission();
 80a0fb8:	f003 fc80 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a0fbc:	f003 fadf 	bl	80a457e <_ZN7TwoWire15endTransmissionEv>
  if (error == 0)
 80a0fc0:	2800      	cmp	r0, #0
 80a0fc2:	d132      	bne.n	80a102a <_Z6getMCPv+0x86>
 80a0fc4:	4604      	mov	r4, r0

    for (int i = 1; i <= 4; i++)
    {
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp1.SetConfiguration(i, 16, 1, 2);
 80a0fc6:	1c66      	adds	r6, r4, #1
 80a0fc8:	2302      	movs	r3, #2
 80a0fca:	2210      	movs	r2, #16
 80a0fcc:	b2f1      	uxtb	r1, r6
 80a0fce:	9300      	str	r3, [sp, #0]
 80a0fd0:	4832      	ldr	r0, [pc, #200]	; (80a109c <_Z6getMCPv+0xf8>)
 80a0fd2:	2301      	movs	r3, #1
 80a0fd4:	f000 fed4 	bl	80a1d80 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>
      Raw_adc[i - 1] = mcp1.readADC();
 80a0fd8:	4830      	ldr	r0, [pc, #192]	; (80a109c <_Z6getMCPv+0xf8>)
 80a0fda:	f000 ff37 	bl	80a1e4c <_ZN15CASARIA_MCP34287readADCEv>
 80a0fde:	4b30      	ldr	r3, [pc, #192]	; (80a10a0 <_Z6getMCPv+0xfc>)
      // Note that the library waits for a complete conversion
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a0fe0:	4d30      	ldr	r5, [pc, #192]	; (80a10a4 <_Z6getMCPv+0x100>)
    for (int i = 1; i <= 4; i++)
    {
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp1.SetConfiguration(i, 16, 1, 2);
      Raw_adc[i - 1] = mcp1.readADC();
 80a0fe2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
      // Note that the library waits for a complete conversion
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a0fe6:	f004 feb1 	bl	80a5d4c <__aeabi_i2f>
 80a0fea:	492f      	ldr	r1, [pc, #188]	; (80a10a8 <_Z6getMCPv+0x104>)
 80a0fec:	f004 fdf8 	bl	80a5be0 <__aeabi_fsub>
 80a0ff0:	492e      	ldr	r1, [pc, #184]	; (80a10ac <_Z6getMCPv+0x108>)
 80a0ff2:	f004 ffb3 	bl	80a5f5c <__aeabi_fdiv>
 80a0ff6:	4b2e      	ldr	r3, [pc, #184]	; (80a10b0 <_Z6getMCPv+0x10c>)
 80a0ff8:	4607      	mov	r7, r0
 80a0ffa:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80a0ffe:	f004 fea5 	bl	80a5d4c <__aeabi_i2f>
 80a1002:	4601      	mov	r1, r0
 80a1004:	4638      	mov	r0, r7
 80a1006:	f004 fef5 	bl	80a5df4 <__aeabi_fmul>
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {

    for (int i = 1; i <= 4; i++)
 80a100a:	2e04      	cmp	r6, #4
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp1.SetConfiguration(i, 16, 1, 2);
      Raw_adc[i - 1] = mcp1.readADC();
      // Note that the library waits for a complete conversion
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a100c:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
 80a1010:	4634      	mov	r4, r6
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {

    for (int i = 1; i <= 4; i++)
 80a1012:	d1d8      	bne.n	80a0fc6 <_Z6getMCPv+0x22>
      // raw_adc = raw_adc * LSB(250 µV)/PGA for PGA = 1;     // 14-bit Resolution
      // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;    // 16-bit Resolution
    } //calibration/linearizatiom
    //CALIBRATION
    // correct zero offset
    if (psi[0] < 600)
 80a1014:	682c      	ldr	r4, [r5, #0]
 80a1016:	4927      	ldr	r1, [pc, #156]	; (80a10b4 <_Z6getMCPv+0x110>)
 80a1018:	4620      	mov	r0, r4
 80a101a:	f005 f889 	bl	80a6130 <__aeabi_fcmplt>
 80a101e:	b120      	cbz	r0, 80a102a <_Z6getMCPv+0x86>
    {
      psi[0] = psi[0] + 15;
 80a1020:	4925      	ldr	r1, [pc, #148]	; (80a10b8 <_Z6getMCPv+0x114>)
 80a1022:	4620      	mov	r0, r4
 80a1024:	f004 fdde 	bl	80a5be4 <__addsf3>
 80a1028:	6028      	str	r0, [r5, #0]
    }
  }
  wd.checkin();
 80a102a:	f7ff f8bb 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
  address = mcp2.devAddr;
 80a102e:	4b23      	ldr	r3, [pc, #140]	; (80a10bc <_Z6getMCPv+0x118>)
 80a1030:	f993 400e 	ldrsb.w	r4, [r3, #14]
  // The i2c_scanner uses the return value of
  // the Write.endTransmisstion to see if
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
 80a1034:	f003 fc42 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1038:	4621      	mov	r1, r4
 80a103a:	f003 fa99 	bl	80a4570 <_ZN7TwoWire17beginTransmissionEi>
  error = Wire.endTransmission();
 80a103e:	f003 fc3d 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1042:	f003 fa9c 	bl	80a457e <_ZN7TwoWire15endTransmissionEv>
  if (error == 0)
 80a1046:	bb30      	cbnz	r0, 80a1096 <_Z6getMCPv+0xf2>
 80a1048:	4f1d      	ldr	r7, [pc, #116]	; (80a10c0 <_Z6getMCPv+0x11c>)
 80a104a:	4e1e      	ldr	r6, [pc, #120]	; (80a10c4 <_Z6getMCPv+0x120>)
 80a104c:	4d1e      	ldr	r5, [pc, #120]	; (80a10c8 <_Z6getMCPv+0x124>)
 80a104e:	2404      	movs	r4, #4
  {
    for (int i = 4; i <= 8; i++)
    {
      // MCP3428 is configured to channel i with 12 bits resolution, continuous mode and gain defined to 1
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp2.SetConfiguration(i, 16, 1, 2);
 80a1050:	2302      	movs	r3, #2
 80a1052:	2210      	movs	r2, #16
 80a1054:	b2e1      	uxtb	r1, r4
 80a1056:	9300      	str	r3, [sp, #0]
 80a1058:	4818      	ldr	r0, [pc, #96]	; (80a10bc <_Z6getMCPv+0x118>)
 80a105a:	2301      	movs	r3, #1
 80a105c:	f000 fe90 	bl	80a1d80 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>

      // Note that the library waits for a complete conversion
      Raw_adc[i - 1] = mcp2.readADC();
 80a1060:	4816      	ldr	r0, [pc, #88]	; (80a10bc <_Z6getMCPv+0x118>)
 80a1062:	f000 fef3 	bl	80a1e4c <_ZN15CASARIA_MCP34287readADCEv>
 80a1066:	f847 0f04 	str.w	r0, [r7, #4]!
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a106a:	f004 fe6f 	bl	80a5d4c <__aeabi_i2f>
 80a106e:	490e      	ldr	r1, [pc, #56]	; (80a10a8 <_Z6getMCPv+0x104>)
 80a1070:	f004 fdb6 	bl	80a5be0 <__aeabi_fsub>
 80a1074:	490d      	ldr	r1, [pc, #52]	; (80a10ac <_Z6getMCPv+0x108>)
 80a1076:	f004 ff71 	bl	80a5f5c <__aeabi_fdiv>
 80a107a:	4680      	mov	r8, r0
 80a107c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80a1080:	f004 fe64 	bl	80a5d4c <__aeabi_i2f>
 80a1084:	4601      	mov	r1, r0
 80a1086:	4640      	mov	r0, r8
 80a1088:	f004 feb4 	bl	80a5df4 <__aeabi_fmul>
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {
    for (int i = 4; i <= 8; i++)
 80a108c:	3401      	adds	r4, #1
 80a108e:	2c09      	cmp	r4, #9
      // This arrangement of the mentioned paarmeters can be changed as per convenience
      mcp2.SetConfiguration(i, 16, 1, 2);

      // Note that the library waits for a complete conversion
      Raw_adc[i - 1] = mcp2.readADC();
      psi[i - 1] = ((float(Raw_adc[i - 1])) - 5813) / (29390 - 5813) * psiFS[i - 1];
 80a1090:	f845 0f04 	str.w	r0, [r5, #4]!
  // a device did acknowledge to the address.
  Wire.beginTransmission(address);
  error = Wire.endTransmission();
  if (error == 0)
  {
    for (int i = 4; i <= 8; i++)
 80a1094:	d1dc      	bne.n	80a1050 <_Z6getMCPv+0xac>
    }
    //calibration/linearizatiom
    //CALIBRATION
    // correct zero offset error
  }
}
 80a1096:	b002      	add	sp, #8
 80a1098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a109c:	20000298 	.word	0x20000298
 80a10a0:	20000304 	.word	0x20000304
 80a10a4:	200002c8 	.word	0x200002c8
 80a10a8:	45b5a800 	.word	0x45b5a800
 80a10ac:	46b83200 	.word	0x46b83200
 80a10b0:	080a640c 	.word	0x080a640c
 80a10b4:	44160000 	.word	0x44160000
 80a10b8:	41700000 	.word	0x41700000
 80a10bc:	200002a8 	.word	0x200002a8
 80a10c0:	2000030c 	.word	0x2000030c
 80a10c4:	080a6414 	.word	0x080a6414
 80a10c8:	200002d0 	.word	0x200002d0

080a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a10cc:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a10ce:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a10d0:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a10d2:	b17c      	cbz	r4, 80a10f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a10d4:	6863      	ldr	r3, [r4, #4]
 80a10d6:	3b01      	subs	r3, #1
 80a10d8:	6063      	str	r3, [r4, #4]
 80a10da:	b95b      	cbnz	r3, 80a10f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a10dc:	6823      	ldr	r3, [r4, #0]
 80a10de:	4620      	mov	r0, r4
 80a10e0:	689b      	ldr	r3, [r3, #8]
 80a10e2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a10e4:	68a3      	ldr	r3, [r4, #8]
 80a10e6:	3b01      	subs	r3, #1
 80a10e8:	60a3      	str	r3, [r4, #8]
 80a10ea:	b91b      	cbnz	r3, 80a10f4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a10ec:	6823      	ldr	r3, [r4, #0]
 80a10ee:	4620      	mov	r0, r4
 80a10f0:	68db      	ldr	r3, [r3, #12]
 80a10f2:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a10f4:	4628      	mov	r0, r5
 80a10f6:	bd38      	pop	{r3, r4, r5, pc}

080a10f8 <_Z12popAddressesv>:


MQTT MQTTclient1("ccc.casaria.net", 1883, MQTTcallback1);
uint16_t qos2messageid1 = 0;

void popAddresses(){
 80a10f8:	b510      	push	{r4, lr}
 80a10fa:	b088      	sub	sp, #32
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80a10fc:	4c10      	ldr	r4, [pc, #64]	; (80a1140 <_Z12popAddressesv+0x48>)
  String a;
 80a10fe:	4911      	ldr	r1, [pc, #68]	; (80a1144 <_Z12popAddressesv+0x4c>)
 80a1100:	a804      	add	r0, sp, #16
 80a1102:	f002 fa2e 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
  a = "286ce7880600003f";
 80a1106:	4910      	ldr	r1, [pc, #64]	; (80a1148 <_Z12popAddressesv+0x50>)
 80a1108:	a804      	add	r0, sp, #16
 80a110a:	f002 fa57 	bl	80a35bc <_ZN6StringaSEPKc>
 80a110e:	4621      	mov	r1, r4
 80a1110:	a804      	add	r0, sp, #16
 80a1112:	2300      	movs	r3, #0
 80a1114:	2208      	movs	r2, #8
 80a1116:	f002 faae 	bl	80a3676 <_ZNK6String8getBytesEPhjj>
 80a111a:	4b0c      	ldr	r3, [pc, #48]	; (80a114c <_Z12popAddressesv+0x54>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a111c:	4622      	mov	r2, r4
 80a111e:	781b      	ldrb	r3, [r3, #0]
 80a1120:	490b      	ldr	r1, [pc, #44]	; (80a1150 <_Z12popAddressesv+0x58>)
 80a1122:	f88d 3000 	strb.w	r3, [sp]
 80a1126:	a802      	add	r0, sp, #8
 80a1128:	233c      	movs	r3, #60	; 0x3c
 80a112a:	f002 fe69 	bl	80a3e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a112e:	a803      	add	r0, sp, #12
 80a1130:	f7ff ffcc 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

MQTT MQTTclient1("ccc.casaria.net", 1883, MQTTcallback1);
uint16_t qos2messageid1 = 0;

void popAddresses(){
  String a;
 80a1134:	a804      	add	r0, sp, #16
 80a1136:	f002 f9cd 	bl	80a34d4 <_ZN6StringD1Ev>
  a = "286ce7880600003f";
  
   a.toCharArray((char*)sensorAddresses[0], 8, 0);
  Particle.publish("test", (char*) sensorAddresses[0], PRIVATE);
}
 80a113a:	b008      	add	sp, #32
 80a113c:	bd10      	pop	{r4, pc}
 80a113e:	bf00      	nop
 80a1140:	40024000 	.word	0x40024000
 80a1144:	080a682c 	.word	0x080a682c
 80a1148:	080a65b1 	.word	0x080a65b1
 80a114c:	200000c8 	.word	0x200000c8
 80a1150:	080a65c2 	.word	0x080a65c2

080a1154 <_Z11publishDatav>:
  }
  return _temp;
}

void publishData()
{
 80a1154:	b510      	push	{r4, lr}
  char szInfo[200];
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
           celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9], celsius[10], celsius[11]);
 80a1156:	4c29      	ldr	r4, [pc, #164]	; (80a11fc <_Z11publishDatav+0xa8>)
  }
  return _temp;
}

void publishData()
{
 80a1158:	b0cc      	sub	sp, #304	; 0x130
  char szInfo[200];
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f&%.2f", celsius[0], celsius[1], celsius[2], celsius[3],
           celsius[4], celsius[5], celsius[6], celsius[7], celsius[8], celsius[9], celsius[10], celsius[11]);
 80a115a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80a115c:	f004 f9a0 	bl	80a54a0 <__aeabi_f2d>
 80a1160:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 80a1164:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80a1166:	f004 f99b 	bl	80a54a0 <__aeabi_f2d>
 80a116a:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 80a116e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80a1170:	f004 f996 	bl	80a54a0 <__aeabi_f2d>
 80a1174:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80a1178:	6a20      	ldr	r0, [r4, #32]
 80a117a:	f004 f991 	bl	80a54a0 <__aeabi_f2d>
 80a117e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80a1182:	69e0      	ldr	r0, [r4, #28]
 80a1184:	f004 f98c 	bl	80a54a0 <__aeabi_f2d>
 80a1188:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80a118c:	69a0      	ldr	r0, [r4, #24]
 80a118e:	f004 f987 	bl	80a54a0 <__aeabi_f2d>
 80a1192:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80a1196:	6960      	ldr	r0, [r4, #20]
 80a1198:	f004 f982 	bl	80a54a0 <__aeabi_f2d>
 80a119c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80a11a0:	6920      	ldr	r0, [r4, #16]
 80a11a2:	f004 f97d 	bl	80a54a0 <__aeabi_f2d>
 80a11a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a11aa:	68e0      	ldr	r0, [r4, #12]
 80a11ac:	f004 f978 	bl	80a54a0 <__aeabi_f2d>
 80a11b0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a11b4:	68a0      	ldr	r0, [r4, #8]
 80a11b6:	f004 f973 	bl	80a54a0 <__aeabi_f2d>
 80a11ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a11be:	6860      	ldr	r0, [r4, #4]
 80a11c0:	f004 f96e 	bl	80a54a0 <__aeabi_f2d>
 80a11c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a11c8:	6820      	ldr	r0, [r4, #0]
 80a11ca:	f004 f969 	bl	80a54a0 <__aeabi_f2d>
 80a11ce:	4a0c      	ldr	r2, [pc, #48]	; (80a1200 <_Z11publishDatav+0xac>)
 80a11d0:	e9cd 0100 	strd	r0, r1, [sp]
 80a11d4:	21c8      	movs	r1, #200	; 0xc8
 80a11d6:	a81a      	add	r0, sp, #104	; 0x68
 80a11d8:	f001 fe5c 	bl	80a2e94 <snprintf>
 80a11dc:	4b09      	ldr	r3, [pc, #36]	; (80a1204 <_Z11publishDatav+0xb0>)
 80a11de:	aa1a      	add	r2, sp, #104	; 0x68
 80a11e0:	781b      	ldrb	r3, [r3, #0]
 80a11e2:	4909      	ldr	r1, [pc, #36]	; (80a1208 <_Z11publishDatav+0xb4>)
 80a11e4:	f88d 3000 	strb.w	r3, [sp]
 80a11e8:	a818      	add	r0, sp, #96	; 0x60
 80a11ea:	233c      	movs	r3, #60	; 0x3c
 80a11ec:	f002 fe08 	bl	80a3e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a11f0:	a819      	add	r0, sp, #100	; 0x64
 80a11f2:	f7ff ff6b 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      sensorAddresses[4], sensorAddresses[5], sensorAddresses[6], sensorAddresses[7], sensorAddresses[8],sensorAddresses[9],sensorAddresses[10],sensorAddresses[11]);
    Particle.publish("dsAddress", szInfo, PRIVATE);
  
  }
  */ 
}
 80a11f6:	b04c      	add	sp, #304	; 0x130
 80a11f8:	bd10      	pop	{r4, pc}
 80a11fa:	bf00      	nop
 80a11fc:	20000004 	.word	0x20000004
 80a1200:	080a65c7 	.word	0x080a65c7
 80a1204:	200000c8 	.word	0x200000c8
 80a1208:	080a6603 	.word	0x080a6603

080a120c <_Z15publishPressurev>:

 void publishPressure()
{
 80a120c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
 80a1210:	4c2a      	ldr	r4, [pc, #168]	; (80a12bc <_Z15publishPressurev+0xb0>)
  }
  */ 
}

 void publishPressure()
{
 80a1212:	b0c5      	sub	sp, #276	; 0x114
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
 80a1214:	2102      	movs	r1, #2
 80a1216:	4620      	mov	r0, r4
 80a1218:	f000 fe55 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
  d12= damper.getVal(damper1_2);
 80a121c:	2103      	movs	r1, #3

 void publishPressure()
{
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
 80a121e:	4605      	mov	r5, r0
  d12= damper.getVal(damper1_2);
 80a1220:	4620      	mov	r0, r4
 80a1222:	f000 fe50 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
  d21= damper.getVal(damper2_1);
 80a1226:	2100      	movs	r1, #0
 void publishPressure()
{
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
 80a1228:	4606      	mov	r6, r0
  d21= damper.getVal(damper2_1);
 80a122a:	4620      	mov	r0, r4
 80a122c:	f000 fe4b 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
  d22= damper.getVal(damper2_2);
 80a1230:	2101      	movs	r1, #1
{
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
  d21= damper.getVal(damper2_1);
 80a1232:	4607      	mov	r7, r0
  d22= damper.getVal(damper2_2);
 80a1234:	4620      	mov	r0, r4
 80a1236:	f000 fe46 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
  tx1= damper.getVal(txv1);
 80a123a:	2104      	movs	r1, #4
  char szInfo[200];
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
  d21= damper.getVal(damper2_1);
  d22= damper.getVal(damper2_2);
 80a123c:	4680      	mov	r8, r0
  tx1= damper.getVal(txv1);
 80a123e:	4620      	mov	r0, r4
 80a1240:	f000 fe41 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
  tx2= damper.getVal(txv2);    
 80a1244:	2108      	movs	r1, #8
  uint16_t d11, d12, d21, d22, tx1, tx2;
  d11= damper.getVal(damper1_1);  
  d12= damper.getVal(damper1_2);
  d21= damper.getVal(damper2_1);
  d22= damper.getVal(damper2_2);
  tx1= damper.getVal(txv1);
 80a1246:	4681      	mov	r9, r0
  tx2= damper.getVal(txv2);    
 80a1248:	4620      	mov	r0, r4
 80a124a:	f000 fe3c 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
  //  snprintf(szInfo, sizeof(szInfo), "%d&%d&%d&%d&%d&%d&%d&%d", Raw_adc[0], Raw_adc[1], Raw_adc[2], Raw_adc[3], Raw_adc[4], Raw_adc[5], Raw_adc[6], Raw_adc[7]);
  // Particle.publish("dsAnalogin",szInfo, PRIVATE );
  snprintf(szInfo, sizeof(szInfo), "%.2f&%.2f&%.2f&%.2f&%.2f&%4d&%4d&%4d&%4d&%4d&%4d", psi[0], psi[1], psi[2], psi[3], psi[4], d11, d12, d21, d22, tx1,tx2);
 80a124e:	4c1c      	ldr	r4, [pc, #112]	; (80a12c0 <_Z15publishPressurev+0xb4>)
 80a1250:	900f      	str	r0, [sp, #60]	; 0x3c
 80a1252:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80a1256:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80a125a:	970c      	str	r7, [sp, #48]	; 0x30
 80a125c:	960b      	str	r6, [sp, #44]	; 0x2c
 80a125e:	950a      	str	r5, [sp, #40]	; 0x28
 80a1260:	6920      	ldr	r0, [r4, #16]
 80a1262:	f004 f91d 	bl	80a54a0 <__aeabi_f2d>
 80a1266:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80a126a:	68e0      	ldr	r0, [r4, #12]
 80a126c:	f004 f918 	bl	80a54a0 <__aeabi_f2d>
 80a1270:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a1274:	68a0      	ldr	r0, [r4, #8]
 80a1276:	f004 f913 	bl	80a54a0 <__aeabi_f2d>
 80a127a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80a127e:	6860      	ldr	r0, [r4, #4]
 80a1280:	f004 f90e 	bl	80a54a0 <__aeabi_f2d>
 80a1284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80a1288:	6820      	ldr	r0, [r4, #0]
 80a128a:	f004 f909 	bl	80a54a0 <__aeabi_f2d>
 80a128e:	4a0d      	ldr	r2, [pc, #52]	; (80a12c4 <_Z15publishPressurev+0xb8>)
 80a1290:	e9cd 0100 	strd	r0, r1, [sp]
 80a1294:	21c8      	movs	r1, #200	; 0xc8
 80a1296:	a812      	add	r0, sp, #72	; 0x48
 80a1298:	f001 fdfc 	bl	80a2e94 <snprintf>
 80a129c:	4b0a      	ldr	r3, [pc, #40]	; (80a12c8 <_Z15publishPressurev+0xbc>)
 80a129e:	aa12      	add	r2, sp, #72	; 0x48
 80a12a0:	781b      	ldrb	r3, [r3, #0]
 80a12a2:	490a      	ldr	r1, [pc, #40]	; (80a12cc <_Z15publishPressurev+0xc0>)
 80a12a4:	f88d 3000 	strb.w	r3, [sp]
 80a12a8:	a810      	add	r0, sp, #64	; 0x40
 80a12aa:	233c      	movs	r3, #60	; 0x3c
 80a12ac:	f002 fda8 	bl	80a3e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a12b0:	a811      	add	r0, sp, #68	; 0x44
 80a12b2:	f7ff ff0b 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Particle.publish("ds_psi", szInfo, PRIVATE);
}
 80a12b6:	b045      	add	sp, #276	; 0x114
 80a12b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a12bc:	200001c0 	.word	0x200001c0
 80a12c0:	200002c8 	.word	0x200002c8
 80a12c4:	080a660b 	.word	0x080a660b
 80a12c8:	200000c8 	.word	0x200000c8
 80a12cc:	080a663c 	.word	0x080a663c

080a12d0 <loop>:
  Wire.endTransmission();
  toggle = !toggle;
}

void loop()
{
 80a12d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  static uint32_t msReverse1 = 0;
  static uint32_t msReverse2 = 0;
  static bool FirstTime = TRUE;
  static uint32_t now;

   if (MQTTclient1.isConnected())  MQTTclient1.loop();
 80a12d4:	486a      	ldr	r0, [pc, #424]	; (80a1480 <loop+0x1b0>)
  Wire.endTransmission();
  toggle = !toggle;
}

void loop()
{
 80a12d6:	b08b      	sub	sp, #44	; 0x2c
  static uint32_t msReverse1 = 0;
  static uint32_t msReverse2 = 0;
  static bool FirstTime = TRUE;
  static uint32_t now;

   if (MQTTclient1.isConnected())  MQTTclient1.loop();
 80a12d8:	f001 f881 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a12dc:	b110      	cbz	r0, 80a12e4 <loop+0x14>
 80a12de:	4868      	ldr	r0, [pc, #416]	; (80a1480 <loop+0x1b0>)
 80a12e0:	f001 fa06 	bl	80a26f0 <_ZN4MQTT4loopEv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a12e4:	f001 fda6 	bl	80a2e34 <spark_cloud_flag_connected>
   
    if (Particle.connected() && FirstTime){
 80a12e8:	b120      	cbz	r0, 80a12f4 <loop+0x24>
 80a12ea:	4e66      	ldr	r6, [pc, #408]	; (80a1484 <loop+0x1b4>)
 80a12ec:	7833      	ldrb	r3, [r6, #0]
 80a12ee:	2b00      	cmp	r3, #0
 80a12f0:	f040 81bd 	bne.w	80a166e <loop+0x39e>
 80a12f4:	f001 fba0 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>

  now = millis();

  

  if (msDefrost1 == 0)
 80a12f8:	4e63      	ldr	r6, [pc, #396]	; (80a1488 <loop+0x1b8>)
    if (Particle.connected() && FirstTime){
      Particle.publish("RESETREASON", String(System.resetReason(), DEC), PRIVATE);
      FirstTime = FALSE;
    } 

  now = millis();
 80a12fa:	4c64      	ldr	r4, [pc, #400]	; (80a148c <loop+0x1bc>)

  

  if (msDefrost1 == 0)
 80a12fc:	6833      	ldr	r3, [r6, #0]
 80a12fe:	4607      	mov	r7, r0
    if (Particle.connected() && FirstTime){
      Particle.publish("RESETREASON", String(System.resetReason(), DEC), PRIVATE);
      FirstTime = FALSE;
    } 

  now = millis();
 80a1300:	6020      	str	r0, [r4, #0]

  

  if (msDefrost1 == 0)
 80a1302:	b94b      	cbnz	r3, 80a1318 <loop+0x48>
    msDefrost1 = now + defrostTimer * 1.5;
 80a1304:	f004 f8aa 	bl	80a545c <__aeabi_ui2d>
 80a1308:	a35b      	add	r3, pc, #364	; (adr r3, 80a1478 <loop+0x1a8>)
 80a130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a130e:	f003 ff69 	bl	80a51e4 <__adddf3>
 80a1312:	f004 fbf1 	bl	80a5af8 <__aeabi_d2uiz>
 80a1316:	6030      	str	r0, [r6, #0]

  if (msDefrost2 == 0)
 80a1318:	4d5d      	ldr	r5, [pc, #372]	; (80a1490 <loop+0x1c0>)
 80a131a:	682b      	ldr	r3, [r5, #0]
 80a131c:	b923      	cbnz	r3, 80a1328 <loop+0x58>
    msDefrost2 = now + defrostTimer * 2;
 80a131e:	f507 0092 	add.w	r0, r7, #4784128	; 0x490000
 80a1322:	f500 5078 	add.w	r0, r0, #15872	; 0x3e00
 80a1326:	6028      	str	r0, [r5, #0]

  wd.checkin();

  if (psi[0] > 520)
 80a1328:	4f5a      	ldr	r7, [pc, #360]	; (80a1494 <loop+0x1c4>)
    msDefrost1 = now + defrostTimer * 1.5;

  if (msDefrost2 == 0)
    msDefrost2 = now + defrostTimer * 2;

  wd.checkin();
 80a132a:	f7fe ff3b 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>

  if (psi[0] > 520)
 80a132e:	495a      	ldr	r1, [pc, #360]	; (80a1498 <loop+0x1c8>)
 80a1330:	6838      	ldr	r0, [r7, #0]
 80a1332:	f004 ff1b 	bl	80a616c <__aeabi_fcmpgt>
 80a1336:	b110      	cbz	r0, 80a133e <loop+0x6e>
    turnOffRelay(RelayCompr2);
 80a1338:	2008      	movs	r0, #8
 80a133a:	f7ff f9c6 	bl	80a06ca <_Z12turnOffRelayi>
  if (psi[4] > 520)
 80a133e:	4956      	ldr	r1, [pc, #344]	; (80a1498 <loop+0x1c8>)
 80a1340:	6938      	ldr	r0, [r7, #16]
 80a1342:	f004 ff13 	bl	80a616c <__aeabi_fcmpgt>
 80a1346:	b110      	cbz	r0, 80a134e <loop+0x7e>
    turnOffRelay(RelayCompr1);
 80a1348:	2001      	movs	r0, #1
 80a134a:	f7ff f9be 	bl	80a06ca <_Z12turnOffRelayi>


  if (now - msRelaySample >= msRelaySampleTime)
 80a134e:	4f53      	ldr	r7, [pc, #332]	; (80a149c <loop+0x1cc>)
 80a1350:	6823      	ldr	r3, [r4, #0]
 80a1352:	683a      	ldr	r2, [r7, #0]
 80a1354:	1a9b      	subs	r3, r3, r2
 80a1356:	f240 726b 	movw	r2, #1899	; 0x76b
 80a135a:	4293      	cmp	r3, r2
 80a135c:	d902      	bls.n	80a1364 <loop+0x94>
 80a135e:	f001 fb6b 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
  {
    msRelaySample = millis();
 80a1362:	6038      	str	r0, [r7, #0]
  }

  if (now - msDefrost1 >= defrostTimer) 
 80a1364:	6832      	ldr	r2, [r6, #0]
 80a1366:	6823      	ldr	r3, [r4, #0]
 80a1368:	1a9b      	subs	r3, r3, r2
 80a136a:	4a4d      	ldr	r2, [pc, #308]	; (80a14a0 <loop+0x1d0>)
 80a136c:	4293      	cmp	r3, r2
 80a136e:	4617      	mov	r7, r2
 80a1370:	d915      	bls.n	80a139e <loop+0xce>
  {
    if ((celsius[0] < 0.0) && (DefrostLevel1 == 0))
 80a1372:	4b4c      	ldr	r3, [pc, #304]	; (80a14a4 <loop+0x1d4>)
 80a1374:	2100      	movs	r1, #0
 80a1376:	6818      	ldr	r0, [r3, #0]
 80a1378:	f004 feda 	bl	80a6130 <__aeabi_fcmplt>
 80a137c:	b160      	cbz	r0, 80a1398 <loop+0xc8>
 80a137e:	4b4a      	ldr	r3, [pc, #296]	; (80a14a8 <loop+0x1d8>)
 80a1380:	681b      	ldr	r3, [r3, #0]
 80a1382:	b94b      	cbnz	r3, 80a1398 <loop+0xc8>
      cmdDefrost1("3");
 80a1384:	4949      	ldr	r1, [pc, #292]	; (80a14ac <loop+0x1dc>)
 80a1386:	a806      	add	r0, sp, #24
 80a1388:	f002 f8eb 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a138c:	a806      	add	r0, sp, #24
 80a138e:	f7ff fca9 	bl	80a0ce4 <_Z11cmdDefrost16String>
 80a1392:	a806      	add	r0, sp, #24
 80a1394:	f002 f89e 	bl	80a34d4 <_ZN6StringD1Ev>
 80a1398:	f001 fb4e 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    msDefrost1 = millis();
 80a139c:	6030      	str	r0, [r6, #0]
  }

  if (now - msDefrost2 >= defrostTimer)
 80a139e:	6823      	ldr	r3, [r4, #0]
 80a13a0:	682a      	ldr	r2, [r5, #0]
 80a13a2:	1a9b      	subs	r3, r3, r2
 80a13a4:	42bb      	cmp	r3, r7
 80a13a6:	d915      	bls.n	80a13d4 <loop+0x104>
  {
    if ((celsius[2] < 0.0) && (DefrostLevel2 == 0))
 80a13a8:	4b3e      	ldr	r3, [pc, #248]	; (80a14a4 <loop+0x1d4>)
 80a13aa:	2100      	movs	r1, #0
 80a13ac:	6898      	ldr	r0, [r3, #8]
 80a13ae:	f004 febf 	bl	80a6130 <__aeabi_fcmplt>
 80a13b2:	b160      	cbz	r0, 80a13ce <loop+0xfe>
 80a13b4:	4b3e      	ldr	r3, [pc, #248]	; (80a14b0 <loop+0x1e0>)
 80a13b6:	681b      	ldr	r3, [r3, #0]
 80a13b8:	b94b      	cbnz	r3, 80a13ce <loop+0xfe>
      cmdDefrost2("3");
 80a13ba:	493c      	ldr	r1, [pc, #240]	; (80a14ac <loop+0x1dc>)
 80a13bc:	a806      	add	r0, sp, #24
 80a13be:	f002 f8d0 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a13c2:	a806      	add	r0, sp, #24
 80a13c4:	f7ff fad2 	bl	80a096c <_Z11cmdDefrost26String>
 80a13c8:	a806      	add	r0, sp, #24
 80a13ca:	f002 f883 	bl	80a34d4 <_ZN6StringD1Ev>
 80a13ce:	f001 fb33 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    msDefrost2 = millis();
 80a13d2:	6028      	str	r0, [r5, #0]
  }

  wd.checkin();
 80a13d4:	f7fe fee6 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>

  if (now - msMQTTConnectCheck >= MQTTConnectCheckTimer){
 80a13d8:	4b36      	ldr	r3, [pc, #216]	; (80a14b4 <loop+0x1e4>)
 80a13da:	6822      	ldr	r2, [r4, #0]
 80a13dc:	6819      	ldr	r1, [r3, #0]
 80a13de:	461d      	mov	r5, r3
 80a13e0:	1a52      	subs	r2, r2, r1
 80a13e2:	f5b2 6ffa 	cmp.w	r2, #2000	; 0x7d0
 80a13e6:	d30d      	bcc.n	80a1404 <loop+0x134>

    if (!MQTTclient1.isConnected())  {   //cloud connect
 80a13e8:	4825      	ldr	r0, [pc, #148]	; (80a1480 <loop+0x1b0>)
 80a13ea:	f000 fff8 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a13ee:	b910      	cbnz	r0, 80a13f6 <loop+0x126>
          MQTTConnect1();
 80a13f0:	f7fe ff36 	bl	80a0260 <_Z12MQTTConnect1v>
 80a13f4:	e003      	b.n	80a13fe <loop+0x12e>
    } else {
        digitalWrite(MQTT_LED, HIGH);
 80a13f6:	2101      	movs	r1, #1
 80a13f8:	2007      	movs	r0, #7
 80a13fa:	f003 f9c8 	bl	80a478e <digitalWrite>
 80a13fe:	f001 fb1b 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
               
    }
    msMQTTConnectCheck = millis();
 80a1402:	6028      	str	r0, [r5, #0]
  }
  wd.checkin();


  if (now - msTempSample >= msTempSampleTime)
 80a1404:	4e2c      	ldr	r6, [pc, #176]	; (80a14b8 <loop+0x1e8>)
        digitalWrite(MQTT_LED, HIGH);
               
    }
    msMQTTConnectCheck = millis();
  }
  wd.checkin();
 80a1406:	f7fe fecd 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>


  if (now - msTempSample >= msTempSampleTime)
 80a140a:	6832      	ldr	r2, [r6, #0]
 80a140c:	6823      	ldr	r3, [r4, #0]
 80a140e:	1a9b      	subs	r3, r3, r2
 80a1410:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a1414:	4293      	cmp	r3, r2
 80a1416:	d957      	bls.n	80a14c8 <loop+0x1f8>
  {
    if (!HaltTemp)
 80a1418:	4b28      	ldr	r3, [pc, #160]	; (80a14bc <loop+0x1ec>)
 80a141a:	781d      	ldrb	r5, [r3, #0]
 80a141c:	b11d      	cbz	r5, 80a1426 <loop+0x156>
 80a141e:	f001 fb0b 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>

      wd.checkin();
      }
    }
  
     msTempSample = millis();  
 80a1422:	6030      	str	r0, [r6, #0]
 80a1424:	e050      	b.n	80a14c8 <loop+0x1f8>
 80a1426:	f8df a098 	ldr.w	sl, [pc, #152]	; 80a14c0 <loop+0x1f0>
    if (!HaltTemp)
    //msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
      {
        temp = getTemp(sensorAddresses[i]);
 80a142a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 80a14c4 <loop+0x1f4>
        }
        else
        {
          temp = getTemp(sensorAddresses[i]);
          if (!isnan(temp))
            celsius[i] = temp;
 80a142e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80a14a4 <loop+0x1d4>
 80a1432:	eb0a 0bc5 	add.w	fp, sl, r5, lsl #3
    if (!HaltTemp)
    //msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
      {
        temp = getTemp(sensorAddresses[i]);
 80a1436:	4658      	mov	r0, fp
 80a1438:	f7ff f87a 	bl	80a0530 <_Z7getTempPh>
 80a143c:	f004 fb7c 	bl	80a5b38 <__aeabi_d2f>

        if (!isnan(temp))
 80a1440:	4601      	mov	r1, r0
    if (!HaltTemp)
    //msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
      {
        temp = getTemp(sensorAddresses[i]);
 80a1442:	4607      	mov	r7, r0
 80a1444:	f8c8 0000 	str.w	r0, [r8]

        if (!isnan(temp))
 80a1448:	f004 fe9a 	bl	80a6180 <__aeabi_fcmpun>
 80a144c:	b158      	cbz	r0, 80a1466 <loop+0x196>
        {
          celsius[i] = temp;
        }
        else
        {
          temp = getTemp(sensorAddresses[i]);
 80a144e:	4658      	mov	r0, fp
 80a1450:	f7ff f86e 	bl	80a0530 <_Z7getTempPh>
 80a1454:	f004 fb70 	bl	80a5b38 <__aeabi_d2f>
          if (!isnan(temp))
 80a1458:	4601      	mov	r1, r0
        {
          celsius[i] = temp;
        }
        else
        {
          temp = getTemp(sensorAddresses[i]);
 80a145a:	4607      	mov	r7, r0
 80a145c:	f8c8 0000 	str.w	r0, [r8]
          if (!isnan(temp))
 80a1460:	f004 fe8e 	bl	80a6180 <__aeabi_fcmpun>
 80a1464:	b908      	cbnz	r0, 80a146a <loop+0x19a>
            celsius[i] = temp;
 80a1466:	f849 7025 	str.w	r7, [r9, r5, lsl #2]
  if (now - msTempSample >= msTempSampleTime)
  {
    if (!HaltTemp)
    //msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
 80a146a:	3501      	adds	r5, #1
          temp = getTemp(sensorAddresses[i]);
          if (!isnan(temp))
            celsius[i] = temp;
        }

      wd.checkin();
 80a146c:	f7fe fe9a 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
  if (now - msTempSample >= msTempSampleTime)
  {
    if (!HaltTemp)
    //msTempSample = millis();
    {
      for (int i = 0; i < nSENSORS; i++)
 80a1470:	2d0c      	cmp	r5, #12
 80a1472:	d1de      	bne.n	80a1432 <loop+0x162>
 80a1474:	e7d3      	b.n	80a141e <loop+0x14e>
 80a1476:	bf00      	nop
 80a1478:	00000000 	.word	0x00000000
 80a147c:	414b7740 	.word	0x414b7740
 80a1480:	20000138 	.word	0x20000138
 80a1484:	20000038 	.word	0x20000038
 80a1488:	200001b8 	.word	0x200001b8
 80a148c:	20000198 	.word	0x20000198
 80a1490:	200001bc 	.word	0x200001bc
 80a1494:	200002c8 	.word	0x200002c8
 80a1498:	44020000 	.word	0x44020000
 80a149c:	20000130 	.word	0x20000130
 80a14a0:	00249eff 	.word	0x00249eff
 80a14a4:	20000004 	.word	0x20000004
 80a14a8:	200002b8 	.word	0x200002b8
 80a14ac:	080a6643 	.word	0x080a6643
 80a14b0:	200002bc 	.word	0x200002bc
 80a14b4:	200000b8 	.word	0x200000b8
 80a14b8:	200002c0 	.word	0x200002c0
 80a14bc:	20000192 	.word	0x20000192
 80a14c0:	40024000 	.word	0x40024000
 80a14c4:	200002c4 	.word	0x200002c4
    }
  
     msTempSample = millis();  
  }

  if (now - msPressureSample >= msPressureSampleTime)
 80a14c8:	4d79      	ldr	r5, [pc, #484]	; (80a16b0 <loop+0x3e0>)
 80a14ca:	6823      	ldr	r3, [r4, #0]
 80a14cc:	682a      	ldr	r2, [r5, #0]
 80a14ce:	1a9b      	subs	r3, r3, r2
 80a14d0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80a14d4:	d30c      	bcc.n	80a14f0 <loop+0x220>
  { 
    getMCP();
 80a14d6:	f7ff fd65 	bl	80a0fa4 <_Z6getMCPv>
 80a14da:	f001 faad 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    msPressureSample = millis();
 80a14de:	6028      	str	r0, [r5, #0]
    popAddresses();
 80a14e0:	f7ff fe0a 	bl	80a10f8 <_Z12popAddressesv>
 80a14e4:	f001 faa8 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
 80a14e8:	f001 faa6 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    msReverse1 = millis() - msStartReverse1;
    msReverse2 = millis() - msStartReverse2;

    wd.checkin();
 80a14ec:	f7fe fe5a 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
      //  if ( (psi[0]>300)) {
      cmdStopDefrost2("OFF");
    } */
  }

  PerformDefrost1(0);
 80a14f0:	2000      	movs	r0, #0
  PerformDefrost2(0);

  if (now - msPublish2 >= msPublishTime2)
 80a14f2:	4d70      	ldr	r5, [pc, #448]	; (80a16b4 <loop+0x3e4>)
      //  if ( (psi[0]>300)) {
      cmdStopDefrost2("OFF");
    } */
  }

  PerformDefrost1(0);
 80a14f4:	f7ff fa52 	bl	80a099c <_Z15PerformDefrost1i>
  PerformDefrost2(0);
 80a14f8:	2000      	movs	r0, #0
 80a14fa:	f7ff f8e9 	bl	80a06d0 <_Z15PerformDefrost2i>

  if (now - msPublish2 >= msPublishTime2)
 80a14fe:	682a      	ldr	r2, [r5, #0]
 80a1500:	6823      	ldr	r3, [r4, #0]
 80a1502:	1a9b      	subs	r3, r3, r2
 80a1504:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80a1508:	4293      	cmp	r3, r2
 80a150a:	f240 8093 	bls.w	80a1634 <loop+0x364>
 80a150e:	f001 fa93 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
  {
    msPublish2 = millis();
 80a1512:	6028      	str	r0, [r5, #0]
    publishPressure();
 80a1514:	f7ff fe7a 	bl	80a120c <_Z15publishPressurev>
    wd.checkin();
 80a1518:	f7fe fe44 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
    MQTTpublish("damper1_1",  String(damper.getVal(damper1_1), DEC));
 80a151c:	4966      	ldr	r1, [pc, #408]	; (80a16b8 <loop+0x3e8>)
 80a151e:	a806      	add	r0, sp, #24
 80a1520:	f002 f81f 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1524:	2102      	movs	r1, #2
 80a1526:	4865      	ldr	r0, [pc, #404]	; (80a16bc <loop+0x3ec>)
 80a1528:	f000 fccd 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a152c:	220a      	movs	r2, #10
 80a152e:	4601      	mov	r1, r0
 80a1530:	a802      	add	r0, sp, #8
 80a1532:	f002 f854 	bl	80a35de <_ZN6StringC1Eih>
 80a1536:	9902      	ldr	r1, [sp, #8]
 80a1538:	a806      	add	r0, sp, #24
 80a153a:	f7fe fee7 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a153e:	a802      	add	r0, sp, #8
 80a1540:	f001 ffc8 	bl	80a34d4 <_ZN6StringD1Ev>
 80a1544:	a806      	add	r0, sp, #24
 80a1546:	f001 ffc5 	bl	80a34d4 <_ZN6StringD1Ev>
    MQTTpublish("damper1_2",  String(damper.getVal(damper1_2), DEC));
 80a154a:	495d      	ldr	r1, [pc, #372]	; (80a16c0 <loop+0x3f0>)
 80a154c:	a806      	add	r0, sp, #24
 80a154e:	f002 f808 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1552:	2103      	movs	r1, #3
 80a1554:	4859      	ldr	r0, [pc, #356]	; (80a16bc <loop+0x3ec>)
 80a1556:	f000 fcb6 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a155a:	220a      	movs	r2, #10
 80a155c:	4601      	mov	r1, r0
 80a155e:	a802      	add	r0, sp, #8
 80a1560:	f002 f83d 	bl	80a35de <_ZN6StringC1Eih>
 80a1564:	9902      	ldr	r1, [sp, #8]
 80a1566:	a806      	add	r0, sp, #24
 80a1568:	f7fe fed0 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a156c:	a802      	add	r0, sp, #8
 80a156e:	f001 ffb1 	bl	80a34d4 <_ZN6StringD1Ev>
 80a1572:	a806      	add	r0, sp, #24
 80a1574:	f001 ffae 	bl	80a34d4 <_ZN6StringD1Ev>
    MQTTpublish("damper2_1",  String(damper.getVal(damper2_1), DEC));
 80a1578:	4952      	ldr	r1, [pc, #328]	; (80a16c4 <loop+0x3f4>)
 80a157a:	a806      	add	r0, sp, #24
 80a157c:	f001 fff1 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1580:	2100      	movs	r1, #0
 80a1582:	484e      	ldr	r0, [pc, #312]	; (80a16bc <loop+0x3ec>)
 80a1584:	f000 fc9f 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a1588:	220a      	movs	r2, #10
 80a158a:	4601      	mov	r1, r0
 80a158c:	a802      	add	r0, sp, #8
 80a158e:	f002 f826 	bl	80a35de <_ZN6StringC1Eih>
 80a1592:	9902      	ldr	r1, [sp, #8]
 80a1594:	a806      	add	r0, sp, #24
 80a1596:	f7fe feb9 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a159a:	a802      	add	r0, sp, #8
 80a159c:	f001 ff9a 	bl	80a34d4 <_ZN6StringD1Ev>
 80a15a0:	a806      	add	r0, sp, #24
 80a15a2:	f001 ff97 	bl	80a34d4 <_ZN6StringD1Ev>
    MQTTpublish("damper2_2",  String(damper.getVal(damper2_2), DEC));
 80a15a6:	4948      	ldr	r1, [pc, #288]	; (80a16c8 <loop+0x3f8>)
 80a15a8:	a806      	add	r0, sp, #24
 80a15aa:	f001 ffda 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a15ae:	2101      	movs	r1, #1
 80a15b0:	4842      	ldr	r0, [pc, #264]	; (80a16bc <loop+0x3ec>)
 80a15b2:	f000 fc88 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a15b6:	220a      	movs	r2, #10
 80a15b8:	4601      	mov	r1, r0
 80a15ba:	a802      	add	r0, sp, #8
 80a15bc:	f002 f80f 	bl	80a35de <_ZN6StringC1Eih>
 80a15c0:	9902      	ldr	r1, [sp, #8]
 80a15c2:	a806      	add	r0, sp, #24
 80a15c4:	f7fe fea2 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a15c8:	a802      	add	r0, sp, #8
 80a15ca:	f001 ff83 	bl	80a34d4 <_ZN6StringD1Ev>
 80a15ce:	a806      	add	r0, sp, #24
 80a15d0:	f001 ff80 	bl	80a34d4 <_ZN6StringD1Ev>
    MQTTpublish("txv1",  String(damper.getVal(txv1), DEC));  
 80a15d4:	493d      	ldr	r1, [pc, #244]	; (80a16cc <loop+0x3fc>)
 80a15d6:	a806      	add	r0, sp, #24
 80a15d8:	f001 ffc3 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a15dc:	2104      	movs	r1, #4
 80a15de:	4837      	ldr	r0, [pc, #220]	; (80a16bc <loop+0x3ec>)
 80a15e0:	f000 fc71 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a15e4:	220a      	movs	r2, #10
 80a15e6:	4601      	mov	r1, r0
 80a15e8:	a802      	add	r0, sp, #8
 80a15ea:	f001 fff8 	bl	80a35de <_ZN6StringC1Eih>
 80a15ee:	9902      	ldr	r1, [sp, #8]
 80a15f0:	a806      	add	r0, sp, #24
 80a15f2:	f7fe fe8b 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a15f6:	a802      	add	r0, sp, #8
 80a15f8:	f001 ff6c 	bl	80a34d4 <_ZN6StringD1Ev>
 80a15fc:	a806      	add	r0, sp, #24
 80a15fe:	f001 ff69 	bl	80a34d4 <_ZN6StringD1Ev>
    MQTTpublish("txv2",  String(damper.getVal(txv2), DEC));
 80a1602:	4933      	ldr	r1, [pc, #204]	; (80a16d0 <loop+0x400>)
 80a1604:	a806      	add	r0, sp, #24
 80a1606:	f001 ffac 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a160a:	2108      	movs	r1, #8
 80a160c:	482b      	ldr	r0, [pc, #172]	; (80a16bc <loop+0x3ec>)
 80a160e:	f000 fc5a 	bl	80a1ec6 <_ZN16Adafruit_PCA96856getValEh>
 80a1612:	220a      	movs	r2, #10
 80a1614:	4601      	mov	r1, r0
 80a1616:	a802      	add	r0, sp, #8
 80a1618:	f001 ffe1 	bl	80a35de <_ZN6StringC1Eih>
 80a161c:	9902      	ldr	r1, [sp, #8]
 80a161e:	a806      	add	r0, sp, #24
 80a1620:	f7fe fe74 	bl	80a030c <_Z11MQTTpublish6StringPKc>
 80a1624:	a802      	add	r0, sp, #8
 80a1626:	f001 ff55 	bl	80a34d4 <_ZN6StringD1Ev>
 80a162a:	a806      	add	r0, sp, #24
 80a162c:	f001 ff52 	bl	80a34d4 <_ZN6StringD1Ev>
  
    publishStatus();
 80a1630:	f7fe ff9c 	bl	80a056c <_Z13publishStatusv>
    //publishDebug();
  }

  if (now - msModulateDamper >= msModulateDamperTime)
 80a1634:	4d27      	ldr	r5, [pc, #156]	; (80a16d4 <loop+0x404>)
 80a1636:	6823      	ldr	r3, [r4, #0]
 80a1638:	682a      	ldr	r2, [r5, #0]
 80a163a:	1a9b      	subs	r3, r3, r2
 80a163c:	4a26      	ldr	r2, [pc, #152]	; (80a16d8 <loop+0x408>)
 80a163e:	4293      	cmp	r3, r2
 80a1640:	d902      	bls.n	80a1648 <loop+0x378>
 80a1642:	f001 f9f9 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
  {
    msModulateDamper = millis();
 80a1646:	6028      	str	r0, [r5, #0]
  //  ModulateDamper(damper2_1 ,1200, 3200, 100);
  //  ModulateDamper(damper2_2 ,1500, 3200, 100);
  //
  }

  if (now - msPublish >= msPublishTime)
 80a1648:	4d24      	ldr	r5, [pc, #144]	; (80a16dc <loop+0x40c>)
 80a164a:	6823      	ldr	r3, [r4, #0]
 80a164c:	682a      	ldr	r2, [r5, #0]
 80a164e:	1a9b      	subs	r3, r3, r2
 80a1650:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80a1654:	d306      	bcc.n	80a1664 <loop+0x394>
  {
    publishData();
 80a1656:	f7ff fd7d 	bl	80a1154 <_Z11publishDatav>
    wd.checkin();
 80a165a:	f7fe fda3 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
 80a165e:	f001 f9eb 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    //ModulateDamper();
    msPublish = millis();
 80a1662:	6028      	str	r0, [r5, #0]
  }
  wd.checkin(); // resets the AWDT count
 80a1664:	f7fe fd9e 	bl	80a01a4 <_ZN19ApplicationWatchdog7checkinEv>
 }
 80a1668:	b00b      	add	sp, #44	; 0x2c
 80a166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a166e:	2500      	movs	r5, #0
 80a1670:	ac0a      	add	r4, sp, #40	; 0x28
 80a1672:	f844 5d10 	str.w	r5, [r4, #-16]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1676:	462a      	mov	r2, r5
 80a1678:	4629      	mov	r1, r5
 80a167a:	4620      	mov	r0, r4
 80a167c:	f001 f9fc 	bl	80a2a78 <HAL_Core_Get_Last_Reset_Info>
  static uint32_t now;

   if (MQTTclient1.isConnected())  MQTTclient1.loop();
   
    if (Particle.connected() && FirstTime){
      Particle.publish("RESETREASON", String(System.resetReason(), DEC), PRIVATE);
 80a1680:	220a      	movs	r2, #10
 80a1682:	9906      	ldr	r1, [sp, #24]
 80a1684:	4620      	mov	r0, r4
 80a1686:	f001 ffaa 	bl	80a35de <_ZN6StringC1Eih>
 80a168a:	4b15      	ldr	r3, [pc, #84]	; (80a16e0 <loop+0x410>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a168c:	9a06      	ldr	r2, [sp, #24]
 80a168e:	781b      	ldrb	r3, [r3, #0]
 80a1690:	4914      	ldr	r1, [pc, #80]	; (80a16e4 <loop+0x414>)
 80a1692:	f88d 3000 	strb.w	r3, [sp]
 80a1696:	a802      	add	r0, sp, #8
 80a1698:	233c      	movs	r3, #60	; 0x3c
 80a169a:	f002 fbb1 	bl	80a3e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80a169e:	a803      	add	r0, sp, #12
 80a16a0:	f7ff fd14 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a16a4:	4620      	mov	r0, r4
 80a16a6:	f001 ff15 	bl	80a34d4 <_ZN6StringD1Ev>
      FirstTime = FALSE;
 80a16aa:	7035      	strb	r5, [r6, #0]
 80a16ac:	e622      	b.n	80a12f4 <loop+0x24>
 80a16ae:	bf00      	nop
 80a16b0:	200000c4 	.word	0x200000c4
 80a16b4:	200001b0 	.word	0x200001b0
 80a16b8:	080a64cb 	.word	0x080a64cb
 80a16bc:	200001c0 	.word	0x200001c0
 80a16c0:	080a64e2 	.word	0x080a64e2
 80a16c4:	080a64f9 	.word	0x080a64f9
 80a16c8:	080a6510 	.word	0x080a6510
 80a16cc:	080a6645 	.word	0x080a6645
 80a16d0:	080a664a 	.word	0x080a664a
 80a16d4:	200000f4 	.word	0x200000f4
 80a16d8:	0001d4bf 	.word	0x0001d4bf
 80a16dc:	20000194 	.word	0x20000194
 80a16e0:	200000c8 	.word	0x200000c8
 80a16e4:	080a664f 	.word	0x080a664f

080a16e8 <_GLOBAL__sub_I_msStartReverse1>:
{

  //relays.relayTalk(relayCmd(command));
  relays.relayTalk(command);
  return 1;
}
 80a16e8:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a16ea:	4b2f      	ldr	r3, [pc, #188]	; (80a17a8 <_GLOBAL__sub_I_msStartReverse1+0xc0>)
 80a16ec:	2201      	movs	r2, #1
 80a16ee:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a16f0:	f001 f942 	bl	80a2978 <HAL_Pin_Map>

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
//ApplicationWatchdog wd(90000, System.reset, 1424);
// Initialize objects from the lib
ApplicationWatchdog wd(60000, System.reset, 1424);
 80a16f4:	f44f 63b2 	mov.w	r3, #1424	; 0x590
 80a16f8:	4a2c      	ldr	r2, [pc, #176]	; (80a17ac <_GLOBAL__sub_I_msStartReverse1+0xc4>)
 80a16fa:	f64e 2160 	movw	r1, #60000	; 0xea60
 80a16fe:	482c      	ldr	r0, [pc, #176]	; (80a17b0 <_GLOBAL__sub_I_msStartReverse1+0xc8>)
 80a1700:	f7fe fd58 	bl	80a01b4 <_ZN19ApplicationWatchdogC1EjPFvvEj>
 80a1704:	4a2b      	ldr	r2, [pc, #172]	; (80a17b4 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a1706:	492c      	ldr	r1, [pc, #176]	; (80a17b8 <_GLOBAL__sub_I_msStartReverse1+0xd0>)
 80a1708:	4829      	ldr	r0, [pc, #164]	; (80a17b0 <_GLOBAL__sub_I_msStartReverse1+0xc8>)
 80a170a:	f003 f8f7 	bl	80a48fc <__aeabi_atexit>


const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo[nSENSORS]; //[(1 * nSENSORS)+1];
 80a170e:	4d2b      	ldr	r5, [pc, #172]	; (80a17bc <_GLOBAL__sub_I_msStartReverse1+0xd4>)

// declare a global watchdog instance
// reset the system after 15 seconds if the application is unresponsive
//ApplicationWatchdog wd(90000, System.reset, 1424);
// Initialize objects from the lib
ApplicationWatchdog wd(60000, System.reset, 1424);
 80a1710:	2400      	movs	r4, #0


const int nSENSORS = 12;
const int damperDefault1 = 3000;
const int damperDefault2 = 2800;
String sz18B20AddressInfo[nSENSORS]; //[(1 * nSENSORS)+1];
 80a1712:	1928      	adds	r0, r5, r4
 80a1714:	492a      	ldr	r1, [pc, #168]	; (80a17c0 <_GLOBAL__sub_I_msStartReverse1+0xd8>)
 80a1716:	3410      	adds	r4, #16
 80a1718:	f001 ff23 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a171c:	2cc0      	cmp	r4, #192	; 0xc0
 80a171e:	d1f8      	bne.n	80a1712 <_GLOBAL__sub_I_msStartReverse1+0x2a>
 80a1720:	4a24      	ldr	r2, [pc, #144]	; (80a17b4 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a1722:	4928      	ldr	r1, [pc, #160]	; (80a17c4 <_GLOBAL__sub_I_msStartReverse1+0xdc>)
 80a1724:	2000      	movs	r0, #0
 80a1726:	f003 f8e9 	bl	80a48fc <__aeabi_atexit>

String szInfo;
 80a172a:	4925      	ldr	r1, [pc, #148]	; (80a17c0 <_GLOBAL__sub_I_msStartReverse1+0xd8>)
 80a172c:	4826      	ldr	r0, [pc, #152]	; (80a17c8 <_GLOBAL__sub_I_msStartReverse1+0xe0>)
 80a172e:	f001 ff18 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
 80a1732:	4a20      	ldr	r2, [pc, #128]	; (80a17b4 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a1734:	4925      	ldr	r1, [pc, #148]	; (80a17cc <_GLOBAL__sub_I_msStartReverse1+0xe4>)
 80a1736:	4824      	ldr	r0, [pc, #144]	; (80a17c8 <_GLOBAL__sub_I_msStartReverse1+0xe0>)
 80a1738:	f003 f8e0 	bl	80a48fc <__aeabi_atexit>

DS18B20 ds18b20(pinOneWire);  
 80a173c:	2200      	movs	r2, #0
 80a173e:	2104      	movs	r1, #4
 80a1740:	4823      	ldr	r0, [pc, #140]	; (80a17d0 <_GLOBAL__sub_I_msStartReverse1+0xe8>)
 80a1742:	f000 fa15 	bl	80a1b70 <_ZN7DS18B20C1Etb>
 80a1746:	4a1b      	ldr	r2, [pc, #108]	; (80a17b4 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a1748:	4922      	ldr	r1, [pc, #136]	; (80a17d4 <_GLOBAL__sub_I_msStartReverse1+0xec>)
 80a174a:	4821      	ldr	r0, [pc, #132]	; (80a17d0 <_GLOBAL__sub_I_msStartReverse1+0xe8>)
 80a174c:	f003 f8d6 	bl	80a48fc <__aeabi_atexit>
float temp;

//double celsius[nSENSORS] = {};
//uint8_t addr[8][12];

CASARIA_MCP3428 mcp1(0x68);
 80a1750:	2168      	movs	r1, #104	; 0x68
 80a1752:	4821      	ldr	r0, [pc, #132]	; (80a17d8 <_GLOBAL__sub_I_msStartReverse1+0xf0>)
 80a1754:	f000 fb04 	bl	80a1d60 <_ZN15CASARIA_MCP3428C1Eh>
 80a1758:	4a16      	ldr	r2, [pc, #88]	; (80a17b4 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a175a:	4920      	ldr	r1, [pc, #128]	; (80a17dc <_GLOBAL__sub_I_msStartReverse1+0xf4>)
 80a175c:	481e      	ldr	r0, [pc, #120]	; (80a17d8 <_GLOBAL__sub_I_msStartReverse1+0xf0>)
 80a175e:	f003 f8cd 	bl	80a48fc <__aeabi_atexit>
CASARIA_MCP3428 mcp2(0x6E);
 80a1762:	216e      	movs	r1, #110	; 0x6e
 80a1764:	481e      	ldr	r0, [pc, #120]	; (80a17e0 <_GLOBAL__sub_I_msStartReverse1+0xf8>)
 80a1766:	f000 fafb 	bl	80a1d60 <_ZN15CASARIA_MCP3428C1Eh>
 80a176a:	4a12      	ldr	r2, [pc, #72]	; (80a17b4 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a176c:	491b      	ldr	r1, [pc, #108]	; (80a17dc <_GLOBAL__sub_I_msStartReverse1+0xf4>)
 80a176e:	481c      	ldr	r0, [pc, #112]	; (80a17e0 <_GLOBAL__sub_I_msStartReverse1+0xf8>)
 80a1770:	f003 f8c4 	bl	80a48fc <__aeabi_atexit>


MQTT MQTTclient1("ccc.casaria.net", 1883, MQTTcallback1);
 80a1774:	4b1b      	ldr	r3, [pc, #108]	; (80a17e4 <_GLOBAL__sub_I_msStartReverse1+0xfc>)
 80a1776:	f240 725b 	movw	r2, #1883	; 0x75b
 80a177a:	491b      	ldr	r1, [pc, #108]	; (80a17e8 <_GLOBAL__sub_I_msStartReverse1+0x100>)
 80a177c:	481b      	ldr	r0, [pc, #108]	; (80a17ec <_GLOBAL__sub_I_msStartReverse1+0x104>)
 80a177e:	f000 fd45 	bl	80a220c <_ZN4MQTTC1EPctPFvS0_PhjE>
 80a1782:	4a0c      	ldr	r2, [pc, #48]	; (80a17b4 <_GLOBAL__sub_I_msStartReverse1+0xcc>)
 80a1784:	491a      	ldr	r1, [pc, #104]	; (80a17f0 <_GLOBAL__sub_I_msStartReverse1+0x108>)
 80a1786:	4819      	ldr	r0, [pc, #100]	; (80a17ec <_GLOBAL__sub_I_msStartReverse1+0x104>)
 80a1788:	f003 f8b8 	bl	80a48fc <__aeabi_atexit>
  Particle.publish("test", (char*) sensorAddresses[0], PRIVATE);
}

//DS18 sensor(pinOneWire);

Adafruit_PCA9685 damper = Adafruit_PCA9685(0x40, true); // Use the default address, but also turn on debugging
 80a178c:	2140      	movs	r1, #64	; 0x40
 80a178e:	2201      	movs	r2, #1
 80a1790:	4818      	ldr	r0, [pc, #96]	; (80a17f4 <_GLOBAL__sub_I_msStartReverse1+0x10c>)
 80a1792:	f000 fb95 	bl	80a1ec0 <_ZN16Adafruit_PCA9685C1Ehb>

CASARIA_MCP23017 relays; //not used
 80a1796:	4818      	ldr	r0, [pc, #96]	; (80a17f8 <_GLOBAL__sub_I_msStartReverse1+0x110>)
 80a1798:	f000 f9cc 	bl	80a1b34 <_ZN16CASARIA_MCP23017C1Ev>
{

  //relays.relayTalk(relayCmd(command));
  relays.relayTalk(command);
  return 1;
}
 80a179c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80a17a0:	2101      	movs	r1, #1
 80a17a2:	2004      	movs	r0, #4
 80a17a4:	f001 b958 	b.w	80a2a58 <HAL_Feature_Set>
 80a17a8:	200000c8 	.word	0x200000c8
 80a17ac:	080a2f2d 	.word	0x080a2f2d
 80a17b0:	200000d0 	.word	0x200000d0
 80a17b4:	200000b0 	.word	0x200000b0
 80a17b8:	080a0163 	.word	0x080a0163
 80a17bc:	200001d4 	.word	0x200001d4
 80a17c0:	080a682c 	.word	0x080a682c
 80a17c4:	080a00dd 	.word	0x080a00dd
 80a17c8:	200001a0 	.word	0x200001a0
 80a17cc:	080a34d5 	.word	0x080a34d5
 80a17d0:	200002e8 	.word	0x200002e8
 80a17d4:	080a1bc7 	.word	0x080a1bc7
 80a17d8:	20000298 	.word	0x20000298
 80a17dc:	080a1d79 	.word	0x080a1d79
 80a17e0:	200002a8 	.word	0x200002a8
 80a17e4:	080a0d15 	.word	0x080a0d15
 80a17e8:	080a665b 	.word	0x080a665b
 80a17ec:	20000138 	.word	0x20000138
 80a17f0:	080a2949 	.word	0x080a2949
 80a17f4:	200001c0 	.word	0x200001c0
 80a17f8:	200000f8 	.word	0x200000f8

080a17fc <_GLOBAL__sub_I_lastTime>:
 80a17fc:	f001 b8bc 	b.w	80a2978 <HAL_Pin_Map>

080a1800 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a1800:	8802      	ldrh	r2, [r0, #0]
 80a1802:	231c      	movs	r3, #28
 80a1804:	4353      	muls	r3, r2
 80a1806:	6842      	ldr	r2, [r0, #4]
 80a1808:	18d1      	adds	r1, r2, r3
 80a180a:	58d3      	ldr	r3, [r2, r3]
 80a180c:	888a      	ldrh	r2, [r1, #4]
 80a180e:	835a      	strh	r2, [r3, #26]
 80a1810:	4770      	bx	lr

080a1812 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a1812:	b538      	push	{r3, r4, r5, lr}
 80a1814:	4604      	mov	r4, r0
 80a1816:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80a1818:	f001 f8ae 	bl	80a2978 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80a181c:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80a181e:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80a1820:	4628      	mov	r0, r5
 80a1822:	f002 ffa3 	bl	80a476c <pinMode>
    _pin = pin;
 80a1826:	8025      	strh	r5, [r4, #0]
}
 80a1828:	4620      	mov	r0, r4
 80a182a:	bd38      	pop	{r3, r4, r5, pc}

080a182c <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80a182c:	b538      	push	{r3, r4, r5, lr}
 80a182e:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80a1830:	f002 fdb0 	bl	80a4394 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a1834:	2100      	movs	r1, #0
 80a1836:	8828      	ldrh	r0, [r5, #0]
 80a1838:	f001 f8a6 	bl	80a2988 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 80a183c:	f002 fdac 	bl	80a4398 <_Z10interruptsv>
 80a1840:	247d      	movs	r4, #125	; 0x7d
 80a1842:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 80a1844:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80a1848:	d02d      	beq.n	80a18a6 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 80a184a:	2002      	movs	r0, #2
 80a184c:	f001 f8ec 	bl	80a2a28 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a1850:	8828      	ldrh	r0, [r5, #0]
 80a1852:	f001 f8b1 	bl	80a29b8 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 80a1856:	f010 0fff 	tst.w	r0, #255	; 0xff
 80a185a:	d0f2      	beq.n	80a1842 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 80a185c:	f002 fd9a 	bl	80a4394 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a1860:	4628      	mov	r0, r5
 80a1862:	f7ff ffcd 	bl	80a1800 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a1866:	2101      	movs	r1, #1
 80a1868:	8828      	ldrh	r0, [r5, #0]
 80a186a:	f001 f88d 	bl	80a2988 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 80a186e:	f002 fd93 	bl	80a4398 <_Z10interruptsv>
 80a1872:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80a1876:	f001 f8d7 	bl	80a2a28 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 80a187a:	f002 fd8b 	bl	80a4394 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a187e:	2100      	movs	r1, #0
 80a1880:	8828      	ldrh	r0, [r5, #0]
 80a1882:	f001 f881 	bl	80a2988 <HAL_Pin_Mode>
 80a1886:	2046      	movs	r0, #70	; 0x46
 80a1888:	f001 f8ce 	bl	80a2a28 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a188c:	8828      	ldrh	r0, [r5, #0]
 80a188e:	f001 f893 	bl	80a29b8 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a1892:	b2c0      	uxtb	r0, r0
 80a1894:	fab0 f480 	clz	r4, r0

    interrupts();
 80a1898:	f002 fd7e 	bl	80a4398 <_Z10interruptsv>
 80a189c:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 80a18a0:	0964      	lsrs	r4, r4, #5
 80a18a2:	f001 f8c1 	bl	80a2a28 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 80a18a6:	4620      	mov	r0, r4
 80a18a8:	bd38      	pop	{r3, r4, r5, pc}

080a18aa <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 80a18aa:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 80a18ac:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 80a18b0:	4604      	mov	r4, r0
    if (v & 1) {
 80a18b2:	d013      	beq.n	80a18dc <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 80a18b4:	f002 fd6e 	bl	80a4394 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a18b8:	4620      	mov	r0, r4
 80a18ba:	f7ff ffa1 	bl	80a1800 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a18be:	2101      	movs	r1, #1
 80a18c0:	8820      	ldrh	r0, [r4, #0]
 80a18c2:	f001 f861 	bl	80a2988 <HAL_Pin_Mode>
 80a18c6:	200a      	movs	r0, #10
 80a18c8:	f001 f8ae 	bl	80a2a28 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a18cc:	8820      	ldrh	r0, [r4, #0]
 80a18ce:	2100      	movs	r1, #0
 80a18d0:	f001 f85a 	bl	80a2988 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80a18d4:	f002 fd60 	bl	80a4398 <_Z10interruptsv>
 80a18d8:	2037      	movs	r0, #55	; 0x37
 80a18da:	e012      	b.n	80a1902 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80a18dc:	f002 fd5a 	bl	80a4394 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80a18e0:	4620      	mov	r0, r4
 80a18e2:	f7ff ff8d 	bl	80a1800 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a18e6:	2101      	movs	r1, #1
 80a18e8:	8820      	ldrh	r0, [r4, #0]
 80a18ea:	f001 f84d 	bl	80a2988 <HAL_Pin_Mode>
 80a18ee:	2041      	movs	r0, #65	; 0x41
 80a18f0:	f001 f89a 	bl	80a2a28 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a18f4:	8820      	ldrh	r0, [r4, #0]
 80a18f6:	4629      	mov	r1, r5
 80a18f8:	f001 f846 	bl	80a2988 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80a18fc:	f002 fd4c 	bl	80a4398 <_Z10interruptsv>
 80a1900:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80a1902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a1906:	f001 b88f 	b.w	80a2a28 <HAL_Delay_Microseconds>

080a190a <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80a190a:	b510      	push	{r4, lr}
 80a190c:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80a190e:	f002 fd41 	bl	80a4394 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80a1912:	4620      	mov	r0, r4
 80a1914:	f7ff ff74 	bl	80a1800 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a1918:	2101      	movs	r1, #1
 80a191a:	8820      	ldrh	r0, [r4, #0]
 80a191c:	f001 f834 	bl	80a2988 <HAL_Pin_Mode>
 80a1920:	2003      	movs	r0, #3
 80a1922:	f001 f881 	bl	80a2a28 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80a1926:	2100      	movs	r1, #0
 80a1928:	8820      	ldrh	r0, [r4, #0]
 80a192a:	f001 f82d 	bl	80a2988 <HAL_Pin_Mode>
 80a192e:	200a      	movs	r0, #10
 80a1930:	f001 f87a 	bl	80a2a28 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80a1934:	8820      	ldrh	r0, [r4, #0]
 80a1936:	f001 f83f 	bl	80a29b8 <HAL_GPIO_Read>
 80a193a:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 80a193c:	f002 fd2c 	bl	80a4398 <_Z10interruptsv>
 80a1940:	2035      	movs	r0, #53	; 0x35
 80a1942:	f001 f871 	bl	80a2a28 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 80a1946:	b2e0      	uxtb	r0, r4
 80a1948:	bd10      	pop	{r4, pc}

080a194a <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 80a194a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a194e:	4605      	mov	r5, r0
 80a1950:	4688      	mov	r8, r1
 80a1952:	4617      	mov	r7, r2
 80a1954:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a1956:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 80a1958:	ea18 0f04 	tst.w	r8, r4
 80a195c:	bf14      	ite	ne
 80a195e:	2101      	movne	r1, #1
 80a1960:	2100      	moveq	r1, #0
 80a1962:	4628      	mov	r0, r5
 80a1964:	f7ff ffa1 	bl	80a18aa <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a1968:	0064      	lsls	r4, r4, #1
 80a196a:	3e01      	subs	r6, #1
 80a196c:	b2e4      	uxtb	r4, r4
 80a196e:	d1f3      	bne.n	80a1958 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 80a1970:	b18f      	cbz	r7, 80a1996 <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 80a1972:	f002 fd0f 	bl	80a4394 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a1976:	882a      	ldrh	r2, [r5, #0]
 80a1978:	231c      	movs	r3, #28
 80a197a:	4353      	muls	r3, r2
 80a197c:	686a      	ldr	r2, [r5, #4]
 80a197e:	18d1      	adds	r1, r2, r3
 80a1980:	58d3      	ldr	r3, [r2, r3]
 80a1982:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a1984:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 80a1986:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80a1988:	8828      	ldrh	r0, [r5, #0]
 80a198a:	f000 fffd 	bl	80a2988 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 80a198e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 80a1992:	f002 bd01 	b.w	80a4398 <_Z10interruptsv>
 80a1996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a199a <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 80a199a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a199c:	4607      	mov	r7, r0
 80a199e:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 80a19a0:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a19a2:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 80a19a4:	4638      	mov	r0, r7
 80a19a6:	f7ff ffb0 	bl	80a190a <_ZN7OneWire8read_bitEv>
 80a19aa:	b100      	cbz	r0, 80a19ae <_ZN7OneWire4readEv+0x14>
 80a19ac:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 80a19ae:	0064      	lsls	r4, r4, #1
 80a19b0:	3e01      	subs	r6, #1
 80a19b2:	b2e4      	uxtb	r4, r4
 80a19b4:	d1f6      	bne.n	80a19a4 <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 80a19b6:	4628      	mov	r0, r5
 80a19b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a19ba <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a19ba:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 80a19bc:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a19be:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 80a19c0:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 80a19c2:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 80a19c4:	f7ff ffc1 	bl	80a194a <_ZN7OneWire5writeEhh>
 80a19c8:	1e65      	subs	r5, r4, #1
 80a19ca:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80a19cc:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80a19d0:	2200      	movs	r2, #0
 80a19d2:	4630      	mov	r0, r6
 80a19d4:	f7ff ffb9 	bl	80a194a <_ZN7OneWire5writeEhh>
 80a19d8:	42a5      	cmp	r5, r4
 80a19da:	d1f7      	bne.n	80a19cc <_ZN7OneWire6selectEPKh+0x12>
}
 80a19dc:	bd70      	pop	{r4, r5, r6, pc}

080a19de <_ZN7OneWire4skipEv>:
//
// Do a ROM skip
//
void OneWire::skip()
{
    write(0xCC);           // Skip ROM
 80a19de:	2200      	movs	r2, #0
 80a19e0:	21cc      	movs	r1, #204	; 0xcc
 80a19e2:	f7ff bfb2 	b.w	80a194a <_ZN7OneWire5writeEhh>

080a19e6 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80a19e6:	2300      	movs	r3, #0
 80a19e8:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80a19ea:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80a19ec:	7443      	strb	r3, [r0, #17]
 80a19ee:	f100 0210 	add.w	r2, r0, #16
 80a19f2:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80a19f4:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80a19f8:	4282      	cmp	r2, r0
 80a19fa:	d1fb      	bne.n	80a19f4 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80a19fc:	4770      	bx	lr

080a19fe <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a19fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a1a02:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80a1a04:	4604      	mov	r4, r0
 80a1a06:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80a1a08:	2d00      	cmp	r5, #0
 80a1a0a:	d15e      	bne.n	80a1aca <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80a1a0c:	f7ff ff0e 	bl	80a182c <_ZN7OneWire5resetEv>
 80a1a10:	b920      	cbnz	r0, 80a1a1c <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80a1a12:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80a1a14:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80a1a16:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80a1a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80a1a1c:	462a      	mov	r2, r5
 80a1a1e:	21f0      	movs	r1, #240	; 0xf0
 80a1a20:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80a1a22:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80a1a24:	f7ff ff91 	bl	80a194a <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80a1a28:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a1a2a:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80a1a2c:	4620      	mov	r0, r4
 80a1a2e:	f7ff ff6c 	bl	80a190a <_ZN7OneWire8read_bitEv>
 80a1a32:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80a1a34:	4620      	mov	r0, r4
 80a1a36:	f7ff ff68 	bl	80a190a <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80a1a3a:	f1b9 0f01 	cmp.w	r9, #1
 80a1a3e:	d102      	bne.n	80a1a46 <_ZN7OneWire6searchEPh+0x48>
 80a1a40:	2801      	cmp	r0, #1
 80a1a42:	d11b      	bne.n	80a1a7c <_ZN7OneWire6searchEPh+0x7e>
 80a1a44:	e037      	b.n	80a1ab6 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 80a1a46:	4581      	cmp	r9, r0
 80a1a48:	eb04 0305 	add.w	r3, r4, r5
 80a1a4c:	d11e      	bne.n	80a1a8c <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 80a1a4e:	7c22      	ldrb	r2, [r4, #16]
 80a1a50:	4297      	cmp	r7, r2
 80a1a52:	d207      	bcs.n	80a1a64 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 80a1a54:	7a1a      	ldrb	r2, [r3, #8]
 80a1a56:	4216      	tst	r6, r2
 80a1a58:	bf14      	ite	ne
 80a1a5a:	f04f 0901 	movne.w	r9, #1
 80a1a5e:	f04f 0900 	moveq.w	r9, #0
 80a1a62:	e004      	b.n	80a1a6e <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 80a1a64:	bf0c      	ite	eq
 80a1a66:	f04f 0901 	moveq.w	r9, #1
 80a1a6a:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 80a1a6e:	f1b9 0f00 	cmp.w	r9, #0
 80a1a72:	d103      	bne.n	80a1a7c <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 80a1a74:	2f08      	cmp	r7, #8
 80a1a76:	d808      	bhi.n	80a1a8a <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 80a1a78:	7467      	strb	r7, [r4, #17]
 80a1a7a:	e006      	b.n	80a1a8a <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 80a1a7c:	1962      	adds	r2, r4, r5
 80a1a7e:	7a13      	ldrb	r3, [r2, #8]
 80a1a80:	f04f 0901 	mov.w	r9, #1
 80a1a84:	4333      	orrs	r3, r6
 80a1a86:	7213      	strb	r3, [r2, #8]
 80a1a88:	e004      	b.n	80a1a94 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80a1a8a:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 80a1a8c:	7a1a      	ldrb	r2, [r3, #8]
 80a1a8e:	ea22 0206 	bic.w	r2, r2, r6
 80a1a92:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 80a1a94:	4649      	mov	r1, r9
 80a1a96:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 80a1a98:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 80a1a9a:	f7ff ff06 	bl	80a18aa <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 80a1a9e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 80a1aa2:	bf04      	itt	eq
 80a1aa4:	3501      	addeq	r5, #1
 80a1aa6:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a1aa8:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 80a1aac:	bf08      	it	eq
 80a1aae:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a1ab0:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 80a1ab2:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 80a1ab4:	d9ba      	bls.n	80a1a2c <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 80a1ab6:	2f40      	cmp	r7, #64	; 0x40
 80a1ab8:	d907      	bls.n	80a1aca <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 80a1aba:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 80a1abe:	f1ba 0f00 	cmp.w	sl, #0
 80a1ac2:	d112      	bne.n	80a1aea <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 80a1ac4:	2301      	movs	r3, #1
 80a1ac6:	74a3      	strb	r3, [r4, #18]
 80a1ac8:	e00f      	b.n	80a1aea <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 80a1aca:	2000      	movs	r0, #0
 80a1acc:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 80a1ace:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 80a1ad0:	7460      	strb	r0, [r4, #17]
 80a1ad2:	1de3      	adds	r3, r4, #7
 80a1ad4:	f108 38ff 	add.w	r8, r8, #4294967295
 80a1ad8:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80a1ada:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80a1ade:	42a3      	cmp	r3, r4
 80a1ae0:	f808 2f01 	strb.w	r2, [r8, #1]!
 80a1ae4:	d1f9      	bne.n	80a1ada <_ZN7OneWire6searchEPh+0xdc>
 80a1ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80a1aea:	7a23      	ldrb	r3, [r4, #8]
 80a1aec:	2b00      	cmp	r3, #0
 80a1aee:	d0ec      	beq.n	80a1aca <_ZN7OneWire6searchEPh+0xcc>
 80a1af0:	2001      	movs	r0, #1
 80a1af2:	e7ee      	b.n	80a1ad2 <_ZN7OneWire6searchEPh+0xd4>

080a1af4 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80a1af4:	b530      	push	{r4, r5, lr}
 80a1af6:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80a1af8:	2000      	movs	r0, #0

    while (len--) {
 80a1afa:	3901      	subs	r1, #1
 80a1afc:	b2c9      	uxtb	r1, r1
 80a1afe:	29ff      	cmp	r1, #255	; 0xff
 80a1b00:	d013      	beq.n	80a1b2a <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80a1b02:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a1b06:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80a1b08:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80a1b0c:	f013 0f01 	tst.w	r3, #1
 80a1b10:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80a1b14:	bf1c      	itt	ne
 80a1b16:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80a1b1a:	b2d8      	uxtbne	r0, r3
 80a1b1c:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a1b1e:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80a1b22:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80a1b26:	d1ef      	bne.n	80a1b08 <_ZN7OneWire4crc8EPhh+0x14>
 80a1b28:	e7e7      	b.n	80a1afa <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80a1b2a:	bd30      	pop	{r4, r5, pc}

080a1b2c <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80a1b2c:	f000 bf24 	b.w	80a2978 <HAL_Pin_Map>

080a1b30 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80a1b30:	f000 bf22 	b.w	80a2978 <HAL_Pin_Map>

080a1b34 <_ZN16CASARIA_MCP23017C1Ev>:

//Comment line below out to turn off Serial logging
//#define LOGGING

//Constructor
CASARIA_MCP23017::CASARIA_MCP23017(){
 80a1b34:	4603      	mov	r3, r0
 80a1b36:	4909      	ldr	r1, [pc, #36]	; (80a1b5c <_ZN16CASARIA_MCP23017C1Ev+0x28>)
 80a1b38:	f100 020c 	add.w	r2, r0, #12
 80a1b3c:	c903      	ldmia	r1, {r0, r1}
 80a1b3e:	e882 0003 	stmia.w	r2, {r0, r1}
 80a1b42:	2200      	movs	r2, #0
 80a1b44:	615a      	str	r2, [r3, #20]
 80a1b46:	619a      	str	r2, [r3, #24]
 80a1b48:	771a      	strb	r2, [r3, #28]
 80a1b4a:	621a      	str	r2, [r3, #32]
 80a1b4c:	2120      	movs	r1, #32
 80a1b4e:	629a      	str	r2, [r3, #40]	; 0x28
 80a1b50:	220a      	movs	r2, #10
 80a1b52:	6259      	str	r1, [r3, #36]	; 0x24
 80a1b54:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
}
 80a1b58:	4618      	mov	r0, r3
 80a1b5a:	4770      	bx	lr
 80a1b5c:	080a666c 	.word	0x080a666c

080a1b60 <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev>:
 80a1b60:	4b02      	ldr	r3, [pc, #8]	; (80a1b6c <_GLOBAL__sub_I__ZN16CASARIA_MCP23017C2Ev+0xc>)
 80a1b62:	2200      	movs	r2, #0
 80a1b64:	701a      	strb	r2, [r3, #0]
 80a1b66:	f000 bf07 	b.w	80a2978 <HAL_Pin_Map>
 80a1b6a:	bf00      	nop
 80a1b6c:	20000324 	.word	0x20000324

080a1b70 <_ZN7DS18B20C1Etb>:
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a1b70:	b570      	push	{r4, r5, r6, lr}
 80a1b72:	4604      	mov	r4, r0
{
  memset(_data, 0, sizeof(_data));
 80a1b74:	2300      	movs	r3, #0
 80a1b76:	6063      	str	r3, [r4, #4]
 80a1b78:	60a3      	str	r3, [r4, #8]
 80a1b7a:	60e3      	str	r3, [r4, #12]
  memset(_addr, 0, sizeof(_addr));
 80a1b7c:	6123      	str	r3, [r4, #16]
 80a1b7e:	6163      	str	r3, [r4, #20]
  _dataCRC    = 0; 
 80a1b80:	7623      	strb	r3, [r4, #24]
  _readCRC    = 0;
 80a1b82:	7663      	strb	r3, [r4, #25]
  _singleDrop = singleDrop;
 80a1b84:	76a2      	strb	r2, [r4, #26]
  ds          = new OneWire(pin);
 80a1b86:	2014      	movs	r0, #20
#include "DS18B20.h"

DS18B20::DS18B20(uint16_t pin, bool singleDrop)
 80a1b88:	460e      	mov	r6, r1
  memset(_data, 0, sizeof(_data));
  memset(_addr, 0, sizeof(_addr));
  _dataCRC    = 0; 
  _readCRC    = 0;
  _singleDrop = singleDrop;
  ds          = new OneWire(pin);
 80a1b8a:	f7fe fa88 	bl	80a009e <_Znwj>
 80a1b8e:	4605      	mov	r5, r0
 80a1b90:	b110      	cbz	r0, 80a1b98 <_ZN7DS18B20C1Etb+0x28>
 80a1b92:	4631      	mov	r1, r6
 80a1b94:	f7ff fe3d 	bl	80a1812 <_ZN7OneWireC1Et>
 80a1b98:	6025      	str	r5, [r4, #0]
}
 80a1b9a:	4620      	mov	r0, r4
 80a1b9c:	bd70      	pop	{r4, r5, r6, pc}

080a1b9e <_ZN7DS18B206searchEPh>:
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a1b9e:	b538      	push	{r3, r4, r5, lr}
  boolean isSuccess = ds->search(_addr);
 80a1ba0:	f100 0510 	add.w	r5, r0, #16
{
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
 80a1ba4:	460c      	mov	r4, r1
  boolean isSuccess = ds->search(_addr);
 80a1ba6:	6800      	ldr	r0, [r0, #0]
 80a1ba8:	4629      	mov	r1, r5
 80a1baa:	f7ff ff28 	bl	80a19fe <_ZN7OneWire6searchEPh>
 80a1bae:	1e03      	subs	r3, r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
 80a1bb0:	bf17      	itett	ne
 80a1bb2:	682b      	ldrne	r3, [r5, #0]
  else           memset(addr, 0, 8);
 80a1bb4:	6023      	streq	r3, [r4, #0]
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
  if (isSuccess) memcpy(addr, _addr, 8);
 80a1bb6:	6023      	strne	r3, [r4, #0]
 80a1bb8:	686b      	ldrne	r3, [r5, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a1bba:	bf18      	it	ne
 80a1bbc:	2001      	movne	r0, #1
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
 80a1bbe:	6063      	str	r3, [r4, #4]
  return search(_addr);
}

boolean DS18B20::search(uint8_t addr[8])
{
  boolean isSuccess = ds->search(_addr);
 80a1bc0:	bf08      	it	eq
 80a1bc2:	2000      	moveq	r0, #0
  if (isSuccess) memcpy(addr, _addr, 8);
  else           memset(addr, 0, 8);
  return isSuccess;
}
 80a1bc4:	bd38      	pop	{r3, r4, r5, pc}

080a1bc6 <_ZN7DS18B20D1Ev>:
  
DS18B20::~DS18B20()
 80a1bc6:	b510      	push	{r4, lr}
 80a1bc8:	4604      	mov	r4, r0
{
  delete(ds);
 80a1bca:	2114      	movs	r1, #20
 80a1bcc:	6800      	ldr	r0, [r0, #0]
 80a1bce:	f002 fea3 	bl	80a4918 <_ZdlPvj>
}
 80a1bd2:	4620      	mov	r0, r4
 80a1bd4:	bd10      	pop	{r4, pc}

080a1bd6 <_ZN7DS18B2011resetsearchEv>:
  memcpy(_addr, addr, 8);
}

void DS18B20::resetsearch()
{
  ds->reset_search();
 80a1bd6:	6800      	ldr	r0, [r0, #0]
 80a1bd8:	f7ff bf05 	b.w	80a19e6 <_ZN7OneWire12reset_searchEv>

080a1bdc <_ZN7DS18B2014getTemperatureEPhb>:
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a1bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a1bde:	7e83      	ldrb	r3, [r0, #26]
  }
  return getTemperature(_addr, forceSelect);
}

float DS18B20::getTemperature(uint8_t addr[8], bool forceSelect)
{
 80a1be0:	4604      	mov	r4, r0
 80a1be2:	460d      	mov	r5, r1
 80a1be4:	4616      	mov	r6, r2
  float celsius = NAN;
  if (!_singleDrop && addr[0] == WIRE_UNKNOWN) return NAN;
 80a1be6:	b91b      	cbnz	r3, 80a1bf0 <_ZN7DS18B2014getTemperatureEPhb+0x14>
 80a1be8:	780b      	ldrb	r3, [r1, #0]
 80a1bea:	2b00      	cmp	r3, #0
 80a1bec:	f000 80a4 	beq.w	80a1d38 <_ZN7DS18B2014getTemperatureEPhb+0x15c>

  ds->reset();
 80a1bf0:	6820      	ldr	r0, [r4, #0]
 80a1bf2:	f7ff fe1b 	bl	80a182c <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a1bf6:	7ea3      	ldrb	r3, [r4, #26]
 80a1bf8:	b123      	cbz	r3, 80a1c04 <_ZN7DS18B2014getTemperatureEPhb+0x28>
 80a1bfa:	b91e      	cbnz	r6, 80a1c04 <_ZN7DS18B2014getTemperatureEPhb+0x28>
    ds->skip();
 80a1bfc:	6820      	ldr	r0, [r4, #0]
 80a1bfe:	f7ff feee 	bl	80a19de <_ZN7OneWire4skipEv>
 80a1c02:	e003      	b.n	80a1c0c <_ZN7DS18B2014getTemperatureEPhb+0x30>
  else
    ds->select(addr);
 80a1c04:	4629      	mov	r1, r5
 80a1c06:	6820      	ldr	r0, [r4, #0]
 80a1c08:	f7ff fed7 	bl	80a19ba <_ZN7OneWire6selectEPKh>

  ds->write(0x44);        // start conversion, with parasite power on at the end
 80a1c0c:	2200      	movs	r2, #0
 80a1c0e:	2144      	movs	r1, #68	; 0x44
 80a1c10:	6820      	ldr	r0, [r4, #0]
 80a1c12:	f7ff fe9a 	bl	80a194a <_ZN7OneWire5writeEhh>
  //+++ 750
  delay(750);     // maybe 750ms is enough, maybe not
 80a1c16:	f240 20ee 	movw	r0, #750	; 0x2ee
 80a1c1a:	f001 feeb 	bl	80a39f4 <delay>
                  // we might do a ds.depower() here, but the reset will take care of it.
  ds->reset();
 80a1c1e:	6820      	ldr	r0, [r4, #0]
 80a1c20:	f7ff fe04 	bl	80a182c <_ZN7OneWire5resetEv>
  if (_singleDrop && !forceSelect)
 80a1c24:	7ea3      	ldrb	r3, [r4, #26]
 80a1c26:	b123      	cbz	r3, 80a1c32 <_ZN7DS18B2014getTemperatureEPhb+0x56>
 80a1c28:	b91e      	cbnz	r6, 80a1c32 <_ZN7DS18B2014getTemperatureEPhb+0x56>
    ds->skip();
 80a1c2a:	6820      	ldr	r0, [r4, #0]
 80a1c2c:	f7ff fed7 	bl	80a19de <_ZN7OneWire4skipEv>
 80a1c30:	e003      	b.n	80a1c3a <_ZN7DS18B2014getTemperatureEPhb+0x5e>
  else
    ds->select(addr);
 80a1c32:	4629      	mov	r1, r5
 80a1c34:	6820      	ldr	r0, [r4, #0]
 80a1c36:	f7ff fec0 	bl	80a19ba <_ZN7OneWire6selectEPKh>

  ds->write(0xBE);         // Read Scratchpad
 80a1c3a:	2200      	movs	r2, #0
 80a1c3c:	21be      	movs	r1, #190	; 0xbe
 80a1c3e:	6820      	ldr	r0, [r4, #0]
 80a1c40:	f7ff fe83 	bl	80a194a <_ZN7OneWire5writeEhh>
  if (addr[0] == WIRE_DS2438) {
 80a1c44:	782b      	ldrb	r3, [r5, #0]
 80a1c46:	2b26      	cmp	r3, #38	; 0x26
 80a1c48:	d104      	bne.n	80a1c54 <_ZN7DS18B2014getTemperatureEPhb+0x78>
    ds->write(0x00,0);     // DS2438 requires a page to read
 80a1c4a:	2200      	movs	r2, #0
 80a1c4c:	4611      	mov	r1, r2
 80a1c4e:	6820      	ldr	r0, [r4, #0]
 80a1c50:	f7ff fe7b 	bl	80a194a <_ZN7OneWire5writeEhh>
 80a1c54:	1ce6      	adds	r6, r4, #3
 80a1c56:	f104 070c 	add.w	r7, r4, #12
  }

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
 80a1c5a:	6820      	ldr	r0, [r4, #0]
 80a1c5c:	f7ff fe9d 	bl	80a199a <_ZN7OneWire4readEv>
 80a1c60:	f806 0f01 	strb.w	r0, [r6, #1]!
  ds->write(0xBE);         // Read Scratchpad
  if (addr[0] == WIRE_DS2438) {
    ds->write(0x00,0);     // DS2438 requires a page to read
  }

  for (int i = 0; i < 9; i++)
 80a1c64:	42be      	cmp	r6, r7
 80a1c66:	d1f8      	bne.n	80a1c5a <_ZN7DS18B2014getTemperatureEPhb+0x7e>
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a1c68:	2108      	movs	r1, #8
 80a1c6a:	1d20      	adds	r0, r4, #4
 80a1c6c:	f7ff ff42 	bl	80a1af4 <_ZN7OneWire4crc8EPhh>
  _readCRC = (_data[8]);
 80a1c70:	7b23      	ldrb	r3, [r4, #12]

  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
 80a1c72:	7620      	strb	r0, [r4, #24]
  _readCRC = (_data[8]);
  if (_dataCRC != _readCRC) return NAN;
 80a1c74:	4298      	cmp	r0, r3
  for (int i = 0; i < 9; i++)
  {           // we need 9 bytes
    _data[i] = ds->read();
  }
  _dataCRC = (OneWire::crc8(_data, 8));
  _readCRC = (_data[8]);
 80a1c76:	7663      	strb	r3, [r4, #25]
  if (_dataCRC != _readCRC) return NAN;
 80a1c78:	d15e      	bne.n	80a1d38 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a1c7a:	782b      	ldrb	r3, [r5, #0]
 80a1c7c:	2b22      	cmp	r3, #34	; 0x22
 80a1c7e:	d01b      	beq.n	80a1cb8 <_ZN7DS18B2014getTemperatureEPhb+0xdc>
 80a1c80:	d816      	bhi.n	80a1cb0 <_ZN7DS18B2014getTemperatureEPhb+0xd4>
 80a1c82:	2b10      	cmp	r3, #16
 80a1c84:	d158      	bne.n	80a1d38 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a1c86:	7ae3      	ldrb	r3, [r4, #11]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a1c88:	88a0      	ldrh	r0, [r4, #4]
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
 80a1c8a:	2b10      	cmp	r3, #16
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a1c8c:	bf08      	it	eq
 80a1c8e:	7aa3      	ldrbeq	r3, [r4, #10]

  int16_t raw;
  switch(addr[0]) 
  { // sensor type 
    case WIRE_DS1820:
      raw = ((_data[1] << 8) | _data[0]) << 3;          // 9 bit resolution default
 80a1c90:	ea4f 00c0 	mov.w	r0, r0, lsl #3
      if (_data[7] == 0x10)                             // "count remain" gives full 12 bit resolution
        raw = (raw & 0xFFF0) + 12 - _data[6];     
 80a1c94:	bf02      	ittt	eq
 80a1c96:	f020 000f 	biceq.w	r0, r0, #15
 80a1c9a:	f1c3 030c 	rsbeq	r3, r3, #12
 80a1c9e:	18c0      	addeq	r0, r0, r3
 80a1ca0:	b200      	sxth	r0, r0
      celsius = (float)raw / 16.0;
 80a1ca2:	f004 f853 	bl	80a5d4c <__aeabi_i2f>
 80a1ca6:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 80a1caa:	f004 f8a3 	bl	80a5df4 <__aeabi_fmul>
      break;
 80a1cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.

  int16_t raw;
  switch(addr[0]) 
 80a1cb0:	2b26      	cmp	r3, #38	; 0x26
 80a1cb2:	d01f      	beq.n	80a1cf4 <_ZN7DS18B2014getTemperatureEPhb+0x118>
 80a1cb4:	2b28      	cmp	r3, #40	; 0x28
 80a1cb6:	d13f      	bne.n	80a1d38 <_ZN7DS18B2014getTemperatureEPhb+0x15c>
      celsius = (float)raw / 16.0;
      break;

    case WIRE_DS1822:
    case WIRE_DS18B20:
      switch (_data[4] & 0x60)
 80a1cb8:	7a22      	ldrb	r2, [r4, #8]
 80a1cba:	7923      	ldrb	r3, [r4, #4]
 80a1cbc:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80a1cc0:	2a20      	cmp	r2, #32
 80a1cc2:	d005      	beq.n	80a1cd0 <_ZN7DS18B2014getTemperatureEPhb+0xf4>
 80a1cc4:	2a40      	cmp	r2, #64	; 0x40
 80a1cc6:	d006      	beq.n	80a1cd6 <_ZN7DS18B2014getTemperatureEPhb+0xfa>
 80a1cc8:	b942      	cbnz	r2, 80a1cdc <_ZN7DS18B2014getTemperatureEPhb+0x100>
      { // lower resolution means shorter conversion time, low bits need masking
        case 0x00: _data[0] &= ~0b111; break;           //  9 bit  93.75 ms
 80a1cca:	f023 0307 	bic.w	r3, r3, #7
 80a1cce:	e004      	b.n	80a1cda <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x20: _data[0] &= ~0b011; break;           // 10 bit 187.50 ms
 80a1cd0:	f023 0303 	bic.w	r3, r3, #3
 80a1cd4:	e001      	b.n	80a1cda <_ZN7DS18B2014getTemperatureEPhb+0xfe>
        case 0x40: _data[0] &= ~0b001; break;           // 11 bit 375.00 ms
 80a1cd6:	f023 0301 	bic.w	r3, r3, #1
 80a1cda:	7123      	strb	r3, [r4, #4]
        default: break;                                 // 12 bit 750.00 ms 
      }
      celsius = (int16_t)((_data[1] << 8) | _data[0]) / 16.0;
 80a1cdc:	7923      	ldrb	r3, [r4, #4]
 80a1cde:	7960      	ldrb	r0, [r4, #5]
 80a1ce0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 80a1ce4:	b200      	sxth	r0, r0
 80a1ce6:	f003 fbc9 	bl	80a547c <__aeabi_i2d>
 80a1cea:	2200      	movs	r2, #0
 80a1cec:	4b13      	ldr	r3, [pc, #76]	; (80a1d3c <_ZN7DS18B2014getTemperatureEPhb+0x160>)
 80a1cee:	f003 fc2b 	bl	80a5548 <__aeabi_dmul>
 80a1cf2:	e01e      	b.n	80a1d32 <_ZN7DS18B2014getTemperatureEPhb+0x156>
      break;
      
    case WIRE_DS2438:
      celsius = (int16_t)_data[2] + ((float)(_data[1] >> 3) / 32.0) * (_data[2] & 0x80 ? -1.0 : 1.0);           
 80a1cf4:	79a5      	ldrb	r5, [r4, #6]
 80a1cf6:	4628      	mov	r0, r5
 80a1cf8:	f003 fbc0 	bl	80a547c <__aeabi_i2d>
 80a1cfc:	4606      	mov	r6, r0
 80a1cfe:	7960      	ldrb	r0, [r4, #5]
 80a1d00:	460f      	mov	r7, r1
 80a1d02:	08c0      	lsrs	r0, r0, #3
 80a1d04:	f004 f822 	bl	80a5d4c <__aeabi_i2f>
 80a1d08:	f003 fbca 	bl	80a54a0 <__aeabi_f2d>
 80a1d0c:	2200      	movs	r2, #0
 80a1d0e:	4b0c      	ldr	r3, [pc, #48]	; (80a1d40 <_ZN7DS18B2014getTemperatureEPhb+0x164>)
 80a1d10:	f003 fc1a 	bl	80a5548 <__aeabi_dmul>
 80a1d14:	460b      	mov	r3, r1
 80a1d16:	0629      	lsls	r1, r5, #24
 80a1d18:	4602      	mov	r2, r0
 80a1d1a:	bf48      	it	mi
 80a1d1c:	4909      	ldrmi	r1, [pc, #36]	; (80a1d44 <_ZN7DS18B2014getTemperatureEPhb+0x168>)
 80a1d1e:	f04f 0000 	mov.w	r0, #0
 80a1d22:	bf58      	it	pl
 80a1d24:	4908      	ldrpl	r1, [pc, #32]	; (80a1d48 <_ZN7DS18B2014getTemperatureEPhb+0x16c>)
 80a1d26:	f003 fc0f 	bl	80a5548 <__aeabi_dmul>
 80a1d2a:	4632      	mov	r2, r6
 80a1d2c:	463b      	mov	r3, r7
 80a1d2e:	f003 fa59 	bl	80a51e4 <__adddf3>
 80a1d32:	f003 ff01 	bl	80a5b38 <__aeabi_d2f>
      break;
 80a1d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      
    default:
      celsius = NAN;
 80a1d38:	4804      	ldr	r0, [pc, #16]	; (80a1d4c <_ZN7DS18B2014getTemperatureEPhb+0x170>)
      break;                            
  }
  
  return celsius;
}
 80a1d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a1d3c:	3fb00000 	.word	0x3fb00000
 80a1d40:	3fa00000 	.word	0x3fa00000
 80a1d44:	bff00000 	.word	0xbff00000
 80a1d48:	3ff00000 	.word	0x3ff00000
 80a1d4c:	7fc00000 	.word	0x7fc00000

080a1d50 <_ZN7DS18B208crcCheckEv>:
  return celsius * 1.8 + 32.0;
}

bool DS18B20::crcCheck()
{
  return (_dataCRC == _readCRC);
 80a1d50:	7e02      	ldrb	r2, [r0, #24]
 80a1d52:	7e40      	ldrb	r0, [r0, #25]
}
 80a1d54:	1a13      	subs	r3, r2, r0
 80a1d56:	4258      	negs	r0, r3
 80a1d58:	4158      	adcs	r0, r3
 80a1d5a:	4770      	bx	lr

080a1d5c <_GLOBAL__sub_I__ZN7DS18B20C2Etb>:
 80a1d5c:	f000 be0c 	b.w	80a2978 <HAL_Pin_Map>

080a1d60 <_ZN15CASARIA_MCP3428C1Eh>:
/**************************************************************************/
/*
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
 80a1d60:	b538      	push	{r3, r4, r5, lr}
 80a1d62:	460c      	mov	r4, r1
 80a1d64:	4605      	mov	r5, r0
{
    Wire.begin();
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a1d66:	f044 0468 	orr.w	r4, r4, #104	; 0x68
        Instantiates a new MCP3428 class with appropriate properties
*/
/***************************************************************************/
CASARIA_MCP3428::CASARIA_MCP3428(uint8_t devAddress)
{
    Wire.begin();
 80a1d6a:	f002 fda7 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1d6e:	f002 fbe9 	bl	80a4544 <_ZN7TwoWire5beginEv>
    devAddr = (uint8_t)(1101<<3);
    devAddr |= devAddress;
 80a1d72:	73ac      	strb	r4, [r5, #14]
}
 80a1d74:	4628      	mov	r0, r5
 80a1d76:	bd38      	pop	{r3, r4, r5, pc}

080a1d78 <_ZN15CASARIA_MCP3428D1Ev>:
CASARIA_MCP3428::~CASARIA_MCP3428()
{
}
 80a1d78:	4770      	bx	lr
 80a1d7a:	0000      	movs	r0, r0
 80a1d7c:	0000      	movs	r0, r0
	...

080a1d80 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh>:
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1d80:	b538      	push	{r3, r4, r5, lr}
 80a1d82:	4604      	mov	r4, r0
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1d84:	f002 05fd 	and.w	r5, r2, #253	; 0xfd
        mode: This determines the current operational status of the device
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
 80a1d88:	f89d 0010 	ldrb.w	r0, [sp, #16]
    GAIN = PGA;

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1d8c:	2d0c      	cmp	r5, #12
        PGA: This configures the programmable gain amplifier

**************************************************************************/
void CASARIA_MCP3428::SetConfiguration(uint8_t channel, uint8_t resolution, bool mode, uint8_t PGA)
{
    GAIN = PGA;
 80a1d8e:	7260      	strb	r0, [r4, #9]

    if(resolution!=12 && resolution!=14 && resolution!=16)
 80a1d90:	d002      	beq.n	80a1d98 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x18>
 80a1d92:	2a10      	cmp	r2, #16
    {
        SPS = 12;
 80a1d94:	bf18      	it	ne
 80a1d96:	220c      	movne	r2, #12
    }
    else
    {
        SPS = resolution;
 80a1d98:	7122      	strb	r2, [r4, #4]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a1d9a:	7922      	ldrb	r2, [r4, #4]
 80a1d9c:	3901      	subs	r1, #1
    else
    {
        SPS = resolution;
    }

    MODE = mode;
 80a1d9e:	7163      	strb	r3, [r4, #5]
    // Setting the Conversion Mode
    config |= mode;
    config = config<<2;
    // Setting the Resolution (Sample Rate)
    config |= int((SPS-12)/2);
    config = config<<2;
 80a1da0:	3a0c      	subs	r2, #12
 80a1da2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 80a1da6:	2102      	movs	r1, #2
 80a1da8:	fb92 f2f1 	sdiv	r2, r2, r1
 80a1dac:	ea42 0383 	orr.w	r3, r2, r3, lsl #2
 80a1db0:	408b      	lsls	r3, r1
 80a1db2:	7223      	strb	r3, [r4, #8]
    // Setting the PGA Gain
    config|=int(log(PGA)/log(2));
 80a1db4:	f003 fb52 	bl	80a545c <__aeabi_ui2d>
 80a1db8:	f002 ff92 	bl	80a4ce0 <log>
 80a1dbc:	a30e      	add	r3, pc, #56	; (adr r3, 80a1df8 <_ZN15CASARIA_MCP342816SetConfigurationEhhbh+0x78>)
 80a1dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a1dc2:	f003 fceb 	bl	80a579c <__aeabi_ddiv>
 80a1dc6:	f003 fe6f 	bl	80a5aa8 <__aeabi_d2iz>
 80a1dca:	7a23      	ldrb	r3, [r4, #8]
 80a1dcc:	4318      	orrs	r0, r3
 80a1dce:	7220      	strb	r0, [r4, #8]
    
    // Start a conversion using configuration settings
    Wire.beginTransmission(devAddr);
 80a1dd0:	f002 fd74 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1dd4:	7ba1      	ldrb	r1, [r4, #14]
 80a1dd6:	f002 fbc7 	bl	80a4568 <_ZN7TwoWire17beginTransmissionEh>
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
 80a1dda:	f002 fd6f 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1dde:	7a21      	ldrb	r1, [r4, #8]
 80a1de0:	6803      	ldr	r3, [r0, #0]
 80a1de2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80a1de6:	689b      	ldr	r3, [r3, #8]
 80a1de8:	7221      	strb	r1, [r4, #8]
 80a1dea:	4798      	blx	r3
    Wire.endTransmission();
 80a1dec:	f002 fd66 	bl	80a48bc <_Z19__fetch_global_Wirev>
}
 80a1df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    Wire.beginTransmission(devAddr);
    // 128: This bit is the data ready flag
    // One-Shot Conversion mode
    // Initiate a new conversion
    Wire.write((config |= 128));
    Wire.endTransmission();
 80a1df4:	f002 bbc3 	b.w	80a457e <_ZN7TwoWire15endTransmissionEv>
 80a1df8:	fefa39ef 	.word	0xfefa39ef
 80a1dfc:	3fe62e42 	.word	0x3fe62e42

080a1e00 <_ZN15CASARIA_MCP342815CheckConversionEv>:
/*
        Check the adc conversion
*/
/**************************************************************************/
bool CASARIA_MCP3428::CheckConversion()
{
 80a1e00:	b570      	push	{r4, r5, r6, lr}
 80a1e02:	4604      	mov	r4, r0
    uint8_t i = 0;
    no_of_bytes = 3;
 80a1e04:	2303      	movs	r3, #3
 80a1e06:	7283      	strb	r3, [r0, #10]
    Wire.requestFrom(devAddr, no_of_bytes);
 80a1e08:	f002 fd58 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1e0c:	7aa2      	ldrb	r2, [r4, #10]
 80a1e0e:	7ba1      	ldrb	r1, [r4, #14]
 80a1e10:	f002 fba7 	bl	80a4562 <_ZN7TwoWire11requestFromEhh>
 80a1e14:	2500      	movs	r5, #0

    while(Wire.available())
 80a1e16:	f002 fd51 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1e1a:	6803      	ldr	r3, [r0, #0]
 80a1e1c:	1c6e      	adds	r6, r5, #1
 80a1e1e:	691b      	ldr	r3, [r3, #16]
 80a1e20:	4798      	blx	r3
 80a1e22:	b170      	cbz	r0, 80a1e42 <_ZN15CASARIA_MCP342815CheckConversionEv+0x42>
    {   data[i++] = Wire.read();
 80a1e24:	f002 fd4a 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1e28:	6803      	ldr	r3, [r0, #0]
 80a1e2a:	b2ed      	uxtb	r5, r5
 80a1e2c:	695b      	ldr	r3, [r3, #20]
 80a1e2e:	4798      	blx	r3
 80a1e30:	4425      	add	r5, r4
 80a1e32:	72e8      	strb	r0, [r5, #11]

        testvar = data[no_of_bytes-1] >> 7;
 80a1e34:	7aa3      	ldrb	r3, [r4, #10]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a1e36:	4635      	mov	r5, r6
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
 80a1e38:	4423      	add	r3, r4
 80a1e3a:	7a9b      	ldrb	r3, [r3, #10]
 80a1e3c:	11db      	asrs	r3, r3, #7
 80a1e3e:	71e3      	strb	r3, [r4, #7]
{
    uint8_t i = 0;
    no_of_bytes = 3;
    Wire.requestFrom(devAddr, no_of_bytes);

    while(Wire.available())
 80a1e40:	e7e9      	b.n	80a1e16 <_ZN15CASARIA_MCP342815CheckConversionEv+0x16>
    {   data[i++] = Wire.read();

        testvar = data[no_of_bytes-1] >> 7;
    }
    return testvar;
 80a1e42:	79e0      	ldrb	r0, [r4, #7]
}
 80a1e44:	3000      	adds	r0, #0
 80a1e46:	bf18      	it	ne
 80a1e48:	2001      	movne	r0, #1
 80a1e4a:	bd70      	pop	{r4, r5, r6, pc}

080a1e4c <_ZN15CASARIA_MCP34287readADCEv>:
        Where:
        N = Resolution, which is programmed in the Configuration Register: 12, 14, or 16
*/
/**************************************************************************/
long CASARIA_MCP3428::readADC()
{
 80a1e4c:	b510      	push	{r4, lr}
 80a1e4e:	4604      	mov	r4, r0

    raw_adc = 0;
 80a1e50:	2300      	movs	r3, #0
 80a1e52:	6003      	str	r3, [r0, #0]

    while(CheckConversion() == 1);
 80a1e54:	4620      	mov	r0, r4
 80a1e56:	f7ff ffd3 	bl	80a1e00 <_ZN15CASARIA_MCP342815CheckConversionEv>
 80a1e5a:	2800      	cmp	r0, #0
 80a1e5c:	d1fa      	bne.n	80a1e54 <_ZN15CASARIA_MCP34287readADCEv+0x8>

    switch (SPS)
 80a1e5e:	7923      	ldrb	r3, [r4, #4]
 80a1e60:	2b0e      	cmp	r3, #14
 80a1e62:	d00f      	beq.n	80a1e84 <_ZN15CASARIA_MCP34287readADCEv+0x38>
 80a1e64:	2b10      	cmp	r3, #16
 80a1e66:	d019      	beq.n	80a1e9c <_ZN15CASARIA_MCP34287readADCEv+0x50>
 80a1e68:	2b0c      	cmp	r3, #12
 80a1e6a:	d121      	bne.n	80a1eb0 <_ZN15CASARIA_MCP34287readADCEv+0x64>
  
        case 12:
                raw_adc = data[0];
                raw_adc &= 0b00001111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1e6c:	7ae3      	ldrb	r3, [r4, #11]
 80a1e6e:	f003 020f 	and.w	r2, r3, #15
 80a1e72:	7b23      	ldrb	r3, [r4, #12]
 80a1e74:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 2047)
 80a1e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
                {
                    raw_adc = raw_adc - 4096;
 80a1e7c:	bfa8      	it	ge
 80a1e7e:	f5a3 5380 	subge.w	r3, r3, #4096	; 0x1000
 80a1e82:	e014      	b.n	80a1eae <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 14:
                raw_adc = data[0];
                raw_adc &= 0b00111111;
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1e84:	7ae3      	ldrb	r3, [r4, #11]
 80a1e86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80a1e8a:	7b23      	ldrb	r3, [r4, #12]
 80a1e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 8191)
 80a1e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
                {
                    raw_adc = raw_adc - 16384;
 80a1e94:	bfa8      	it	ge
 80a1e96:	f5a3 4380 	subge.w	r3, r3, #16384	; 0x4000
 80a1e9a:	e008      	b.n	80a1eae <_ZN15CASARIA_MCP34287readADCEv+0x62>
    
        case 16:

                raw_adc = data[0];
                raw_adc = raw_adc << 8;
                raw_adc |= data[1];
 80a1e9c:	7ae2      	ldrb	r2, [r4, #11]
 80a1e9e:	7b23      	ldrb	r3, [r4, #12]
 80a1ea0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8

                if(raw_adc > 32767)
 80a1ea4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
                {
                    raw_adc = raw_adc - 65536;
 80a1ea8:	bfa8      	it	ge
 80a1eaa:	f5a3 3380 	subge.w	r3, r3, #65536	; 0x10000
 80a1eae:	6023      	str	r3, [r4, #0]
                // raw_adc = raw_adc * LSB(62.5 µV)/PGA for PGA = 1;
      
                break;
    }
    return raw_adc;
}
 80a1eb0:	6820      	ldr	r0, [r4, #0]
 80a1eb2:	bd10      	pop	{r4, pc}

080a1eb4 <_GLOBAL__sub_I__ZN15CASARIA_MCP3428C2Eh>:
 80a1eb4:	f000 bd60 	b.w	80a2978 <HAL_Pin_Map>

080a1eb8 <_ZN7TwoWire5writeEi>:
 80a1eb8:	6803      	ldr	r3, [r0, #0]
 80a1eba:	b2c9      	uxtb	r1, r1
 80a1ebc:	689b      	ldr	r3, [r3, #8]
 80a1ebe:	4718      	bx	r3

080a1ec0 <_ZN16Adafruit_PCA9685C1Ehb>:
 * the address that is set by the physical jumpers on the driver. If the
 * address is not being set by hardware, give no parameters and it will
 * use the default as specified in the header file (0x40)
 */
Adafruit_PCA9685::Adafruit_PCA9685(uint8_t addr, bool debug) {
  _i2caddr = addr;
 80a1ec0:	7001      	strb	r1, [r0, #0]
  _debug = debug;
 80a1ec2:	7042      	strb	r2, [r0, #1]
}
 80a1ec4:	4770      	bx	lr

080a1ec6 <_ZN16Adafruit_PCA96856getValEh>:
    }
  }
}

uint16_t Adafruit_PCA9685::getVal(uint8_t ledNum){
    return values[ledNum];
 80a1ec6:	eb00 0141 	add.w	r1, r0, r1, lsl #1


}
 80a1eca:	8848      	ldrh	r0, [r1, #2]
 80a1ecc:	4770      	bx	lr
	...

080a1ed0 <_ZN16Adafruit_PCA96856setPWMEhtt>:
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a1ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1ed2:	461d      	mov	r5, r3
  if (_debug) {
 80a1ed4:	7843      	ldrb	r3, [r0, #1]
 * and is recommended over this function
 * @param ledNum  The LED number on the driver board (0 -> 15)
 * @param on      12-bit PWM-on value
 * @param off     12-bit PWM-off value
 */
void Adafruit_PCA9685::setPWM(uint8_t ledNum, uint16_t on, uint16_t off) {
 80a1ed6:	4607      	mov	r7, r0
 80a1ed8:	460c      	mov	r4, r1
 80a1eda:	4616      	mov	r6, r2
  if (_debug) {
 80a1edc:	b303      	cbz	r3, 80a1f20 <_ZN16Adafruit_PCA96856setPWMEhtt+0x50>
   Serial.print("Setting PWM for LED "); Serial.print(ledNum); Serial.print(" to ");
 80a1ede:	f002 f9f7 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a1ee2:	4922      	ldr	r1, [pc, #136]	; (80a1f6c <_ZN16Adafruit_PCA96856setPWMEhtt+0x9c>)
 80a1ee4:	f001 fc32 	bl	80a374c <_ZN5Print5printEPKc>
 80a1ee8:	f002 f9f2 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a1eec:	220a      	movs	r2, #10
 80a1eee:	4621      	mov	r1, r4
 80a1ef0:	f001 fc69 	bl	80a37c6 <_ZN5Print5printEhi>
 80a1ef4:	f002 f9ec 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a1ef8:	491d      	ldr	r1, [pc, #116]	; (80a1f70 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa0>)
 80a1efa:	f001 fc27 	bl	80a374c <_ZN5Print5printEPKc>
   Serial.print(on); Serial.print(" -> "); Serial.println(off);
 80a1efe:	f002 f9e7 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a1f02:	220a      	movs	r2, #10
 80a1f04:	4631      	mov	r1, r6
 80a1f06:	f001 fc8c 	bl	80a3822 <_ZN5Print5printEii>
 80a1f0a:	f002 f9e1 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a1f0e:	4919      	ldr	r1, [pc, #100]	; (80a1f74 <_ZN16Adafruit_PCA96856setPWMEhtt+0xa4>)
 80a1f10:	f001 fc1c 	bl	80a374c <_ZN5Print5printEPKc>
 80a1f14:	f002 f9dc 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a1f18:	220a      	movs	r2, #10
 80a1f1a:	4629      	mov	r1, r5
 80a1f1c:	f001 fc83 	bl	80a3826 <_ZN5Print7printlnEii>
  }

  Wire.beginTransmission(_i2caddr);
 80a1f20:	f002 fccc 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1f24:	7839      	ldrb	r1, [r7, #0]
 80a1f26:	f002 fb1f 	bl	80a4568 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
 80a1f2a:	f002 fcc7 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1f2e:	00a1      	lsls	r1, r4, #2
 80a1f30:	3106      	adds	r1, #6
 80a1f32:	f7ff ffc1 	bl	80a1eb8 <_ZN7TwoWire5writeEi>
  Wire.write(on);                    // Write the first byte for On
 80a1f36:	f002 fcc1 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1f3a:	4631      	mov	r1, r6
 80a1f3c:	f7ff ffbc 	bl	80a1eb8 <_ZN7TwoWire5writeEi>
  Wire.write(on >> 8);               // Write the second byte
 80a1f40:	f002 fcbc 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1f44:	0a31      	lsrs	r1, r6, #8
 80a1f46:	f7ff ffb7 	bl	80a1eb8 <_ZN7TwoWire5writeEi>
  Wire.write(off);                   // First byte for Off
 80a1f4a:	f002 fcb7 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1f4e:	4629      	mov	r1, r5
 80a1f50:	f7ff ffb2 	bl	80a1eb8 <_ZN7TwoWire5writeEi>
  Wire.write(off >> 8);              // Second byte for Off
 80a1f54:	f002 fcb2 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1f58:	0a29      	lsrs	r1, r5, #8
 80a1f5a:	f7ff ffad 	bl	80a1eb8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();
 80a1f5e:	f002 fcad 	bl	80a48bc <_Z19__fetch_global_Wirev>
}
 80a1f62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Wire.write(LED0_ON_L + 4*ledNum);  // Offset the address of the LED
  Wire.write(on);                    // Write the first byte for On
  Wire.write(on >> 8);               // Write the second byte
  Wire.write(off);                   // First byte for Off
  Wire.write(off >> 8);              // Second byte for Off
  Wire.endTransmission();
 80a1f66:	f002 bb0a 	b.w	80a457e <_ZN7TwoWire15endTransmissionEv>
 80a1f6a:	bf00      	nop
 80a1f6c:	080a6674 	.word	0x080a6674
 80a1f70:	080a6689 	.word	0x080a6689
 80a1f74:	080a668e 	.word	0x080a668e

080a1f78 <_ZN16Adafruit_PCA96856setValEhtb>:
 * @param val     The duty cycle value. Should be from 0 to 4095 inclusive, 
 *                will be clamped if not within range
 * @param invert  Whether or not to invert the pulse for sinking to ground
 */
void Adafruit_PCA9685::setVal(uint8_t ledNum, uint16_t val, bool invert)
{
 80a1f78:	b5f0      	push	{r4, r5, r6, r7, lr}
#define PARTICLE_WIRING_ARDUINO_TEMPLATES 1

template <typename T, typename U>
static inline
typename std::common_type<T, U>::type
max (T a, U b) { return ((a)>(b)?(a):(b)); }
 80a1f7a:	f640 7eff 	movw	lr, #4095	; 0xfff
 80a1f7e:	4572      	cmp	r2, lr
 80a1f80:	bfa8      	it	ge
 80a1f82:	4672      	movge	r2, lr
 80a1f84:	ea22 75e2 	bic.w	r5, r2, r2, asr #31
  // Clamp value between 0 and 4095 inclusive.
  val = min(val, 4095);
  val = max(0, val);
 80a1f88:	b2ac      	uxth	r4, r5
  values[ledNum]=val;  //stpre for retrieval
 80a1f8a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
 80a1f8e:	8054      	strh	r4, [r2, #2]
 * @param val     The duty cycle value. Should be from 0 to 4095 inclusive, 
 *                will be clamped if not within range
 * @param invert  Whether or not to invert the pulse for sinking to ground
 */
void Adafruit_PCA9685::setVal(uint8_t ledNum, uint16_t val, bool invert)
{
 80a1f90:	4606      	mov	r6, r0
 80a1f92:	460f      	mov	r7, r1
  // Clamp value between 0 and 4095 inclusive.
  val = min(val, 4095);
  val = max(0, val);
  values[ledNum]=val;  //stpre for retrieval
  if (invert) {
 80a1f94:	461a      	mov	r2, r3
 80a1f96:	b193      	cbz	r3, 80a1fbe <_ZN16Adafruit_PCA96856setValEhtb+0x46>
    if (val == 0) {
 80a1f98:	b91d      	cbnz	r5, 80a1fa2 <_ZN16Adafruit_PCA96856setValEhtb+0x2a>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
 80a1f9a:	2300      	movs	r3, #0
 80a1f9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80a1fa0:	e004      	b.n	80a1fac <_ZN16Adafruit_PCA96856setValEhtb+0x34>
    }
    else if (val == 4095) {
 80a1fa2:	4575      	cmp	r5, lr
 80a1fa4:	d105      	bne.n	80a1fb2 <_ZN16Adafruit_PCA96856setValEhtb+0x3a>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
 80a1fa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80a1faa:	2200      	movs	r2, #0
 80a1fac:	4639      	mov	r1, r7
 80a1fae:	4630      	mov	r0, r6
 80a1fb0:	e00a      	b.n	80a1fc8 <_ZN16Adafruit_PCA96856setValEhtb+0x50>
    }
    else {
      setPWM(ledNum, 0, 4095-val);
 80a1fb2:	f5c4 637f 	rsb	r3, r4, #4080	; 0xff0
 80a1fb6:	330f      	adds	r3, #15
 80a1fb8:	b29b      	uxth	r3, r3
 80a1fba:	2200      	movs	r2, #0
 80a1fbc:	e004      	b.n	80a1fc8 <_ZN16Adafruit_PCA96856setValEhtb+0x50>
    }
  }
  else {
    if (val == 4095) {
 80a1fbe:	4575      	cmp	r5, lr
 80a1fc0:	d0eb      	beq.n	80a1f9a <_ZN16Adafruit_PCA96856setValEhtb+0x22>
      // Special value for signal fully on.
      setPWM(ledNum, 4096, 0);
    }
    else if (val == 0) {
 80a1fc2:	2d00      	cmp	r5, #0
 80a1fc4:	d0ef      	beq.n	80a1fa6 <_ZN16Adafruit_PCA96856setValEhtb+0x2e>
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a1fc6:	4623      	mov	r3, r4
    }
  }
}
 80a1fc8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    else if (val == 0) {
      // Special value for signal fully off.
      setPWM(ledNum, 0, 4096);
    }
    else {
      setPWM(ledNum, 0, val);
 80a1fcc:	f7ff bf80 	b.w	80a1ed0 <_ZN16Adafruit_PCA96856setPWMEhtt>

080a1fd0 <_ZN16Adafruit_PCA96855read8Eh>:
/**
 * Read a byte from a given address on the driver
 * @param  addr  The address
 * @return       The value at the given address
 */
uint8_t Adafruit_PCA9685::read8(uint8_t addr) {
 80a1fd0:	b538      	push	{r3, r4, r5, lr}
 80a1fd2:	4604      	mov	r4, r0
 80a1fd4:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a1fd6:	f002 fc71 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1fda:	7821      	ldrb	r1, [r4, #0]
 80a1fdc:	f002 fac4 	bl	80a4568 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a1fe0:	f002 fc6c 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1fe4:	6803      	ldr	r3, [r0, #0]
 80a1fe6:	4629      	mov	r1, r5
 80a1fe8:	689b      	ldr	r3, [r3, #8]
 80a1fea:	4798      	blx	r3
  Wire.endTransmission();
 80a1fec:	f002 fc66 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1ff0:	f002 fac5 	bl	80a457e <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom((uint8_t)_i2caddr, (uint8_t)1);
 80a1ff4:	f002 fc62 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a1ff8:	2201      	movs	r2, #1
 80a1ffa:	7821      	ldrb	r1, [r4, #0]
 80a1ffc:	f002 fab1 	bl	80a4562 <_ZN7TwoWire11requestFromEhh>
  return Wire.read();
 80a2000:	f002 fc5c 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a2004:	6803      	ldr	r3, [r0, #0]
 80a2006:	695b      	ldr	r3, [r3, #20]
 80a2008:	4798      	blx	r3
}
 80a200a:	b2c0      	uxtb	r0, r0
 80a200c:	bd38      	pop	{r3, r4, r5, pc}

080a200e <_ZN16Adafruit_PCA96856write8Ehh>:
/**
 * Write a byte to a given address on the driver
 * @param addr  The address
 * @param val   The byte to be written
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
 80a200e:	b570      	push	{r4, r5, r6, lr}
 80a2010:	4606      	mov	r6, r0
 80a2012:	4614      	mov	r4, r2
 80a2014:	460d      	mov	r5, r1
  Wire.beginTransmission(_i2caddr);
 80a2016:	f002 fc51 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a201a:	7831      	ldrb	r1, [r6, #0]
 80a201c:	f002 faa4 	bl	80a4568 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(addr);
 80a2020:	f002 fc4c 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a2024:	6803      	ldr	r3, [r0, #0]
 80a2026:	4629      	mov	r1, r5
 80a2028:	689b      	ldr	r3, [r3, #8]
 80a202a:	4798      	blx	r3
  Wire.write(val);
 80a202c:	f002 fc46 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a2030:	6803      	ldr	r3, [r0, #0]
 80a2032:	4621      	mov	r1, r4
 80a2034:	689b      	ldr	r3, [r3, #8]
 80a2036:	4798      	blx	r3
  Wire.endTransmission();
 80a2038:	f002 fc40 	bl	80a48bc <_Z19__fetch_global_Wirev>
}
 80a203c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 */
void Adafruit_PCA9685::write8(uint8_t addr, uint8_t val) {
  Wire.beginTransmission(_i2caddr);
  Wire.write(addr);
  Wire.write(val);
  Wire.endTransmission();
 80a2040:	f002 ba9d 	b.w	80a457e <_ZN7TwoWire15endTransmissionEv>

080a2044 <_ZN16Adafruit_PCA96855resetEv>:

/**
 * Setup the driver's modes
 */
void Adafruit_PCA9685::reset(void) {
 write8(MODE1, 0x0);  // See page 13 of datasheet
 80a2044:	2200      	movs	r2, #0
 80a2046:	4611      	mov	r1, r2
 80a2048:	f7ff bfe1 	b.w	80a200e <_ZN16Adafruit_PCA96856write8Ehh>

080a204c <_ZN16Adafruit_PCA96855beginEv>:
}

/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 80a204c:	b510      	push	{r4, lr}
 80a204e:	4604      	mov	r4, r0
 Wire.begin();
 80a2050:	f002 fc34 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a2054:	f002 fa76 	bl	80a4544 <_ZN7TwoWire5beginEv>
 reset();
 80a2058:	4620      	mov	r0, r4
}
 80a205a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/**
 * Join the I2C bus as a master and setup the driver's mode
 */
void Adafruit_PCA9685::begin(void) {
 Wire.begin();
 reset();
 80a205e:	f7ff bff1 	b.w	80a2044 <_ZN16Adafruit_PCA96855resetEv>
 80a2062:	0000      	movs	r0, r0
 80a2064:	0000      	movs	r0, r0
	...

080a2068 <_ZN16Adafruit_PCA968510setPWMFreqEf>:

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a2068:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if ( _debug ) {
 80a206a:	7843      	ldrb	r3, [r0, #1]

/**
 * Set the output frequency of the board
 * @param freq  The frequency
 */
void Adafruit_PCA9685::setPWMFreq(float freq) {
 80a206c:	4604      	mov	r4, r0
 80a206e:	460d      	mov	r5, r1
  if ( _debug ) {
 80a2070:	b18b      	cbz	r3, 80a2096 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x2e>
    Serial.print("Attempting to set freq "); Serial.println(freq);
 80a2072:	f002 f92d 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a2076:	493c      	ldr	r1, [pc, #240]	; (80a2168 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x100>)
 80a2078:	f001 fb68 	bl	80a374c <_ZN5Print5printEPKc>
 80a207c:	f002 f928 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a2080:	4606      	mov	r6, r0
 80a2082:	4628      	mov	r0, r5
 80a2084:	f003 fa0c 	bl	80a54a0 <__aeabi_f2d>
 80a2088:	2302      	movs	r3, #2
 80a208a:	9300      	str	r3, [sp, #0]
 80a208c:	4602      	mov	r2, r0
 80a208e:	460b      	mov	r3, r1
 80a2090:	4630      	mov	r0, r6
 80a2092:	f001 fc81 	bl	80a3998 <_ZN5Print7printlnEdi>
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
 80a2096:	4628      	mov	r0, r5
 80a2098:	f003 fa02 	bl	80a54a0 <__aeabi_f2d>
 80a209c:	a330      	add	r3, pc, #192	; (adr r3, 80a2160 <_ZN16Adafruit_PCA968510setPWMFreqEf+0xf8>)
 80a209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a20a2:	f003 fa51 	bl	80a5548 <__aeabi_dmul>
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
 80a20a6:	f003 fd47 	bl	80a5b38 <__aeabi_d2f>
 80a20aa:	4601      	mov	r1, r0
 80a20ac:	482f      	ldr	r0, [pc, #188]	; (80a216c <_ZN16Adafruit_PCA968510setPWMFreqEf+0x104>)
 80a20ae:	f003 ff55 	bl	80a5f5c <__aeabi_fdiv>
  prescaleval -= 1;
 80a20b2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80a20b6:	f003 fd93 	bl	80a5be0 <__aeabi_fsub>
  if ( _debug ) {
 80a20ba:	7863      	ldrb	r3, [r4, #1]
  }
  freq *= 0.9;  // Correct for overshoot in the frequency setting (see issue #11).
  float prescaleval = 25000000;
  prescaleval /= 4096;
  prescaleval /= freq;
  prescaleval -= 1;
 80a20bc:	4605      	mov	r5, r0
  if ( _debug ) {
 80a20be:	b18b      	cbz	r3, 80a20e4 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x7c>
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
 80a20c0:	f002 f906 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a20c4:	492a      	ldr	r1, [pc, #168]	; (80a2170 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x108>)
 80a20c6:	f001 fb41 	bl	80a374c <_ZN5Print5printEPKc>
 80a20ca:	f002 f901 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a20ce:	4606      	mov	r6, r0
 80a20d0:	4628      	mov	r0, r5
 80a20d2:	f003 f9e5 	bl	80a54a0 <__aeabi_f2d>
 80a20d6:	2302      	movs	r3, #2
 80a20d8:	9300      	str	r3, [sp, #0]
 80a20da:	4602      	mov	r2, r0
 80a20dc:	460b      	mov	r3, r1
 80a20de:	4630      	mov	r0, r6
 80a20e0:	f001 fc5a 	bl	80a3998 <_ZN5Print7printlnEdi>
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a20e4:	4628      	mov	r0, r5
 80a20e6:	f003 f9db 	bl	80a54a0 <__aeabi_f2d>
 80a20ea:	4b22      	ldr	r3, [pc, #136]	; (80a2174 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x10c>)
 80a20ec:	2200      	movs	r2, #0
 80a20ee:	f003 f879 	bl	80a51e4 <__adddf3>
 80a20f2:	f002 fd6d 	bl	80a4bd0 <floor>
 80a20f6:	f003 fcff 	bl	80a5af8 <__aeabi_d2uiz>
  if ( _debug ) {
 80a20fa:	7863      	ldrb	r3, [r4, #1]
  prescaleval /= freq;
  prescaleval -= 1;
  if ( _debug ) {
    Serial.print("Estimated pre-scale: "); Serial.println(prescaleval);
  }
  uint8_t prescale = floor(prescaleval + 0.5);
 80a20fc:	b2c6      	uxtb	r6, r0
  if ( _debug ) {
 80a20fe:	b153      	cbz	r3, 80a2116 <_ZN16Adafruit_PCA968510setPWMFreqEf+0xae>
    Serial.print("Final pre-scale: "); Serial.println(prescale);
 80a2100:	f002 f8e6 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a2104:	491c      	ldr	r1, [pc, #112]	; (80a2178 <_ZN16Adafruit_PCA968510setPWMFreqEf+0x110>)
 80a2106:	f001 fb21 	bl	80a374c <_ZN5Print5printEPKc>
 80a210a:	f002 f8e1 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a210e:	220a      	movs	r2, #10
 80a2110:	4631      	mov	r1, r6
 80a2112:	f001 fb5a 	bl	80a37ca <_ZN5Print7printlnEhi>
  }
  
  uint8_t oldmode = read8(MODE1);
 80a2116:	2100      	movs	r1, #0
 80a2118:	4620      	mov	r0, r4
 80a211a:	f7ff ff59 	bl	80a1fd0 <_ZN16Adafruit_PCA96855read8Eh>
 80a211e:	4605      	mov	r5, r0
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
 80a2120:	f000 026f 	and.w	r2, r0, #111	; 0x6f
 80a2124:	f042 0210 	orr.w	r2, r2, #16
 80a2128:	4620      	mov	r0, r4
 80a212a:	2100      	movs	r1, #0
 80a212c:	f7ff ff6f 	bl	80a200e <_ZN16Adafruit_PCA96856write8Ehh>
  write8(PRESCALE, prescale); // set the prescaler
 80a2130:	4632      	mov	r2, r6
 80a2132:	4620      	mov	r0, r4
 80a2134:	21fe      	movs	r1, #254	; 0xfe
 80a2136:	f7ff ff6a 	bl	80a200e <_ZN16Adafruit_PCA96856write8Ehh>
  write8(MODE1, oldmode);
 80a213a:	462a      	mov	r2, r5
 80a213c:	2100      	movs	r1, #0
 80a213e:	4620      	mov	r0, r4
 80a2140:	f7ff ff65 	bl	80a200e <_ZN16Adafruit_PCA96856write8Ehh>
  delay(5);
 80a2144:	2005      	movs	r0, #5
 80a2146:	f001 fc55 	bl	80a39f4 <delay>
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a214a:	4620      	mov	r0, r4
 80a214c:	f065 025e 	orn	r2, r5, #94	; 0x5e
 80a2150:	b2d2      	uxtb	r2, r2
 80a2152:	2100      	movs	r1, #0
}
 80a2154:	b002      	add	sp, #8
 80a2156:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  uint8_t newmode = (oldmode & 0x7F) | 0x10; // sleep
  write8(MODE1, newmode); // go to sleep
  write8(PRESCALE, prescale); // set the prescaler
  write8(MODE1, oldmode);
  delay(5);
  write8(MODE1, oldmode | 0xa1);  // Turns on auto increment in MODE1 register
 80a215a:	f7ff bf58 	b.w	80a200e <_ZN16Adafruit_PCA96856write8Ehh>
 80a215e:	bf00      	nop
 80a2160:	cccccccd 	.word	0xcccccccd
 80a2164:	3feccccc 	.word	0x3feccccc
 80a2168:	080a6693 	.word	0x080a6693
 80a216c:	45bebc20 	.word	0x45bebc20
 80a2170:	080a66ab 	.word	0x080a66ab
 80a2174:	3fe00000 	.word	0x3fe00000
 80a2178:	080a66c1 	.word	0x080a66c1

080a217c <_GLOBAL__sub_I__ZN16Adafruit_PCA9685C2Ehb>:
 80a217c:	f000 bbfc 	b.w	80a2978 <HAL_Pin_Map>

080a2180 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80a2180:	b538      	push	{r3, r4, r5, lr}
 80a2182:	4b0b      	ldr	r3, [pc, #44]	; (80a21b0 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a2184:	6984      	ldr	r4, [r0, #24]
 80a2186:	4605      	mov	r5, r0
 80a2188:	6003      	str	r3, [r0, #0]
 80a218a:	b17c      	cbz	r4, 80a21ac <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a218c:	6863      	ldr	r3, [r4, #4]
 80a218e:	3b01      	subs	r3, #1
 80a2190:	6063      	str	r3, [r4, #4]
 80a2192:	b95b      	cbnz	r3, 80a21ac <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80a2194:	6823      	ldr	r3, [r4, #0]
 80a2196:	4620      	mov	r0, r4
 80a2198:	689b      	ldr	r3, [r3, #8]
 80a219a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a219c:	68a3      	ldr	r3, [r4, #8]
 80a219e:	3b01      	subs	r3, #1
 80a21a0:	60a3      	str	r3, [r4, #8]
 80a21a2:	b91b      	cbnz	r3, 80a21ac <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80a21a4:	6823      	ldr	r3, [r4, #0]
 80a21a6:	4620      	mov	r0, r4
 80a21a8:	68db      	ldr	r3, [r3, #12]
 80a21aa:	4798      	blx	r3
 80a21ac:	4628      	mov	r0, r5
 80a21ae:	bd38      	pop	{r3, r4, r5, pc}
 80a21b0:	080a6718 	.word	0x080a6718

080a21b4 <_ZN9TCPClientD0Ev>:
 80a21b4:	b510      	push	{r4, lr}
 80a21b6:	4604      	mov	r4, r0
 80a21b8:	f7ff ffe2 	bl	80a2180 <_ZN9TCPClientD1Ev>
 80a21bc:	4620      	mov	r0, r4
 80a21be:	211c      	movs	r1, #28
 80a21c0:	f002 fbaa 	bl	80a4918 <_ZdlPvj>
 80a21c4:	4620      	mov	r0, r4
 80a21c6:	bd10      	pop	{r4, pc}

080a21c8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21c8:	b538      	push	{r3, r4, r5, lr}
 80a21ca:	461d      	mov	r5, r3
    this->callback = callback;
 80a21cc:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 80a21ce:	4604      	mov	r4, r0
    this->callback = callback;
 80a21d0:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 80a21d2:	2300      	movs	r3, #0
 80a21d4:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 80a21d6:	b102      	cbz	r2, 80a21da <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 80a21d8:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 80a21da:	b119      	cbz	r1, 80a21e4 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 80a21dc:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a21e0:	f001 f9ec 	bl	80a35bc <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 80a21e4:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 80a21e6:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 80a21e8:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a21ea:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 80a21ec:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 80a21f0:	2bff      	cmp	r3, #255	; 0xff
 80a21f2:	bfb8      	it	lt
 80a21f4:	23ff      	movlt	r3, #255	; 0xff
 80a21f6:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 80a21fa:	b108      	cbz	r0, 80a2200 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 80a21fc:	f7fd ff55 	bl	80a00aa <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 80a2200:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 80a2204:	f7fd ff4d 	bl	80a00a2 <_Znaj>
 80a2208:	61e0      	str	r0, [r4, #28]
 80a220a:	bd38      	pop	{r3, r4, r5, pc}

080a220c <_ZN4MQTTC1EPctPFvS0_PhjE>:
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a220c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80a2210:	4604      	mov	r4, r0
 80a2212:	4617      	mov	r7, r2
 80a2214:	4698      	mov	r8, r3
 80a2216:	460e      	mov	r6, r1
 80a2218:	2500      	movs	r5, #0
 80a221a:	f001 f903 	bl	80a3424 <_ZN9TCPClientC1Ev>
 80a221e:	61e5      	str	r5, [r4, #28]
 80a2220:	490a      	ldr	r1, [pc, #40]	; (80a224c <_ZN4MQTTC1EPctPFvS0_PhjE+0x40>)
 80a2222:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2226:	f001 f99c 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a222a:	23ff      	movs	r3, #255	; 0xff
 80a222c:	9302      	str	r3, [sp, #8]
 80a222e:	230f      	movs	r3, #15
 80a2230:	9300      	str	r3, [sp, #0]
 80a2232:	4620      	mov	r0, r4
#define MQTTQOS2_HEADER_MASK        (2 << 1)

#define DUP_FLAG_OFF_MASK           (0<<3)
#define DUP_FLAG_ON_MASK            (1<<3)

MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int)) {
 80a2234:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, callback, MQTT_MAX_PACKET_SIZE);
 80a2236:	f8cd 8004 	str.w	r8, [sp, #4]
 80a223a:	463b      	mov	r3, r7
 80a223c:	462a      	mov	r2, r5
 80a223e:	4631      	mov	r1, r6
 80a2240:	f7ff ffc2 	bl	80a21c8 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 80a2244:	4620      	mov	r0, r4
 80a2246:	b004      	add	sp, #16
 80a2248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a224c:	080a682c 	.word	0x080a682c

080a2250 <_ZN4MQTT14addQosCallbackEPFvjE>:
    this->port = port;
}


void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
 80a2250:	6341      	str	r1, [r0, #52]	; 0x34
 80a2252:	4770      	bx	lr

080a2254 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80a2254:	b510      	push	{r4, lr}
 80a2256:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80a2258:	4620      	mov	r0, r4
 80a225a:	f000 ff77 	bl	80a314c <_ZN9TCPClient9availableEv>
 80a225e:	2800      	cmp	r0, #0
 80a2260:	d0fa      	beq.n	80a2258 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80a2262:	4620      	mov	r0, r4
 80a2264:	f000 ff27 	bl	80a30b6 <_ZN9TCPClient4readEv>
}
 80a2268:	b2c0      	uxtb	r0, r0
 80a226a:	bd10      	pop	{r4, pc}

080a226c <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a226c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a2270:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a2272:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80a2274:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a2276:	f7ff ffed 	bl	80a2254 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80a227a:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80a227e:	4646      	mov	r6, r8
 80a2280:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80a2282:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80a2284:	2700      	movs	r7, #0
 80a2286:	f893 9000 	ldrb.w	r9, [r3]
 80a228a:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80a228e:	4628      	mov	r0, r5
 80a2290:	f7ff ffe0 	bl	80a2254 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80a2294:	69eb      	ldr	r3, [r5, #28]
 80a2296:	1c74      	adds	r4, r6, #1
 80a2298:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80a229a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80a229e:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80a22a2:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a22a4:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80a22a6:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80a22a8:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80a22ac:	d501      	bpl.n	80a22b2 <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80a22ae:	4626      	mov	r6, r4
 80a22b0:	e7ed      	b.n	80a228e <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a22b2:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 80a22b4:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80a22b8:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 80a22bc:	d113      	bne.n	80a22e6 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 80a22be:	4628      	mov	r0, r5
 80a22c0:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a22c4:	f7ff ffc6 	bl	80a2254 <_ZN4MQTT8readByteEv>
 80a22c8:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 80a22cc:	4628      	mov	r0, r5
 80a22ce:	f8d5 801c 	ldr.w	r8, [r5, #28]
 80a22d2:	f7ff ffbf 	bl	80a2254 <_ZN4MQTT8readByteEv>
 80a22d6:	1cf4      	adds	r4, r6, #3
 80a22d8:	3602      	adds	r6, #2
 80a22da:	b2b6      	uxth	r6, r6
 80a22dc:	b2a4      	uxth	r4, r4
 80a22de:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 80a22e2:	2302      	movs	r3, #2
 80a22e4:	e000      	b.n	80a22e8 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 80a22e6:	2300      	movs	r3, #0
 80a22e8:	1b1b      	subs	r3, r3, r4
 80a22ea:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a22ec:	19a3      	adds	r3, r4, r6
 80a22ee:	b29b      	uxth	r3, r3
 80a22f0:	429f      	cmp	r7, r3
 80a22f2:	d90b      	bls.n	80a230c <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 80a22f4:	4628      	mov	r0, r5
 80a22f6:	f7ff ffad 	bl	80a2254 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 80a22fa:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 80a22fe:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 80a2300:	bf84      	itt	hi
 80a2302:	69eb      	ldrhi	r3, [r5, #28]
 80a2304:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 80a2306:	3401      	adds	r4, #1
 80a2308:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 80a230a:	e7ef      	b.n	80a22ec <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 80a230c:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 80a2310:	42a0      	cmp	r0, r4
 80a2312:	bf2c      	ite	cs
 80a2314:	4620      	movcs	r0, r4
 80a2316:	2000      	movcc	r0, #0
 80a2318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080a231c <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 80a231c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80a231e:	4607      	mov	r7, r0
 80a2320:	468e      	mov	lr, r1
 80a2322:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 80a2324:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 80a2326:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 80a2328:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a232c:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 80a232e:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a2330:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 80a2332:	bf18      	it	ne
 80a2334:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 80a2338:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 80a233a:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 80a233e:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 80a2340:	2d00      	cmp	r5, #0
 80a2342:	d1f1      	bne.n	80a2328 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 80a2344:	f1c4 0304 	rsb	r3, r4, #4
 80a2348:	18d1      	adds	r1, r2, r3
 80a234a:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 80a234e:	42a5      	cmp	r5, r4
 80a2350:	da06      	bge.n	80a2360 <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 80a2352:	a801      	add	r0, sp, #4
 80a2354:	1b2b      	subs	r3, r5, r4
 80a2356:	5c28      	ldrb	r0, [r5, r0]
 80a2358:	4413      	add	r3, r2
 80a235a:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 80a235c:	3501      	adds	r5, #1
 80a235e:	e7f6      	b.n	80a234e <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 80a2360:	1c72      	adds	r2, r6, #1
 80a2362:	4422      	add	r2, r4
 80a2364:	4638      	mov	r0, r7
 80a2366:	f000 fe4d 	bl	80a3004 <_ZN9TCPClient5writeEPKhj>
 80a236a:	4605      	mov	r5, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a236c:	f000 fb64 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 80a2370:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 80a2372:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 80a2374:	4434      	add	r4, r6
 80a2376:	b2a8      	uxth	r0, r5
}
 80a2378:	1a23      	subs	r3, r4, r0
 80a237a:	4258      	negs	r0, r3
 80a237c:	4158      	adcs	r0, r3
 80a237e:	b003      	add	sp, #12
 80a2380:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a2382 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
 80a2382:	b510      	push	{r4, lr}
 80a2384:	4604      	mov	r4, r0
    buffer[0] = MQTTDISCONNECT;
 80a2386:	69c3      	ldr	r3, [r0, #28]
 80a2388:	22e0      	movs	r2, #224	; 0xe0
 80a238a:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
 80a238c:	69c3      	ldr	r3, [r0, #28]
 80a238e:	2200      	movs	r2, #0
 80a2390:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
 80a2392:	69c1      	ldr	r1, [r0, #28]
 80a2394:	2202      	movs	r2, #2
 80a2396:	f000 fe35 	bl	80a3004 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
 80a239a:	4620      	mov	r0, r4
 80a239c:	f000 ff12 	bl	80a31c4 <_ZN9TCPClient4stopEv>
 80a23a0:	f000 fb4a 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
 80a23a4:	6260      	str	r0, [r4, #36]	; 0x24
 80a23a6:	62a0      	str	r0, [r4, #40]	; 0x28
 80a23a8:	bd10      	pop	{r4, pc}

080a23aa <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 80a23aa:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 80a23ac:	460d      	mov	r5, r1
 80a23ae:	3302      	adds	r3, #2
 80a23b0:	b29b      	uxth	r3, r3
 80a23b2:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 80a23b4:	f815 6b01 	ldrb.w	r6, [r5], #1
 80a23b8:	b2a4      	uxth	r4, r4
 80a23ba:	b13e      	cbz	r6, 80a23cc <_ZN4MQTT11writeStringEPKcPht+0x22>
 80a23bc:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 80a23c0:	429f      	cmp	r7, r3
 80a23c2:	d903      	bls.n	80a23cc <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 80a23c4:	1c5c      	adds	r4, r3, #1
 80a23c6:	54d6      	strb	r6, [r2, r3]
 80a23c8:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 80a23ca:	e7f2      	b.n	80a23b2 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 80a23cc:	1b19      	subs	r1, r3, r4
 80a23ce:	440a      	add	r2, r1
 80a23d0:	1221      	asrs	r1, r4, #8
 80a23d2:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 80a23d6:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 80a23da:	4618      	mov	r0, r3
 80a23dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a23de <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 80a23de:	b538      	push	{r3, r4, r5, lr}
 80a23e0:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 80a23e2:	f000 ffb0 	bl	80a3346 <_ZN9TCPClient9connectedEv>
 80a23e6:	2800      	cmp	r0, #0
 80a23e8:	bf14      	ite	ne
 80a23ea:	2401      	movne	r4, #1
 80a23ec:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 80a23ee:	d102      	bne.n	80a23f6 <_ZN4MQTT11isConnectedEv+0x18>
 80a23f0:	4628      	mov	r0, r5
 80a23f2:	f000 fee7 	bl	80a31c4 <_ZN9TCPClient4stopEv>
    return rc;
}
 80a23f6:	4620      	mov	r0, r4
 80a23f8:	bd38      	pop	{r3, r4, r5, pc}
	...

080a23fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 80a23fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a2400:	b087      	sub	sp, #28
 80a2402:	4604      	mov	r4, r0
 80a2404:	4689      	mov	r9, r1
 80a2406:	4617      	mov	r7, r2
 80a2408:	461e      	mov	r6, r3
 80a240a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
 80a240e:	f7ff ffe6 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a2412:	4605      	mov	r5, r0
 80a2414:	2800      	cmp	r0, #0
 80a2416:	f040 80bd 	bne.w	80a2594 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 80a241a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80a241c:	b939      	cbnz	r1, 80a242e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 80a241e:	4603      	mov	r3, r0
 80a2420:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a2424:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80a2426:	4620      	mov	r0, r4
 80a2428:	f001 f81e 	bl	80a3468 <_ZN9TCPClient7connectEPKctm>
 80a242c:	e009      	b.n	80a2442 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 80a242e:	4668      	mov	r0, sp
 80a2430:	f001 fed8 	bl	80a41e4 <_ZN9IPAddressC1EPKh>
 80a2434:	462b      	mov	r3, r5
 80a2436:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 80a243a:	4669      	mov	r1, sp
 80a243c:	4620      	mov	r0, r4
 80a243e:	f000 fedb 	bl	80a31f8 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 80a2442:	2800      	cmp	r0, #0
 80a2444:	f000 80a2 	beq.w	80a258c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 80a2448:	2301      	movs	r3, #1
 80a244a:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 80a244c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 80a2450:	2b04      	cmp	r3, #4
 80a2452:	d115      	bne.n	80a2480 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a2454:	4b52      	ldr	r3, [pc, #328]	; (80a25a0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 80a2456:	6818      	ldr	r0, [r3, #0]
 80a2458:	889a      	ldrh	r2, [r3, #4]
 80a245a:	9000      	str	r0, [sp, #0]
 80a245c:	f8ad 2004 	strh.w	r2, [sp, #4]
 80a2460:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a2462:	69e2      	ldr	r2, [r4, #28]
 80a2464:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 80a2466:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 80a246a:	f8c2 0005 	str.w	r0, [r2, #5]
 80a246e:	1d53      	adds	r3, r2, #5
 80a2470:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80a2474:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80a2478:	8099      	strh	r1, [r3, #4]
 80a247a:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 80a247c:	230c      	movs	r3, #12
 80a247e:	e012      	b.n	80a24a6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2480:	466a      	mov	r2, sp
 80a2482:	4b48      	ldr	r3, [pc, #288]	; (80a25a4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a2484:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 80a2488:	6818      	ldr	r0, [r3, #0]
 80a248a:	6859      	ldr	r1, [r3, #4]
 80a248c:	7a1b      	ldrb	r3, [r3, #8]
 80a248e:	c203      	stmia	r2!, {r0, r1}
 80a2490:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 80a2492:	466b      	mov	r3, sp
 80a2494:	cb03      	ldmia	r3!, {r0, r1}
 80a2496:	f8cc 0005 	str.w	r0, [ip, #5]
 80a249a:	f8cc 1009 	str.w	r1, [ip, #9]
 80a249e:	7813      	ldrb	r3, [r2, #0]
 80a24a0:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 80a24a4:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 80a24a6:	f1b8 0f00 	cmp.w	r8, #0
 80a24aa:	d00a      	beq.n	80a24c2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 80a24ac:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
 80a24b0:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 80a24b4:	0152      	lsls	r2, r2, #5
 80a24b6:	f042 0206 	orr.w	r2, r2, #6
 80a24ba:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80a24be:	b2d2      	uxtb	r2, r2
 80a24c0:	e000      	b.n	80a24c4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 80a24c2:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 80a24c4:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 80a24c8:	b909      	cbnz	r1, 80a24ce <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 80a24ca:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 80a24ce:	b12f      	cbz	r7, 80a24dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 80a24d0:	b916      	cbnz	r6, 80a24d8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 80a24d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80a24d6:	e001      	b.n	80a24dc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 80a24d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 80a24dc:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 80a24de:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 80a24e0:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 80a24e2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a24e4:	69e1      	ldr	r1, [r4, #28]
 80a24e6:	1212      	asrs	r2, r2, #8
 80a24e8:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 80a24ea:	69e1      	ldr	r1, [r4, #28]
 80a24ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80a24ee:	1c9a      	adds	r2, r3, #2
 80a24f0:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 80a24f2:	3303      	adds	r3, #3
 80a24f4:	69e2      	ldr	r2, [r4, #28]
 80a24f6:	4649      	mov	r1, r9
 80a24f8:	4620      	mov	r0, r4
 80a24fa:	f7ff ff56 	bl	80a23aa <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 80a24fe:	f1b8 0f00 	cmp.w	r8, #0
 80a2502:	d00b      	beq.n	80a251c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 80a2504:	4603      	mov	r3, r0
 80a2506:	69e2      	ldr	r2, [r4, #28]
 80a2508:	4641      	mov	r1, r8
 80a250a:	4620      	mov	r0, r4
 80a250c:	f7ff ff4d 	bl	80a23aa <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 80a2510:	69e2      	ldr	r2, [r4, #28]
 80a2512:	4603      	mov	r3, r0
 80a2514:	9911      	ldr	r1, [sp, #68]	; 0x44
 80a2516:	4620      	mov	r0, r4
 80a2518:	f7ff ff47 	bl	80a23aa <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 80a251c:	b167      	cbz	r7, 80a2538 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 80a251e:	4603      	mov	r3, r0
 80a2520:	69e2      	ldr	r2, [r4, #28]
 80a2522:	4639      	mov	r1, r7
 80a2524:	4620      	mov	r0, r4
 80a2526:	f7ff ff40 	bl	80a23aa <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 80a252a:	b12e      	cbz	r6, 80a2538 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 80a252c:	4603      	mov	r3, r0
 80a252e:	69e2      	ldr	r2, [r4, #28]
 80a2530:	4631      	mov	r1, r6
 80a2532:	4620      	mov	r0, r4
 80a2534:	f7ff ff39 	bl	80a23aa <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 80a2538:	1f43      	subs	r3, r0, #5
 80a253a:	b29b      	uxth	r3, r3
 80a253c:	69e2      	ldr	r2, [r4, #28]
 80a253e:	2110      	movs	r1, #16
 80a2540:	4620      	mov	r0, r4
 80a2542:	f7ff feeb 	bl	80a231c <_ZN4MQTT5writeEhPht>
 80a2546:	f000 fa77 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a254a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 80a254e:	6260      	str	r0, [r4, #36]	; 0x24
 80a2550:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 80a2552:	4620      	mov	r0, r4
 80a2554:	f000 fdfa 	bl	80a314c <_ZN9TCPClient9availableEv>
 80a2558:	b940      	cbnz	r0, 80a256c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 80a255a:	f000 fa6d 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 80a255e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80a2560:	1ac0      	subs	r0, r0, r3
 80a2562:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80a2564:	4373      	muls	r3, r6
 80a2566:	4298      	cmp	r0, r3
 80a2568:	d9f3      	bls.n	80a2552 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 80a256a:	e00f      	b.n	80a258c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a256c:	4669      	mov	r1, sp
 80a256e:	4620      	mov	r0, r4
 80a2570:	f7ff fe7c 	bl	80a226c <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 80a2574:	2804      	cmp	r0, #4
 80a2576:	d109      	bne.n	80a258c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 80a2578:	69e3      	ldr	r3, [r4, #28]
 80a257a:	78de      	ldrb	r6, [r3, #3]
 80a257c:	b936      	cbnz	r6, 80a258c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 80a257e:	f000 fa5b 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 80a2582:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 80a2584:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 80a2586:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 80a258a:	e004      	b.n	80a2596 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 80a258c:	4620      	mov	r0, r4
 80a258e:	f000 fe19 	bl	80a31c4 <_ZN9TCPClient4stopEv>
 80a2592:	e000      	b.n	80a2596 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 80a2594:	2500      	movs	r5, #0
}
 80a2596:	4628      	mov	r0, r5
 80a2598:	b007      	add	sp, #28
 80a259a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a259e:	bf00      	nop
 80a25a0:	080a66d3 	.word	0x080a66d3
 80a25a4:	080a66da 	.word	0x080a66da

080a25a8 <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 80a25a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 80a25aa:	2304      	movs	r3, #4
 80a25ac:	9305      	str	r3, [sp, #20]
 80a25ae:	2301      	movs	r3, #1
 80a25b0:	9304      	str	r3, [sp, #16]
 80a25b2:	2300      	movs	r3, #0
 80a25b4:	9303      	str	r3, [sp, #12]
 80a25b6:	9302      	str	r3, [sp, #8]
 80a25b8:	9301      	str	r3, [sp, #4]
 80a25ba:	9300      	str	r3, [sp, #0]
 80a25bc:	461a      	mov	r2, r3
 80a25be:	f7ff ff1d 	bl	80a23fc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 80a25c2:	b007      	add	sp, #28
 80a25c4:	f85d fb04 	ldr.w	pc, [sp], #4

080a25c8 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a25c8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a25cc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 80a25ce:	4604      	mov	r4, r0
 80a25d0:	468b      	mov	fp, r1
 80a25d2:	4691      	mov	r9, r2
 80a25d4:	469a      	mov	sl, r3
 80a25d6:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80a25da:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 80a25de:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 80a25e2:	f7ff fefc 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a25e6:	2800      	cmp	r0, #0
 80a25e8:	d04b      	beq.n	80a2682 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 80a25ea:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 80a25ee:	2100      	movs	r1, #0
 80a25f0:	69e0      	ldr	r0, [r4, #28]
 80a25f2:	f003 fdf8 	bl	80a61e6 <memset>

        length = writeString(topic, buffer, length);
 80a25f6:	2305      	movs	r3, #5
 80a25f8:	69e2      	ldr	r2, [r4, #28]
 80a25fa:	4659      	mov	r1, fp
 80a25fc:	4620      	mov	r0, r4
 80a25fe:	f7ff fed4 	bl	80a23aa <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 80a2602:	1e6b      	subs	r3, r5, #1
 80a2604:	2b01      	cmp	r3, #1
 80a2606:	d812      	bhi.n	80a262e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 80a2608:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a260a:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 80a260c:	3301      	adds	r3, #1
 80a260e:	b29b      	uxth	r3, r3
 80a2610:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 80a2612:	121b      	asrs	r3, r3, #8
 80a2614:	5413      	strb	r3, [r2, r0]
 80a2616:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 80a2618:	69e3      	ldr	r3, [r4, #28]
 80a261a:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 80a261c:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 80a261e:	3002      	adds	r0, #2
 80a2620:	b280      	uxth	r0, r0
 80a2622:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 80a2624:	b11e      	cbz	r6, 80a262e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 80a2626:	8c23      	ldrh	r3, [r4, #32]
 80a2628:	1c5a      	adds	r2, r3, #1
 80a262a:	8422      	strh	r2, [r4, #32]
 80a262c:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 80a262e:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 80a2630:	b291      	uxth	r1, r2
 80a2632:	1883      	adds	r3, r0, r2
 80a2634:	458a      	cmp	sl, r1
 80a2636:	b29b      	uxth	r3, r3
 80a2638:	d909      	bls.n	80a264e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 80a263a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 80a263e:	3201      	adds	r2, #1
 80a2640:	429e      	cmp	r6, r3
 80a2642:	d904      	bls.n	80a264e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 80a2644:	f819 6001 	ldrb.w	r6, [r9, r1]
 80a2648:	69e1      	ldr	r1, [r4, #28]
 80a264a:	54ce      	strb	r6, [r1, r3]
 80a264c:	e7f0      	b.n	80a2630 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 80a264e:	f1b8 0f00 	cmp.w	r8, #0
 80a2652:	bf0c      	ite	eq
 80a2654:	2130      	moveq	r1, #48	; 0x30
 80a2656:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 80a2658:	b10f      	cbz	r7, 80a265e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 80a265a:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 80a265e:	2d02      	cmp	r5, #2
 80a2660:	d102      	bne.n	80a2668 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 80a2662:	f041 0104 	orr.w	r1, r1, #4
 80a2666:	e003      	b.n	80a2670 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 80a2668:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 80a266a:	bf08      	it	eq
 80a266c:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a2670:	4620      	mov	r0, r4
 80a2672:	3b05      	subs	r3, #5
 80a2674:	69e2      	ldr	r2, [r4, #28]
 80a2676:	b29b      	uxth	r3, r3
    }
    return false;
}
 80a2678:	b001      	add	sp, #4
 80a267a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 80a267e:	f7ff be4d 	b.w	80a231c <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a2682:	b001      	add	sp, #4
 80a2684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a2688 <_ZN4MQTT14publishReleaseEt>:

bool MQTT::publishRelease(uint16_t messageid) {
 80a2688:	b538      	push	{r3, r4, r5, lr}
 80a268a:	4604      	mov	r4, r0
 80a268c:	460d      	mov	r5, r1
    if (isConnected()) {
 80a268e:	f7ff fea6 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a2692:	b190      	cbz	r0, 80a26ba <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 80a2694:	69e3      	ldr	r3, [r4, #28]
 80a2696:	2262      	movs	r2, #98	; 0x62
 80a2698:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a269a:	69e3      	ldr	r3, [r4, #28]
 80a269c:	2202      	movs	r2, #2
 80a269e:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26a0:	69e3      	ldr	r3, [r4, #28]
 80a26a2:	122a      	asrs	r2, r5, #8
 80a26a4:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26a6:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26a8:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a26aa:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a26ac:	69e1      	ldr	r1, [r4, #28]
 80a26ae:	4620      	mov	r0, r4
 80a26b0:	f000 fca8 	bl	80a3004 <_ZN9TCPClient5writeEPKhj>
 80a26b4:	3000      	adds	r0, #0
 80a26b6:	bf18      	it	ne
 80a26b8:	2001      	movne	r0, #1
    }
    return false;
}
 80a26ba:	bd38      	pop	{r3, r4, r5, pc}

080a26bc <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 80a26bc:	b538      	push	{r3, r4, r5, lr}
 80a26be:	4604      	mov	r4, r0
 80a26c0:	460d      	mov	r5, r1
    if (isConnected()) {
 80a26c2:	f7ff fe8c 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a26c6:	b190      	cbz	r0, 80a26ee <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 80a26c8:	69e3      	ldr	r3, [r4, #28]
 80a26ca:	2272      	movs	r2, #114	; 0x72
 80a26cc:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 80a26ce:	69e3      	ldr	r3, [r4, #28]
 80a26d0:	2202      	movs	r2, #2
 80a26d2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 80a26d4:	69e3      	ldr	r3, [r4, #28]
 80a26d6:	122a      	asrs	r2, r5, #8
 80a26d8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 80a26da:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 80a26dc:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 80a26de:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 80a26e0:	69e1      	ldr	r1, [r4, #28]
 80a26e2:	4620      	mov	r0, r4
 80a26e4:	f000 fc8e 	bl	80a3004 <_ZN9TCPClient5writeEPKhj>
 80a26e8:	3000      	adds	r0, #0
 80a26ea:	bf18      	it	ne
 80a26ec:	2001      	movne	r0, #1
    }
    return false;
}
 80a26ee:	bd38      	pop	{r3, r4, r5, pc}

080a26f0 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 80a26f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a26f4:	b083      	sub	sp, #12
 80a26f6:	af00      	add	r7, sp, #0
 80a26f8:	4604      	mov	r4, r0
    if (isConnected()) {
 80a26fa:	f7ff fe70 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a26fe:	4681      	mov	r9, r0
 80a2700:	2800      	cmp	r0, #0
 80a2702:	f000 80f6 	beq.w	80a28f2 <_ZN4MQTT4loopEv+0x202>
 80a2706:	f000 f997 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 80a270a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80a270c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a2710:	4353      	muls	r3, r2
 80a2712:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80a2714:	4605      	mov	r5, r0
 80a2716:	1a82      	subs	r2, r0, r2
 80a2718:	429a      	cmp	r2, r3
 80a271a:	d803      	bhi.n	80a2724 <_ZN4MQTT4loopEv+0x34>
 80a271c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80a271e:	1a82      	subs	r2, r0, r2
 80a2720:	4293      	cmp	r3, r2
 80a2722:	d217      	bcs.n	80a2754 <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 80a2724:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80a2728:	b12b      	cbz	r3, 80a2736 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 80a272a:	4620      	mov	r0, r4
 80a272c:	f000 fd4a 	bl	80a31c4 <_ZN9TCPClient4stopEv>
                return false;
 80a2730:	f04f 0900 	mov.w	r9, #0
 80a2734:	e0dd      	b.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 80a2736:	69e2      	ldr	r2, [r4, #28]
 80a2738:	21c0      	movs	r1, #192	; 0xc0
 80a273a:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 80a273c:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 80a273e:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 80a2740:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 80a2742:	69e1      	ldr	r1, [r4, #28]
 80a2744:	2202      	movs	r2, #2
 80a2746:	f000 fc5d 	bl	80a3004 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 80a274a:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 80a274c:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 80a274e:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 80a2750:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 80a2754:	4620      	mov	r0, r4
 80a2756:	f000 fcf9 	bl	80a314c <_ZN9TCPClient9availableEv>
 80a275a:	2800      	cmp	r0, #0
 80a275c:	f000 80c9 	beq.w	80a28f2 <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 80a2760:	1df9      	adds	r1, r7, #7
 80a2762:	4620      	mov	r0, r4
 80a2764:	f7ff fd82 	bl	80a226c <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 80a2768:	4602      	mov	r2, r0
 80a276a:	2800      	cmp	r0, #0
 80a276c:	f000 80c1 	beq.w	80a28f2 <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 80a2770:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 80a2772:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 80a2774:	7818      	ldrb	r0, [r3, #0]
 80a2776:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 80a277a:	2930      	cmp	r1, #48	; 0x30
 80a277c:	d17d      	bne.n	80a287a <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 80a277e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 80a2782:	f1bb 0f00 	cmp.w	fp, #0
 80a2786:	f000 80b4 	beq.w	80a28f2 <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a278a:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 80a278e:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 80a2790:	eb03 000c 	add.w	r0, r3, ip
 80a2794:	7881      	ldrb	r1, [r0, #2]
 80a2796:	f890 e001 	ldrb.w	lr, [r0, #1]
 80a279a:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 80a279e:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 80a27a2:	f10e 0108 	add.w	r1, lr, #8
 80a27a6:	f021 0107 	bic.w	r1, r1, #7
 80a27aa:	ebad 0d01 	sub.w	sp, sp, r1
 80a27ae:	4668      	mov	r0, sp
 80a27b0:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 80a27b2:	b28e      	uxth	r6, r1
 80a27b4:	45b6      	cmp	lr, r6
 80a27b6:	d906      	bls.n	80a27c6 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 80a27b8:	eb0c 0601 	add.w	r6, ip, r1
 80a27bc:	441e      	add	r6, r3
 80a27be:	78f6      	ldrb	r6, [r6, #3]
 80a27c0:	5446      	strb	r6, [r0, r1]
 80a27c2:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 80a27c4:	e7f5      	b.n	80a27b2 <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 80a27c6:	2100      	movs	r1, #0
 80a27c8:	f800 100e 	strb.w	r1, [r0, lr]
 80a27cc:	781e      	ldrb	r6, [r3, #0]
 80a27ce:	f10c 0103 	add.w	r1, ip, #3
 80a27d2:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 80a27d6:	2e02      	cmp	r6, #2
 80a27d8:	ebcc 0202 	rsb	r2, ip, r2
 80a27dc:	d11e      	bne.n	80a281c <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27de:	4471      	add	r1, lr
 80a27e0:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a27e4:	4419      	add	r1, r3
 80a27e6:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a27e8:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a27ec:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 80a27f0:	f10c 0105 	add.w	r1, ip, #5
 80a27f4:	4471      	add	r1, lr
 80a27f6:	3a05      	subs	r2, #5
 80a27f8:	4419      	add	r1, r3
 80a27fa:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 80a27fc:	69e3      	ldr	r3, [r4, #28]
 80a27fe:	2240      	movs	r2, #64	; 0x40
 80a2800:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 80a2802:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 80a2804:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 80a2808:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 80a280a:	69e3      	ldr	r3, [r4, #28]
 80a280c:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a2810:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 80a2812:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 80a2814:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 80a2816:	f883 8003 	strb.w	r8, [r3, #3]
 80a281a:	e020      	b.n	80a285e <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 80a281c:	2e04      	cmp	r6, #4
 80a281e:	d124      	bne.n	80a286a <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a2820:	4471      	add	r1, lr
 80a2822:	f813 8001 	ldrb.w	r8, [r3, r1]
 80a2826:	4419      	add	r1, r3
 80a2828:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a282a:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a282e:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 80a2832:	f10c 0105 	add.w	r1, ip, #5
 80a2836:	4471      	add	r1, lr
 80a2838:	3a05      	subs	r2, #5
 80a283a:	4419      	add	r1, r3
 80a283c:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 80a283e:	69e3      	ldr	r3, [r4, #28]
 80a2840:	2250      	movs	r2, #80	; 0x50
 80a2842:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 80a2844:	69e3      	ldr	r3, [r4, #28]
 80a2846:	2202      	movs	r2, #2
 80a2848:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 80a284a:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 80a284c:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 80a2850:	ea4f 2228 	mov.w	r2, r8, asr #8
 80a2854:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 80a2856:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 80a2858:	69e3      	ldr	r3, [r4, #28]
 80a285a:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 80a285e:	69e1      	ldr	r1, [r4, #28]
 80a2860:	4620      	mov	r0, r4
 80a2862:	f000 fbcf 	bl	80a3004 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 80a2866:	6265      	str	r5, [r4, #36]	; 0x24
 80a2868:	e005      	b.n	80a2876 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 80a286a:	3a03      	subs	r2, #3
 80a286c:	4471      	add	r1, lr
 80a286e:	ebce 0202 	rsb	r2, lr, r2
 80a2872:	4419      	add	r1, r3
 80a2874:	47d8      	blx	fp
 80a2876:	46d5      	mov	sp, sl
 80a2878:	e03b      	b.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 80a287a:	2950      	cmp	r1, #80	; 0x50
 80a287c:	d108      	bne.n	80a2890 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 80a287e:	7899      	ldrb	r1, [r3, #2]
 80a2880:	78db      	ldrb	r3, [r3, #3]
 80a2882:	4620      	mov	r0, r4
 80a2884:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a2888:	b289      	uxth	r1, r1
 80a288a:	f7ff fefd 	bl	80a2688 <_ZN4MQTT14publishReleaseEt>
 80a288e:	e030      	b.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 80a2890:	2940      	cmp	r1, #64	; 0x40
 80a2892:	d00c      	beq.n	80a28ae <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 80a2894:	2960      	cmp	r1, #96	; 0x60
 80a2896:	d108      	bne.n	80a28aa <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 80a2898:	7899      	ldrb	r1, [r3, #2]
 80a289a:	78db      	ldrb	r3, [r3, #3]
 80a289c:	4620      	mov	r0, r4
 80a289e:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 80a28a2:	b289      	uxth	r1, r1
 80a28a4:	f7ff ff0a 	bl	80a26bc <_ZN4MQTT15publishCompleteEt>
 80a28a8:	e023      	b.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 80a28aa:	2970      	cmp	r1, #112	; 0x70
 80a28ac:	d10d      	bne.n	80a28ca <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 80a28ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80a28b0:	b1f9      	cbz	r1, 80a28f2 <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 80a28b2:	2a04      	cmp	r2, #4
 80a28b4:	d11d      	bne.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
 80a28b6:	f010 0f06 	tst.w	r0, #6
 80a28ba:	d11a      	bne.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 80a28bc:	7898      	ldrb	r0, [r3, #2]
 80a28be:	78db      	ldrb	r3, [r3, #3]
 80a28c0:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 80a28c4:	b280      	uxth	r0, r0
 80a28c6:	4788      	blx	r1
 80a28c8:	e013      	b.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 80a28ca:	2990      	cmp	r1, #144	; 0x90
 80a28cc:	d011      	beq.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 80a28ce:	29c0      	cmp	r1, #192	; 0xc0
 80a28d0:	d10a      	bne.n	80a28e8 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 80a28d2:	22d0      	movs	r2, #208	; 0xd0
 80a28d4:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 80a28d6:	69e3      	ldr	r3, [r4, #28]
 80a28d8:	2200      	movs	r2, #0
 80a28da:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 80a28dc:	69e1      	ldr	r1, [r4, #28]
 80a28de:	2202      	movs	r2, #2
 80a28e0:	4620      	mov	r0, r4
 80a28e2:	f000 fb8f 	bl	80a3004 <_ZN9TCPClient5writeEPKhj>
 80a28e6:	e004      	b.n	80a28f2 <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 80a28e8:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 80a28ea:	bf04      	itt	eq
 80a28ec:	2300      	moveq	r3, #0
 80a28ee:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 80a28f2:	4648      	mov	r0, r9
 80a28f4:	370c      	adds	r7, #12
 80a28f6:	46bd      	mov	sp, r7
 80a28f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a28fc <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 80a28fc:	b570      	push	{r4, r5, r6, lr}
 80a28fe:	4604      	mov	r4, r0
 80a2900:	460e      	mov	r6, r1
 80a2902:	4615      	mov	r5, r2

    if (isConnected()) {
 80a2904:	f7ff fd6b 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a2908:	b1e8      	cbz	r0, 80a2946 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 80a290a:	8c23      	ldrh	r3, [r4, #32]
 80a290c:	3301      	adds	r3, #1
 80a290e:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 80a2910:	b903      	cbnz	r3, 80a2914 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 80a2912:	2301      	movs	r3, #1
 80a2914:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 80a2916:	8c23      	ldrh	r3, [r4, #32]
 80a2918:	69e2      	ldr	r2, [r4, #28]
 80a291a:	121b      	asrs	r3, r3, #8
 80a291c:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 80a291e:	69e3      	ldr	r3, [r4, #28]
 80a2920:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 80a2922:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 80a2924:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 80a2926:	69e2      	ldr	r2, [r4, #28]
 80a2928:	2307      	movs	r3, #7
 80a292a:	4620      	mov	r0, r4
 80a292c:	f7ff fd3d 	bl	80a23aa <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 80a2930:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2932:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 80a2934:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2936:	1f03      	subs	r3, r0, #4
 80a2938:	69e2      	ldr	r2, [r4, #28]
 80a293a:	4620      	mov	r0, r4
    }
    return false;
}
 80a293c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80a2940:	b29b      	uxth	r3, r3
 80a2942:	f7ff bceb 	b.w	80a231c <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80a2946:	bd70      	pop	{r4, r5, r6, pc}

080a2948 <_ZN4MQTTD1Ev>:

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a2948:	b510      	push	{r4, lr}
 80a294a:	4604      	mov	r4, r0
    if (isConnected()) {
 80a294c:	f7ff fd47 	bl	80a23de <_ZN4MQTT11isConnectedEv>
 80a2950:	b110      	cbz	r0, 80a2958 <_ZN4MQTTD1Ev+0x10>
        disconnect();
 80a2952:	4620      	mov	r0, r4
 80a2954:	f7ff fd15 	bl	80a2382 <_ZN4MQTT10disconnectEv>
    }

    if (buffer != NULL)
 80a2958:	69e0      	ldr	r0, [r4, #28]
 80a295a:	b108      	cbz	r0, 80a2960 <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
 80a295c:	f7fd fba5 	bl	80a00aa <_ZdaPv>

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(NULL, ip, port, keepalive, callback, maxpacketsize);
}

MQTT::~MQTT() {
 80a2960:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80a2964:	f000 fdb6 	bl	80a34d4 <_ZN6StringD1Ev>
 80a2968:	4620      	mov	r0, r4
 80a296a:	f7ff fc09 	bl	80a2180 <_ZN9TCPClientD1Ev>
        disconnect();
    }

    if (buffer != NULL)
      delete[] buffer;
}
 80a296e:	4620      	mov	r0, r4
 80a2970:	bd10      	pop	{r4, pc}

080a2972 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80a2972:	f000 b801 	b.w	80a2978 <HAL_Pin_Map>
	...

080a2978 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80a2978:	b508      	push	{r3, lr}
 80a297a:	4b02      	ldr	r3, [pc, #8]	; (80a2984 <HAL_Pin_Map+0xc>)
 80a297c:	681b      	ldr	r3, [r3, #0]
 80a297e:	681b      	ldr	r3, [r3, #0]
 80a2980:	9301      	str	r3, [sp, #4]
 80a2982:	bd08      	pop	{r3, pc}
 80a2984:	080601b0 	.word	0x080601b0

080a2988 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a2988:	b508      	push	{r3, lr}
 80a298a:	4b02      	ldr	r3, [pc, #8]	; (80a2994 <HAL_Pin_Mode+0xc>)
 80a298c:	681b      	ldr	r3, [r3, #0]
 80a298e:	689b      	ldr	r3, [r3, #8]
 80a2990:	9301      	str	r3, [sp, #4]
 80a2992:	bd08      	pop	{r3, pc}
 80a2994:	080601b0 	.word	0x080601b0

080a2998 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a2998:	b508      	push	{r3, lr}
 80a299a:	4b02      	ldr	r3, [pc, #8]	; (80a29a4 <HAL_Get_Pin_Mode+0xc>)
 80a299c:	681b      	ldr	r3, [r3, #0]
 80a299e:	68db      	ldr	r3, [r3, #12]
 80a29a0:	9301      	str	r3, [sp, #4]
 80a29a2:	bd08      	pop	{r3, pc}
 80a29a4:	080601b0 	.word	0x080601b0

080a29a8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 80a29a8:	b508      	push	{r3, lr}
 80a29aa:	4b02      	ldr	r3, [pc, #8]	; (80a29b4 <HAL_GPIO_Write+0xc>)
 80a29ac:	681b      	ldr	r3, [r3, #0]
 80a29ae:	691b      	ldr	r3, [r3, #16]
 80a29b0:	9301      	str	r3, [sp, #4]
 80a29b2:	bd08      	pop	{r3, pc}
 80a29b4:	080601b0 	.word	0x080601b0

080a29b8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a29b8:	b508      	push	{r3, lr}
 80a29ba:	4b02      	ldr	r3, [pc, #8]	; (80a29c4 <HAL_GPIO_Read+0xc>)
 80a29bc:	681b      	ldr	r3, [r3, #0]
 80a29be:	695b      	ldr	r3, [r3, #20]
 80a29c0:	9301      	str	r3, [sp, #4]
 80a29c2:	bd08      	pop	{r3, pc}
 80a29c4:	080601b0 	.word	0x080601b0

080a29c8 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 80a29c8:	b508      	push	{r3, lr}
 80a29ca:	4b02      	ldr	r3, [pc, #8]	; (80a29d4 <HAL_Interrupts_Enable_All+0xc>)
 80a29cc:	681b      	ldr	r3, [r3, #0]
 80a29ce:	6a1b      	ldr	r3, [r3, #32]
 80a29d0:	9301      	str	r3, [sp, #4]
 80a29d2:	bd08      	pop	{r3, pc}
 80a29d4:	080601b0 	.word	0x080601b0

080a29d8 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 80a29d8:	b508      	push	{r3, lr}
 80a29da:	4b02      	ldr	r3, [pc, #8]	; (80a29e4 <HAL_Interrupts_Disable_All+0xc>)
 80a29dc:	681b      	ldr	r3, [r3, #0]
 80a29de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a29e0:	9301      	str	r3, [sp, #4]
 80a29e2:	bd08      	pop	{r3, pc}
 80a29e4:	080601b0 	.word	0x080601b0

080a29e8 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a29e8:	b508      	push	{r3, lr}
 80a29ea:	4b02      	ldr	r3, [pc, #8]	; (80a29f4 <HAL_SPI_Init+0xc>)
 80a29ec:	681b      	ldr	r3, [r3, #0]
 80a29ee:	69db      	ldr	r3, [r3, #28]
 80a29f0:	9301      	str	r3, [sp, #4]
 80a29f2:	bd08      	pop	{r3, pc}
 80a29f4:	080601b4 	.word	0x080601b4

080a29f8 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a29f8:	b508      	push	{r3, lr}
 80a29fa:	4b02      	ldr	r3, [pc, #8]	; (80a2a04 <HAL_SPI_Is_Enabled+0xc>)
 80a29fc:	681b      	ldr	r3, [r3, #0]
 80a29fe:	6a1b      	ldr	r3, [r3, #32]
 80a2a00:	9301      	str	r3, [sp, #4]
 80a2a02:	bd08      	pop	{r3, pc}
 80a2a04:	080601b4 	.word	0x080601b4

080a2a08 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a2a08:	b508      	push	{r3, lr}
 80a2a0a:	4b02      	ldr	r3, [pc, #8]	; (80a2a14 <HAL_RNG_GetRandomNumber+0xc>)
 80a2a0c:	681b      	ldr	r3, [r3, #0]
 80a2a0e:	685b      	ldr	r3, [r3, #4]
 80a2a10:	9301      	str	r3, [sp, #4]
 80a2a12:	bd08      	pop	{r3, pc}
 80a2a14:	0806019c 	.word	0x0806019c

080a2a18 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
 80a2a18:	b508      	push	{r3, lr}
 80a2a1a:	4b02      	ldr	r3, [pc, #8]	; (80a2a24 <HAL_Delay_Milliseconds+0xc>)
 80a2a1c:	681b      	ldr	r3, [r3, #0]
 80a2a1e:	689b      	ldr	r3, [r3, #8]
 80a2a20:	9301      	str	r3, [sp, #4]
 80a2a22:	bd08      	pop	{r3, pc}
 80a2a24:	0806019c 	.word	0x0806019c

080a2a28 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 80a2a28:	b508      	push	{r3, lr}
 80a2a2a:	4b02      	ldr	r3, [pc, #8]	; (80a2a34 <HAL_Delay_Microseconds+0xc>)
 80a2a2c:	681b      	ldr	r3, [r3, #0]
 80a2a2e:	68db      	ldr	r3, [r3, #12]
 80a2a30:	9301      	str	r3, [sp, #4]
 80a2a32:	bd08      	pop	{r3, pc}
 80a2a34:	0806019c 	.word	0x0806019c

080a2a38 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a2a38:	b508      	push	{r3, lr}
 80a2a3a:	4b02      	ldr	r3, [pc, #8]	; (80a2a44 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a2a3c:	681b      	ldr	r3, [r3, #0]
 80a2a3e:	695b      	ldr	r3, [r3, #20]
 80a2a40:	9301      	str	r3, [sp, #4]
 80a2a42:	bd08      	pop	{r3, pc}
 80a2a44:	0806019c 	.word	0x0806019c

080a2a48 <HAL_Core_Enter_Safe_Mode>:
DYNALIB_FN(18, hal_core, HAL_Bootloader_Get_Flag, uint16_t(BootloaderFlag))
DYNALIB_FN(19, hal_core, HAL_Bootloader_Lock, void(bool))
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
 80a2a48:	b508      	push	{r3, lr}
 80a2a4a:	4b02      	ldr	r3, [pc, #8]	; (80a2a54 <HAL_Core_Enter_Safe_Mode+0xc>)
 80a2a4c:	681b      	ldr	r3, [r3, #0]
 80a2a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2a50:	9301      	str	r3, [sp, #4]
 80a2a52:	bd08      	pop	{r3, pc}
 80a2a54:	080601b8 	.word	0x080601b8

080a2a58 <HAL_Feature_Set>:
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 80a2a58:	b508      	push	{r3, lr}
 80a2a5a:	4b02      	ldr	r3, [pc, #8]	; (80a2a64 <HAL_Feature_Set+0xc>)
 80a2a5c:	681b      	ldr	r3, [r3, #0]
 80a2a5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2a60:	9301      	str	r3, [sp, #4]
 80a2a62:	bd08      	pop	{r3, pc}
 80a2a64:	080601b8 	.word	0x080601b8

080a2a68 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 80a2a68:	b508      	push	{r3, lr}
 80a2a6a:	4b02      	ldr	r3, [pc, #8]	; (80a2a74 <HAL_Core_System_Reset_Ex+0xc>)
 80a2a6c:	681b      	ldr	r3, [r3, #0]
 80a2a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2a70:	9301      	str	r3, [sp, #4]
 80a2a72:	bd08      	pop	{r3, pc}
 80a2a74:	080601b8 	.word	0x080601b8

080a2a78 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a2a78:	b508      	push	{r3, lr}
 80a2a7a:	4b02      	ldr	r3, [pc, #8]	; (80a2a84 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a2a7c:	681b      	ldr	r3, [r3, #0]
 80a2a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2a80:	9301      	str	r3, [sp, #4]
 80a2a82:	bd08      	pop	{r3, pc}
 80a2a84:	080601b8 	.word	0x080601b8

080a2a88 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80a2a88:	b508      	push	{r3, lr}
 80a2a8a:	4b02      	ldr	r3, [pc, #8]	; (80a2a94 <os_thread_create+0xc>)
 80a2a8c:	681b      	ldr	r3, [r3, #0]
 80a2a8e:	685b      	ldr	r3, [r3, #4]
 80a2a90:	9301      	str	r3, [sp, #4]
 80a2a92:	bd08      	pop	{r3, pc}
 80a2a94:	080601d0 	.word	0x080601d0

080a2a98 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
 80a2a98:	b508      	push	{r3, lr}
 80a2a9a:	4b02      	ldr	r3, [pc, #8]	; (80a2aa4 <os_thread_is_current+0xc>)
 80a2a9c:	681b      	ldr	r3, [r3, #0]
 80a2a9e:	689b      	ldr	r3, [r3, #8]
 80a2aa0:	9301      	str	r3, [sp, #4]
 80a2aa2:	bd08      	pop	{r3, pc}
 80a2aa4:	080601d0 	.word	0x080601d0

080a2aa8 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
 80a2aa8:	b508      	push	{r3, lr}
 80a2aaa:	4b02      	ldr	r3, [pc, #8]	; (80a2ab4 <os_thread_join+0xc>)
 80a2aac:	681b      	ldr	r3, [r3, #0]
 80a2aae:	691b      	ldr	r3, [r3, #16]
 80a2ab0:	9301      	str	r3, [sp, #4]
 80a2ab2:	bd08      	pop	{r3, pc}
 80a2ab4:	080601d0 	.word	0x080601d0

080a2ab8 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
 80a2ab8:	b508      	push	{r3, lr}
 80a2aba:	4b02      	ldr	r3, [pc, #8]	; (80a2ac4 <os_thread_cleanup+0xc>)
 80a2abc:	681b      	ldr	r3, [r3, #0]
 80a2abe:	695b      	ldr	r3, [r3, #20]
 80a2ac0:	9301      	str	r3, [sp, #4]
 80a2ac2:	bd08      	pop	{r3, pc}
 80a2ac4:	080601d0 	.word	0x080601d0

080a2ac8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a2ac8:	b508      	push	{r3, lr}
 80a2aca:	4b02      	ldr	r3, [pc, #8]	; (80a2ad4 <os_mutex_create+0xc>)
 80a2acc:	681b      	ldr	r3, [r3, #0]
 80a2ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2ad0:	9301      	str	r3, [sp, #4]
 80a2ad2:	bd08      	pop	{r3, pc}
 80a2ad4:	080601d0 	.word	0x080601d0

080a2ad8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
 80a2ad8:	b508      	push	{r3, lr}
 80a2ada:	4b02      	ldr	r3, [pc, #8]	; (80a2ae4 <os_thread_exit+0xc>)
 80a2adc:	681b      	ldr	r3, [r3, #0]
 80a2ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2ae0:	9301      	str	r3, [sp, #4]
 80a2ae2:	bd08      	pop	{r3, pc}
 80a2ae4:	080601d0 	.word	0x080601d0

080a2ae8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a2ae8:	b508      	push	{r3, lr}
 80a2aea:	4b02      	ldr	r3, [pc, #8]	; (80a2af4 <HAL_USART_Init+0xc>)
 80a2aec:	681b      	ldr	r3, [r3, #0]
 80a2aee:	699b      	ldr	r3, [r3, #24]
 80a2af0:	9301      	str	r3, [sp, #4]
 80a2af2:	bd08      	pop	{r3, pc}
 80a2af4:	080601c4 	.word	0x080601c4

080a2af8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a2af8:	b508      	push	{r3, lr}
 80a2afa:	4b02      	ldr	r3, [pc, #8]	; (80a2b04 <HAL_USART_Write_Data+0xc>)
 80a2afc:	681b      	ldr	r3, [r3, #0]
 80a2afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2b00:	9301      	str	r3, [sp, #4]
 80a2b02:	bd08      	pop	{r3, pc}
 80a2b04:	080601c4 	.word	0x080601c4

080a2b08 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a2b08:	b508      	push	{r3, lr}
 80a2b0a:	4b02      	ldr	r3, [pc, #8]	; (80a2b14 <HAL_USART_Available_Data+0xc>)
 80a2b0c:	681b      	ldr	r3, [r3, #0]
 80a2b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a2b10:	9301      	str	r3, [sp, #4]
 80a2b12:	bd08      	pop	{r3, pc}
 80a2b14:	080601c4 	.word	0x080601c4

080a2b18 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a2b18:	b508      	push	{r3, lr}
 80a2b1a:	4b02      	ldr	r3, [pc, #8]	; (80a2b24 <HAL_USART_Read_Data+0xc>)
 80a2b1c:	681b      	ldr	r3, [r3, #0]
 80a2b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2b20:	9301      	str	r3, [sp, #4]
 80a2b22:	bd08      	pop	{r3, pc}
 80a2b24:	080601c4 	.word	0x080601c4

080a2b28 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a2b28:	b508      	push	{r3, lr}
 80a2b2a:	4b02      	ldr	r3, [pc, #8]	; (80a2b34 <HAL_USART_Peek_Data+0xc>)
 80a2b2c:	681b      	ldr	r3, [r3, #0]
 80a2b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2b30:	9301      	str	r3, [sp, #4]
 80a2b32:	bd08      	pop	{r3, pc}
 80a2b34:	080601c4 	.word	0x080601c4

080a2b38 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a2b38:	b508      	push	{r3, lr}
 80a2b3a:	4b02      	ldr	r3, [pc, #8]	; (80a2b44 <HAL_USART_Flush_Data+0xc>)
 80a2b3c:	681b      	ldr	r3, [r3, #0]
 80a2b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2b40:	9301      	str	r3, [sp, #4]
 80a2b42:	bd08      	pop	{r3, pc}
 80a2b44:	080601c4 	.word	0x080601c4

080a2b48 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a2b48:	b508      	push	{r3, lr}
 80a2b4a:	4b02      	ldr	r3, [pc, #8]	; (80a2b54 <HAL_USART_Is_Enabled+0xc>)
 80a2b4c:	681b      	ldr	r3, [r3, #0]
 80a2b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a2b50:	9301      	str	r3, [sp, #4]
 80a2b52:	bd08      	pop	{r3, pc}
 80a2b54:	080601c4 	.word	0x080601c4

080a2b58 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a2b58:	b508      	push	{r3, lr}
 80a2b5a:	4b02      	ldr	r3, [pc, #8]	; (80a2b64 <HAL_USART_Available_Data_For_Write+0xc>)
 80a2b5c:	681b      	ldr	r3, [r3, #0]
 80a2b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a2b60:	9301      	str	r3, [sp, #4]
 80a2b62:	bd08      	pop	{r3, pc}
 80a2b64:	080601c4 	.word	0x080601c4

080a2b68 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80a2b68:	b508      	push	{r3, lr}
 80a2b6a:	4b02      	ldr	r3, [pc, #8]	; (80a2b74 <HAL_I2C_Begin+0xc>)
 80a2b6c:	681b      	ldr	r3, [r3, #0]
 80a2b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2b70:	9301      	str	r3, [sp, #4]
 80a2b72:	bd08      	pop	{r3, pc}
 80a2b74:	080601ac 	.word	0x080601ac

080a2b78 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80a2b78:	b508      	push	{r3, lr}
 80a2b7a:	4b02      	ldr	r3, [pc, #8]	; (80a2b84 <HAL_I2C_Request_Data+0xc>)
 80a2b7c:	681b      	ldr	r3, [r3, #0]
 80a2b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2b80:	9301      	str	r3, [sp, #4]
 80a2b82:	bd08      	pop	{r3, pc}
 80a2b84:	080601ac 	.word	0x080601ac

080a2b88 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80a2b88:	b508      	push	{r3, lr}
 80a2b8a:	4b02      	ldr	r3, [pc, #8]	; (80a2b94 <HAL_I2C_Begin_Transmission+0xc>)
 80a2b8c:	681b      	ldr	r3, [r3, #0]
 80a2b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80a2b90:	9301      	str	r3, [sp, #4]
 80a2b92:	bd08      	pop	{r3, pc}
 80a2b94:	080601ac 	.word	0x080601ac

080a2b98 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80a2b98:	b508      	push	{r3, lr}
 80a2b9a:	4b02      	ldr	r3, [pc, #8]	; (80a2ba4 <HAL_I2C_End_Transmission+0xc>)
 80a2b9c:	681b      	ldr	r3, [r3, #0]
 80a2b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80a2ba0:	9301      	str	r3, [sp, #4]
 80a2ba2:	bd08      	pop	{r3, pc}
 80a2ba4:	080601ac 	.word	0x080601ac

080a2ba8 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a2ba8:	b508      	push	{r3, lr}
 80a2baa:	4b02      	ldr	r3, [pc, #8]	; (80a2bb4 <HAL_I2C_Write_Data+0xc>)
 80a2bac:	681b      	ldr	r3, [r3, #0]
 80a2bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a2bb0:	9301      	str	r3, [sp, #4]
 80a2bb2:	bd08      	pop	{r3, pc}
 80a2bb4:	080601ac 	.word	0x080601ac

080a2bb8 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a2bb8:	b508      	push	{r3, lr}
 80a2bba:	4b02      	ldr	r3, [pc, #8]	; (80a2bc4 <HAL_I2C_Available_Data+0xc>)
 80a2bbc:	681b      	ldr	r3, [r3, #0]
 80a2bbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a2bc0:	9301      	str	r3, [sp, #4]
 80a2bc2:	bd08      	pop	{r3, pc}
 80a2bc4:	080601ac 	.word	0x080601ac

080a2bc8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a2bc8:	b508      	push	{r3, lr}
 80a2bca:	4b02      	ldr	r3, [pc, #8]	; (80a2bd4 <HAL_I2C_Read_Data+0xc>)
 80a2bcc:	681b      	ldr	r3, [r3, #0]
 80a2bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a2bd0:	9301      	str	r3, [sp, #4]
 80a2bd2:	bd08      	pop	{r3, pc}
 80a2bd4:	080601ac 	.word	0x080601ac

080a2bd8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a2bd8:	b508      	push	{r3, lr}
 80a2bda:	4b02      	ldr	r3, [pc, #8]	; (80a2be4 <HAL_I2C_Peek_Data+0xc>)
 80a2bdc:	681b      	ldr	r3, [r3, #0]
 80a2bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a2be0:	9301      	str	r3, [sp, #4]
 80a2be2:	bd08      	pop	{r3, pc}
 80a2be4:	080601ac 	.word	0x080601ac

080a2be8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a2be8:	b508      	push	{r3, lr}
 80a2bea:	4b02      	ldr	r3, [pc, #8]	; (80a2bf4 <HAL_I2C_Flush_Data+0xc>)
 80a2bec:	681b      	ldr	r3, [r3, #0]
 80a2bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a2bf0:	9301      	str	r3, [sp, #4]
 80a2bf2:	bd08      	pop	{r3, pc}
 80a2bf4:	080601ac 	.word	0x080601ac

080a2bf8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a2bf8:	b508      	push	{r3, lr}
 80a2bfa:	4b02      	ldr	r3, [pc, #8]	; (80a2c04 <HAL_I2C_Is_Enabled+0xc>)
 80a2bfc:	681b      	ldr	r3, [r3, #0]
 80a2bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a2c00:	9301      	str	r3, [sp, #4]
 80a2c02:	bd08      	pop	{r3, pc}
 80a2c04:	080601ac 	.word	0x080601ac

080a2c08 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a2c08:	b508      	push	{r3, lr}
 80a2c0a:	4b03      	ldr	r3, [pc, #12]	; (80a2c18 <HAL_I2C_Init+0x10>)
 80a2c0c:	681b      	ldr	r3, [r3, #0]
 80a2c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a2c12:	9301      	str	r3, [sp, #4]
 80a2c14:	bd08      	pop	{r3, pc}
 80a2c16:	0000      	.short	0x0000
 80a2c18:	080601ac 	.word	0x080601ac

080a2c1c <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80a2c1c:	b508      	push	{r3, lr}
 80a2c1e:	4b02      	ldr	r3, [pc, #8]	; (80a2c28 <socket_active_status+0xc>)
 80a2c20:	681b      	ldr	r3, [r3, #0]
 80a2c22:	681b      	ldr	r3, [r3, #0]
 80a2c24:	9301      	str	r3, [sp, #4]
 80a2c26:	bd08      	pop	{r3, pc}
 80a2c28:	080601bc 	.word	0x080601bc

080a2c2c <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80a2c2c:	b508      	push	{r3, lr}
 80a2c2e:	4b02      	ldr	r3, [pc, #8]	; (80a2c38 <socket_handle_valid+0xc>)
 80a2c30:	681b      	ldr	r3, [r3, #0]
 80a2c32:	685b      	ldr	r3, [r3, #4]
 80a2c34:	9301      	str	r3, [sp, #4]
 80a2c36:	bd08      	pop	{r3, pc}
 80a2c38:	080601bc 	.word	0x080601bc

080a2c3c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 80a2c3c:	b508      	push	{r3, lr}
 80a2c3e:	4b02      	ldr	r3, [pc, #8]	; (80a2c48 <socket_create+0xc>)
 80a2c40:	681b      	ldr	r3, [r3, #0]
 80a2c42:	689b      	ldr	r3, [r3, #8]
 80a2c44:	9301      	str	r3, [sp, #4]
 80a2c46:	bd08      	pop	{r3, pc}
 80a2c48:	080601bc 	.word	0x080601bc

080a2c4c <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 80a2c4c:	b508      	push	{r3, lr}
 80a2c4e:	4b02      	ldr	r3, [pc, #8]	; (80a2c58 <socket_connect+0xc>)
 80a2c50:	681b      	ldr	r3, [r3, #0]
 80a2c52:	68db      	ldr	r3, [r3, #12]
 80a2c54:	9301      	str	r3, [sp, #4]
 80a2c56:	bd08      	pop	{r3, pc}
 80a2c58:	080601bc 	.word	0x080601bc

080a2c5c <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 80a2c5c:	b508      	push	{r3, lr}
 80a2c5e:	4b02      	ldr	r3, [pc, #8]	; (80a2c68 <socket_receive+0xc>)
 80a2c60:	681b      	ldr	r3, [r3, #0]
 80a2c62:	691b      	ldr	r3, [r3, #16]
 80a2c64:	9301      	str	r3, [sp, #4]
 80a2c66:	bd08      	pop	{r3, pc}
 80a2c68:	080601bc 	.word	0x080601bc

080a2c6c <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 80a2c6c:	b508      	push	{r3, lr}
 80a2c6e:	4b02      	ldr	r3, [pc, #8]	; (80a2c78 <socket_close+0xc>)
 80a2c70:	681b      	ldr	r3, [r3, #0]
 80a2c72:	6a1b      	ldr	r3, [r3, #32]
 80a2c74:	9301      	str	r3, [sp, #4]
 80a2c76:	bd08      	pop	{r3, pc}
 80a2c78:	080601bc 	.word	0x080601bc

080a2c7c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 80a2c7c:	b508      	push	{r3, lr}
 80a2c7e:	4b02      	ldr	r3, [pc, #8]	; (80a2c88 <socket_handle_invalid+0xc>)
 80a2c80:	681b      	ldr	r3, [r3, #0]
 80a2c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2c84:	9301      	str	r3, [sp, #4]
 80a2c86:	bd08      	pop	{r3, pc}
 80a2c88:	080601bc 	.word	0x080601bc

080a2c8c <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 80a2c8c:	b508      	push	{r3, lr}
 80a2c8e:	4b02      	ldr	r3, [pc, #8]	; (80a2c98 <socket_send_ex+0xc>)
 80a2c90:	681b      	ldr	r3, [r3, #0]
 80a2c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2c94:	9301      	str	r3, [sp, #4]
 80a2c96:	bd08      	pop	{r3, pc}
 80a2c98:	080601bc 	.word	0x080601bc

080a2c9c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a2c9c:	b508      	push	{r3, lr}
 80a2c9e:	4b02      	ldr	r3, [pc, #8]	; (80a2ca8 <HAL_USB_USART_Init+0xc>)
 80a2ca0:	681b      	ldr	r3, [r3, #0]
 80a2ca2:	681b      	ldr	r3, [r3, #0]
 80a2ca4:	9301      	str	r3, [sp, #4]
 80a2ca6:	bd08      	pop	{r3, pc}
 80a2ca8:	080601d8 	.word	0x080601d8

080a2cac <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a2cac:	b508      	push	{r3, lr}
 80a2cae:	4b02      	ldr	r3, [pc, #8]	; (80a2cb8 <HAL_USB_USART_Available_Data+0xc>)
 80a2cb0:	681b      	ldr	r3, [r3, #0]
 80a2cb2:	691b      	ldr	r3, [r3, #16]
 80a2cb4:	9301      	str	r3, [sp, #4]
 80a2cb6:	bd08      	pop	{r3, pc}
 80a2cb8:	080601d8 	.word	0x080601d8

080a2cbc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a2cbc:	b508      	push	{r3, lr}
 80a2cbe:	4b02      	ldr	r3, [pc, #8]	; (80a2cc8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a2cc0:	681b      	ldr	r3, [r3, #0]
 80a2cc2:	695b      	ldr	r3, [r3, #20]
 80a2cc4:	9301      	str	r3, [sp, #4]
 80a2cc6:	bd08      	pop	{r3, pc}
 80a2cc8:	080601d8 	.word	0x080601d8

080a2ccc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2ccc:	b508      	push	{r3, lr}
 80a2cce:	4b02      	ldr	r3, [pc, #8]	; (80a2cd8 <HAL_USB_USART_Receive_Data+0xc>)
 80a2cd0:	681b      	ldr	r3, [r3, #0]
 80a2cd2:	699b      	ldr	r3, [r3, #24]
 80a2cd4:	9301      	str	r3, [sp, #4]
 80a2cd6:	bd08      	pop	{r3, pc}
 80a2cd8:	080601d8 	.word	0x080601d8

080a2cdc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a2cdc:	b508      	push	{r3, lr}
 80a2cde:	4b02      	ldr	r3, [pc, #8]	; (80a2ce8 <HAL_USB_USART_Send_Data+0xc>)
 80a2ce0:	681b      	ldr	r3, [r3, #0]
 80a2ce2:	69db      	ldr	r3, [r3, #28]
 80a2ce4:	9301      	str	r3, [sp, #4]
 80a2ce6:	bd08      	pop	{r3, pc}
 80a2ce8:	080601d8 	.word	0x080601d8

080a2cec <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a2cec:	b508      	push	{r3, lr}
 80a2cee:	4b02      	ldr	r3, [pc, #8]	; (80a2cf8 <HAL_USB_USART_Flush_Data+0xc>)
 80a2cf0:	681b      	ldr	r3, [r3, #0]
 80a2cf2:	6a1b      	ldr	r3, [r3, #32]
 80a2cf4:	9301      	str	r3, [sp, #4]
 80a2cf6:	bd08      	pop	{r3, pc}
 80a2cf8:	080601d8 	.word	0x080601d8

080a2cfc <HAL_NET_SetNetWatchDog>:

DYNALIB_FN(14, hal_wlan, wlan_set_error_count, void(uint32_t))
DYNALIB_FN(15, hal_wlan, wlan_fetch_ipconfig, int(WLanConfig*))
DYNALIB_FN(16, hal_wlan, wlan_setup, void(void))

DYNALIB_FN(17, hal_wlan, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80a2cfc:	b508      	push	{r3, lr}
 80a2cfe:	4b02      	ldr	r3, [pc, #8]	; (80a2d08 <HAL_NET_SetNetWatchDog+0xc>)
 80a2d00:	681b      	ldr	r3, [r3, #0]
 80a2d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80a2d04:	9301      	str	r3, [sp, #4]
 80a2d06:	bd08      	pop	{r3, pc}
 80a2d08:	080601c0 	.word	0x080601c0

080a2d0c <inet_gethostbyname>:
DYNALIB_FN(18, hal_wlan, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80a2d0c:	b508      	push	{r3, lr}
 80a2d0e:	4b02      	ldr	r3, [pc, #8]	; (80a2d18 <inet_gethostbyname+0xc>)
 80a2d10:	681b      	ldr	r3, [r3, #0]
 80a2d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80a2d14:	9301      	str	r3, [sp, #4]
 80a2d16:	bd08      	pop	{r3, pc}
 80a2d18:	080601c0 	.word	0x080601c0

080a2d1c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 80a2d1c:	b508      	push	{r3, lr}
 80a2d1e:	4b02      	ldr	r3, [pc, #8]	; (80a2d28 <log_message+0xc>)
 80a2d20:	681b      	ldr	r3, [r3, #0]
 80a2d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80a2d24:	9301      	str	r3, [sp, #4]
 80a2d26:	bd08      	pop	{r3, pc}
 80a2d28:	080201a8 	.word	0x080201a8

080a2d2c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a2d2c:	b508      	push	{r3, lr}
 80a2d2e:	4b02      	ldr	r3, [pc, #8]	; (80a2d38 <set_system_mode+0xc>)
 80a2d30:	681b      	ldr	r3, [r3, #0]
 80a2d32:	685b      	ldr	r3, [r3, #4]
 80a2d34:	9301      	str	r3, [sp, #4]
 80a2d36:	bd08      	pop	{r3, pc}
 80a2d38:	080601a4 	.word	0x080601a4

080a2d3c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a2d3c:	b508      	push	{r3, lr}
 80a2d3e:	4b02      	ldr	r3, [pc, #8]	; (80a2d48 <system_delay_ms+0xc>)
 80a2d40:	681b      	ldr	r3, [r3, #0]
 80a2d42:	695b      	ldr	r3, [r3, #20]
 80a2d44:	9301      	str	r3, [sp, #4]
 80a2d46:	bd08      	pop	{r3, pc}
 80a2d48:	080601a4 	.word	0x080601a4

080a2d4c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a2d4c:	b508      	push	{r3, lr}
 80a2d4e:	4b02      	ldr	r3, [pc, #8]	; (80a2d58 <application_thread_current+0xc>)
 80a2d50:	681b      	ldr	r3, [r3, #0]
 80a2d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a2d54:	9301      	str	r3, [sp, #4]
 80a2d56:	bd08      	pop	{r3, pc}
 80a2d58:	080601a4 	.word	0x080601a4

080a2d5c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a2d5c:	b508      	push	{r3, lr}
 80a2d5e:	4b02      	ldr	r3, [pc, #8]	; (80a2d68 <application_thread_invoke+0xc>)
 80a2d60:	681b      	ldr	r3, [r3, #0]
 80a2d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a2d64:	9301      	str	r3, [sp, #4]
 80a2d66:	bd08      	pop	{r3, pc}
 80a2d68:	080601a4 	.word	0x080601a4

080a2d6c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a2d6c:	b508      	push	{r3, lr}
 80a2d6e:	4b03      	ldr	r3, [pc, #12]	; (80a2d7c <system_ctrl_set_app_request_handler+0x10>)
 80a2d70:	681b      	ldr	r3, [r3, #0]
 80a2d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a2d76:	9301      	str	r3, [sp, #4]
 80a2d78:	bd08      	pop	{r3, pc}
 80a2d7a:	0000      	.short	0x0000
 80a2d7c:	080601a4 	.word	0x080601a4

080a2d80 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a2d80:	b508      	push	{r3, lr}
 80a2d82:	4b03      	ldr	r3, [pc, #12]	; (80a2d90 <system_ctrl_set_result+0x10>)
 80a2d84:	681b      	ldr	r3, [r3, #0]
 80a2d86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a2d8a:	9301      	str	r3, [sp, #4]
 80a2d8c:	bd08      	pop	{r3, pc}
 80a2d8e:	0000      	.short	0x0000
 80a2d90:	080601a4 	.word	0x080601a4

080a2d94 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2d94:	b508      	push	{r3, lr}
 80a2d96:	4b02      	ldr	r3, [pc, #8]	; (80a2da0 <network_connect+0xc>)
 80a2d98:	681b      	ldr	r3, [r3, #0]
 80a2d9a:	685b      	ldr	r3, [r3, #4]
 80a2d9c:	9301      	str	r3, [sp, #4]
 80a2d9e:	bd08      	pop	{r3, pc}
 80a2da0:	080601c8 	.word	0x080601c8

080a2da4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a2da4:	b508      	push	{r3, lr}
 80a2da6:	4b02      	ldr	r3, [pc, #8]	; (80a2db0 <network_connecting+0xc>)
 80a2da8:	681b      	ldr	r3, [r3, #0]
 80a2daa:	689b      	ldr	r3, [r3, #8]
 80a2dac:	9301      	str	r3, [sp, #4]
 80a2dae:	bd08      	pop	{r3, pc}
 80a2db0:	080601c8 	.word	0x080601c8

080a2db4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80a2db4:	b508      	push	{r3, lr}
 80a2db6:	4b02      	ldr	r3, [pc, #8]	; (80a2dc0 <network_disconnect+0xc>)
 80a2db8:	681b      	ldr	r3, [r3, #0]
 80a2dba:	68db      	ldr	r3, [r3, #12]
 80a2dbc:	9301      	str	r3, [sp, #4]
 80a2dbe:	bd08      	pop	{r3, pc}
 80a2dc0:	080601c8 	.word	0x080601c8

080a2dc4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a2dc4:	b508      	push	{r3, lr}
 80a2dc6:	4b02      	ldr	r3, [pc, #8]	; (80a2dd0 <network_ready+0xc>)
 80a2dc8:	681b      	ldr	r3, [r3, #0]
 80a2dca:	691b      	ldr	r3, [r3, #16]
 80a2dcc:	9301      	str	r3, [sp, #4]
 80a2dce:	bd08      	pop	{r3, pc}
 80a2dd0:	080601c8 	.word	0x080601c8

080a2dd4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2dd4:	b508      	push	{r3, lr}
 80a2dd6:	4b02      	ldr	r3, [pc, #8]	; (80a2de0 <network_on+0xc>)
 80a2dd8:	681b      	ldr	r3, [r3, #0]
 80a2dda:	695b      	ldr	r3, [r3, #20]
 80a2ddc:	9301      	str	r3, [sp, #4]
 80a2dde:	bd08      	pop	{r3, pc}
 80a2de0:	080601c8 	.word	0x080601c8

080a2de4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80a2de4:	b508      	push	{r3, lr}
 80a2de6:	4b02      	ldr	r3, [pc, #8]	; (80a2df0 <network_off+0xc>)
 80a2de8:	681b      	ldr	r3, [r3, #0]
 80a2dea:	699b      	ldr	r3, [r3, #24]
 80a2dec:	9301      	str	r3, [sp, #4]
 80a2dee:	bd08      	pop	{r3, pc}
 80a2df0:	080601c8 	.word	0x080601c8

080a2df4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80a2df4:	b508      	push	{r3, lr}
 80a2df6:	4b02      	ldr	r3, [pc, #8]	; (80a2e00 <network_listen+0xc>)
 80a2df8:	681b      	ldr	r3, [r3, #0]
 80a2dfa:	69db      	ldr	r3, [r3, #28]
 80a2dfc:	9301      	str	r3, [sp, #4]
 80a2dfe:	bd08      	pop	{r3, pc}
 80a2e00:	080601c8 	.word	0x080601c8

080a2e04 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80a2e04:	b508      	push	{r3, lr}
 80a2e06:	4b02      	ldr	r3, [pc, #8]	; (80a2e10 <network_listening+0xc>)
 80a2e08:	681b      	ldr	r3, [r3, #0]
 80a2e0a:	6a1b      	ldr	r3, [r3, #32]
 80a2e0c:	9301      	str	r3, [sp, #4]
 80a2e0e:	bd08      	pop	{r3, pc}
 80a2e10:	080601c8 	.word	0x080601c8

080a2e14 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80a2e14:	b508      	push	{r3, lr}
 80a2e16:	4b02      	ldr	r3, [pc, #8]	; (80a2e20 <network_set_listen_timeout+0xc>)
 80a2e18:	681b      	ldr	r3, [r3, #0]
 80a2e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2e1c:	9301      	str	r3, [sp, #4]
 80a2e1e:	bd08      	pop	{r3, pc}
 80a2e20:	080601c8 	.word	0x080601c8

080a2e24 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80a2e24:	b508      	push	{r3, lr}
 80a2e26:	4b02      	ldr	r3, [pc, #8]	; (80a2e30 <network_get_listen_timeout+0xc>)
 80a2e28:	681b      	ldr	r3, [r3, #0]
 80a2e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a2e2c:	9301      	str	r3, [sp, #4]
 80a2e2e:	bd08      	pop	{r3, pc}
 80a2e30:	080601c8 	.word	0x080601c8

080a2e34 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a2e34:	b508      	push	{r3, lr}
 80a2e36:	4b02      	ldr	r3, [pc, #8]	; (80a2e40 <spark_cloud_flag_connected+0xc>)
 80a2e38:	681b      	ldr	r3, [r3, #0]
 80a2e3a:	695b      	ldr	r3, [r3, #20]
 80a2e3c:	9301      	str	r3, [sp, #4]
 80a2e3e:	bd08      	pop	{r3, pc}
 80a2e40:	080601cc 	.word	0x080601cc

080a2e44 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a2e44:	b508      	push	{r3, lr}
 80a2e46:	4b02      	ldr	r3, [pc, #8]	; (80a2e50 <spark_send_event+0xc>)
 80a2e48:	681b      	ldr	r3, [r3, #0]
 80a2e4a:	6a1b      	ldr	r3, [r3, #32]
 80a2e4c:	9301      	str	r3, [sp, #4]
 80a2e4e:	bd08      	pop	{r3, pc}
 80a2e50:	080601cc 	.word	0x080601cc

080a2e54 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a2e54:	b508      	push	{r3, lr}
 80a2e56:	4b02      	ldr	r3, [pc, #8]	; (80a2e60 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a2e58:	681b      	ldr	r3, [r3, #0]
 80a2e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2e5c:	9301      	str	r3, [sp, #4]
 80a2e5e:	bd08      	pop	{r3, pc}
 80a2e60:	080601cc 	.word	0x080601cc

080a2e64 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a2e64:	b508      	push	{r3, lr}
 80a2e66:	4b02      	ldr	r3, [pc, #8]	; (80a2e70 <malloc+0xc>)
 80a2e68:	681b      	ldr	r3, [r3, #0]
 80a2e6a:	681b      	ldr	r3, [r3, #0]
 80a2e6c:	9301      	str	r3, [sp, #4]
 80a2e6e:	bd08      	pop	{r3, pc}
 80a2e70:	080601a0 	.word	0x080601a0

080a2e74 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a2e74:	b508      	push	{r3, lr}
 80a2e76:	4b02      	ldr	r3, [pc, #8]	; (80a2e80 <free+0xc>)
 80a2e78:	681b      	ldr	r3, [r3, #0]
 80a2e7a:	685b      	ldr	r3, [r3, #4]
 80a2e7c:	9301      	str	r3, [sp, #4]
 80a2e7e:	bd08      	pop	{r3, pc}
 80a2e80:	080601a0 	.word	0x080601a0

080a2e84 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a2e84:	b508      	push	{r3, lr}
 80a2e86:	4b02      	ldr	r3, [pc, #8]	; (80a2e90 <realloc+0xc>)
 80a2e88:	681b      	ldr	r3, [r3, #0]
 80a2e8a:	689b      	ldr	r3, [r3, #8]
 80a2e8c:	9301      	str	r3, [sp, #4]
 80a2e8e:	bd08      	pop	{r3, pc}
 80a2e90:	080601a0 	.word	0x080601a0

080a2e94 <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80a2e94:	b508      	push	{r3, lr}
 80a2e96:	4b02      	ldr	r3, [pc, #8]	; (80a2ea0 <snprintf+0xc>)
 80a2e98:	681b      	ldr	r3, [r3, #0]
 80a2e9a:	69db      	ldr	r3, [r3, #28]
 80a2e9c:	9301      	str	r3, [sp, #4]
 80a2e9e:	bd08      	pop	{r3, pc}
 80a2ea0:	080601a0 	.word	0x080601a0

080a2ea4 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 80a2ea4:	b508      	push	{r3, lr}
 80a2ea6:	4b02      	ldr	r3, [pc, #8]	; (80a2eb0 <vsnprintf+0xc>)
 80a2ea8:	681b      	ldr	r3, [r3, #0]
 80a2eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a2eac:	9301      	str	r3, [sp, #4]
 80a2eae:	bd08      	pop	{r3, pc}
 80a2eb0:	080601a0 	.word	0x080601a0

080a2eb4 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a2eb4:	b508      	push	{r3, lr}
 80a2eb6:	4b02      	ldr	r3, [pc, #8]	; (80a2ec0 <abort+0xc>)
 80a2eb8:	681b      	ldr	r3, [r3, #0]
 80a2eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a2ebc:	9301      	str	r3, [sp, #4]
 80a2ebe:	bd08      	pop	{r3, pc}
 80a2ec0:	080601a0 	.word	0x080601a0

080a2ec4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a2ec4:	b508      	push	{r3, lr}
 80a2ec6:	4b02      	ldr	r3, [pc, #8]	; (80a2ed0 <_malloc_r+0xc>)
 80a2ec8:	681b      	ldr	r3, [r3, #0]
 80a2eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a2ecc:	9301      	str	r3, [sp, #4]
 80a2ece:	bd08      	pop	{r3, pc}
 80a2ed0:	080601a0 	.word	0x080601a0

080a2ed4 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
 80a2ed4:	b508      	push	{r3, lr}
 80a2ed6:	4b02      	ldr	r3, [pc, #8]	; (80a2ee0 <__errno+0xc>)
 80a2ed8:	681b      	ldr	r3, [r3, #0]
 80a2eda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a2edc:	9301      	str	r3, [sp, #4]
 80a2ede:	bd08      	pop	{r3, pc}
 80a2ee0:	080601a0 	.word	0x080601a0

080a2ee4 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a2ee4:	4770      	bx	lr

080a2ee6 <_ZN8SPIClassD0Ev>:
 80a2ee6:	b510      	push	{r4, lr}
 80a2ee8:	4604      	mov	r4, r0
 80a2eea:	2110      	movs	r1, #16
 80a2eec:	f001 fd14 	bl	80a4918 <_ZdlPvj>
 80a2ef0:	4620      	mov	r0, r4
 80a2ef2:	bd10      	pop	{r4, pc}

080a2ef4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a2ef4:	b570      	push	{r4, r5, r6, lr}
 80a2ef6:	4604      	mov	r4, r0
 80a2ef8:	460e      	mov	r6, r1
 80a2efa:	4b07      	ldr	r3, [pc, #28]	; (80a2f18 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a2efc:	2500      	movs	r5, #0
 80a2efe:	6003      	str	r3, [r0, #0]
 80a2f00:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a2f04:	f7ff fde0 	bl	80a2ac8 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a2f08:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a2f0a:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a2f0c:	f7ff fd6c 	bl	80a29e8 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a2f10:	60a5      	str	r5, [r4, #8]
}
 80a2f12:	4620      	mov	r0, r4
 80a2f14:	bd70      	pop	{r4, r5, r6, pc}
 80a2f16:	bf00      	nop
 80a2f18:	080a66ec 	.word	0x080a66ec

080a2f1c <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a2f1c:	7900      	ldrb	r0, [r0, #4]
 80a2f1e:	f7ff bd6b 	b.w	80a29f8 <HAL_SPI_Is_Enabled>

080a2f22 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 80a2f22:	4601      	mov	r1, r0
 80a2f24:	2200      	movs	r2, #0
 80a2f26:	208c      	movs	r0, #140	; 0x8c
 80a2f28:	f7ff bd9e 	b.w	80a2a68 <HAL_Core_System_Reset_Ex>

080a2f2c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 80a2f2c:	2000      	movs	r0, #0
 80a2f2e:	f7ff bff8 	b.w	80a2f22 <_ZN11SystemClass5resetEm>
	...

080a2f34 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a2f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a2f38:	4b03      	ldr	r3, [pc, #12]	; (80a2f48 <_GLOBAL__sub_I_System+0x14>)
 80a2f3a:	2000      	movs	r0, #0
 80a2f3c:	7018      	strb	r0, [r3, #0]
 80a2f3e:	8058      	strh	r0, [r3, #2]
 80a2f40:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a2f42:	f7ff bef3 	b.w	80a2d2c <set_system_mode>
 80a2f46:	bf00      	nop
 80a2f48:	20000326 	.word	0x20000326

080a2f4c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a2f4c:	b510      	push	{r4, lr}
 80a2f4e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a2f50:	f003 f9a7 	bl	80a62a2 <strlen>
 80a2f54:	3801      	subs	r0, #1
 80a2f56:	1823      	adds	r3, r4, r0
 80a2f58:	4620      	mov	r0, r4
	while(i<j){
 80a2f5a:	4298      	cmp	r0, r3
 80a2f5c:	d206      	bcs.n	80a2f6c <_Z11str_reversePc+0x20>
		c = *i;
 80a2f5e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a2f60:	7819      	ldrb	r1, [r3, #0]
 80a2f62:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a2f66:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a2f6a:	e7f6      	b.n	80a2f5a <_Z11str_reversePc+0xe>
 80a2f6c:	bd10      	pop	{r4, pc}

080a2f6e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a2f6e:	b570      	push	{r4, r5, r6, lr}
 80a2f70:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a2f72:	1e91      	subs	r1, r2, #2
 80a2f74:	2922      	cmp	r1, #34	; 0x22
 80a2f76:	d820      	bhi.n	80a2fba <ultoa+0x4c>
 80a2f78:	4625      	mov	r5, r4
 80a2f7a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2f7c:	b910      	cbnz	r0, 80a2f84 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2f7e:	4423      	add	r3, r4
            *ptr++ = '0';
 80a2f80:	2230      	movs	r2, #48	; 0x30
 80a2f82:	e00e      	b.n	80a2fa2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a2f84:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a2f88:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a2f8c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a2f8e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a2f90:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a2f94:	bf94      	ite	ls
 80a2f96:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a2f98:	3157      	addhi	r1, #87	; 0x57
 80a2f9a:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a2f9e:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a2fa0:	e7eb      	b.n	80a2f7a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2fa2:	4299      	cmp	r1, r3
 80a2fa4:	d202      	bcs.n	80a2fac <ultoa+0x3e>
            *ptr++ = '0';
 80a2fa6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a2faa:	e7fa      	b.n	80a2fa2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a2fac:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a2fae:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a2fb0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a2fb2:	f7ff ffcb 	bl	80a2f4c <_Z11str_reversePc>
	return buffer;
 80a2fb6:	4620      	mov	r0, r4
 80a2fb8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a2fba:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a2fbc:	bd70      	pop	{r4, r5, r6, pc}

080a2fbe <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2fbe:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 80a2fc0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 80a2fc2:	460c      	mov	r4, r1
 80a2fc4:	4615      	mov	r5, r2
	if(a<0){
 80a2fc6:	da0b      	bge.n	80a2fe0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a2fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a2fcc:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 80a2fd0:	bf14      	ite	ne
 80a2fd2:	4258      	negne	r0, r3
 80a2fd4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 80a2fd6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 80a2fd8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 80a2fda:	462a      	mov	r2, r5
 80a2fdc:	4419      	add	r1, r3
 80a2fde:	e000      	b.n	80a2fe2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 80a2fe0:	2301      	movs	r3, #1
 80a2fe2:	f7ff ffc4 	bl	80a2f6e <ultoa>
	}
	return buffer;
}
 80a2fe6:	4620      	mov	r0, r4
 80a2fe8:	bd38      	pop	{r3, r4, r5, pc}

080a2fea <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2fea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a2fec:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2fee:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 80a2ff0:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a2ff4:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a2ff6:	2201      	movs	r2, #1
 80a2ff8:	f247 5330 	movw	r3, #30000	; 0x7530
 80a2ffc:	4621      	mov	r1, r4
 80a2ffe:	47a8      	blx	r5
}
 80a3000:	b003      	add	sp, #12
 80a3002:	bd30      	pop	{r4, r5, pc}

080a3004 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 80a3004:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3006:	6803      	ldr	r3, [r0, #0]
 80a3008:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80a300a:	f247 5330 	movw	r3, #30000	; 0x7530
 80a300e:	46a4      	mov	ip, r4
}
 80a3010:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 80a3012:	4760      	bx	ip

080a3014 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a3014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a3016:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 80a3018:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 80a301a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 80a301e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80a3020:	4621      	mov	r1, r4
 80a3022:	4613      	mov	r3, r2
 80a3024:	2201      	movs	r2, #1
 80a3026:	47a8      	blx	r5
}
 80a3028:	b003      	add	sp, #12
 80a302a:	bd30      	pop	{r4, r5, pc}

080a302c <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 80a302c:	4770      	bx	lr

080a302e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a302e:	4770      	bx	lr

080a3030 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 80a3030:	2000      	movs	r0, #0
 80a3032:	4770      	bx	lr

080a3034 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 80a3034:	b510      	push	{r4, lr}
 80a3036:	4604      	mov	r4, r0
 80a3038:	2114      	movs	r1, #20
 80a303a:	f001 fc6d 	bl	80a4918 <_ZdlPvj>
 80a303e:	4620      	mov	r0, r4
 80a3040:	bd10      	pop	{r4, pc}

080a3042 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a3042:	f7fd b830 	b.w	80a00a6 <_ZdlPv>

080a3046 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 80a3046:	b510      	push	{r4, lr}
 80a3048:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 80a304a:	6803      	ldr	r3, [r0, #0]
 80a304c:	689b      	ldr	r3, [r3, #8]
 80a304e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a3050:	68a3      	ldr	r3, [r4, #8]
 80a3052:	3b01      	subs	r3, #1
 80a3054:	60a3      	str	r3, [r4, #8]
 80a3056:	b92b      	cbnz	r3, 80a3064 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29+0x1e>
            _M_destroy();
 80a3058:	6823      	ldr	r3, [r4, #0]
 80a305a:	4620      	mov	r0, r4
        }
    }
 80a305c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 80a3060:	68db      	ldr	r3, [r3, #12]
 80a3062:	4718      	bx	r3
 80a3064:	bd10      	pop	{r4, pc}
	...

080a3068 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 80a3068:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a306a:	4604      	mov	r4, r0
 80a306c:	4606      	mov	r6, r0
 80a306e:	694d      	ldr	r5, [r1, #20]
 80a3070:	4b04      	ldr	r3, [pc, #16]	; (80a3084 <_ZN9TCPClient8remoteIPEv+0x1c>)
 80a3072:	358c      	adds	r5, #140	; 0x8c
 80a3074:	f844 3b04 	str.w	r3, [r4], #4
 80a3078:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80a307a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80a307c:	682b      	ldr	r3, [r5, #0]
    return d_->remoteIP;
}
 80a307e:	4630      	mov	r0, r6
 80a3080:	7023      	strb	r3, [r4, #0]
 80a3082:	bd70      	pop	{r4, r5, r6, pc}
 80a3084:	080a68b0 	.word	0x080a68b0

080a3088 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 80a3088:	b510      	push	{r4, lr}
 80a308a:	6943      	ldr	r3, [r0, #20]
 80a308c:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 80a308e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a3092:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a3096:	429a      	cmp	r2, r3
 80a3098:	d005      	beq.n	80a30a6 <_ZN9TCPClient4peekEv+0x1e>
 80a309a:	6962      	ldr	r2, [r4, #20]
 80a309c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a30a0:	4413      	add	r3, r2
 80a30a2:	7918      	ldrb	r0, [r3, #4]
 80a30a4:	bd10      	pop	{r4, pc}
 80a30a6:	6803      	ldr	r3, [r0, #0]
 80a30a8:	691b      	ldr	r3, [r3, #16]
 80a30aa:	4798      	blx	r3
 80a30ac:	2800      	cmp	r0, #0
 80a30ae:	d1f4      	bne.n	80a309a <_ZN9TCPClient4peekEv+0x12>
 80a30b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a30b4:	bd10      	pop	{r4, pc}

080a30b6 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80a30b6:	b510      	push	{r4, lr}
 80a30b8:	6943      	ldr	r3, [r0, #20]
 80a30ba:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80a30bc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a30c0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80a30c4:	429a      	cmp	r2, r3
 80a30c6:	d008      	beq.n	80a30da <_ZN9TCPClient4readEv+0x24>
 80a30c8:	6962      	ldr	r2, [r4, #20]
 80a30ca:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a30ce:	1c59      	adds	r1, r3, #1
 80a30d0:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80a30d4:	4413      	add	r3, r2
 80a30d6:	7918      	ldrb	r0, [r3, #4]
 80a30d8:	bd10      	pop	{r4, pc}
 80a30da:	6803      	ldr	r3, [r0, #0]
 80a30dc:	691b      	ldr	r3, [r3, #16]
 80a30de:	4798      	blx	r3
 80a30e0:	2800      	cmp	r0, #0
 80a30e2:	d1f1      	bne.n	80a30c8 <_ZN9TCPClient4readEv+0x12>
 80a30e4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80a30e8:	bd10      	pop	{r4, pc}

080a30ea <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a30ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a30ec:	6943      	ldr	r3, [r0, #20]
 80a30ee:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80a30f0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a30f4:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a30f8:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 80a30fa:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80a30fc:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 80a30fe:	d106      	bne.n	80a310e <_ZN9TCPClient4readEPhj+0x24>
 80a3100:	6803      	ldr	r3, [r0, #0]
 80a3102:	691b      	ldr	r3, [r3, #16]
 80a3104:	4798      	blx	r3
 80a3106:	b910      	cbnz	r0, 80a310e <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 80a3108:	f04f 34ff 	mov.w	r4, #4294967295
 80a310c:	e014      	b.n	80a3138 <_ZN9TCPClient4readEPhj+0x4e>
 80a310e:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3110:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a3112:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 80a3116:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a311a:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 80a311c:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 80a311e:	42bc      	cmp	r4, r7
 80a3120:	bf28      	it	cs
 80a3122:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 80a3124:	3104      	adds	r1, #4
 80a3126:	4622      	mov	r2, r4
 80a3128:	f003 f852 	bl	80a61d0 <memcpy>
 80a312c:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 80a312e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80a3132:	4423      	add	r3, r4
 80a3134:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 80a3138:	4620      	mov	r0, r4
 80a313a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a313c <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 80a313c:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 80a313e:	2300      	movs	r3, #0
 80a3140:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 80a3144:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 80a3146:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 80a314a:	4770      	bx	lr

080a314c <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 80a314c:	b538      	push	{r3, r4, r5, lr}
 80a314e:	6942      	ldr	r2, [r0, #20]
 80a3150:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 80a3152:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a3156:	b11b      	cbz	r3, 80a3160 <_ZN9TCPClient9availableEv+0x14>
 80a3158:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 80a315c:	429a      	cmp	r2, r3
 80a315e:	d00c      	beq.n	80a317a <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a3160:	6920      	ldr	r0, [r4, #16]
 80a3162:	f001 fac9 	bl	80a46f8 <_ZN5spark12NetworkClass4fromEm>
 80a3166:	6803      	ldr	r3, [r0, #0]
 80a3168:	68db      	ldr	r3, [r3, #12]
 80a316a:	4798      	blx	r3
 80a316c:	b318      	cbz	r0, 80a31b6 <_ZN9TCPClient9availableEv+0x6a>
 80a316e:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a3170:	6818      	ldr	r0, [r3, #0]
 80a3172:	f7ff fd5b 	bl	80a2c2c <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 80a3176:	b918      	cbnz	r0, 80a3180 <_ZN9TCPClient9availableEv+0x34>
 80a3178:	e01d      	b.n	80a31b6 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 80a317a:	f7ff ffdf 	bl	80a313c <_ZN9TCPClient12flush_bufferEv>
 80a317e:	e7ef      	b.n	80a3160 <_ZN9TCPClient9availableEv+0x14>
 80a3180:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 80a3182:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 80a3186:	297f      	cmp	r1, #127	; 0x7f
 80a3188:	d815      	bhi.n	80a31b6 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 80a318a:	1d05      	adds	r5, r0, #4
 80a318c:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 80a3190:	2300      	movs	r3, #0
 80a3192:	4429      	add	r1, r5
 80a3194:	6800      	ldr	r0, [r0, #0]
 80a3196:	f7ff fd61 	bl	80a2c5c <socket_receive>
            if (ret > 0)
 80a319a:	2800      	cmp	r0, #0
 80a319c:	dd0b      	ble.n	80a31b6 <_ZN9TCPClient9availableEv+0x6a>
 80a319e:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80a31a0:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80a31a4:	b90a      	cbnz	r2, 80a31aa <_ZN9TCPClient9availableEv+0x5e>
 80a31a6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80a31aa:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80a31ac:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a31b0:	4418      	add	r0, r3
 80a31b2:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80a31b6:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80a31b8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80a31bc:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80a31c0:	1a18      	subs	r0, r3, r0
}
 80a31c2:	bd38      	pop	{r3, r4, r5, pc}

080a31c4 <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80a31c4:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a31c6:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80a31c8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a31ca:	6818      	ldr	r0, [r3, #0]
 80a31cc:	f7ff fd2e 	bl	80a2c2c <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80a31d0:	b118      	cbz	r0, 80a31da <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80a31d2:	6963      	ldr	r3, [r4, #20]
 80a31d4:	6818      	ldr	r0, [r3, #0]
 80a31d6:	f7ff fd49 	bl	80a2c6c <socket_close>
 80a31da:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80a31dc:	f7ff fd4e 	bl	80a2c7c <socket_handle_invalid>
 80a31e0:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a31e2:	6960      	ldr	r0, [r4, #20]
 80a31e4:	2211      	movs	r2, #17
 80a31e6:	2100      	movs	r1, #0
 80a31e8:	308c      	adds	r0, #140	; 0x8c
 80a31ea:	f002 fffc 	bl	80a61e6 <memset>
  d_->remoteIP.clear();
  flush_buffer();
 80a31ee:	4620      	mov	r0, r4
}
 80a31f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80a31f4:	f7ff bfa2 	b.w	80a313c <_ZN9TCPClient12flush_bufferEv>

080a31f8 <_ZN9TCPClient7connectE9IPAddresstm>:
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a31f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a31fc:	461f      	mov	r7, r3
    stop();
 80a31fe:	6803      	ldr	r3, [r0, #0]
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3200:	b08a      	sub	sp, #40	; 0x28
    stop();
 80a3202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    return 0; // error, could not connect
}

// return 0 on error, 1 on success
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 80a3204:	4606      	mov	r6, r0
 80a3206:	460c      	mov	r4, r1
 80a3208:	4615      	mov	r5, r2
    stop();
 80a320a:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 80a320c:	4638      	mov	r0, r7
 80a320e:	f001 fa73 	bl	80a46f8 <_ZN5spark12NetworkClass4fromEm>
 80a3212:	6803      	ldr	r3, [r0, #0]
 80a3214:	68db      	ldr	r3, [r3, #12]
 80a3216:	4798      	blx	r3
 80a3218:	2800      	cmp	r0, #0
 80a321a:	d056      	beq.n	80a32ca <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a321c:	9700      	str	r7, [sp, #0]
 80a321e:	462b      	mov	r3, r5
 80a3220:	2206      	movs	r2, #6
 80a3222:	2101      	movs	r1, #1
 80a3224:	2002      	movs	r0, #2
 80a3226:	f8d6 8014 	ldr.w	r8, [r6, #20]
 80a322a:	f7ff fd07 	bl	80a2c3c <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a322e:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 80a3230:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 80a3234:	2700      	movs	r7, #0
 80a3236:	9302      	str	r3, [sp, #8]
 80a3238:	6973      	ldr	r3, [r6, #20]
 80a323a:	9703      	str	r7, [sp, #12]
 80a323c:	681b      	ldr	r3, [r3, #0]
 80a323e:	2001      	movs	r0, #1
 80a3240:	9301      	str	r3, [sp, #4]
 80a3242:	4b23      	ldr	r3, [pc, #140]	; (80a32d0 <_ZN9TCPClient7connectE9IPAddresstm+0xd8>)
 80a3244:	aa02      	add	r2, sp, #8
 80a3246:	9300      	str	r3, [sp, #0]
 80a3248:	4922      	ldr	r1, [pc, #136]	; (80a32d4 <_ZN9TCPClient7connectE9IPAddresstm+0xdc>)
 80a324a:	463b      	mov	r3, r7
 80a324c:	f7ff fd66 	bl	80a2d1c <log_message>

          if (socket_handle_valid(d_->sock))
 80a3250:	6973      	ldr	r3, [r6, #20]
 80a3252:	6818      	ldr	r0, [r3, #0]
 80a3254:	f7ff fcea 	bl	80a2c2c <socket_handle_valid>
 80a3258:	2800      	cmp	r0, #0
 80a325a:	d036      	beq.n	80a32ca <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
          {
            flush_buffer();
 80a325c:	4630      	mov	r0, r6
 80a325e:	f7ff ff6d 	bl	80a313c <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 80a3262:	2302      	movs	r3, #2
 80a3264:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 80a3268:	0a2b      	lsrs	r3, r5, #8
 80a326a:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a326e:	79e3      	ldrb	r3, [r4, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3270:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 80a3274:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 80a3278:	79a3      	ldrb	r3, [r4, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 80a327a:	f88d 500b 	strb.w	r5, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 80a327e:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 80a3282:	7963      	ldrb	r3, [r4, #5]
 80a3284:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 80a3288:	f814 3f04 	ldrb.w	r3, [r4, #4]!
 80a328c:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3290:	f7ff fd34 	bl	80a2cfc <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3294:	6973      	ldr	r3, [r6, #20]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 80a3296:	4605      	mov	r5, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 80a3298:	2210      	movs	r2, #16
 80a329a:	a902      	add	r1, sp, #8
 80a329c:	6818      	ldr	r0, [r3, #0]
 80a329e:	f7ff fcd5 	bl	80a2c4c <socket_connect>
 80a32a2:	4680      	mov	r8, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80a32a4:	4628      	mov	r0, r5
 80a32a6:	f7ff fd29 	bl	80a2cfc <HAL_NET_SetNetWatchDog>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80a32aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a32ac:	6975      	ldr	r5, [r6, #20]
 80a32ae:	358c      	adds	r5, #140	; 0x8c
 80a32b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a32b2:	6823      	ldr	r3, [r4, #0]
 80a32b4:	702b      	strb	r3, [r5, #0]
            d_->remoteIP = ip;
            if(!connected)
 80a32b6:	f1b8 0f00 	cmp.w	r8, #0
 80a32ba:	d005      	beq.n	80a32c8 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>
            {
                stop();
 80a32bc:	6833      	ldr	r3, [r6, #0]
 80a32be:	4630      	mov	r0, r6
 80a32c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a32c2:	4798      	blx	r3
 80a32c4:	4638      	mov	r0, r7
 80a32c6:	e000      	b.n	80a32ca <_ZN9TCPClient7connectE9IPAddresstm+0xd2>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80a32c8:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80a32ca:	b00a      	add	sp, #40	; 0x28
 80a32cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a32d0:	080a6763 	.word	0x080a6763
 80a32d4:	080a675c 	.word	0x080a675c

080a32d8 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a32d8:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a32da:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80a32dc:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a32de:	6818      	ldr	r0, [r3, #0]
 80a32e0:	f7ff fca4 	bl	80a2c2c <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80a32e4:	b908      	cbnz	r0, 80a32ea <_ZN9TCPClient6statusEv+0x12>
 80a32e6:	2000      	movs	r0, #0
 80a32e8:	bd10      	pop	{r4, pc}
 80a32ea:	6920      	ldr	r0, [r4, #16]
 80a32ec:	f001 fa04 	bl	80a46f8 <_ZN5spark12NetworkClass4fromEm>
 80a32f0:	6803      	ldr	r3, [r0, #0]
 80a32f2:	68db      	ldr	r3, [r3, #12]
 80a32f4:	4798      	blx	r3
 80a32f6:	2800      	cmp	r0, #0
 80a32f8:	d0f5      	beq.n	80a32e6 <_ZN9TCPClient6statusEv+0xe>
 80a32fa:	6963      	ldr	r3, [r4, #20]
 80a32fc:	6818      	ldr	r0, [r3, #0]
 80a32fe:	f7ff fc8d 	bl	80a2c1c <socket_active_status>
 80a3302:	fab0 f080 	clz	r0, r0
 80a3306:	0940      	lsrs	r0, r0, #5
}
 80a3308:	bd10      	pop	{r4, pc}

080a330a <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 80a330a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 80a330e:	2500      	movs	r5, #0
 80a3310:	6045      	str	r5, [r0, #4]
 80a3312:	4604      	mov	r4, r0
 80a3314:	460e      	mov	r6, r1
 80a3316:	4617      	mov	r7, r2
 80a3318:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a331a:	f7ff ffdd 	bl	80a32d8 <_ZN9TCPClient6statusEv>
 80a331e:	b160      	cbz	r0, 80a333a <_ZN9TCPClient5writeEPKhjm+0x30>
 80a3320:	6960      	ldr	r0, [r4, #20]
 80a3322:	9501      	str	r5, [sp, #4]
 80a3324:	f8cd 8000 	str.w	r8, [sp]
 80a3328:	462b      	mov	r3, r5
 80a332a:	463a      	mov	r2, r7
 80a332c:	4631      	mov	r1, r6
 80a332e:	6800      	ldr	r0, [r0, #0]
 80a3330:	f7ff fcac 	bl	80a2c8c <socket_send_ex>
    if (ret < 0) {
 80a3334:	2800      	cmp	r0, #0
 80a3336:	da03      	bge.n	80a3340 <_ZN9TCPClient5writeEPKhjm+0x36>
 80a3338:	e001      	b.n	80a333e <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 80a333a:	f04f 30ff 	mov.w	r0, #4294967295
 80a333e:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 80a3340:	b002      	add	sp, #8
 80a3342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3346 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 80a3346:	b538      	push	{r3, r4, r5, lr}
 80a3348:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a334a:	f7ff ffc5 	bl	80a32d8 <_ZN9TCPClient6statusEv>
 80a334e:	bb00      	cbnz	r0, 80a3392 <_ZN9TCPClient9connectedEv+0x4c>
 80a3350:	6963      	ldr	r3, [r4, #20]
 80a3352:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 80a3356:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 80a335a:	4291      	cmp	r1, r2
 80a335c:	d119      	bne.n	80a3392 <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80a335e:	6818      	ldr	r0, [r3, #0]
 80a3360:	f7ff fc64 	bl	80a2c2c <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 80a3364:	b128      	cbz	r0, 80a3372 <_ZN9TCPClient9connectedEv+0x2c>
 80a3366:	6963      	ldr	r3, [r4, #20]
 80a3368:	6818      	ldr	r0, [r3, #0]
 80a336a:	f7ff fc57 	bl	80a2c1c <socket_active_status>
 80a336e:	2801      	cmp	r0, #1
 80a3370:	d001      	beq.n	80a3376 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 80a3372:	2500      	movs	r5, #0
 80a3374:	e00e      	b.n	80a3394 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 80a3376:	6823      	ldr	r3, [r4, #0]
 80a3378:	4620      	mov	r0, r4
 80a337a:	691b      	ldr	r3, [r3, #16]
 80a337c:	4798      	blx	r3
 80a337e:	2800      	cmp	r0, #0
 80a3380:	bf14      	ite	ne
 80a3382:	2501      	movne	r5, #1
 80a3384:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 80a3386:	d105      	bne.n	80a3394 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("calling .stop(), no more data, in CLOSE_WAIT");
          stop();       // Close our side
 80a3388:	6823      	ldr	r3, [r4, #0]
 80a338a:	4620      	mov	r0, r4
 80a338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a338e:	4798      	blx	r3
 80a3390:	e000      	b.n	80a3394 <_ZN9TCPClient9connectedEv+0x4e>
 80a3392:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 80a3394:	4628      	mov	r0, r5
 80a3396:	bd38      	pop	{r3, r4, r5, pc}

080a3398 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 80a3398:	b508      	push	{r3, lr}
   return (status()!=0);
 80a339a:	f7ff ff9d 	bl	80a32d8 <_ZN9TCPClient6statusEv>
}
 80a339e:	3000      	adds	r0, #0
 80a33a0:	bf18      	it	ne
 80a33a2:	2001      	movne	r0, #1
 80a33a4:	bd08      	pop	{r3, pc}

080a33a6 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80a33a6:	b510      	push	{r4, lr}
 80a33a8:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80a33aa:	2300      	movs	r3, #0
 80a33ac:	6001      	str	r1, [r0, #0]
 80a33ae:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80a33b2:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80a33b6:	3088      	adds	r0, #136	; 0x88
 80a33b8:	f000 fec6 	bl	80a4148 <_ZN9IPAddressC1Ev>
}
 80a33bc:	4620      	mov	r0, r4
 80a33be:	bd10      	pop	{r4, pc}

080a33c0 <_ZN9TCPClientC1Em>:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a33c0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a33c4:	b570      	push	{r4, r5, r6, lr}
 80a33c6:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80a33c8:	4a14      	ldr	r2, [pc, #80]	; (80a341c <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a33ca:	2300      	movs	r3, #0
 80a33cc:	6043      	str	r3, [r0, #4]
 80a33ce:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80a33d0:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80a33d2:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80a33d4:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a33d6:	20a0      	movs	r0, #160	; 0xa0
 80a33d8:	460e      	mov	r6, r1
 80a33da:	f7fc fe60 	bl	80a009e <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80a33de:	4605      	mov	r5, r0
 80a33e0:	b110      	cbz	r0, 80a33e8 <_ZN9TCPClientC1Em+0x28>
 80a33e2:	4631      	mov	r1, r6
 80a33e4:	f7ff ffdf 	bl	80a33a6 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80a33e8:	2014      	movs	r0, #20
 80a33ea:	f7fc fe58 	bl	80a009e <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80a33ee:	4603      	mov	r3, r0
 80a33f0:	b128      	cbz	r0, 80a33fe <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a33f2:	2201      	movs	r2, #1
 80a33f4:	6042      	str	r2, [r0, #4]
 80a33f6:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a33f8:	4a09      	ldr	r2, [pc, #36]	; (80a3420 <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80a33fa:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80a33fc:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a33fe:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80a3400:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3402:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a3404:	b128      	cbz	r0, 80a3412 <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a3406:	6843      	ldr	r3, [r0, #4]
 80a3408:	3b01      	subs	r3, #1
 80a340a:	6043      	str	r3, [r0, #4]
 80a340c:	b90b      	cbnz	r3, 80a3412 <_ZN9TCPClientC1Em+0x52>
 80a340e:	f7ff fe1a 	bl	80a3046 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.29>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 80a3412:	4620      	mov	r0, r4
 80a3414:	f7ff fe92 	bl	80a313c <_ZN9TCPClient12flush_bufferEv>
}
 80a3418:	4620      	mov	r0, r4
 80a341a:	bd70      	pop	{r4, r5, r6, pc}
 80a341c:	080a6718 	.word	0x080a6718
 80a3420:	080a66fc 	.word	0x080a66fc

080a3424 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 80a3424:	b510      	push	{r4, lr}
 80a3426:	4604      	mov	r4, r0
 80a3428:	f7ff fc28 	bl	80a2c7c <socket_handle_invalid>
 80a342c:	4601      	mov	r1, r0
 80a342e:	4620      	mov	r0, r4
 80a3430:	f7ff ffc6 	bl	80a33c0 <_ZN9TCPClientC1Em>
{
}
 80a3434:	4620      	mov	r0, r4
 80a3436:	bd10      	pop	{r4, pc}

080a3438 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 80a3438:	b510      	push	{r4, lr}
 80a343a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 80a343c:	6800      	ldr	r0, [r0, #0]
 80a343e:	f7ff fbf5 	bl	80a2c2c <socket_handle_valid>
 80a3442:	b110      	cbz	r0, 80a344a <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 80a3444:	6820      	ldr	r0, [r4, #0]
 80a3446:	f7ff fc11 	bl	80a2c6c <socket_close>
    }
}
 80a344a:	4620      	mov	r0, r4
 80a344c:	bd10      	pop	{r4, pc}

080a344e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 80a344e:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 80a3450:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 80a3452:	4620      	mov	r0, r4
 80a3454:	f7ff fff0 	bl	80a3438 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 80a3458:	b124      	cbz	r4, 80a3464 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 80a345a:	4620      	mov	r0, r4
 80a345c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a3460:	f7fc be21 	b.w	80a00a6 <_ZdlPv>
 80a3464:	bd10      	pop	{r4, pc}
	...

080a3468 <_ZN9TCPClient7connectEPKctm>:
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80a346c:	461f      	mov	r7, r3
    stop();
 80a346e:	6803      	ldr	r3, [r0, #0]
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3470:	b08f      	sub	sp, #60	; 0x3c
    stop();
 80a3472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  flush_buffer();
}

// return 0 on error, 1 on success
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 80a3474:	4606      	mov	r6, r0
 80a3476:	460d      	mov	r5, r1
 80a3478:	4690      	mov	r8, r2
    stop();
 80a347a:	4798      	blx	r3
    if (Network.ready())
 80a347c:	4813      	ldr	r0, [pc, #76]	; (80a34cc <_ZN9TCPClient7connectEPKctm+0x64>)
 80a347e:	f001 f8ee 	bl	80a465e <_ZN5spark12NetworkClass5readyEv>
 80a3482:	b300      	cbz	r0, 80a34c6 <_ZN9TCPClient7connectEPKctm+0x5e>
    {
        IPAddress ip_addr;
 80a3484:	a802      	add	r0, sp, #8
 80a3486:	f000 fe5f 	bl	80a4148 <_ZN9IPAddressC1Ev>
        if (inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL) == 0) {
 80a348a:	4628      	mov	r0, r5
 80a348c:	f002 ff09 	bl	80a62a2 <strlen>
 80a3490:	2400      	movs	r4, #0
 80a3492:	b281      	uxth	r1, r0
 80a3494:	9400      	str	r4, [sp, #0]
 80a3496:	463b      	mov	r3, r7
 80a3498:	aa03      	add	r2, sp, #12
 80a349a:	4628      	mov	r0, r5
 80a349c:	f7ff fc36 	bl	80a2d0c <inet_gethostbyname>
 80a34a0:	b980      	cbnz	r0, 80a34c4 <_ZN9TCPClient7connectEPKctm+0x5c>
            return connect(ip_addr, port, nif);
 80a34a2:	6833      	ldr	r3, [r6, #0]
 80a34a4:	ad09      	add	r5, sp, #36	; 0x24
 80a34a6:	f8d3 9020 	ldr.w	r9, [r3, #32]
 80a34aa:	4b09      	ldr	r3, [pc, #36]	; (80a34d0 <_ZN9TCPClient7connectEPKctm+0x68>)
 80a34ac:	ac03      	add	r4, sp, #12
 80a34ae:	9308      	str	r3, [sp, #32]
 80a34b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80a34b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80a34b4:	6823      	ldr	r3, [r4, #0]
 80a34b6:	4642      	mov	r2, r8
 80a34b8:	702b      	strb	r3, [r5, #0]
 80a34ba:	a908      	add	r1, sp, #32
 80a34bc:	463b      	mov	r3, r7
 80a34be:	4630      	mov	r0, r6
 80a34c0:	47c8      	blx	r9
 80a34c2:	e000      	b.n	80a34c6 <_ZN9TCPClient7connectEPKctm+0x5e>
        } else {
            DEBUG("unable to get IP for hostname");
        }
    }

    return 0; // error, could not connect
 80a34c4:	4620      	mov	r0, r4
}
 80a34c6:	b00f      	add	sp, #60	; 0x3c
 80a34c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80a34cc:	200007b0 	.word	0x200007b0
 80a34d0:	080a68b0 	.word	0x080a68b0

080a34d4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a34d4:	b510      	push	{r4, lr}
 80a34d6:	4604      	mov	r4, r0
{
	free(buffer);
 80a34d8:	6800      	ldr	r0, [r0, #0]
 80a34da:	f7ff fccb 	bl	80a2e74 <free>
}
 80a34de:	4620      	mov	r0, r4
 80a34e0:	bd10      	pop	{r4, pc}

080a34e2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a34e2:	b510      	push	{r4, lr}
 80a34e4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a34e6:	6800      	ldr	r0, [r0, #0]
 80a34e8:	b108      	cbz	r0, 80a34ee <_ZN6String10invalidateEv+0xc>
 80a34ea:	f7ff fcc3 	bl	80a2e74 <free>
	buffer = NULL;
 80a34ee:	2300      	movs	r3, #0
 80a34f0:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a34f2:	60a3      	str	r3, [r4, #8]
 80a34f4:	6063      	str	r3, [r4, #4]
 80a34f6:	bd10      	pop	{r4, pc}

080a34f8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a34f8:	b538      	push	{r3, r4, r5, lr}
 80a34fa:	4604      	mov	r4, r0
 80a34fc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a34fe:	6800      	ldr	r0, [r0, #0]
 80a3500:	3101      	adds	r1, #1
 80a3502:	f7ff fcbf 	bl	80a2e84 <realloc>
	if (newbuffer) {
 80a3506:	b110      	cbz	r0, 80a350e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a3508:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a350c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a350e:	bd38      	pop	{r3, r4, r5, pc}

080a3510 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3510:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a3512:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a3514:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a3516:	b113      	cbz	r3, 80a351e <_ZN6String7reserveEj+0xe>
 80a3518:	6843      	ldr	r3, [r0, #4]
 80a351a:	428b      	cmp	r3, r1
 80a351c:	d207      	bcs.n	80a352e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a351e:	4620      	mov	r0, r4
 80a3520:	f7ff ffea 	bl	80a34f8 <_ZN6String12changeBufferEj>
 80a3524:	b120      	cbz	r0, 80a3530 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a3526:	68a3      	ldr	r3, [r4, #8]
 80a3528:	b90b      	cbnz	r3, 80a352e <_ZN6String7reserveEj+0x1e>
 80a352a:	6822      	ldr	r2, [r4, #0]
 80a352c:	7013      	strb	r3, [r2, #0]
 80a352e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a3530:	bd10      	pop	{r4, pc}

080a3532 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3532:	b570      	push	{r4, r5, r6, lr}
 80a3534:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a3536:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a3538:	4604      	mov	r4, r0
 80a353a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a353c:	f7ff ffe8 	bl	80a3510 <_ZN6String7reserveEj>
 80a3540:	b918      	cbnz	r0, 80a354a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a3542:	4620      	mov	r0, r4
 80a3544:	f7ff ffcd 	bl	80a34e2 <_ZN6String10invalidateEv>
		return *this;
 80a3548:	e009      	b.n	80a355e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a354a:	462a      	mov	r2, r5
 80a354c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a354e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a3550:	6820      	ldr	r0, [r4, #0]
 80a3552:	f002 fe3d 	bl	80a61d0 <memcpy>
	buffer[len] = 0;
 80a3556:	6822      	ldr	r2, [r4, #0]
 80a3558:	68a3      	ldr	r3, [r4, #8]
 80a355a:	2100      	movs	r1, #0
 80a355c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a355e:	4620      	mov	r0, r4
 80a3560:	bd70      	pop	{r4, r5, r6, pc}

080a3562 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3562:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3564:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a3566:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a3568:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a356a:	6043      	str	r3, [r0, #4]
	len = 0;
 80a356c:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a356e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a3570:	460d      	mov	r5, r1
 80a3572:	b139      	cbz	r1, 80a3584 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a3574:	4608      	mov	r0, r1
 80a3576:	f002 fe94 	bl	80a62a2 <strlen>
 80a357a:	4629      	mov	r1, r5
 80a357c:	4602      	mov	r2, r0
 80a357e:	4620      	mov	r0, r4
 80a3580:	f7ff ffd7 	bl	80a3532 <_ZN6String4copyEPKcj>
}
 80a3584:	4620      	mov	r0, r4
 80a3586:	bd38      	pop	{r3, r4, r5, pc}

080a3588 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a3588:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a358a:	b510      	push	{r4, lr}
 80a358c:	460b      	mov	r3, r1
 80a358e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a3590:	d007      	beq.n	80a35a2 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a3592:	6809      	ldr	r1, [r1, #0]
 80a3594:	b119      	cbz	r1, 80a359e <_ZN6StringaSERKS_+0x16>
 80a3596:	689a      	ldr	r2, [r3, #8]
 80a3598:	f7ff ffcb 	bl	80a3532 <_ZN6String4copyEPKcj>
 80a359c:	e001      	b.n	80a35a2 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a359e:	f7ff ffa0 	bl	80a34e2 <_ZN6String10invalidateEv>

	return *this;
}
 80a35a2:	4620      	mov	r0, r4
 80a35a4:	bd10      	pop	{r4, pc}

080a35a6 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a35a6:	b510      	push	{r4, lr}
 80a35a8:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a35aa:	2300      	movs	r3, #0
 80a35ac:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a35ae:	6043      	str	r3, [r0, #4]
	len = 0;
 80a35b0:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a35b2:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a35b4:	f7ff ffe8 	bl	80a3588 <_ZN6StringaSERKS_>
}
 80a35b8:	4620      	mov	r0, r4
 80a35ba:	bd10      	pop	{r4, pc}

080a35bc <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a35bc:	b538      	push	{r3, r4, r5, lr}
 80a35be:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a35c0:	460c      	mov	r4, r1
 80a35c2:	b141      	cbz	r1, 80a35d6 <_ZN6StringaSEPKc+0x1a>
 80a35c4:	4608      	mov	r0, r1
 80a35c6:	f002 fe6c 	bl	80a62a2 <strlen>
 80a35ca:	4621      	mov	r1, r4
 80a35cc:	4602      	mov	r2, r0
 80a35ce:	4628      	mov	r0, r5
 80a35d0:	f7ff ffaf 	bl	80a3532 <_ZN6String4copyEPKcj>
 80a35d4:	e001      	b.n	80a35da <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a35d6:	f7ff ff84 	bl	80a34e2 <_ZN6String10invalidateEv>

	return *this;
}
 80a35da:	4628      	mov	r0, r5
 80a35dc:	bd38      	pop	{r3, r4, r5, pc}

080a35de <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a35de:	b510      	push	{r4, lr}
 80a35e0:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a35e2:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a35e4:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a35e6:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a35e8:	6063      	str	r3, [r4, #4]
	len = 0;
 80a35ea:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a35ec:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 80a35ee:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 80a35f0:	a901      	add	r1, sp, #4
 80a35f2:	f7ff fce4 	bl	80a2fbe <itoa>
	*this = buf;
 80a35f6:	a901      	add	r1, sp, #4
 80a35f8:	4620      	mov	r0, r4
 80a35fa:	f7ff ffdf 	bl	80a35bc <_ZN6StringaSEPKc>
}
 80a35fe:	4620      	mov	r0, r4
 80a3600:	b00a      	add	sp, #40	; 0x28
 80a3602:	bd10      	pop	{r4, pc}

080a3604 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a3604:	b570      	push	{r4, r5, r6, lr}
 80a3606:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a3608:	460e      	mov	r6, r1
 80a360a:	b909      	cbnz	r1, 80a3610 <_ZN6String6concatEPKcj+0xc>
 80a360c:	2000      	movs	r0, #0
 80a360e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a3610:	b16a      	cbz	r2, 80a362e <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a3612:	6883      	ldr	r3, [r0, #8]
 80a3614:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a3616:	4629      	mov	r1, r5
 80a3618:	f7ff ff7a 	bl	80a3510 <_ZN6String7reserveEj>
 80a361c:	2800      	cmp	r0, #0
 80a361e:	d0f5      	beq.n	80a360c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a3620:	6820      	ldr	r0, [r4, #0]
 80a3622:	68a3      	ldr	r3, [r4, #8]
 80a3624:	4631      	mov	r1, r6
 80a3626:	4418      	add	r0, r3
 80a3628:	f002 fe18 	bl	80a625c <strcpy>
	len = newlen;
 80a362c:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a362e:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a3630:	bd70      	pop	{r4, r5, r6, pc}

080a3632 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 80a3632:	688a      	ldr	r2, [r1, #8]
 80a3634:	6809      	ldr	r1, [r1, #0]
 80a3636:	f7ff bfe5 	b.w	80a3604 <_ZN6String6concatEPKcj>

080a363a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a363a:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a363c:	688a      	ldr	r2, [r1, #8]
 80a363e:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a3640:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a3642:	f7ff ffdf 	bl	80a3604 <_ZN6String6concatEPKcj>
 80a3646:	b910      	cbnz	r0, 80a364e <_ZplRK15StringSumHelperRK6String+0x14>
 80a3648:	4620      	mov	r0, r4
 80a364a:	f7ff ff4a 	bl	80a34e2 <_ZN6String10invalidateEv>
	return a;
}
 80a364e:	4620      	mov	r0, r4
 80a3650:	bd10      	pop	{r4, pc}

080a3652 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a3652:	b538      	push	{r3, r4, r5, lr}
 80a3654:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a3656:	460d      	mov	r5, r1
 80a3658:	b141      	cbz	r1, 80a366c <_ZplRK15StringSumHelperPKc+0x1a>
 80a365a:	4608      	mov	r0, r1
 80a365c:	f002 fe21 	bl	80a62a2 <strlen>
 80a3660:	4629      	mov	r1, r5
 80a3662:	4602      	mov	r2, r0
 80a3664:	4620      	mov	r0, r4
 80a3666:	f7ff ffcd 	bl	80a3604 <_ZN6String6concatEPKcj>
 80a366a:	b910      	cbnz	r0, 80a3672 <_ZplRK15StringSumHelperPKc+0x20>
 80a366c:	4620      	mov	r0, r4
 80a366e:	f7ff ff38 	bl	80a34e2 <_ZN6String10invalidateEv>
	return a;
}
 80a3672:	4620      	mov	r0, r4
 80a3674:	bd38      	pop	{r3, r4, r5, pc}

080a3676 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80a3676:	b570      	push	{r4, r5, r6, lr}
 80a3678:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80a367a:	b19a      	cbz	r2, 80a36a4 <_ZNK6String8getBytesEPhjj+0x2e>
 80a367c:	b191      	cbz	r1, 80a36a4 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 80a367e:	6885      	ldr	r5, [r0, #8]
 80a3680:	429d      	cmp	r5, r3
 80a3682:	d802      	bhi.n	80a368a <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80a3684:	2300      	movs	r3, #0
 80a3686:	700b      	strb	r3, [r1, #0]
		return;
 80a3688:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80a368a:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80a368c:	1aed      	subs	r5, r5, r3
 80a368e:	42ac      	cmp	r4, r5
 80a3690:	bf28      	it	cs
 80a3692:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80a3694:	6801      	ldr	r1, [r0, #0]
 80a3696:	4622      	mov	r2, r4
 80a3698:	4419      	add	r1, r3
 80a369a:	4630      	mov	r0, r6
 80a369c:	f002 fe09 	bl	80a62b2 <strncpy>
	buf[n] = 0;
 80a36a0:	2300      	movs	r3, #0
 80a36a2:	5533      	strb	r3, [r6, r4]
 80a36a4:	bd70      	pop	{r4, r5, r6, pc}

080a36a6 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 80a36a6:	6800      	ldr	r0, [r0, #0]
 80a36a8:	b108      	cbz	r0, 80a36ae <_ZNK6String5toIntEv+0x8>
 80a36aa:	f002 bd7f 	b.w	80a61ac <atol>
	return 0;
}
 80a36ae:	4770      	bx	lr

080a36b0 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80a36b0:	b40e      	push	{r1, r2, r3}
 80a36b2:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80a36b4:	ac09      	add	r4, sp, #36	; 0x24
 80a36b6:	f854 7b04 	ldr.w	r7, [r4], #4
 80a36ba:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a36bc:	4623      	mov	r3, r4
 80a36be:	463a      	mov	r2, r7
 80a36c0:	2105      	movs	r1, #5
 80a36c2:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80a36c4:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80a36c6:	f7ff fbed 	bl	80a2ea4 <vsnprintf>
 80a36ca:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80a36cc:	490b      	ldr	r1, [pc, #44]	; (80a36fc <_ZN6String6formatEPKcz+0x4c>)
 80a36ce:	4628      	mov	r0, r5
 80a36d0:	f7ff ff47 	bl	80a3562 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80a36d4:	4631      	mov	r1, r6
 80a36d6:	4628      	mov	r0, r5
 80a36d8:	f7ff ff1a 	bl	80a3510 <_ZN6String7reserveEj>
    if (result.buffer) {
 80a36dc:	6828      	ldr	r0, [r5, #0]
 80a36de:	b130      	cbz	r0, 80a36ee <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a36e0:	4623      	mov	r3, r4
 80a36e2:	463a      	mov	r2, r7
 80a36e4:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80a36e6:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80a36e8:	f7ff fbdc 	bl	80a2ea4 <vsnprintf>
        va_end(marker);
        result.len = n;
 80a36ec:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80a36ee:	4628      	mov	r0, r5
 80a36f0:	b004      	add	sp, #16
 80a36f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80a36f6:	b003      	add	sp, #12
 80a36f8:	4770      	bx	lr
 80a36fa:	bf00      	nop
 80a36fc:	080a682c 	.word	0x080a682c

080a3700 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a3700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3702:	4606      	mov	r6, r0
 80a3704:	460d      	mov	r5, r1
 80a3706:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a3708:	2400      	movs	r4, #0
  while (size--) {
 80a370a:	42bd      	cmp	r5, r7
 80a370c:	d00c      	beq.n	80a3728 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a370e:	6833      	ldr	r3, [r6, #0]
 80a3710:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a3714:	689b      	ldr	r3, [r3, #8]
 80a3716:	4630      	mov	r0, r6
 80a3718:	4798      	blx	r3
     if (chunk>=0)
 80a371a:	2800      	cmp	r0, #0
 80a371c:	db01      	blt.n	80a3722 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a371e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a3720:	e7f3      	b.n	80a370a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a3722:	2c00      	cmp	r4, #0
 80a3724:	bf08      	it	eq
 80a3726:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a3728:	4620      	mov	r0, r4
 80a372a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a372c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a372c:	b570      	push	{r4, r5, r6, lr}
 80a372e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a3730:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a3732:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a3734:	b149      	cbz	r1, 80a374a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a3736:	f002 fdb4 	bl	80a62a2 <strlen>
 80a373a:	682b      	ldr	r3, [r5, #0]
 80a373c:	4602      	mov	r2, r0
 80a373e:	4621      	mov	r1, r4
 80a3740:	4628      	mov	r0, r5
    }
 80a3742:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a3746:	68db      	ldr	r3, [r3, #12]
 80a3748:	4718      	bx	r3
    }
 80a374a:	bd70      	pop	{r4, r5, r6, pc}

080a374c <_ZN5Print5printEPKc>:
 80a374c:	b508      	push	{r3, lr}
 80a374e:	f7ff ffed 	bl	80a372c <_ZN5Print5writeEPKc>
 80a3752:	bd08      	pop	{r3, pc}

080a3754 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a3754:	6803      	ldr	r3, [r0, #0]
 80a3756:	689b      	ldr	r3, [r3, #8]
 80a3758:	4718      	bx	r3

080a375a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a375a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a375c:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a375e:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a3760:	f7ff fff8 	bl	80a3754 <_ZN5Print5printEc>
  n += print('\n');
 80a3764:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a3766:	4604      	mov	r4, r0
  n += print('\n');
 80a3768:	4628      	mov	r0, r5
 80a376a:	f7ff fff3 	bl	80a3754 <_ZN5Print5printEc>
  return n;
}
 80a376e:	4420      	add	r0, r4
 80a3770:	bd38      	pop	{r3, r4, r5, pc}

080a3772 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a3772:	2a01      	cmp	r2, #1
 80a3774:	bf98      	it	ls
 80a3776:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a3778:	b530      	push	{r4, r5, lr}
 80a377a:	460b      	mov	r3, r1
 80a377c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a377e:	2100      	movs	r1, #0
 80a3780:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a3784:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a3788:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a378c:	fb05 3312 	mls	r3, r5, r2, r3
 80a3790:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a3792:	2b09      	cmp	r3, #9
 80a3794:	bf94      	ite	ls
 80a3796:	3330      	addls	r3, #48	; 0x30
 80a3798:	3337      	addhi	r3, #55	; 0x37
 80a379a:	b2db      	uxtb	r3, r3
 80a379c:	4621      	mov	r1, r4
 80a379e:	f804 3901 	strb.w	r3, [r4], #-1
 80a37a2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a37a4:	2d00      	cmp	r5, #0
 80a37a6:	d1ef      	bne.n	80a3788 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a37a8:	f7ff ffc0 	bl	80a372c <_ZN5Print5writeEPKc>
}
 80a37ac:	b00b      	add	sp, #44	; 0x2c
 80a37ae:	bd30      	pop	{r4, r5, pc}

080a37b0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a37b0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a37b2:	b922      	cbnz	r2, 80a37be <_ZN5Print5printEmi+0xe>
 80a37b4:	6803      	ldr	r3, [r0, #0]
 80a37b6:	b2c9      	uxtb	r1, r1
 80a37b8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a37ba:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a37bc:	4718      	bx	r3
  else return printNumber(n, base);
 80a37be:	b2d2      	uxtb	r2, r2
}
 80a37c0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a37c2:	f7ff bfd6 	b.w	80a3772 <_ZN5Print11printNumberEmh>

080a37c6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a37c6:	f7ff bff3 	b.w	80a37b0 <_ZN5Print5printEmi>

080a37ca <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80a37ca:	b538      	push	{r3, r4, r5, lr}
 80a37cc:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a37ce:	f7ff ffef 	bl	80a37b0 <_ZN5Print5printEmi>
 80a37d2:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80a37d4:	4628      	mov	r0, r5
 80a37d6:	f7ff ffc0 	bl	80a375a <_ZN5Print7printlnEv>
  return n;
}
 80a37da:	4420      	add	r0, r4
 80a37dc:	bd38      	pop	{r3, r4, r5, pc}

080a37de <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80a37de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a37e2:	4607      	mov	r7, r0
 80a37e4:	460e      	mov	r6, r1
  if (base == 0) {
 80a37e6:	4615      	mov	r5, r2
 80a37e8:	b92a      	cbnz	r2, 80a37f6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a37ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80a37ee:	6803      	ldr	r3, [r0, #0]
 80a37f0:	b2c9      	uxtb	r1, r1
 80a37f2:	689b      	ldr	r3, [r3, #8]
 80a37f4:	4718      	bx	r3
  } else if (base == 10) {
 80a37f6:	2a0a      	cmp	r2, #10
 80a37f8:	d102      	bne.n	80a3800 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80a37fa:	2900      	cmp	r1, #0
 80a37fc:	da01      	bge.n	80a3802 <_ZN5Print5printEli+0x24>
 80a37fe:	e004      	b.n	80a380a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3800:	b2d2      	uxtb	r2, r2
  }
}
 80a3802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 80a3806:	f7ff bfb4 	b.w	80a3772 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a380a:	212d      	movs	r1, #45	; 0x2d
 80a380c:	f7ff ffa2 	bl	80a3754 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 80a3810:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 80a3812:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 80a3814:	4271      	negs	r1, r6
 80a3816:	4638      	mov	r0, r7
 80a3818:	f7ff ffab 	bl	80a3772 <_ZN5Print11printNumberEmh>
 80a381c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80a381e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080a3822 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3822:	f7ff bfdc 	b.w	80a37de <_ZN5Print5printEli>

080a3826 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 80a3826:	b538      	push	{r3, r4, r5, lr}
 80a3828:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a382a:	f7ff ffd8 	bl	80a37de <_ZN5Print5printEli>
 80a382e:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80a3830:	4628      	mov	r0, r5
 80a3832:	f7ff ff92 	bl	80a375a <_ZN5Print7printlnEv>
  return n;
}
 80a3836:	4420      	add	r0, r4
 80a3838:	bd38      	pop	{r3, r4, r5, pc}
	...

080a383c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a383c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3840:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3842:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a3844:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80a3846:	4617      	mov	r7, r2
 80a3848:	461e      	mov	r6, r3
 80a384a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80a384e:	f002 f915 	bl	80a5a7c <__aeabi_dcmpun>
 80a3852:	b108      	cbz	r0, 80a3858 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3854:	4947      	ldr	r1, [pc, #284]	; (80a3974 <_ZN5Print10printFloatEdh+0x138>)
 80a3856:	e012      	b.n	80a387e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3858:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80a385c:	f04f 32ff 	mov.w	r2, #4294967295
 80a3860:	4b45      	ldr	r3, [pc, #276]	; (80a3978 <_ZN5Print10printFloatEdh+0x13c>)
 80a3862:	4638      	mov	r0, r7
 80a3864:	4621      	mov	r1, r4
 80a3866:	f002 f909 	bl	80a5a7c <__aeabi_dcmpun>
 80a386a:	b968      	cbnz	r0, 80a3888 <_ZN5Print10printFloatEdh+0x4c>
 80a386c:	f04f 32ff 	mov.w	r2, #4294967295
 80a3870:	4b41      	ldr	r3, [pc, #260]	; (80a3978 <_ZN5Print10printFloatEdh+0x13c>)
 80a3872:	4638      	mov	r0, r7
 80a3874:	4621      	mov	r1, r4
 80a3876:	f002 f8e3 	bl	80a5a40 <__aeabi_dcmple>
 80a387a:	b928      	cbnz	r0, 80a3888 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a387c:	493f      	ldr	r1, [pc, #252]	; (80a397c <_ZN5Print10printFloatEdh+0x140>)
 80a387e:	4640      	mov	r0, r8
 80a3880:	f7ff ff54 	bl	80a372c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80a3884:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 80a3888:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a388c:	4b3c      	ldr	r3, [pc, #240]	; (80a3980 <_ZN5Print10printFloatEdh+0x144>)
 80a388e:	4638      	mov	r0, r7
 80a3890:	4631      	mov	r1, r6
 80a3892:	f002 f8e9 	bl	80a5a68 <__aeabi_dcmpgt>
 80a3896:	b108      	cbz	r0, 80a389c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3898:	493a      	ldr	r1, [pc, #232]	; (80a3984 <_ZN5Print10printFloatEdh+0x148>)
 80a389a:	e7f0      	b.n	80a387e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 80a389c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80a38a0:	4b39      	ldr	r3, [pc, #228]	; (80a3988 <_ZN5Print10printFloatEdh+0x14c>)
 80a38a2:	4638      	mov	r0, r7
 80a38a4:	4631      	mov	r1, r6
 80a38a6:	f002 f8c1 	bl	80a5a2c <__aeabi_dcmplt>
 80a38aa:	2800      	cmp	r0, #0
 80a38ac:	d1f4      	bne.n	80a3898 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80a38ae:	2200      	movs	r2, #0
 80a38b0:	2300      	movs	r3, #0
 80a38b2:	4638      	mov	r0, r7
 80a38b4:	4631      	mov	r1, r6
 80a38b6:	f002 f8b9 	bl	80a5a2c <__aeabi_dcmplt>
 80a38ba:	b138      	cbz	r0, 80a38cc <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80a38bc:	212d      	movs	r1, #45	; 0x2d
 80a38be:	4640      	mov	r0, r8
 80a38c0:	f7ff ff48 	bl	80a3754 <_ZN5Print5printEc>
     number = -number;
 80a38c4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80a38c8:	4604      	mov	r4, r0
 80a38ca:	e000      	b.n	80a38ce <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a38cc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a38ce:	492f      	ldr	r1, [pc, #188]	; (80a398c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80a38d0:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80a38d4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80a38d6:	fa5f f389 	uxtb.w	r3, r9
 80a38da:	429d      	cmp	r5, r3
 80a38dc:	d906      	bls.n	80a38ec <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80a38de:	2200      	movs	r2, #0
 80a38e0:	4b2b      	ldr	r3, [pc, #172]	; (80a3990 <_ZN5Print10printFloatEdh+0x154>)
 80a38e2:	f001 ff5b 	bl	80a579c <__aeabi_ddiv>
 80a38e6:	f109 0901 	add.w	r9, r9, #1
 80a38ea:	e7f4      	b.n	80a38d6 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80a38ec:	463a      	mov	r2, r7
 80a38ee:	4633      	mov	r3, r6
 80a38f0:	f001 fc78 	bl	80a51e4 <__adddf3>
 80a38f4:	460f      	mov	r7, r1
 80a38f6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a38f8:	f002 f8fe 	bl	80a5af8 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a38fc:	220a      	movs	r2, #10
 80a38fe:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80a3900:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a3902:	4640      	mov	r0, r8
 80a3904:	f7ff ff35 	bl	80a3772 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a3908:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 80a390a:	b37d      	cbz	r5, 80a396c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 80a390c:	4648      	mov	r0, r9
 80a390e:	f001 fda5 	bl	80a545c <__aeabi_ui2d>
 80a3912:	4602      	mov	r2, r0
 80a3914:	460b      	mov	r3, r1
 80a3916:	4630      	mov	r0, r6
 80a3918:	4639      	mov	r1, r7
 80a391a:	f001 fc61 	bl	80a51e0 <__aeabi_dsub>
 80a391e:	4606      	mov	r6, r0
 80a3920:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a3922:	4640      	mov	r0, r8
 80a3924:	491b      	ldr	r1, [pc, #108]	; (80a3994 <_ZN5Print10printFloatEdh+0x158>)
 80a3926:	f7ff ff01 	bl	80a372c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80a392a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80a392c:	4b18      	ldr	r3, [pc, #96]	; (80a3990 <_ZN5Print10printFloatEdh+0x154>)
 80a392e:	2200      	movs	r2, #0
 80a3930:	4630      	mov	r0, r6
 80a3932:	4639      	mov	r1, r7
 80a3934:	f001 fe08 	bl	80a5548 <__aeabi_dmul>
 80a3938:	460f      	mov	r7, r1
 80a393a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80a393c:	f002 f8b4 	bl	80a5aa8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3940:	220a      	movs	r2, #10
 80a3942:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80a3944:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80a3946:	4640      	mov	r0, r8
 80a3948:	f7ff ff49 	bl	80a37de <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80a394c:	4404      	add	r4, r0
    remainder -= toPrint;
 80a394e:	4648      	mov	r0, r9
 80a3950:	f001 fd94 	bl	80a547c <__aeabi_i2d>
 80a3954:	4602      	mov	r2, r0
 80a3956:	460b      	mov	r3, r1
 80a3958:	4630      	mov	r0, r6
 80a395a:	4639      	mov	r1, r7
 80a395c:	f001 fc40 	bl	80a51e0 <__aeabi_dsub>
 80a3960:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a3962:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80a3966:	4606      	mov	r6, r0
 80a3968:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80a396a:	d1df      	bne.n	80a392c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80a396c:	4620      	mov	r0, r4
 80a396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a3972:	bf00      	nop
 80a3974:	080a6777 	.word	0x080a6777
 80a3978:	7fefffff 	.word	0x7fefffff
 80a397c:	080a6781 	.word	0x080a6781
 80a3980:	41efffff 	.word	0x41efffff
 80a3984:	080a677b 	.word	0x080a677b
 80a3988:	c1efffff 	.word	0xc1efffff
 80a398c:	3fe00000 	.word	0x3fe00000
 80a3990:	40240000 	.word	0x40240000
 80a3994:	080a677f 	.word	0x080a677f

080a3998 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a3998:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a399a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80a399e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80a39a0:	9100      	str	r1, [sp, #0]
 80a39a2:	f7ff ff4b 	bl	80a383c <_ZN5Print10printFloatEdh>
 80a39a6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80a39a8:	4628      	mov	r0, r5
 80a39aa:	f7ff fed6 	bl	80a375a <_ZN5Print7printlnEv>
  return n;
}
 80a39ae:	4420      	add	r0, r4
 80a39b0:	b003      	add	sp, #12
 80a39b2:	bd30      	pop	{r4, r5, pc}

080a39b4 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a39b4:	2300      	movs	r3, #0
 80a39b6:	461a      	mov	r2, r3
 80a39b8:	4619      	mov	r1, r3
 80a39ba:	6840      	ldr	r0, [r0, #4]
 80a39bc:	f7ff ba0a 	b.w	80a2dd4 <network_on>

080a39c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a39c0:	680b      	ldr	r3, [r1, #0]
 80a39c2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a39c4:	b113      	cbz	r3, 80a39cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a39c6:	685a      	ldr	r2, [r3, #4]
 80a39c8:	3201      	adds	r2, #1
 80a39ca:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a39cc:	4770      	bx	lr
	...

080a39d0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a39d0:	4a01      	ldr	r2, [pc, #4]	; (80a39d8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a39d2:	4b02      	ldr	r3, [pc, #8]	; (80a39dc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a39d4:	601a      	str	r2, [r3, #0]
 80a39d6:	4770      	bx	lr
 80a39d8:	080a67fb 	.word	0x080a67fb
 80a39dc:	2000032c 	.word	0x2000032c

080a39e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a39e0:	4b02      	ldr	r3, [pc, #8]	; (80a39ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a39e2:	681a      	ldr	r2, [r3, #0]
 80a39e4:	4b02      	ldr	r3, [pc, #8]	; (80a39f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a39e6:	601a      	str	r2, [r3, #0]
 80a39e8:	4770      	bx	lr
 80a39ea:	bf00      	nop
 80a39ec:	20000040 	.word	0x20000040
 80a39f0:	20000330 	.word	0x20000330

080a39f4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a39f4:	2100      	movs	r1, #0
 80a39f6:	f7ff b9a1 	b.w	80a2d3c <system_delay_ms>

080a39fa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a39fa:	b510      	push	{r4, lr}
 80a39fc:	4604      	mov	r4, r0
 80a39fe:	f7fc fb94 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a3a02:	4620      	mov	r0, r4
 80a3a04:	bd10      	pop	{r4, pc}

080a3a06 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a3a06:	b513      	push	{r0, r1, r4, lr}
 80a3a08:	460b      	mov	r3, r1
 80a3a0a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3a0c:	c803      	ldmia	r0, {r0, r1}
 80a3a0e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a3a12:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a3a16:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a3a1a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a3a1e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a3a22:	b002      	add	sp, #8
 80a3a24:	bd10      	pop	{r4, pc}
	...

080a3a28 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3a28:	4803      	ldr	r0, [pc, #12]	; (80a3a38 <_GLOBAL__sub_I_RGB+0x10>)
 80a3a2a:	2300      	movs	r3, #0
 80a3a2c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a3a2e:	4a03      	ldr	r2, [pc, #12]	; (80a3a3c <_GLOBAL__sub_I_RGB+0x14>)
 80a3a30:	4903      	ldr	r1, [pc, #12]	; (80a3a40 <_GLOBAL__sub_I_RGB+0x18>)
 80a3a32:	f000 bf63 	b.w	80a48fc <__aeabi_atexit>
 80a3a36:	bf00      	nop
 80a3a38:	20000334 	.word	0x20000334
 80a3a3c:	200000b0 	.word	0x200000b0
 80a3a40:	080a39fb 	.word	0x080a39fb

080a3a44 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a3a44:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a3a46:	4b14      	ldr	r3, [pc, #80]	; (80a3a98 <serialEventRun+0x54>)
 80a3a48:	b133      	cbz	r3, 80a3a58 <serialEventRun+0x14>
 80a3a4a:	f000 fc41 	bl	80a42d0 <_Z16_fetch_usbserialv>
 80a3a4e:	6803      	ldr	r3, [r0, #0]
 80a3a50:	691b      	ldr	r3, [r3, #16]
 80a3a52:	4798      	blx	r3
 80a3a54:	2800      	cmp	r0, #0
 80a3a56:	dc16      	bgt.n	80a3a86 <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a3a58:	4b10      	ldr	r3, [pc, #64]	; (80a3a9c <serialEventRun+0x58>)
 80a3a5a:	b133      	cbz	r3, 80a3a6a <serialEventRun+0x26>
 80a3a5c:	f000 fcfa 	bl	80a4454 <_Z22__fetch_global_Serial1v>
 80a3a60:	6803      	ldr	r3, [r0, #0]
 80a3a62:	691b      	ldr	r3, [r3, #16]
 80a3a64:	4798      	blx	r3
 80a3a66:	2800      	cmp	r0, #0
 80a3a68:	dc10      	bgt.n	80a3a8c <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a3a6a:	4b0d      	ldr	r3, [pc, #52]	; (80a3aa0 <serialEventRun+0x5c>)
 80a3a6c:	b10b      	cbz	r3, 80a3a72 <serialEventRun+0x2e>
 80a3a6e:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a3a72:	4b0c      	ldr	r3, [pc, #48]	; (80a3aa4 <serialEventRun+0x60>)
 80a3a74:	b17b      	cbz	r3, 80a3a96 <serialEventRun+0x52>
 80a3a76:	f000 fc67 	bl	80a4348 <_Z17_fetch_usbserial1v>
 80a3a7a:	6803      	ldr	r3, [r0, #0]
 80a3a7c:	691b      	ldr	r3, [r3, #16]
 80a3a7e:	4798      	blx	r3
 80a3a80:	2800      	cmp	r0, #0
 80a3a82:	dc06      	bgt.n	80a3a92 <serialEventRun+0x4e>
 80a3a84:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a3a86:	f3af 8000 	nop.w
 80a3a8a:	e7e5      	b.n	80a3a58 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a3a8c:	f3af 8000 	nop.w
 80a3a90:	e7eb      	b.n	80a3a6a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a3a92:	f3af 8000 	nop.w
 80a3a96:	bd08      	pop	{r3, pc}
	...

080a3aa8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a3aa8:	b508      	push	{r3, lr}
	serialEventRun();
 80a3aaa:	f7ff ffcb 	bl	80a3a44 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a3aae:	f7fe ffc3 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a3ab2:	4b01      	ldr	r3, [pc, #4]	; (80a3ab8 <_post_loop+0x10>)
 80a3ab4:	6018      	str	r0, [r3, #0]
 80a3ab6:	bd08      	pop	{r3, pc}
 80a3ab8:	200007d8 	.word	0x200007d8

080a3abc <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a3abc:	4802      	ldr	r0, [pc, #8]	; (80a3ac8 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a3abe:	4a03      	ldr	r2, [pc, #12]	; (80a3acc <_Z33system_initialize_user_backup_ramv+0x10>)
 80a3ac0:	4903      	ldr	r1, [pc, #12]	; (80a3ad0 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a3ac2:	1a12      	subs	r2, r2, r0
 80a3ac4:	f002 bb84 	b.w	80a61d0 <memcpy>
 80a3ac8:	40024000 	.word	0x40024000
 80a3acc:	40024064 	.word	0x40024064
 80a3ad0:	080a6b80 	.word	0x080a6b80

080a3ad4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a3ad4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3ad6:	2300      	movs	r3, #0
 80a3ad8:	9300      	str	r3, [sp, #0]
 80a3ada:	461a      	mov	r2, r3
 80a3adc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3ae0:	f7ff f94e 	bl	80a2d80 <system_ctrl_set_result>
}
 80a3ae4:	b003      	add	sp, #12
 80a3ae6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a3aec <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a3aec:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a3aee:	8843      	ldrh	r3, [r0, #2]
 80a3af0:	2b0a      	cmp	r3, #10
 80a3af2:	d008      	beq.n	80a3b06 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a3af4:	2b50      	cmp	r3, #80	; 0x50
 80a3af6:	d109      	bne.n	80a3b0c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a3af8:	4b09      	ldr	r3, [pc, #36]	; (80a3b20 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a3afa:	681b      	ldr	r3, [r3, #0]
 80a3afc:	b13b      	cbz	r3, 80a3b0e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a3afe:	b003      	add	sp, #12
 80a3b00:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a3b04:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a3b06:	f7ff ffe5 	bl	80a3ad4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a3b0a:	e006      	b.n	80a3b1a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a3b0c:	2300      	movs	r3, #0
 80a3b0e:	9300      	str	r3, [sp, #0]
 80a3b10:	461a      	mov	r2, r3
 80a3b12:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a3b16:	f7ff f933 	bl	80a2d80 <system_ctrl_set_result>
        break;
    }
}
 80a3b1a:	b003      	add	sp, #12
 80a3b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 80a3b20:	20000344 	.word	0x20000344

080a3b24 <module_user_init_hook>:

void module_user_init_hook()
{
 80a3b24:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a3b26:	4c10      	ldr	r4, [pc, #64]	; (80a3b68 <module_user_init_hook+0x44>)
 80a3b28:	4d10      	ldr	r5, [pc, #64]	; (80a3b6c <module_user_init_hook+0x48>)
 80a3b2a:	6823      	ldr	r3, [r4, #0]
 80a3b2c:	42ab      	cmp	r3, r5
 80a3b2e:	4b10      	ldr	r3, [pc, #64]	; (80a3b70 <module_user_init_hook+0x4c>)
 80a3b30:	bf0c      	ite	eq
 80a3b32:	2201      	moveq	r2, #1
 80a3b34:	2200      	movne	r2, #0
 80a3b36:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a3b38:	d002      	beq.n	80a3b40 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a3b3a:	f7ff ffbf 	bl	80a3abc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a3b3e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 80a3b40:	f7fe ff62 	bl	80a2a08 <HAL_RNG_GetRandomNumber>
 80a3b44:	4604      	mov	r4, r0
    srand(seed);
 80a3b46:	f002 fb57 	bl	80a61f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a3b4a:	4b0a      	ldr	r3, [pc, #40]	; (80a3b74 <module_user_init_hook+0x50>)
 80a3b4c:	b113      	cbz	r3, 80a3b54 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 80a3b4e:	4620      	mov	r0, r4
 80a3b50:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a3b54:	2100      	movs	r1, #0
 80a3b56:	4807      	ldr	r0, [pc, #28]	; (80a3b74 <module_user_init_hook+0x50>)
 80a3b58:	f7ff f97c 	bl	80a2e54 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a3b5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a3b60:	2100      	movs	r1, #0
 80a3b62:	4805      	ldr	r0, [pc, #20]	; (80a3b78 <module_user_init_hook+0x54>)
 80a3b64:	f7ff b902 	b.w	80a2d6c <system_ctrl_set_app_request_handler>
 80a3b68:	40024060 	.word	0x40024060
 80a3b6c:	9a271c1e 	.word	0x9a271c1e
 80a3b70:	20000348 	.word	0x20000348
 80a3b74:	00000000 	.word	0x00000000
 80a3b78:	080a3aed 	.word	0x080a3aed

080a3b7c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3b7c:	4770      	bx	lr

080a3b7e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a3b7e:	2000      	movs	r0, #0
 80a3b80:	4770      	bx	lr

080a3b82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a3b82:	b510      	push	{r4, lr}
 80a3b84:	4604      	mov	r4, r0
 80a3b86:	2110      	movs	r1, #16
 80a3b88:	f000 fec6 	bl	80a4918 <_ZdlPvj>
 80a3b8c:	4620      	mov	r0, r4
 80a3b8e:	bd10      	pop	{r4, pc}

080a3b90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a3b90:	b508      	push	{r3, lr}
      { delete this; }
 80a3b92:	b108      	cbz	r0, 80a3b98 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a3b94:	f7ff fff5 	bl	80a3b82 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a3b98:	bd08      	pop	{r3, pc}

080a3b9a <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3b9a:	2200      	movs	r2, #0
 80a3b9c:	6002      	str	r2, [r0, #0]
 80a3b9e:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a3ba2:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80a3ba4:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3ba6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80a3baa:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3bac:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3bae:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80a3bb0:	680c      	ldr	r4, [r1, #0]
 80a3bb2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3bb4:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80a3bb6:	bd10      	pop	{r4, pc}

080a3bb8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80a3bb8:	b510      	push	{r4, lr}
 80a3bba:	4604      	mov	r4, r0
    free((void*)msg_);
 80a3bbc:	6800      	ldr	r0, [r0, #0]
 80a3bbe:	f7ff f959 	bl	80a2e74 <free>
}
 80a3bc2:	4620      	mov	r0, r4
 80a3bc4:	bd10      	pop	{r4, pc}

080a3bc6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a3bc6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a3bc8:	68c4      	ldr	r4, [r0, #12]
 80a3bca:	b1f4      	cbz	r4, 80a3c0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a3bcc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a3bce:	2b02      	cmp	r3, #2
 80a3bd0:	d103      	bne.n	80a3bda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80a3bd2:	f104 000c 	add.w	r0, r4, #12
 80a3bd6:	f7ff ffef 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a3bda:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a3bdc:	b135      	cbz	r5, 80a3bec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3bde:	4628      	mov	r0, r5
 80a3be0:	f7fc faa3 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a3be4:	2110      	movs	r1, #16
 80a3be6:	4628      	mov	r0, r5
 80a3be8:	f000 fe96 	bl	80a4918 <_ZdlPvj>
 80a3bec:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a3bee:	b135      	cbz	r5, 80a3bfe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 80a3bf0:	4628      	mov	r0, r5
 80a3bf2:	f7fc fa9a 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a3bf6:	2110      	movs	r1, #16
 80a3bf8:	4628      	mov	r0, r5
 80a3bfa:	f000 fe8d 	bl	80a4918 <_ZdlPvj>
 80a3bfe:	4620      	mov	r0, r4
 80a3c00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a3c04:	2114      	movs	r1, #20
 80a3c06:	f000 be87 	b.w	80a4918 <_ZdlPvj>
 80a3c0a:	bd38      	pop	{r3, r4, r5, pc}

080a3c0c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a3c0c:	b513      	push	{r0, r1, r4, lr}
 80a3c0e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a3c10:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a3c14:	2300      	movs	r3, #0
 80a3c16:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3c18:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a3c1a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a3c1c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3c1e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a3c20:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a3c22:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3c24:	f7fd fa52 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3c28:	4620      	mov	r0, r4
 80a3c2a:	b002      	add	sp, #8
 80a3c2c:	bd10      	pop	{r4, pc}

080a3c2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a3c2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3c30:	460c      	mov	r4, r1
 80a3c32:	4606      	mov	r6, r0
 80a3c34:	460f      	mov	r7, r1
 80a3c36:	f854 3b04 	ldr.w	r3, [r4], #4
 80a3c3a:	ad02      	add	r5, sp, #8
 80a3c3c:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a3c40:	4621      	mov	r1, r4
 80a3c42:	a801      	add	r0, sp, #4
 80a3c44:	f7ff febc 	bl	80a39c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a3c48:	4629      	mov	r1, r5
 80a3c4a:	4630      	mov	r0, r6
 80a3c4c:	f7ff ffde 	bl	80a3c0c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3c50:	a801      	add	r0, sp, #4
 80a3c52:	f7fd fa3b 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3c56:	4620      	mov	r0, r4
 80a3c58:	f7fd fa38 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a3c5c:	4638      	mov	r0, r7
 80a3c5e:	2108      	movs	r1, #8
 80a3c60:	f000 fe5a 	bl	80a4918 <_ZdlPvj>
        return p;
    }
 80a3c64:	4630      	mov	r0, r6
 80a3c66:	b003      	add	sp, #12
 80a3c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3c6c:	b538      	push	{r3, r4, r5, lr}
 80a3c6e:	2300      	movs	r3, #0
 80a3c70:	4604      	mov	r4, r0
 80a3c72:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3c74:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a3c76:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3c78:	f7fc fa11 	bl	80a009e <_Znwj>
 80a3c7c:	b128      	cbz	r0, 80a3c8a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a3c7e:	2301      	movs	r3, #1
 80a3c80:	6043      	str	r3, [r0, #4]
 80a3c82:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a3c84:	4b02      	ldr	r3, [pc, #8]	; (80a3c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 80a3c86:	60c5      	str	r5, [r0, #12]
 80a3c88:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a3c8a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 80a3c8c:	4620      	mov	r0, r4
 80a3c8e:	bd38      	pop	{r3, r4, r5, pc}
 80a3c90:	080a6894 	.word	0x080a6894

080a3c94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3c94:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3c96:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3c98:	b90a      	cbnz	r2, 80a3c9e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a3c9a:	f000 fe4e 	bl	80a493a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3c9e:	68c3      	ldr	r3, [r0, #12]
    }
 80a3ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3ca4:	4718      	bx	r3

080a3ca6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3ca6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3ca8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a3caa:	f100 0110 	add.w	r1, r0, #16
 80a3cae:	f7ff fff1 	bl	80a3c94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a3cb2:	bd08      	pop	{r3, pc}

080a3cb4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3cb4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a3cb6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a3cb8:	b90a      	cbnz	r2, 80a3cbe <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a3cba:	f000 fe3e 	bl	80a493a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3cbe:	68c3      	ldr	r3, [r0, #12]
    }
 80a3cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a3cc4:	4718      	bx	r3

080a3cc6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a3cc6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3cc8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a3cca:	f100 0110 	add.w	r1, r0, #16
 80a3cce:	f7ff fff1 	bl	80a3cb4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a3cd2:	bd08      	pop	{r3, pc}

080a3cd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3cd4:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3cd6:	2300      	movs	r3, #0
 80a3cd8:	6083      	str	r3, [r0, #8]
 80a3cda:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3cdc:	4604      	mov	r4, r0
 80a3cde:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a3ce0:	b12b      	cbz	r3, 80a3cee <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3ce2:	2202      	movs	r2, #2
 80a3ce4:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3ce6:	68eb      	ldr	r3, [r5, #12]
 80a3ce8:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3cea:	68ab      	ldr	r3, [r5, #8]
 80a3cec:	60a3      	str	r3, [r4, #8]
	}
    }
 80a3cee:	4620      	mov	r0, r4
 80a3cf0:	bd38      	pop	{r3, r4, r5, pc}
	...

080a3cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a3cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3cf6:	b089      	sub	sp, #36	; 0x24
 80a3cf8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 80a3cfa:	4668      	mov	r0, sp
 80a3cfc:	f7ff ff4d 	bl	80a3b9a <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a3d00:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a3d04:	2300      	movs	r3, #0
 80a3d06:	f88d 3008 	strb.w	r3, [sp, #8]
 80a3d0a:	e8d4 3f4f 	ldrexb	r3, [r4]
 80a3d0e:	2b00      	cmp	r3, #0
 80a3d10:	d103      	bne.n	80a3d1a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 80a3d12:	e8c4 2f41 	strexb	r1, r2, [r4]
 80a3d16:	2900      	cmp	r1, #0
 80a3d18:	d1f7      	bne.n	80a3d0a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 80a3d1a:	d002      	beq.n	80a3d22 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 80a3d1c:	f88d 3008 	strb.w	r3, [sp, #8]
 80a3d20:	e063      	b.n	80a3dea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a3d22:	f114 050c 	adds.w	r5, r4, #12
 80a3d26:	d003      	beq.n	80a3d30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80a3d28:	4669      	mov	r1, sp
 80a3d2a:	4628      	mov	r0, r5
 80a3d2c:	f7ff ff35 	bl	80a3b9a <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a3d30:	f3bf 8f5f 	dmb	sy
 80a3d34:	2301      	movs	r3, #1
 80a3d36:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a3d38:	f3bf 8f5f 	dmb	sy
 80a3d3c:	f104 0308 	add.w	r3, r4, #8
 80a3d40:	2000      	movs	r0, #0
 80a3d42:	e853 6f00 	ldrex	r6, [r3]
 80a3d46:	e843 0200 	strex	r2, r0, [r3]
 80a3d4a:	2a00      	cmp	r2, #0
 80a3d4c:	d1f9      	bne.n	80a3d42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80a3d4e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a3d52:	2e00      	cmp	r6, #0
 80a3d54:	d049      	beq.n	80a3dea <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a3d56:	f7fe fff9 	bl	80a2d4c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a3d5a:	b120      	cbz	r0, 80a3d66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a3d5c:	4629      	mov	r1, r5
 80a3d5e:	4630      	mov	r0, r6
 80a3d60:	f7ff ff98 	bl	80a3c94 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a3d64:	e03a      	b.n	80a3ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a3d66:	4631      	mov	r1, r6
 80a3d68:	a802      	add	r0, sp, #8
 80a3d6a:	f7ff ffb3 	bl	80a3cd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a3d6e:	68e0      	ldr	r0, [r4, #12]
 80a3d70:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a3d74:	b108      	cbz	r0, 80a3d7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80a3d76:	f002 fa79 	bl	80a626c <strdup>
 80a3d7a:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a3d7c:	2010      	movs	r0, #16
 80a3d7e:	f8ad 501c 	strh.w	r5, [sp, #28]
 80a3d82:	f7fc f98c 	bl	80a009e <_Znwj>
 80a3d86:	4605      	mov	r5, r0
 80a3d88:	b1e8      	cbz	r0, 80a3dc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3d8a:	2700      	movs	r7, #0
 80a3d8c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3d8e:	2018      	movs	r0, #24
 80a3d90:	f7fc f985 	bl	80a009e <_Znwj>
 80a3d94:	4604      	mov	r4, r0
 80a3d96:	b188      	cbz	r0, 80a3dbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3d98:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3d9a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a3d9c:	a802      	add	r0, sp, #8
 80a3d9e:	f7ff fe32 	bl	80a3a06 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3da2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a3da4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a3da6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a3da8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 80a3daa:	9204      	str	r2, [sp, #16]
 80a3dac:	68e2      	ldr	r2, [r4, #12]
 80a3dae:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 80a3db0:	60e3      	str	r3, [r4, #12]
 80a3db2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a3db6:	9205      	str	r2, [sp, #20]
 80a3db8:	f7ff feef 	bl	80a3b9a <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3dbc:	4b0d      	ldr	r3, [pc, #52]	; (80a3df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a3dbe:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a3dc0:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a3dc2:	4b0d      	ldr	r3, [pc, #52]	; (80a3df8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 80a3dc4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 80a3dc6:	a806      	add	r0, sp, #24
 80a3dc8:	f7ff fef6 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3dcc:	a802      	add	r0, sp, #8
 80a3dce:	f7fc f9ac 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a3dd2:	2200      	movs	r2, #0
 80a3dd4:	4629      	mov	r1, r5
 80a3dd6:	4809      	ldr	r0, [pc, #36]	; (80a3dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 80a3dd8:	f7fe ffc0 	bl	80a2d5c <application_thread_invoke>
 80a3ddc:	4630      	mov	r0, r6
 80a3dde:	f7fc f9a4 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a3de2:	2110      	movs	r1, #16
 80a3de4:	4630      	mov	r0, r6
 80a3de6:	f000 fd97 	bl	80a4918 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 80a3dea:	4668      	mov	r0, sp
 80a3dec:	f7ff fee4 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
    }
 80a3df0:	b009      	add	sp, #36	; 0x24
 80a3df2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a3df4:	080a3ca7 	.word	0x080a3ca7
 80a3df8:	080a3f1d 	.word	0x080a3f1d
 80a3dfc:	080a44a1 	.word	0x080a44a1

080a3e00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a3e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a3e04:	b08b      	sub	sp, #44	; 0x2c
 80a3e06:	4606      	mov	r6, r0
 80a3e08:	460f      	mov	r7, r1
 80a3e0a:	4690      	mov	r8, r2
 80a3e0c:	4699      	mov	r9, r3
 80a3e0e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a3e12:	f7ff f80f 	bl	80a2e34 <spark_cloud_flag_connected>
 80a3e16:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 80a3e18:	4683      	mov	fp, r0
 80a3e1a:	bb30      	cbnz	r0, 80a3e6a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a3e1c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 80a3e20:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3e22:	a905      	add	r1, sp, #20
 80a3e24:	4628      	mov	r0, r5
 80a3e26:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3e2a:	f7ff feb6 	bl	80a3b9a <_ZN8particle5ErrorC1EOS0_>
 80a3e2e:	2014      	movs	r0, #20
 80a3e30:	f7fc f935 	bl	80a009e <_Znwj>
 80a3e34:	4604      	mov	r4, r0
 80a3e36:	b158      	cbz	r0, 80a3e50 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a3e38:	2302      	movs	r3, #2
 80a3e3a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3e3c:	2301      	movs	r3, #1
 80a3e3e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3e40:	f8c0 b004 	str.w	fp, [r0, #4]
 80a3e44:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 80a3e48:	4629      	mov	r1, r5
 80a3e4a:	300c      	adds	r0, #12
 80a3e4c:	f7ff fea5 	bl	80a3b9a <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a3e50:	4630      	mov	r0, r6
 80a3e52:	4621      	mov	r1, r4
 80a3e54:	f840 4b04 	str.w	r4, [r0], #4
 80a3e58:	f7ff ff08 	bl	80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 80a3e5c:	4628      	mov	r0, r5
 80a3e5e:	f7ff feab 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 80a3e62:	a805      	add	r0, sp, #20
 80a3e64:	f7ff fea8 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
 80a3e68:	e052      	b.n	80a3f10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a3e6a:	2400      	movs	r4, #0
 80a3e6c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a3e6e:	2014      	movs	r0, #20
 80a3e70:	606c      	str	r4, [r5, #4]
 80a3e72:	60ac      	str	r4, [r5, #8]
 80a3e74:	9307      	str	r3, [sp, #28]
 80a3e76:	f7fc f912 	bl	80a009e <_Znwj>
 80a3e7a:	4601      	mov	r1, r0
 80a3e7c:	b118      	cbz	r0, 80a3e86 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 80a3e7e:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a3e80:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a3e82:	6044      	str	r4, [r0, #4]
 80a3e84:	6084      	str	r4, [r0, #8]
 80a3e86:	a804      	add	r0, sp, #16
 80a3e88:	9103      	str	r1, [sp, #12]
 80a3e8a:	f7ff feef 	bl	80a3c6c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a3e8e:	4b22      	ldr	r3, [pc, #136]	; (80a3f18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a3e90:	2008      	movs	r0, #8
 80a3e92:	9308      	str	r3, [sp, #32]
 80a3e94:	f7fc f903 	bl	80a009e <_Znwj>
 80a3e98:	4604      	mov	r4, r0
 80a3e9a:	b128      	cbz	r0, 80a3ea8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a3e9c:	9b03      	ldr	r3, [sp, #12]
 80a3e9e:	a904      	add	r1, sp, #16
 80a3ea0:	f840 3b04 	str.w	r3, [r0], #4
 80a3ea4:	f7ff fd8c 	bl	80a39c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a3ea8:	9500      	str	r5, [sp, #0]
 80a3eaa:	fa5f f38a 	uxtb.w	r3, sl
 80a3eae:	464a      	mov	r2, r9
 80a3eb0:	4641      	mov	r1, r8
 80a3eb2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a3eb4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a3eb6:	f7fe ffc5 	bl	80a2e44 <spark_send_event>
 80a3eba:	b920      	cbnz	r0, 80a3ec6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a3ebc:	9b03      	ldr	r3, [sp, #12]
 80a3ebe:	785b      	ldrb	r3, [r3, #1]
 80a3ec0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a3ec4:	b183      	cbz	r3, 80a3ee8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 80a3ec6:	9b03      	ldr	r3, [sp, #12]
 80a3ec8:	a904      	add	r1, sp, #16
 80a3eca:	a806      	add	r0, sp, #24
 80a3ecc:	9305      	str	r3, [sp, #20]
 80a3ece:	f7ff fd77 	bl	80a39c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a3ed2:	a905      	add	r1, sp, #20
 80a3ed4:	4630      	mov	r0, r6
 80a3ed6:	f7ff fe99 	bl	80a3c0c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a3eda:	a806      	add	r0, sp, #24
 80a3edc:	f7fd f8f6 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3ee0:	a804      	add	r0, sp, #16
 80a3ee2:	f7fd f8f3 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3ee6:	e013      	b.n	80a3f10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80a3ee8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a3eec:	a905      	add	r1, sp, #20
 80a3eee:	a803      	add	r0, sp, #12
 80a3ef0:	9205      	str	r2, [sp, #20]
 80a3ef2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a3ef6:	f7ff fefd 	bl	80a3cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a3efa:	a805      	add	r0, sp, #20
 80a3efc:	f7ff fe5c 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a3f00:	a805      	add	r0, sp, #20
 80a3f02:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a3f04:	f7ff fe93 	bl	80a3c2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80a3f08:	a806      	add	r0, sp, #24
 80a3f0a:	f7fd f8df 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a3f0e:	e7da      	b.n	80a3ec6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a3f10:	4630      	mov	r0, r6
 80a3f12:	b00b      	add	sp, #44	; 0x2c
 80a3f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3f18:	080a408d 	.word	0x080a408d

080a3f1c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3f1c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a3f20:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3f22:	d006      	beq.n	80a3f32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a3f24:	2a03      	cmp	r2, #3
 80a3f26:	d017      	beq.n	80a3f58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a3f28:	2a01      	cmp	r2, #1
 80a3f2a:	d122      	bne.n	80a3f72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3f2c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3f2e:	6003      	str	r3, [r0, #0]
	      break;
 80a3f30:	e01f      	b.n	80a3f72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3f32:	2018      	movs	r0, #24
 80a3f34:	680e      	ldr	r6, [r1, #0]
 80a3f36:	f7fc f8b2 	bl	80a009e <_Znwj>
 80a3f3a:	4605      	mov	r5, r0
 80a3f3c:	b150      	cbz	r0, 80a3f54 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3f3e:	4631      	mov	r1, r6
 80a3f40:	f7ff fec8 	bl	80a3cd4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a3f44:	6930      	ldr	r0, [r6, #16]
 80a3f46:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a3f4a:	b108      	cbz	r0, 80a3f50 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a3f4c:	f002 f98e 	bl	80a626c <strdup>
 80a3f50:	6128      	str	r0, [r5, #16]
 80a3f52:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3f54:	6025      	str	r5, [r4, #0]
 80a3f56:	e00c      	b.n	80a3f72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3f58:	6804      	ldr	r4, [r0, #0]
 80a3f5a:	b154      	cbz	r4, 80a3f72 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 80a3f5c:	f104 0010 	add.w	r0, r4, #16
 80a3f60:	f7ff fe2a 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3f64:	4620      	mov	r0, r4
 80a3f66:	f7fc f8e0 	bl	80a012a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3f6a:	2118      	movs	r1, #24
 80a3f6c:	4620      	mov	r0, r4
 80a3f6e:	f000 fcd3 	bl	80a4918 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a3f72:	2000      	movs	r0, #0
 80a3f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a3f76 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3f76:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a3f78:	2300      	movs	r3, #0
 80a3f7a:	6083      	str	r3, [r0, #8]
 80a3f7c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a3f7e:	4604      	mov	r4, r0
 80a3f80:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a3f82:	b12b      	cbz	r3, 80a3f90 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a3f84:	2202      	movs	r2, #2
 80a3f86:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a3f88:	68eb      	ldr	r3, [r5, #12]
 80a3f8a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a3f8c:	68ab      	ldr	r3, [r5, #8]
 80a3f8e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a3f90:	4620      	mov	r0, r4
 80a3f92:	bd38      	pop	{r3, r4, r5, pc}

080a3f94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3f94:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a3f96:	b570      	push	{r4, r5, r6, lr}
 80a3f98:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a3f9a:	d006      	beq.n	80a3faa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a3f9c:	2a03      	cmp	r2, #3
 80a3f9e:	d011      	beq.n	80a3fc4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a3fa0:	2a01      	cmp	r2, #1
 80a3fa2:	d118      	bne.n	80a3fd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a3fa4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a3fa6:	6003      	str	r3, [r0, #0]
	      break;
 80a3fa8:	e015      	b.n	80a3fd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3faa:	2014      	movs	r0, #20
 80a3fac:	680e      	ldr	r6, [r1, #0]
 80a3fae:	f7fc f876 	bl	80a009e <_Znwj>
 80a3fb2:	4605      	mov	r5, r0
 80a3fb4:	b120      	cbz	r0, 80a3fc0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a3fb6:	4631      	mov	r1, r6
 80a3fb8:	f7ff ffdd 	bl	80a3f76 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a3fbc:	7c33      	ldrb	r3, [r6, #16]
 80a3fbe:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a3fc0:	6025      	str	r5, [r4, #0]
 80a3fc2:	e008      	b.n	80a3fd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3fc4:	6804      	ldr	r4, [r0, #0]
 80a3fc6:	b134      	cbz	r4, 80a3fd6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a3fc8:	4620      	mov	r0, r4
 80a3fca:	f7fc f8ae 	bl	80a012a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a3fce:	2114      	movs	r1, #20
 80a3fd0:	4620      	mov	r0, r4
 80a3fd2:	f000 fca1 	bl	80a4918 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a3fd6:	2000      	movs	r0, #0
 80a3fd8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a3fdc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a3fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a3fde:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a3fe0:	f3bf 8f5f 	dmb	sy
 80a3fe4:	b087      	sub	sp, #28
 80a3fe6:	2300      	movs	r3, #0
 80a3fe8:	e850 6f00 	ldrex	r6, [r0]
 80a3fec:	e840 3200 	strex	r2, r3, [r0]
 80a3ff0:	2a00      	cmp	r2, #0
 80a3ff2:	d1f9      	bne.n	80a3fe8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a3ff4:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a3ff8:	2e00      	cmp	r6, #0
 80a3ffa:	d03f      	beq.n	80a407c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a3ffc:	4618      	mov	r0, r3
 80a3ffe:	f7fe fea5 	bl	80a2d4c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a4002:	4607      	mov	r7, r0
 80a4004:	b120      	cbz	r0, 80a4010 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a4006:	4621      	mov	r1, r4
 80a4008:	4630      	mov	r0, r6
 80a400a:	f7ff fe53 	bl	80a3cb4 <_ZNKSt8functionIFvRKbEEclES1_>
 80a400e:	e02e      	b.n	80a406e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a4010:	4631      	mov	r1, r6
 80a4012:	a801      	add	r0, sp, #4
 80a4014:	f7ff ffaf 	bl	80a3f76 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a4018:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a401a:	2010      	movs	r0, #16
 80a401c:	f88d 3014 	strb.w	r3, [sp, #20]
 80a4020:	f7fc f83d 	bl	80a009e <_Znwj>
 80a4024:	4605      	mov	r5, r0
 80a4026:	b1d0      	cbz	r0, 80a405e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4028:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a402a:	2014      	movs	r0, #20
 80a402c:	f7fc f837 	bl	80a009e <_Znwj>
 80a4030:	4604      	mov	r4, r0
 80a4032:	b178      	cbz	r0, 80a4054 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4034:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a4036:	4601      	mov	r1, r0
 80a4038:	a801      	add	r0, sp, #4
 80a403a:	f7ff fce4 	bl	80a3a06 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a403e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a4040:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4042:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4044:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a4046:	9203      	str	r2, [sp, #12]
 80a4048:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a404a:	60e3      	str	r3, [r4, #12]
 80a404c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4050:	9204      	str	r2, [sp, #16]
 80a4052:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a4054:	4b0a      	ldr	r3, [pc, #40]	; (80a4080 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a4056:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a4058:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a405a:	4b0a      	ldr	r3, [pc, #40]	; (80a4084 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a405c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a405e:	a801      	add	r0, sp, #4
 80a4060:	f7fc f863 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a4064:	2200      	movs	r2, #0
 80a4066:	4629      	mov	r1, r5
 80a4068:	4807      	ldr	r0, [pc, #28]	; (80a4088 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a406a:	f7fe fe77 	bl	80a2d5c <application_thread_invoke>
 80a406e:	4630      	mov	r0, r6
 80a4070:	f7fc f85b 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a4074:	2110      	movs	r1, #16
 80a4076:	4630      	mov	r0, r6
 80a4078:	f000 fc4e 	bl	80a4918 <_ZdlPvj>
        }
    }
 80a407c:	b007      	add	sp, #28
 80a407e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a4080:	080a3cc7 	.word	0x080a3cc7
 80a4084:	080a3f95 	.word	0x080a3f95
 80a4088:	080a44a1 	.word	0x080a44a1

080a408c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a408c:	b530      	push	{r4, r5, lr}
 80a408e:	4604      	mov	r4, r0
 80a4090:	b085      	sub	sp, #20
 80a4092:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a4094:	4668      	mov	r0, sp
 80a4096:	4611      	mov	r1, r2
 80a4098:	f7ff fdc9 	bl	80a3c2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a409c:	b17c      	cbz	r4, 80a40be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a409e:	b224      	sxth	r4, r4
 80a40a0:	4628      	mov	r0, r5
 80a40a2:	b10d      	cbz	r5, 80a40a8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a40a4:	f002 f8e2 	bl	80a626c <strdup>
 80a40a8:	9002      	str	r0, [sp, #8]
 80a40aa:	a902      	add	r1, sp, #8
 80a40ac:	4668      	mov	r0, sp
 80a40ae:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a40b2:	f7ff fe1f 	bl	80a3cf4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80a40b6:	a802      	add	r0, sp, #8
 80a40b8:	f7ff fd7e 	bl	80a3bb8 <_ZN8particle5ErrorD1Ev>
 80a40bc:	e01d      	b.n	80a40fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a40be:	f04f 0201 	mov.w	r2, #1
 80a40c2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a40c4:	f88d 4008 	strb.w	r4, [sp, #8]
 80a40c8:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a40cc:	42a3      	cmp	r3, r4
 80a40ce:	d103      	bne.n	80a40d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a40d0:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a40d4:	2900      	cmp	r1, #0
 80a40d6:	d1f7      	bne.n	80a40c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a40d8:	d002      	beq.n	80a40e0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a40da:	f88d 3008 	strb.w	r3, [sp, #8]
 80a40de:	e00c      	b.n	80a40fa <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a40e0:	f110 010c 	adds.w	r1, r0, #12
 80a40e4:	f04f 0301 	mov.w	r3, #1
 80a40e8:	bf18      	it	ne
 80a40ea:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a40ec:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a40f0:	3004      	adds	r0, #4
 80a40f2:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a40f6:	f7ff ff71 	bl	80a3fdc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a40fa:	a801      	add	r0, sp, #4
 80a40fc:	f7fc ffe6 	bl	80a10cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a4100:	b005      	add	sp, #20
 80a4102:	bd30      	pop	{r4, r5, pc}

080a4104 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a4104:	4770      	bx	lr

080a4106 <_ZN9IPAddressD0Ev>:
 80a4106:	b510      	push	{r4, lr}
 80a4108:	4604      	mov	r4, r0
 80a410a:	2118      	movs	r1, #24
 80a410c:	f000 fc04 	bl	80a4918 <_ZdlPvj>
 80a4110:	4620      	mov	r0, r4
 80a4112:	bd10      	pop	{r4, pc}

080a4114 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a4114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a4116:	460f      	mov	r7, r1
 80a4118:	f100 0608 	add.w	r6, r0, #8
 80a411c:	1d05      	adds	r5, r0, #4
 80a411e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a4120:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a4124:	220a      	movs	r2, #10
 80a4126:	4638      	mov	r0, r7
 80a4128:	f7ff fb4d 	bl	80a37c6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a412c:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a412e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a4130:	d007      	beq.n	80a4142 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a4132:	2c00      	cmp	r4, #0
 80a4134:	d0f4      	beq.n	80a4120 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a4136:	212e      	movs	r1, #46	; 0x2e
 80a4138:	4638      	mov	r0, r7
 80a413a:	f7ff fb0b 	bl	80a3754 <_ZN5Print5printEc>
 80a413e:	4404      	add	r4, r0
 80a4140:	e7ee      	b.n	80a4120 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a4142:	4620      	mov	r0, r4
 80a4144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080a4148 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 80a4148:	b510      	push	{r4, lr}
 80a414a:	4604      	mov	r4, r0
 80a414c:	4b04      	ldr	r3, [pc, #16]	; (80a4160 <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80a414e:	2211      	movs	r2, #17
 80a4150:	f840 3b04 	str.w	r3, [r0], #4
 80a4154:	2100      	movs	r1, #0
 80a4156:	f002 f846 	bl	80a61e6 <memset>
{
    clear();
}
 80a415a:	4620      	mov	r0, r4
 80a415c:	bd10      	pop	{r4, pc}
 80a415e:	bf00      	nop
 80a4160:	080a68b0 	.word	0x080a68b0

080a4164 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80a4164:	4603      	mov	r3, r0
 80a4166:	4a07      	ldr	r2, [pc, #28]	; (80a4184 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 80a4168:	b510      	push	{r4, lr}
 80a416a:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
 80a416e:	f101 0210 	add.w	r2, r1, #16
 80a4172:	f851 4b04 	ldr.w	r4, [r1], #4
 80a4176:	4291      	cmp	r1, r2
 80a4178:	f843 4b04 	str.w	r4, [r3], #4
 80a417c:	d1f9      	bne.n	80a4172 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 80a417e:	780a      	ldrb	r2, [r1, #0]
 80a4180:	701a      	strb	r2, [r3, #0]
}
 80a4182:	bd10      	pop	{r4, pc}
 80a4184:	080a68b0 	.word	0x080a68b0

080a4188 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a4188:	4a02      	ldr	r2, [pc, #8]	; (80a4194 <_ZN9IPAddressC1Em+0xc>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80a418a:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80a418c:	6002      	str	r2, [r0, #0]
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a418e:	2204      	movs	r2, #4
 80a4190:	7502      	strb	r2, [r0, #20]
{
    *this = address;
}
 80a4192:	4770      	bx	lr
 80a4194:	080a68b0 	.word	0x080a68b0

080a4198 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a4198:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a419a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a419e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a41a2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a41a6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80a41aa:	2304      	movs	r3, #4
 80a41ac:	6041      	str	r1, [r0, #4]
 80a41ae:	7503      	strb	r3, [r0, #20]
 80a41b0:	bd10      	pop	{r4, pc}
	...

080a41b4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a41b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a41b6:	4d04      	ldr	r5, [pc, #16]	; (80a41c8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80a41b8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a41ba:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a41be:	9500      	str	r5, [sp, #0]
 80a41c0:	f7ff ffea 	bl	80a4198 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a41c4:	b003      	add	sp, #12
 80a41c6:	bd30      	pop	{r4, r5, pc}
 80a41c8:	080a68b0 	.word	0x080a68b0

080a41cc <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 80a41cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 80a41ce:	780d      	ldrb	r5, [r1, #0]
 80a41d0:	788b      	ldrb	r3, [r1, #2]
 80a41d2:	784a      	ldrb	r2, [r1, #1]
 80a41d4:	78c9      	ldrb	r1, [r1, #3]
 80a41d6:	9100      	str	r1, [sp, #0]
 80a41d8:	4629      	mov	r1, r5
 80a41da:	f7ff ffdd 	bl	80a4198 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 80a41de:	b003      	add	sp, #12
 80a41e0:	bd30      	pop	{r4, r5, pc}
	...

080a41e4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 80a41e4:	b510      	push	{r4, lr}
 80a41e6:	4604      	mov	r4, r0
 80a41e8:	4b02      	ldr	r3, [pc, #8]	; (80a41f4 <_ZN9IPAddressC1EPKh+0x10>)
 80a41ea:	6003      	str	r3, [r0, #0]
{
    *this = address;
 80a41ec:	f7ff ffee 	bl	80a41cc <_ZN9IPAddressaSEPKh>
}
 80a41f0:	4620      	mov	r0, r4
 80a41f2:	bd10      	pop	{r4, pc}
 80a41f4:	080a68b0 	.word	0x080a68b0

080a41f8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a41f8:	7441      	strb	r1, [r0, #17]
 80a41fa:	4770      	bx	lr

080a41fc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80a41fc:	4770      	bx	lr

080a41fe <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80a41fe:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80a4200:	2100      	movs	r1, #0
 80a4202:	7c00      	ldrb	r0, [r0, #16]
 80a4204:	f7fe fd62 	bl	80a2ccc <HAL_USB_USART_Receive_Data>
}
 80a4208:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a420c:	bf28      	it	cs
 80a420e:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4212:	bd08      	pop	{r3, pc}

080a4214 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 80a4214:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 80a4216:	2101      	movs	r1, #1
 80a4218:	7c00      	ldrb	r0, [r0, #16]
 80a421a:	f7fe fd57 	bl	80a2ccc <HAL_USB_USART_Receive_Data>
}
 80a421e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a4222:	bf28      	it	cs
 80a4224:	f04f 30ff 	movcs.w	r0, #4294967295
 80a4228:	bd08      	pop	{r3, pc}

080a422a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 80a422a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 80a422c:	7c00      	ldrb	r0, [r0, #16]
 80a422e:	f7fe fd45 	bl	80a2cbc <HAL_USB_USART_Available_Data_For_Write>
}
 80a4232:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4236:	bd08      	pop	{r3, pc}

080a4238 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80a4238:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80a423a:	7c00      	ldrb	r0, [r0, #16]
 80a423c:	f7fe fd36 	bl	80a2cac <HAL_USB_USART_Available_Data>
}
 80a4240:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a4244:	bd08      	pop	{r3, pc}

080a4246 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a4246:	7c00      	ldrb	r0, [r0, #16]
 80a4248:	f7fe bd50 	b.w	80a2cec <HAL_USB_USART_Flush_Data>

080a424c <_ZN9USBSerialD0Ev>:
 80a424c:	b510      	push	{r4, lr}
 80a424e:	4604      	mov	r4, r0
 80a4250:	2114      	movs	r1, #20
 80a4252:	f000 fb61 	bl	80a4918 <_ZdlPvj>
 80a4256:	4620      	mov	r0, r4
 80a4258:	bd10      	pop	{r4, pc}

080a425a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a425a:	b538      	push	{r3, r4, r5, lr}
 80a425c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a425e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80a4260:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a4262:	f7fe fd2b 	bl	80a2cbc <HAL_USB_USART_Available_Data_For_Write>
 80a4266:	2800      	cmp	r0, #0
 80a4268:	dc01      	bgt.n	80a426e <_ZN9USBSerial5writeEh+0x14>
 80a426a:	7c60      	ldrb	r0, [r4, #17]
 80a426c:	b128      	cbz	r0, 80a427a <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80a426e:	4629      	mov	r1, r5
 80a4270:	7c20      	ldrb	r0, [r4, #16]
 80a4272:	f7fe fd33 	bl	80a2cdc <HAL_USB_USART_Send_Data>
 80a4276:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80a427a:	bd38      	pop	{r3, r4, r5, pc}

080a427c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a427c:	b510      	push	{r4, lr}
 80a427e:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a4280:	2300      	movs	r3, #0
 80a4282:	6063      	str	r3, [r4, #4]
 80a4284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a4288:	60a3      	str	r3, [r4, #8]
 80a428a:	4b05      	ldr	r3, [pc, #20]	; (80a42a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a428c:	4608      	mov	r0, r1
 80a428e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a4290:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a4292:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a4294:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a4296:	4611      	mov	r1, r2
 80a4298:	f7fe fd00 	bl	80a2c9c <HAL_USB_USART_Init>
}
 80a429c:	4620      	mov	r0, r4
 80a429e:	bd10      	pop	{r4, pc}
 80a42a0:	080a68c4 	.word	0x080a68c4

080a42a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a42a4:	b510      	push	{r4, lr}
 80a42a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a42a8:	2214      	movs	r2, #20
 80a42aa:	2100      	movs	r1, #0
 80a42ac:	f001 ff9b 	bl	80a61e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a42b0:	4b05      	ldr	r3, [pc, #20]	; (80a42c8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a42b2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a42b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a42b6:	4b05      	ldr	r3, [pc, #20]	; (80a42cc <_Z19acquireSerialBufferv+0x28>)
 80a42b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a42ba:	f240 1301 	movw	r3, #257	; 0x101
 80a42be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a42c0:	2381      	movs	r3, #129	; 0x81
 80a42c2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a42c4:	bd10      	pop	{r4, pc}
 80a42c6:	bf00      	nop
 80a42c8:	200003d1 	.word	0x200003d1
 80a42cc:	20000350 	.word	0x20000350

080a42d0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a42d0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a42d2:	4d0e      	ldr	r5, [pc, #56]	; (80a430c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a42d4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a42d6:	a801      	add	r0, sp, #4
 80a42d8:	f7ff ffe4 	bl	80a42a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a42dc:	6829      	ldr	r1, [r5, #0]
 80a42de:	f011 0401 	ands.w	r4, r1, #1
 80a42e2:	d110      	bne.n	80a4306 <_Z16_fetch_usbserialv+0x36>
 80a42e4:	4628      	mov	r0, r5
 80a42e6:	f7fb fee2 	bl	80a00ae <__cxa_guard_acquire>
 80a42ea:	b160      	cbz	r0, 80a4306 <_Z16_fetch_usbserialv+0x36>
 80a42ec:	aa01      	add	r2, sp, #4
 80a42ee:	4621      	mov	r1, r4
 80a42f0:	4807      	ldr	r0, [pc, #28]	; (80a4310 <_Z16_fetch_usbserialv+0x40>)
 80a42f2:	f7ff ffc3 	bl	80a427c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a42f6:	4628      	mov	r0, r5
 80a42f8:	f7fb fede 	bl	80a00b8 <__cxa_guard_release>
 80a42fc:	4a05      	ldr	r2, [pc, #20]	; (80a4314 <_Z16_fetch_usbserialv+0x44>)
 80a42fe:	4906      	ldr	r1, [pc, #24]	; (80a4318 <_Z16_fetch_usbserialv+0x48>)
 80a4300:	4803      	ldr	r0, [pc, #12]	; (80a4310 <_Z16_fetch_usbserialv+0x40>)
 80a4302:	f000 fafb 	bl	80a48fc <__aeabi_atexit>
	return _usbserial;
}
 80a4306:	4802      	ldr	r0, [pc, #8]	; (80a4310 <_Z16_fetch_usbserialv+0x40>)
 80a4308:	b007      	add	sp, #28
 80a430a:	bd30      	pop	{r4, r5, pc}
 80a430c:	2000034c 	.word	0x2000034c
 80a4310:	200004d4 	.word	0x200004d4
 80a4314:	200000b0 	.word	0x200000b0
 80a4318:	080a41fd 	.word	0x080a41fd

080a431c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a431c:	b510      	push	{r4, lr}
 80a431e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a4320:	2214      	movs	r2, #20
 80a4322:	2100      	movs	r1, #0
 80a4324:	f001 ff5f 	bl	80a61e6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a4328:	4b05      	ldr	r3, [pc, #20]	; (80a4340 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a432a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a432c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a432e:	4b05      	ldr	r3, [pc, #20]	; (80a4344 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a4330:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a4332:	f240 1301 	movw	r3, #257	; 0x101
 80a4336:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a4338:	2381      	movs	r3, #129	; 0x81
 80a433a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a433c:	bd10      	pop	{r4, pc}
 80a433e:	bf00      	nop
 80a4340:	20000584 	.word	0x20000584
 80a4344:	200004ec 	.word	0x200004ec

080a4348 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a4348:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a434a:	4c0e      	ldr	r4, [pc, #56]	; (80a4384 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a434c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a434e:	a801      	add	r0, sp, #4
 80a4350:	f7ff ffe4 	bl	80a431c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a4354:	6823      	ldr	r3, [r4, #0]
 80a4356:	07db      	lsls	r3, r3, #31
 80a4358:	d410      	bmi.n	80a437c <_Z17_fetch_usbserial1v+0x34>
 80a435a:	4620      	mov	r0, r4
 80a435c:	f7fb fea7 	bl	80a00ae <__cxa_guard_acquire>
 80a4360:	b160      	cbz	r0, 80a437c <_Z17_fetch_usbserial1v+0x34>
 80a4362:	aa01      	add	r2, sp, #4
 80a4364:	2101      	movs	r1, #1
 80a4366:	4808      	ldr	r0, [pc, #32]	; (80a4388 <_Z17_fetch_usbserial1v+0x40>)
 80a4368:	f7ff ff88 	bl	80a427c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a436c:	4620      	mov	r0, r4
 80a436e:	f7fb fea3 	bl	80a00b8 <__cxa_guard_release>
 80a4372:	4a06      	ldr	r2, [pc, #24]	; (80a438c <_Z17_fetch_usbserial1v+0x44>)
 80a4374:	4906      	ldr	r1, [pc, #24]	; (80a4390 <_Z17_fetch_usbserial1v+0x48>)
 80a4376:	4804      	ldr	r0, [pc, #16]	; (80a4388 <_Z17_fetch_usbserial1v+0x40>)
 80a4378:	f000 fac0 	bl	80a48fc <__aeabi_atexit>
  return _usbserial1;
}
 80a437c:	4802      	ldr	r0, [pc, #8]	; (80a4388 <_Z17_fetch_usbserial1v+0x40>)
 80a437e:	b006      	add	sp, #24
 80a4380:	bd10      	pop	{r4, pc}
 80a4382:	bf00      	nop
 80a4384:	200004e8 	.word	0x200004e8
 80a4388:	20000570 	.word	0x20000570
 80a438c:	200000b0 	.word	0x200000b0
 80a4390:	080a41fd 	.word	0x080a41fd

080a4394 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 80a4394:	f7fe bb20 	b.w	80a29d8 <HAL_Interrupts_Disable_All>

080a4398 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 80a4398:	f7fe bb16 	b.w	80a29c8 <HAL_Interrupts_Enable_All>

080a439c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a439c:	4770      	bx	lr

080a439e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a439e:	7441      	strb	r1, [r0, #17]
 80a43a0:	4770      	bx	lr

080a43a2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80a43a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80a43a4:	7c00      	ldrb	r0, [r0, #16]
 80a43a6:	f7fe fbd7 	bl	80a2b58 <HAL_USART_Available_Data_For_Write>
}
 80a43aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a43ae:	bd08      	pop	{r3, pc}

080a43b0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80a43b0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80a43b2:	7c00      	ldrb	r0, [r0, #16]
 80a43b4:	f7fe fba8 	bl	80a2b08 <HAL_USART_Available_Data>
}
 80a43b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80a43bc:	bd08      	pop	{r3, pc}

080a43be <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 80a43be:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 80a43c0:	7c00      	ldrb	r0, [r0, #16]
 80a43c2:	f7fe fbb1 	bl	80a2b28 <HAL_USART_Peek_Data>
}
 80a43c6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a43ca:	bf28      	it	cs
 80a43cc:	f04f 30ff 	movcs.w	r0, #4294967295
 80a43d0:	bd08      	pop	{r3, pc}

080a43d2 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 80a43d2:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 80a43d4:	7c00      	ldrb	r0, [r0, #16]
 80a43d6:	f7fe fb9f 	bl	80a2b18 <HAL_USART_Read_Data>
}
 80a43da:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80a43de:	bf28      	it	cs
 80a43e0:	f04f 30ff 	movcs.w	r0, #4294967295
 80a43e4:	bd08      	pop	{r3, pc}

080a43e6 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a43e6:	7c00      	ldrb	r0, [r0, #16]
 80a43e8:	f7fe bba6 	b.w	80a2b38 <HAL_USART_Flush_Data>

080a43ec <_ZN11USARTSerialD0Ev>:
 80a43ec:	b510      	push	{r4, lr}
 80a43ee:	4604      	mov	r4, r0
 80a43f0:	2114      	movs	r1, #20
 80a43f2:	f000 fa91 	bl	80a4918 <_ZdlPvj>
 80a43f6:	4620      	mov	r0, r4
 80a43f8:	bd10      	pop	{r4, pc}

080a43fa <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a43fa:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a43fc:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a43fe:	4604      	mov	r4, r0
 80a4400:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a4402:	b925      	cbnz	r5, 80a440e <_ZN11USARTSerial5writeEh+0x14>
 80a4404:	7c00      	ldrb	r0, [r0, #16]
 80a4406:	f7fe fba7 	bl	80a2b58 <HAL_USART_Available_Data_For_Write>
 80a440a:	2800      	cmp	r0, #0
 80a440c:	dd05      	ble.n	80a441a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a440e:	4631      	mov	r1, r6
 80a4410:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a4412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a4416:	f7fe bb6f 	b.w	80a2af8 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a441a:	4628      	mov	r0, r5
 80a441c:	bd70      	pop	{r4, r5, r6, pc}
	...

080a4420 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4420:	b510      	push	{r4, lr}
 80a4422:	4604      	mov	r4, r0
 80a4424:	4608      	mov	r0, r1
 80a4426:	4611      	mov	r1, r2
 80a4428:	2200      	movs	r2, #0
 80a442a:	6062      	str	r2, [r4, #4]
 80a442c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a4430:	60a2      	str	r2, [r4, #8]
 80a4432:	4a05      	ldr	r2, [pc, #20]	; (80a4448 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a4434:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a4436:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a4438:	2201      	movs	r2, #1
 80a443a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a443c:	461a      	mov	r2, r3
 80a443e:	f7fe fb53 	bl	80a2ae8 <HAL_USART_Init>
}
 80a4442:	4620      	mov	r0, r4
 80a4444:	bd10      	pop	{r4, pc}
 80a4446:	bf00      	nop
 80a4448:	080a68f4 	.word	0x080a68f4

080a444c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a444c:	7c00      	ldrb	r0, [r0, #16]
 80a444e:	f7fe bb7b 	b.w	80a2b48 <HAL_USART_Is_Enabled>
	...

080a4454 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a4454:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a4456:	4d0c      	ldr	r5, [pc, #48]	; (80a4488 <_Z22__fetch_global_Serial1v+0x34>)
 80a4458:	6829      	ldr	r1, [r5, #0]
 80a445a:	f011 0401 	ands.w	r4, r1, #1
 80a445e:	d111      	bne.n	80a4484 <_Z22__fetch_global_Serial1v+0x30>
 80a4460:	4628      	mov	r0, r5
 80a4462:	f7fb fe24 	bl	80a00ae <__cxa_guard_acquire>
 80a4466:	b168      	cbz	r0, 80a4484 <_Z22__fetch_global_Serial1v+0x30>
 80a4468:	4a08      	ldr	r2, [pc, #32]	; (80a448c <_Z22__fetch_global_Serial1v+0x38>)
 80a446a:	4621      	mov	r1, r4
 80a446c:	4b08      	ldr	r3, [pc, #32]	; (80a4490 <_Z22__fetch_global_Serial1v+0x3c>)
 80a446e:	4809      	ldr	r0, [pc, #36]	; (80a4494 <_Z22__fetch_global_Serial1v+0x40>)
 80a4470:	f7ff ffd6 	bl	80a4420 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a4474:	4628      	mov	r0, r5
 80a4476:	f7fb fe1f 	bl	80a00b8 <__cxa_guard_release>
 80a447a:	4a07      	ldr	r2, [pc, #28]	; (80a4498 <_Z22__fetch_global_Serial1v+0x44>)
 80a447c:	4907      	ldr	r1, [pc, #28]	; (80a449c <_Z22__fetch_global_Serial1v+0x48>)
 80a447e:	4805      	ldr	r0, [pc, #20]	; (80a4494 <_Z22__fetch_global_Serial1v+0x40>)
 80a4480:	f000 fa3c 	bl	80a48fc <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a4484:	4803      	ldr	r0, [pc, #12]	; (80a4494 <_Z22__fetch_global_Serial1v+0x40>)
 80a4486:	bd38      	pop	{r3, r4, r5, pc}
 80a4488:	20000720 	.word	0x20000720
 80a448c:	20000724 	.word	0x20000724
 80a4490:	2000069c 	.word	0x2000069c
 80a4494:	20000688 	.word	0x20000688
 80a4498:	200000b0 	.word	0x200000b0
 80a449c:	080a439d 	.word	0x080a439d

080a44a0 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a44a0:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a44a2:	6883      	ldr	r3, [r0, #8]
 80a44a4:	4604      	mov	r4, r0
 80a44a6:	b90b      	cbnz	r3, 80a44ac <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a44a8:	f000 fa47 	bl	80a493a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a44ac:	68c3      	ldr	r3, [r0, #12]
 80a44ae:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a44b0:	68a3      	ldr	r3, [r4, #8]
 80a44b2:	b11b      	cbz	r3, 80a44bc <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a44b4:	2203      	movs	r2, #3
 80a44b6:	4621      	mov	r1, r4
 80a44b8:	4620      	mov	r0, r4
 80a44ba:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a44bc:	4620      	mov	r0, r4
}
 80a44be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a44c2:	2110      	movs	r1, #16
 80a44c4:	f000 ba28 	b.w	80a4918 <_ZdlPvj>

080a44c8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a44c8:	4770      	bx	lr

080a44ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a44ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a44cc:	4606      	mov	r6, r0
 80a44ce:	4615      	mov	r5, r2
 80a44d0:	460c      	mov	r4, r1
 80a44d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a44d4:	42bc      	cmp	r4, r7
 80a44d6:	d006      	beq.n	80a44e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a44d8:	6833      	ldr	r3, [r6, #0]
 80a44da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a44de:	689b      	ldr	r3, [r3, #8]
 80a44e0:	4630      	mov	r0, r6
 80a44e2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a44e4:	e7f6      	b.n	80a44d4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a44e6:	4628      	mov	r0, r5
 80a44e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a44ea <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a44ea:	2200      	movs	r2, #0
 80a44ec:	7c00      	ldrb	r0, [r0, #16]
 80a44ee:	f7fe bb5b 	b.w	80a2ba8 <HAL_I2C_Write_Data>

080a44f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a44f2:	2100      	movs	r1, #0
 80a44f4:	7c00      	ldrb	r0, [r0, #16]
 80a44f6:	f7fe bb5f 	b.w	80a2bb8 <HAL_I2C_Available_Data>

080a44fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a44fa:	2100      	movs	r1, #0
 80a44fc:	7c00      	ldrb	r0, [r0, #16]
 80a44fe:	f7fe bb63 	b.w	80a2bc8 <HAL_I2C_Read_Data>

080a4502 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a4502:	2100      	movs	r1, #0
 80a4504:	7c00      	ldrb	r0, [r0, #16]
 80a4506:	f7fe bb67 	b.w	80a2bd8 <HAL_I2C_Peek_Data>

080a450a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a450a:	2100      	movs	r1, #0
 80a450c:	7c00      	ldrb	r0, [r0, #16]
 80a450e:	f7fe bb6b 	b.w	80a2be8 <HAL_I2C_Flush_Data>

080a4512 <_ZN7TwoWireD0Ev>:
 80a4512:	b510      	push	{r4, lr}
 80a4514:	4604      	mov	r4, r0
 80a4516:	2114      	movs	r1, #20
 80a4518:	f000 f9fe 	bl	80a4918 <_ZdlPvj>
 80a451c:	4620      	mov	r0, r4
 80a451e:	bd10      	pop	{r4, pc}

080a4520 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a4520:	b510      	push	{r4, lr}
 80a4522:	4604      	mov	r4, r0
 80a4524:	4608      	mov	r0, r1
 80a4526:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a452a:	60a3      	str	r3, [r4, #8]
 80a452c:	4b04      	ldr	r3, [pc, #16]	; (80a4540 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80a452e:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a4530:	7420      	strb	r0, [r4, #16]
 80a4532:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a4534:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a4536:	f7fe fb67 	bl	80a2c08 <HAL_I2C_Init>

}
 80a453a:	4620      	mov	r0, r4
 80a453c:	bd10      	pop	{r4, pc}
 80a453e:	bf00      	nop
 80a4540:	080a6924 	.word	0x080a6924

080a4544 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 80a4544:	2300      	movs	r3, #0
 80a4546:	461a      	mov	r2, r3
 80a4548:	4619      	mov	r1, r3
 80a454a:	7c00      	ldrb	r0, [r0, #16]
 80a454c:	f7fe bb0c 	b.w	80a2b68 <HAL_I2C_Begin>

080a4550 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 80a4550:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 80a4552:	2400      	movs	r4, #0
 80a4554:	7c00      	ldrb	r0, [r0, #16]
 80a4556:	9400      	str	r4, [sp, #0]
 80a4558:	f7fe fb0e 	bl	80a2b78 <HAL_I2C_Request_Data>
  return result;
}
 80a455c:	b2c0      	uxtb	r0, r0
 80a455e:	b002      	add	sp, #8
 80a4560:	bd10      	pop	{r4, pc}

080a4562 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80a4562:	2301      	movs	r3, #1
 80a4564:	f7ff bff4 	b.w	80a4550 <_ZN7TwoWire11requestFromEhhh>

080a4568 <_ZN7TwoWire17beginTransmissionEh>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80a4568:	2200      	movs	r2, #0
 80a456a:	7c00      	ldrb	r0, [r0, #16]
 80a456c:	f7fe bb0c 	b.w	80a2b88 <HAL_I2C_Begin_Transmission>

080a4570 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80a4570:	b2c9      	uxtb	r1, r1
 80a4572:	f7ff bff9 	b.w	80a4568 <_ZN7TwoWire17beginTransmissionEh>

080a4576 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80a4576:	2200      	movs	r2, #0
 80a4578:	7c00      	ldrb	r0, [r0, #16]
 80a457a:	f7fe bb0d 	b.w	80a2b98 <HAL_I2C_End_Transmission>

080a457e <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80a457e:	2101      	movs	r1, #1
 80a4580:	f7ff bff9 	b.w	80a4576 <_ZN7TwoWire15endTransmissionEh>

080a4584 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a4584:	2100      	movs	r1, #0
 80a4586:	7c00      	ldrb	r0, [r0, #16]
 80a4588:	f7fe bb36 	b.w	80a2bf8 <HAL_I2C_Is_Enabled>

080a458c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a458c:	2200      	movs	r2, #0
 80a458e:	4611      	mov	r1, r2
 80a4590:	6840      	ldr	r0, [r0, #4]
 80a4592:	f7fe bc17 	b.w	80a2dc4 <network_ready>

080a4596 <_ZN5spark9WiFiClass7resolveEPKc>:
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a4596:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a4598:	4616      	mov	r6, r2
 80a459a:	b089      	sub	sp, #36	; 0x24
    {
        HAL_IPAddress ip = {};
 80a459c:	2211      	movs	r2, #17
    WLanSelectAntenna_TypeDef getAntenna() {
        return wlan_get_antenna(nullptr);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80a459e:	460f      	mov	r7, r1
 80a45a0:	4604      	mov	r4, r0
    {
        HAL_IPAddress ip = {};
 80a45a2:	2100      	movs	r1, #0
 80a45a4:	a803      	add	r0, sp, #12
 80a45a6:	f001 fe1e 	bl	80a61e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a45aa:	4630      	mov	r0, r6
 80a45ac:	f001 fe79 	bl	80a62a2 <strlen>
 80a45b0:	2500      	movs	r5, #0
 80a45b2:	9500      	str	r5, [sp, #0]
 80a45b4:	b281      	uxth	r1, r0
 80a45b6:	687b      	ldr	r3, [r7, #4]
 80a45b8:	aa03      	add	r2, sp, #12
 80a45ba:	4630      	mov	r0, r6
 80a45bc:	f7fe fba6 	bl	80a2d0c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a45c0:	b120      	cbz	r0, 80a45cc <_ZN5spark9WiFiClass7resolveEPKc+0x36>
 80a45c2:	4629      	mov	r1, r5
 80a45c4:	4620      	mov	r0, r4
 80a45c6:	f7ff fddf 	bl	80a4188 <_ZN9IPAddressC1Em>
 80a45ca:	e003      	b.n	80a45d4 <_ZN5spark9WiFiClass7resolveEPKc+0x3e>
 80a45cc:	a903      	add	r1, sp, #12
 80a45ce:	4620      	mov	r0, r4
 80a45d0:	f7ff fdc8 	bl	80a4164 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80a45d4:	4620      	mov	r0, r4
 80a45d6:	b009      	add	sp, #36	; 0x24
 80a45d8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a45da <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80a45da:	2200      	movs	r2, #0
 80a45dc:	4611      	mov	r1, r2
 80a45de:	6840      	ldr	r0, [r0, #4]
 80a45e0:	f7fe bc10 	b.w	80a2e04 <network_listening>

080a45e4 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80a45e4:	2200      	movs	r2, #0
 80a45e6:	4611      	mov	r1, r2
 80a45e8:	6840      	ldr	r0, [r0, #4]
 80a45ea:	f7fe bc1b 	b.w	80a2e24 <network_get_listen_timeout>

080a45ee <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80a45ee:	2200      	movs	r2, #0
 80a45f0:	6840      	ldr	r0, [r0, #4]
 80a45f2:	f7fe bc0f 	b.w	80a2e14 <network_set_listen_timeout>

080a45f6 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80a45f6:	2200      	movs	r2, #0
 80a45f8:	f081 0101 	eor.w	r1, r1, #1
 80a45fc:	6840      	ldr	r0, [r0, #4]
 80a45fe:	f7fe bbf9 	b.w	80a2df4 <network_listen>

080a4602 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 80a4602:	2300      	movs	r3, #0
 80a4604:	461a      	mov	r2, r3
 80a4606:	4619      	mov	r1, r3
 80a4608:	6840      	ldr	r0, [r0, #4]
 80a460a:	f7fe bbeb 	b.w	80a2de4 <network_off>

080a460e <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a460e:	2200      	movs	r2, #0
 80a4610:	4611      	mov	r1, r2
 80a4612:	6840      	ldr	r0, [r0, #4]
 80a4614:	f7fe bbc6 	b.w	80a2da4 <network_connecting>

080a4618 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80a4618:	2200      	movs	r2, #0
 80a461a:	2102      	movs	r1, #2
 80a461c:	6840      	ldr	r0, [r0, #4]
 80a461e:	f7fe bbc9 	b.w	80a2db4 <network_disconnect>

080a4622 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a4622:	2300      	movs	r3, #0
 80a4624:	461a      	mov	r2, r3
 80a4626:	6840      	ldr	r0, [r0, #4]
 80a4628:	f7fe bbb4 	b.w	80a2d94 <network_connect>

080a462c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80a462c:	4b02      	ldr	r3, [pc, #8]	; (80a4638 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 80a462e:	2204      	movs	r2, #4
 80a4630:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 80a4632:	4a02      	ldr	r2, [pc, #8]	; (80a463c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a4634:	601a      	str	r2, [r3, #0]
 80a4636:	4770      	bx	lr
 80a4638:	200007a8 	.word	0x200007a8
 80a463c:	080a694c 	.word	0x080a694c

080a4640 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80a4640:	2300      	movs	r3, #0
 80a4642:	461a      	mov	r2, r3
 80a4644:	6840      	ldr	r0, [r0, #4]
 80a4646:	f7fe bba5 	b.w	80a2d94 <network_connect>

080a464a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 80a464a:	2200      	movs	r2, #0
 80a464c:	2102      	movs	r1, #2
 80a464e:	6840      	ldr	r0, [r0, #4]
 80a4650:	f7fe bbb0 	b.w	80a2db4 <network_disconnect>

080a4654 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 80a4654:	2200      	movs	r2, #0
 80a4656:	4611      	mov	r1, r2
 80a4658:	6840      	ldr	r0, [r0, #4]
 80a465a:	f7fe bba3 	b.w	80a2da4 <network_connecting>

080a465e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80a465e:	2200      	movs	r2, #0
 80a4660:	4611      	mov	r1, r2
 80a4662:	6840      	ldr	r0, [r0, #4]
 80a4664:	f7fe bbae 	b.w	80a2dc4 <network_ready>

080a4668 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80a4668:	2300      	movs	r3, #0
 80a466a:	461a      	mov	r2, r3
 80a466c:	4619      	mov	r1, r3
 80a466e:	6840      	ldr	r0, [r0, #4]
 80a4670:	f7fe bbb0 	b.w	80a2dd4 <network_on>

080a4674 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80a4674:	2300      	movs	r3, #0
 80a4676:	461a      	mov	r2, r3
 80a4678:	4619      	mov	r1, r3
 80a467a:	6840      	ldr	r0, [r0, #4]
 80a467c:	f7fe bbb2 	b.w	80a2de4 <network_off>

080a4680 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80a4680:	2200      	movs	r2, #0
 80a4682:	f081 0101 	eor.w	r1, r1, #1
 80a4686:	6840      	ldr	r0, [r0, #4]
 80a4688:	f7fe bbb4 	b.w	80a2df4 <network_listen>

080a468c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80a468c:	2200      	movs	r2, #0
 80a468e:	6840      	ldr	r0, [r0, #4]
 80a4690:	f7fe bbc0 	b.w	80a2e14 <network_set_listen_timeout>

080a4694 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80a4694:	2200      	movs	r2, #0
 80a4696:	4611      	mov	r1, r2
 80a4698:	6840      	ldr	r0, [r0, #4]
 80a469a:	f7fe bbc3 	b.w	80a2e24 <network_get_listen_timeout>

080a469e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80a469e:	2200      	movs	r2, #0
 80a46a0:	4611      	mov	r1, r2
 80a46a2:	6840      	ldr	r0, [r0, #4]
 80a46a4:	f7fe bbae 	b.w	80a2e04 <network_listening>

080a46a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80a46a8:	b570      	push	{r4, r5, r6, lr}
 80a46aa:	4616      	mov	r6, r2
 80a46ac:	b08e      	sub	sp, #56	; 0x38
 80a46ae:	4604      	mov	r4, r0
    IPAddress addr;
 80a46b0:	a808      	add	r0, sp, #32
 80a46b2:	f7ff fd49 	bl	80a4148 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {};
 80a46b6:	2211      	movs	r2, #17
 80a46b8:	2100      	movs	r1, #0
 80a46ba:	a803      	add	r0, sp, #12
 80a46bc:	f001 fd93 	bl	80a61e6 <memset>
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80a46c0:	4630      	mov	r0, r6
 80a46c2:	f001 fdee 	bl	80a62a2 <strlen>
 80a46c6:	2500      	movs	r5, #0
 80a46c8:	4b0a      	ldr	r3, [pc, #40]	; (80a46f4 <_ZN5spark12NetworkClass7resolveEPKc+0x4c>)
 80a46ca:	9500      	str	r5, [sp, #0]
 80a46cc:	b281      	uxth	r1, r0
 80a46ce:	685b      	ldr	r3, [r3, #4]
 80a46d0:	aa03      	add	r2, sp, #12
 80a46d2:	4630      	mov	r0, r6
 80a46d4:	f7fe fb1a 	bl	80a2d0c <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80a46d8:	b120      	cbz	r0, 80a46e4 <_ZN5spark12NetworkClass7resolveEPKc+0x3c>
 80a46da:	4629      	mov	r1, r5
 80a46dc:	4620      	mov	r0, r4
 80a46de:	f7ff fd53 	bl	80a4188 <_ZN9IPAddressC1Em>
 80a46e2:	e003      	b.n	80a46ec <_ZN5spark12NetworkClass7resolveEPKc+0x44>
 80a46e4:	a903      	add	r1, sp, #12
 80a46e6:	4620      	mov	r0, r4
 80a46e8:	f7ff fd3c 	bl	80a4164 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80a46ec:	4620      	mov	r0, r4
 80a46ee:	b00e      	add	sp, #56	; 0x38
 80a46f0:	bd70      	pop	{r4, r5, r6, pc}
 80a46f2:	bf00      	nop
 80a46f4:	200007a8 	.word	0x200007a8

080a46f8 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 80a46f8:	4b03      	ldr	r3, [pc, #12]	; (80a4708 <_ZN5spark12NetworkClass4fromEm+0x10>)
 80a46fa:	4a04      	ldr	r2, [pc, #16]	; (80a470c <_ZN5spark12NetworkClass4fromEm+0x14>)
 80a46fc:	2804      	cmp	r0, #4
 80a46fe:	bf0c      	ite	eq
 80a4700:	4610      	moveq	r0, r2
 80a4702:	4618      	movne	r0, r3
 80a4704:	4770      	bx	lr
 80a4706:	bf00      	nop
 80a4708:	200007b0 	.word	0x200007b0
 80a470c:	200007a8 	.word	0x200007a8

080a4710 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80a4710:	4b02      	ldr	r3, [pc, #8]	; (80a471c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80a4712:	4a03      	ldr	r2, [pc, #12]	; (80a4720 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80a4714:	601a      	str	r2, [r3, #0]
 80a4716:	2200      	movs	r2, #0
 80a4718:	605a      	str	r2, [r3, #4]
 80a471a:	4770      	bx	lr
 80a471c:	200007b0 	.word	0x200007b0
 80a4720:	080a6980 	.word	0x080a6980

080a4724 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a4724:	b510      	push	{r4, lr}
 80a4726:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a4728:	480f      	ldr	r0, [pc, #60]	; (80a4768 <pinAvailable+0x44>)
 80a472a:	f7fe fbf7 	bl	80a2f1c <_ZN8SPIClass9isEnabledEv>
 80a472e:	b128      	cbz	r0, 80a473c <pinAvailable+0x18>
 80a4730:	f1a4 030d 	sub.w	r3, r4, #13
 80a4734:	2b02      	cmp	r3, #2
 80a4736:	d801      	bhi.n	80a473c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a4738:	2000      	movs	r0, #0
 80a473a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a473c:	f000 f8be 	bl	80a48bc <_Z19__fetch_global_Wirev>
 80a4740:	f7ff ff20 	bl	80a4584 <_ZN7TwoWire9isEnabledEv>
 80a4744:	b108      	cbz	r0, 80a474a <pinAvailable+0x26>
 80a4746:	2c01      	cmp	r4, #1
 80a4748:	d9f6      	bls.n	80a4738 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a474a:	f7ff fe83 	bl	80a4454 <_Z22__fetch_global_Serial1v>
 80a474e:	f7ff fe7d 	bl	80a444c <_ZN11USARTSerial9isEnabledEv>
 80a4752:	b118      	cbz	r0, 80a475c <pinAvailable+0x38>
 80a4754:	f1a4 0312 	sub.w	r3, r4, #18
 80a4758:	2b01      	cmp	r3, #1
 80a475a:	d9ed      	bls.n	80a4738 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a475c:	2c17      	cmp	r4, #23
 80a475e:	bf8c      	ite	hi
 80a4760:	2000      	movhi	r0, #0
 80a4762:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a4764:	bd10      	pop	{r4, pc}
 80a4766:	bf00      	nop
 80a4768:	200007b8 	.word	0x200007b8

080a476c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a476c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a476e:	b538      	push	{r3, r4, r5, lr}
 80a4770:	4604      	mov	r4, r0
 80a4772:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a4774:	d80a      	bhi.n	80a478c <pinMode+0x20>
 80a4776:	29ff      	cmp	r1, #255	; 0xff
 80a4778:	d008      	beq.n	80a478c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a477a:	f7ff ffd3 	bl	80a4724 <pinAvailable>
 80a477e:	b128      	cbz	r0, 80a478c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4780:	4629      	mov	r1, r5
 80a4782:	4620      	mov	r0, r4
}
 80a4784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a4788:	f7fe b8fe 	b.w	80a2988 <HAL_Pin_Mode>
 80a478c:	bd38      	pop	{r3, r4, r5, pc}

080a478e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80a478e:	b538      	push	{r3, r4, r5, lr}
 80a4790:	4604      	mov	r4, r0
 80a4792:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a4794:	f7fe f900 	bl	80a2998 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80a4798:	28ff      	cmp	r0, #255	; 0xff
 80a479a:	d010      	beq.n	80a47be <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80a479c:	2806      	cmp	r0, #6
 80a479e:	d804      	bhi.n	80a47aa <digitalWrite+0x1c>
 80a47a0:	234d      	movs	r3, #77	; 0x4d
 80a47a2:	fa23 f000 	lsr.w	r0, r3, r0
 80a47a6:	07c3      	lsls	r3, r0, #31
 80a47a8:	d409      	bmi.n	80a47be <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80a47aa:	4620      	mov	r0, r4
 80a47ac:	f7ff ffba 	bl	80a4724 <pinAvailable>
 80a47b0:	b128      	cbz	r0, 80a47be <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a47b2:	4629      	mov	r1, r5
 80a47b4:	4620      	mov	r0, r4
}
 80a47b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80a47ba:	f7fe b8f5 	b.w	80a29a8 <HAL_GPIO_Write>
 80a47be:	bd38      	pop	{r3, r4, r5, pc}

080a47c0 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a47c0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a47c2:	4c0c      	ldr	r4, [pc, #48]	; (80a47f4 <_GLOBAL__sub_I_SPI+0x34>)
 80a47c4:	4e0c      	ldr	r6, [pc, #48]	; (80a47f8 <_GLOBAL__sub_I_SPI+0x38>)
 80a47c6:	4d0d      	ldr	r5, [pc, #52]	; (80a47fc <_GLOBAL__sub_I_SPI+0x3c>)
 80a47c8:	2100      	movs	r1, #0
 80a47ca:	4620      	mov	r0, r4
 80a47cc:	f7fe fb92 	bl	80a2ef4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a47d0:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a47d2:	4c0b      	ldr	r4, [pc, #44]	; (80a4800 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a47d4:	4632      	mov	r2, r6
 80a47d6:	4629      	mov	r1, r5
 80a47d8:	f000 f890 	bl	80a48fc <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a47dc:	2101      	movs	r1, #1
 80a47de:	4620      	mov	r0, r4
 80a47e0:	f7fe fb88 	bl	80a2ef4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a47e4:	4632      	mov	r2, r6
 80a47e6:	4629      	mov	r1, r5
 80a47e8:	4620      	mov	r0, r4
 80a47ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a47ee:	f000 b885 	b.w	80a48fc <__aeabi_atexit>
 80a47f2:	bf00      	nop
 80a47f4:	200007b8 	.word	0x200007b8
 80a47f8:	200000b0 	.word	0x200000b0
 80a47fc:	080a2ee5 	.word	0x080a2ee5
 80a4800:	200007c8 	.word	0x200007c8

080a4804 <_ZN19ApplicationWatchdog4loopEv>:
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a4804:	b530      	push	{r4, r5, lr}
 80a4806:	4604      	mov	r4, r0
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a4808:	4d1b      	ldr	r5, [pc, #108]	; (80a4878 <_ZN19ApplicationWatchdog4loopEv+0x74>)
	wd.loop();
	os_thread_cleanup(nullptr);
}

void ApplicationWatchdog::loop()
{
 80a480a:	b089      	sub	sp, #36	; 0x24
	bool done = false;
	system_tick_t now;
	while (!done) {
		HAL_Delay_Milliseconds(timeout);
 80a480c:	6820      	ldr	r0, [r4, #0]
 80a480e:	f7fe f903 	bl	80a2a18 <HAL_Delay_Milliseconds>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a4812:	f7fe f911 	bl	80a2a38 <HAL_Timer_Get_Milli_Seconds>
		now = current_time();
		done = (now-last_checkin)>=timeout;
 80a4816:	682b      	ldr	r3, [r5, #0]
 80a4818:	6822      	ldr	r2, [r4, #0]

void ApplicationWatchdog::loop()
{
	bool done = false;
	system_tick_t now;
	while (!done) {
 80a481a:	1ac0      	subs	r0, r0, r3
 80a481c:	4290      	cmp	r0, r2
 80a481e:	d3f5      	bcc.n	80a480c <_ZN19ApplicationWatchdog4loopEv+0x8>
		HAL_Delay_Milliseconds(timeout);
		now = current_time();
		done = (now-last_checkin)>=timeout;
	}

	if (timeout>0 && timeout_fn) {
 80a4820:	6823      	ldr	r3, [r4, #0]
 80a4822:	b333      	cbz	r3, 80a4872 <_ZN19ApplicationWatchdog4loopEv+0x6e>
 80a4824:	68e3      	ldr	r3, [r4, #12]
 80a4826:	b323      	cbz	r3, 80a4872 <_ZN19ApplicationWatchdog4loopEv+0x6e>
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a4828:	1d25      	adds	r5, r4, #4
 80a482a:	6923      	ldr	r3, [r4, #16]
 80a482c:	4628      	mov	r0, r5
 80a482e:	4798      	blx	r3
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4830:	2300      	movs	r3, #0
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a4832:	a904      	add	r1, sp, #16
 80a4834:	4668      	mov	r0, sp
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a4836:	9302      	str	r3, [sp, #8]
 80a4838:	9306      	str	r3, [sp, #24]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a483a:	f7ff f8e4 	bl	80a3a06 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a483e:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a4840:	9a06      	ldr	r2, [sp, #24]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4842:	9306      	str	r3, [sp, #24]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4844:	9202      	str	r2, [sp, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4846:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a4848:	9a07      	ldr	r2, [sp, #28]
 80a484a:	4629      	mov	r1, r5
 80a484c:	a804      	add	r0, sp, #16
 80a484e:	9203      	str	r2, [sp, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a4850:	9307      	str	r3, [sp, #28]
 80a4852:	f7ff f8d8 	bl	80a3a06 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a4856:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 80a4858:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a485a:	60e3      	str	r3, [r4, #12]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a485c:	9b07      	ldr	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 80a485e:	9206      	str	r2, [sp, #24]
 80a4860:	6922      	ldr	r2, [r4, #16]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a4862:	a804      	add	r0, sp, #16
      __b = _GLIBCXX_MOVE(__tmp);
 80a4864:	6123      	str	r3, [r4, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a4866:	9207      	str	r2, [sp, #28]
 80a4868:	f7fb fc5f 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
 80a486c:	4668      	mov	r0, sp
 80a486e:	f7fb fc5c 	bl	80a012a <_ZNSt14_Function_baseD1Ev>
		timeout_fn();
		timeout_fn = std::function<void(void)>();
	}
}
 80a4872:	b009      	add	sp, #36	; 0x24
 80a4874:	bd30      	pop	{r4, r5, pc}
 80a4876:	bf00      	nop
 80a4878:	200007d8 	.word	0x200007d8

080a487c <_ZN19ApplicationWatchdog5startEPv>:
#if PLATFORM_THREADING

volatile system_tick_t ApplicationWatchdog::last_checkin;

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
 80a487c:	b508      	push	{r3, lr}
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
 80a487e:	f7ff ffc1 	bl	80a4804 <_ZN19ApplicationWatchdog4loopEv>
	os_thread_cleanup(nullptr);
}
 80a4882:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

os_thread_return_t ApplicationWatchdog::start(void* pointer)
{
	ApplicationWatchdog& wd = *(ApplicationWatchdog*)pointer;
	wd.loop();
	os_thread_cleanup(nullptr);
 80a4886:	2000      	movs	r0, #0
 80a4888:	f7fe b916 	b.w	80a2ab8 <os_thread_cleanup>

080a488c <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a488c:	b513      	push	{r0, r1, r4, lr}
 80a488e:	4c08      	ldr	r4, [pc, #32]	; (80a48b0 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a4890:	2300      	movs	r3, #0
 80a4892:	461a      	mov	r2, r3
 80a4894:	4619      	mov	r1, r3
 80a4896:	9300      	str	r3, [sp, #0]
 80a4898:	4620      	mov	r0, r4
 80a489a:	f7ff fc8b 	bl	80a41b4 <_ZN9IPAddressC1Ehhhh>
 80a489e:	4620      	mov	r0, r4
 80a48a0:	4a04      	ldr	r2, [pc, #16]	; (80a48b4 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a48a2:	4905      	ldr	r1, [pc, #20]	; (80a48b8 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a48a4:	b002      	add	sp, #8
 80a48a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a48aa:	f000 b827 	b.w	80a48fc <__aeabi_atexit>
 80a48ae:	bf00      	nop
 80a48b0:	200007dc 	.word	0x200007dc
 80a48b4:	200000b0 	.word	0x200000b0
 80a48b8:	080a4105 	.word	0x080a4105

080a48bc <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a48bc:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a48be:	4d0b      	ldr	r5, [pc, #44]	; (80a48ec <_Z19__fetch_global_Wirev+0x30>)
 80a48c0:	6829      	ldr	r1, [r5, #0]
 80a48c2:	f011 0401 	ands.w	r4, r1, #1
 80a48c6:	d10f      	bne.n	80a48e8 <_Z19__fetch_global_Wirev+0x2c>
 80a48c8:	4628      	mov	r0, r5
 80a48ca:	f7fb fbf0 	bl	80a00ae <__cxa_guard_acquire>
 80a48ce:	b158      	cbz	r0, 80a48e8 <_Z19__fetch_global_Wirev+0x2c>
 80a48d0:	4621      	mov	r1, r4
 80a48d2:	4807      	ldr	r0, [pc, #28]	; (80a48f0 <_Z19__fetch_global_Wirev+0x34>)
 80a48d4:	f7ff fe24 	bl	80a4520 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a48d8:	4628      	mov	r0, r5
 80a48da:	f7fb fbed 	bl	80a00b8 <__cxa_guard_release>
 80a48de:	4a05      	ldr	r2, [pc, #20]	; (80a48f4 <_Z19__fetch_global_Wirev+0x38>)
 80a48e0:	4905      	ldr	r1, [pc, #20]	; (80a48f8 <_Z19__fetch_global_Wirev+0x3c>)
 80a48e2:	4803      	ldr	r0, [pc, #12]	; (80a48f0 <_Z19__fetch_global_Wirev+0x34>)
 80a48e4:	f000 f80a 	bl	80a48fc <__aeabi_atexit>
	return wire;
}
 80a48e8:	4801      	ldr	r0, [pc, #4]	; (80a48f0 <_Z19__fetch_global_Wirev+0x34>)
 80a48ea:	bd38      	pop	{r3, r4, r5, pc}
 80a48ec:	200007f4 	.word	0x200007f4
 80a48f0:	200007f8 	.word	0x200007f8
 80a48f4:	200000b0 	.word	0x200000b0
 80a48f8:	080a44c9 	.word	0x080a44c9

080a48fc <__aeabi_atexit>:
 80a48fc:	460b      	mov	r3, r1
 80a48fe:	4601      	mov	r1, r0
 80a4900:	4618      	mov	r0, r3
 80a4902:	f001 bc57 	b.w	80a61b4 <__cxa_atexit>
	...

080a4908 <_ZSt15get_new_handlerv>:
 80a4908:	4b02      	ldr	r3, [pc, #8]	; (80a4914 <_ZSt15get_new_handlerv+0xc>)
 80a490a:	6818      	ldr	r0, [r3, #0]
 80a490c:	f3bf 8f5f 	dmb	sy
 80a4910:	4770      	bx	lr
 80a4912:	bf00      	nop
 80a4914:	2000080c 	.word	0x2000080c

080a4918 <_ZdlPvj>:
 80a4918:	f7fb bbc5 	b.w	80a00a6 <_ZdlPv>

080a491c <_ZnwjRKSt9nothrow_t>:
 80a491c:	b510      	push	{r4, lr}
 80a491e:	2800      	cmp	r0, #0
 80a4920:	bf14      	ite	ne
 80a4922:	4604      	movne	r4, r0
 80a4924:	2401      	moveq	r4, #1
 80a4926:	4620      	mov	r0, r4
 80a4928:	f7fe fa9c 	bl	80a2e64 <malloc>
 80a492c:	b920      	cbnz	r0, 80a4938 <_ZnwjRKSt9nothrow_t+0x1c>
 80a492e:	f7ff ffeb 	bl	80a4908 <_ZSt15get_new_handlerv>
 80a4932:	b108      	cbz	r0, 80a4938 <_ZnwjRKSt9nothrow_t+0x1c>
 80a4934:	4780      	blx	r0
 80a4936:	e7f6      	b.n	80a4926 <_ZnwjRKSt9nothrow_t+0xa>
 80a4938:	bd10      	pop	{r4, pc}

080a493a <_ZSt25__throw_bad_function_callv>:
 80a493a:	b508      	push	{r3, lr}
 80a493c:	f7fe faba 	bl	80a2eb4 <abort>

080a4940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4940:	4b18      	ldr	r3, [pc, #96]	; (80a49a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4942:	681a      	ldr	r2, [r3, #0]
 80a4944:	07d1      	lsls	r1, r2, #31
 80a4946:	bf5c      	itt	pl
 80a4948:	2201      	movpl	r2, #1
 80a494a:	601a      	strpl	r2, [r3, #0]
 80a494c:	4b16      	ldr	r3, [pc, #88]	; (80a49a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a494e:	681a      	ldr	r2, [r3, #0]
 80a4950:	07d2      	lsls	r2, r2, #31
 80a4952:	bf5c      	itt	pl
 80a4954:	2201      	movpl	r2, #1
 80a4956:	601a      	strpl	r2, [r3, #0]
 80a4958:	4b14      	ldr	r3, [pc, #80]	; (80a49ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a495a:	681a      	ldr	r2, [r3, #0]
 80a495c:	07d0      	lsls	r0, r2, #31
 80a495e:	bf5c      	itt	pl
 80a4960:	2201      	movpl	r2, #1
 80a4962:	601a      	strpl	r2, [r3, #0]
 80a4964:	4b12      	ldr	r3, [pc, #72]	; (80a49b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4966:	681a      	ldr	r2, [r3, #0]
 80a4968:	07d1      	lsls	r1, r2, #31
 80a496a:	bf5c      	itt	pl
 80a496c:	2201      	movpl	r2, #1
 80a496e:	601a      	strpl	r2, [r3, #0]
 80a4970:	4b10      	ldr	r3, [pc, #64]	; (80a49b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4972:	681a      	ldr	r2, [r3, #0]
 80a4974:	07d2      	lsls	r2, r2, #31
 80a4976:	bf5c      	itt	pl
 80a4978:	2201      	movpl	r2, #1
 80a497a:	601a      	strpl	r2, [r3, #0]
 80a497c:	4b0e      	ldr	r3, [pc, #56]	; (80a49b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a497e:	681a      	ldr	r2, [r3, #0]
 80a4980:	07d0      	lsls	r0, r2, #31
 80a4982:	bf5c      	itt	pl
 80a4984:	2201      	movpl	r2, #1
 80a4986:	601a      	strpl	r2, [r3, #0]
 80a4988:	4b0c      	ldr	r3, [pc, #48]	; (80a49bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a498a:	681a      	ldr	r2, [r3, #0]
 80a498c:	07d1      	lsls	r1, r2, #31
 80a498e:	bf5c      	itt	pl
 80a4990:	2201      	movpl	r2, #1
 80a4992:	601a      	strpl	r2, [r3, #0]
 80a4994:	4b0a      	ldr	r3, [pc, #40]	; (80a49c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4996:	681a      	ldr	r2, [r3, #0]
 80a4998:	07d2      	lsls	r2, r2, #31
 80a499a:	bf5c      	itt	pl
 80a499c:	2201      	movpl	r2, #1
 80a499e:	601a      	strpl	r2, [r3, #0]
 80a49a0:	4770      	bx	lr
 80a49a2:	bf00      	nop
 80a49a4:	2000082c 	.word	0x2000082c
 80a49a8:	20000828 	.word	0x20000828
 80a49ac:	20000824 	.word	0x20000824
 80a49b0:	20000820 	.word	0x20000820
 80a49b4:	2000081c 	.word	0x2000081c
 80a49b8:	20000818 	.word	0x20000818
 80a49bc:	20000814 	.word	0x20000814
 80a49c0:	20000810 	.word	0x20000810

080a49c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a49c4:	4b24      	ldr	r3, [pc, #144]	; (80a4a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a49c6:	681a      	ldr	r2, [r3, #0]
 80a49c8:	07d0      	lsls	r0, r2, #31
 80a49ca:	bf5c      	itt	pl
 80a49cc:	2201      	movpl	r2, #1
 80a49ce:	601a      	strpl	r2, [r3, #0]
 80a49d0:	4b22      	ldr	r3, [pc, #136]	; (80a4a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a49d2:	681a      	ldr	r2, [r3, #0]
 80a49d4:	07d1      	lsls	r1, r2, #31
 80a49d6:	bf5c      	itt	pl
 80a49d8:	2201      	movpl	r2, #1
 80a49da:	601a      	strpl	r2, [r3, #0]
 80a49dc:	4b20      	ldr	r3, [pc, #128]	; (80a4a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a49de:	681a      	ldr	r2, [r3, #0]
 80a49e0:	07d2      	lsls	r2, r2, #31
 80a49e2:	bf5c      	itt	pl
 80a49e4:	2201      	movpl	r2, #1
 80a49e6:	601a      	strpl	r2, [r3, #0]
 80a49e8:	4b1e      	ldr	r3, [pc, #120]	; (80a4a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a49ea:	681a      	ldr	r2, [r3, #0]
 80a49ec:	07d0      	lsls	r0, r2, #31
 80a49ee:	bf5c      	itt	pl
 80a49f0:	2201      	movpl	r2, #1
 80a49f2:	601a      	strpl	r2, [r3, #0]
 80a49f4:	4b1c      	ldr	r3, [pc, #112]	; (80a4a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a49f6:	681a      	ldr	r2, [r3, #0]
 80a49f8:	07d1      	lsls	r1, r2, #31
 80a49fa:	bf5c      	itt	pl
 80a49fc:	2201      	movpl	r2, #1
 80a49fe:	601a      	strpl	r2, [r3, #0]
 80a4a00:	4b1a      	ldr	r3, [pc, #104]	; (80a4a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a4a02:	681a      	ldr	r2, [r3, #0]
 80a4a04:	07d2      	lsls	r2, r2, #31
 80a4a06:	bf5c      	itt	pl
 80a4a08:	2201      	movpl	r2, #1
 80a4a0a:	601a      	strpl	r2, [r3, #0]
 80a4a0c:	4b18      	ldr	r3, [pc, #96]	; (80a4a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a4a0e:	681a      	ldr	r2, [r3, #0]
 80a4a10:	07d0      	lsls	r0, r2, #31
 80a4a12:	bf5c      	itt	pl
 80a4a14:	2201      	movpl	r2, #1
 80a4a16:	601a      	strpl	r2, [r3, #0]
 80a4a18:	4b16      	ldr	r3, [pc, #88]	; (80a4a74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a4a1a:	681a      	ldr	r2, [r3, #0]
 80a4a1c:	07d1      	lsls	r1, r2, #31
 80a4a1e:	bf5c      	itt	pl
 80a4a20:	2201      	movpl	r2, #1
 80a4a22:	601a      	strpl	r2, [r3, #0]
 80a4a24:	4b14      	ldr	r3, [pc, #80]	; (80a4a78 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a4a26:	681a      	ldr	r2, [r3, #0]
 80a4a28:	07d2      	lsls	r2, r2, #31
 80a4a2a:	bf5c      	itt	pl
 80a4a2c:	2201      	movpl	r2, #1
 80a4a2e:	601a      	strpl	r2, [r3, #0]
 80a4a30:	4b12      	ldr	r3, [pc, #72]	; (80a4a7c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a4a32:	681a      	ldr	r2, [r3, #0]
 80a4a34:	07d0      	lsls	r0, r2, #31
 80a4a36:	bf5c      	itt	pl
 80a4a38:	2201      	movpl	r2, #1
 80a4a3a:	601a      	strpl	r2, [r3, #0]
 80a4a3c:	4b10      	ldr	r3, [pc, #64]	; (80a4a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a4a3e:	681a      	ldr	r2, [r3, #0]
 80a4a40:	07d1      	lsls	r1, r2, #31
 80a4a42:	bf5c      	itt	pl
 80a4a44:	2201      	movpl	r2, #1
 80a4a46:	601a      	strpl	r2, [r3, #0]
 80a4a48:	4b0e      	ldr	r3, [pc, #56]	; (80a4a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a4a4a:	681a      	ldr	r2, [r3, #0]
 80a4a4c:	07d2      	lsls	r2, r2, #31
 80a4a4e:	bf5c      	itt	pl
 80a4a50:	2201      	movpl	r2, #1
 80a4a52:	601a      	strpl	r2, [r3, #0]
 80a4a54:	4770      	bx	lr
 80a4a56:	bf00      	nop
 80a4a58:	2000085c 	.word	0x2000085c
 80a4a5c:	20000858 	.word	0x20000858
 80a4a60:	20000854 	.word	0x20000854
 80a4a64:	20000850 	.word	0x20000850
 80a4a68:	2000084c 	.word	0x2000084c
 80a4a6c:	20000848 	.word	0x20000848
 80a4a70:	20000844 	.word	0x20000844
 80a4a74:	20000840 	.word	0x20000840
 80a4a78:	2000083c 	.word	0x2000083c
 80a4a7c:	20000838 	.word	0x20000838
 80a4a80:	20000834 	.word	0x20000834
 80a4a84:	20000830 	.word	0x20000830

080a4a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a4a88:	4b24      	ldr	r3, [pc, #144]	; (80a4b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a4a8a:	681a      	ldr	r2, [r3, #0]
 80a4a8c:	07d0      	lsls	r0, r2, #31
 80a4a8e:	bf5c      	itt	pl
 80a4a90:	2201      	movpl	r2, #1
 80a4a92:	601a      	strpl	r2, [r3, #0]
 80a4a94:	4b22      	ldr	r3, [pc, #136]	; (80a4b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a4a96:	681a      	ldr	r2, [r3, #0]
 80a4a98:	07d1      	lsls	r1, r2, #31
 80a4a9a:	bf5c      	itt	pl
 80a4a9c:	2201      	movpl	r2, #1
 80a4a9e:	601a      	strpl	r2, [r3, #0]
 80a4aa0:	4b20      	ldr	r3, [pc, #128]	; (80a4b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a4aa2:	681a      	ldr	r2, [r3, #0]
 80a4aa4:	07d2      	lsls	r2, r2, #31
 80a4aa6:	bf5c      	itt	pl
 80a4aa8:	2201      	movpl	r2, #1
 80a4aaa:	601a      	strpl	r2, [r3, #0]
 80a4aac:	4b1e      	ldr	r3, [pc, #120]	; (80a4b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a4aae:	681a      	ldr	r2, [r3, #0]
 80a4ab0:	07d0      	lsls	r0, r2, #31
 80a4ab2:	bf5c      	itt	pl
 80a4ab4:	2201      	movpl	r2, #1
 80a4ab6:	601a      	strpl	r2, [r3, #0]
 80a4ab8:	4b1c      	ldr	r3, [pc, #112]	; (80a4b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a4aba:	681a      	ldr	r2, [r3, #0]
 80a4abc:	07d1      	lsls	r1, r2, #31
 80a4abe:	bf5c      	itt	pl
 80a4ac0:	2201      	movpl	r2, #1
 80a4ac2:	601a      	strpl	r2, [r3, #0]
 80a4ac4:	4b1a      	ldr	r3, [pc, #104]	; (80a4b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a4ac6:	681a      	ldr	r2, [r3, #0]
 80a4ac8:	07d2      	lsls	r2, r2, #31
 80a4aca:	bf5c      	itt	pl
 80a4acc:	2201      	movpl	r2, #1
 80a4ace:	601a      	strpl	r2, [r3, #0]
 80a4ad0:	4b18      	ldr	r3, [pc, #96]	; (80a4b34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a4ad2:	681a      	ldr	r2, [r3, #0]
 80a4ad4:	07d0      	lsls	r0, r2, #31
 80a4ad6:	bf5c      	itt	pl
 80a4ad8:	2201      	movpl	r2, #1
 80a4ada:	601a      	strpl	r2, [r3, #0]
 80a4adc:	4b16      	ldr	r3, [pc, #88]	; (80a4b38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a4ade:	681a      	ldr	r2, [r3, #0]
 80a4ae0:	07d1      	lsls	r1, r2, #31
 80a4ae2:	bf5c      	itt	pl
 80a4ae4:	2201      	movpl	r2, #1
 80a4ae6:	601a      	strpl	r2, [r3, #0]
 80a4ae8:	4b14      	ldr	r3, [pc, #80]	; (80a4b3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a4aea:	681a      	ldr	r2, [r3, #0]
 80a4aec:	07d2      	lsls	r2, r2, #31
 80a4aee:	bf5c      	itt	pl
 80a4af0:	2201      	movpl	r2, #1
 80a4af2:	601a      	strpl	r2, [r3, #0]
 80a4af4:	4b12      	ldr	r3, [pc, #72]	; (80a4b40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a4af6:	681a      	ldr	r2, [r3, #0]
 80a4af8:	07d0      	lsls	r0, r2, #31
 80a4afa:	bf5c      	itt	pl
 80a4afc:	2201      	movpl	r2, #1
 80a4afe:	601a      	strpl	r2, [r3, #0]
 80a4b00:	4b10      	ldr	r3, [pc, #64]	; (80a4b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a4b02:	681a      	ldr	r2, [r3, #0]
 80a4b04:	07d1      	lsls	r1, r2, #31
 80a4b06:	bf5c      	itt	pl
 80a4b08:	2201      	movpl	r2, #1
 80a4b0a:	601a      	strpl	r2, [r3, #0]
 80a4b0c:	4b0e      	ldr	r3, [pc, #56]	; (80a4b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a4b0e:	681a      	ldr	r2, [r3, #0]
 80a4b10:	07d2      	lsls	r2, r2, #31
 80a4b12:	bf5c      	itt	pl
 80a4b14:	2201      	movpl	r2, #1
 80a4b16:	601a      	strpl	r2, [r3, #0]
 80a4b18:	4770      	bx	lr
 80a4b1a:	bf00      	nop
 80a4b1c:	2000088c 	.word	0x2000088c
 80a4b20:	20000888 	.word	0x20000888
 80a4b24:	20000884 	.word	0x20000884
 80a4b28:	20000880 	.word	0x20000880
 80a4b2c:	2000087c 	.word	0x2000087c
 80a4b30:	20000878 	.word	0x20000878
 80a4b34:	20000874 	.word	0x20000874
 80a4b38:	20000870 	.word	0x20000870
 80a4b3c:	2000086c 	.word	0x2000086c
 80a4b40:	20000868 	.word	0x20000868
 80a4b44:	20000864 	.word	0x20000864
 80a4b48:	20000860 	.word	0x20000860

080a4b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a4b4c:	4b18      	ldr	r3, [pc, #96]	; (80a4bb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a4b4e:	681a      	ldr	r2, [r3, #0]
 80a4b50:	07d1      	lsls	r1, r2, #31
 80a4b52:	bf5c      	itt	pl
 80a4b54:	2201      	movpl	r2, #1
 80a4b56:	601a      	strpl	r2, [r3, #0]
 80a4b58:	4b16      	ldr	r3, [pc, #88]	; (80a4bb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a4b5a:	681a      	ldr	r2, [r3, #0]
 80a4b5c:	07d2      	lsls	r2, r2, #31
 80a4b5e:	bf5c      	itt	pl
 80a4b60:	2201      	movpl	r2, #1
 80a4b62:	601a      	strpl	r2, [r3, #0]
 80a4b64:	4b14      	ldr	r3, [pc, #80]	; (80a4bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a4b66:	681a      	ldr	r2, [r3, #0]
 80a4b68:	07d0      	lsls	r0, r2, #31
 80a4b6a:	bf5c      	itt	pl
 80a4b6c:	2201      	movpl	r2, #1
 80a4b6e:	601a      	strpl	r2, [r3, #0]
 80a4b70:	4b12      	ldr	r3, [pc, #72]	; (80a4bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a4b72:	681a      	ldr	r2, [r3, #0]
 80a4b74:	07d1      	lsls	r1, r2, #31
 80a4b76:	bf5c      	itt	pl
 80a4b78:	2201      	movpl	r2, #1
 80a4b7a:	601a      	strpl	r2, [r3, #0]
 80a4b7c:	4b10      	ldr	r3, [pc, #64]	; (80a4bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a4b7e:	681a      	ldr	r2, [r3, #0]
 80a4b80:	07d2      	lsls	r2, r2, #31
 80a4b82:	bf5c      	itt	pl
 80a4b84:	2201      	movpl	r2, #1
 80a4b86:	601a      	strpl	r2, [r3, #0]
 80a4b88:	4b0e      	ldr	r3, [pc, #56]	; (80a4bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a4b8a:	681a      	ldr	r2, [r3, #0]
 80a4b8c:	07d0      	lsls	r0, r2, #31
 80a4b8e:	bf5c      	itt	pl
 80a4b90:	2201      	movpl	r2, #1
 80a4b92:	601a      	strpl	r2, [r3, #0]
 80a4b94:	4b0c      	ldr	r3, [pc, #48]	; (80a4bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a4b96:	681a      	ldr	r2, [r3, #0]
 80a4b98:	07d1      	lsls	r1, r2, #31
 80a4b9a:	bf5c      	itt	pl
 80a4b9c:	2201      	movpl	r2, #1
 80a4b9e:	601a      	strpl	r2, [r3, #0]
 80a4ba0:	4b0a      	ldr	r3, [pc, #40]	; (80a4bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a4ba2:	681a      	ldr	r2, [r3, #0]
 80a4ba4:	07d2      	lsls	r2, r2, #31
 80a4ba6:	bf5c      	itt	pl
 80a4ba8:	2201      	movpl	r2, #1
 80a4baa:	601a      	strpl	r2, [r3, #0]
 80a4bac:	4770      	bx	lr
 80a4bae:	bf00      	nop
 80a4bb0:	200008ac 	.word	0x200008ac
 80a4bb4:	200008a8 	.word	0x200008a8
 80a4bb8:	200008a4 	.word	0x200008a4
 80a4bbc:	200008a0 	.word	0x200008a0
 80a4bc0:	2000089c 	.word	0x2000089c
 80a4bc4:	20000898 	.word	0x20000898
 80a4bc8:	20000894 	.word	0x20000894
 80a4bcc:	20000890 	.word	0x20000890

080a4bd0 <floor>:
 80a4bd0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80a4bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80a4bd8:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80a4bdc:	2e13      	cmp	r6, #19
 80a4bde:	460b      	mov	r3, r1
 80a4be0:	4604      	mov	r4, r0
 80a4be2:	460d      	mov	r5, r1
 80a4be4:	4688      	mov	r8, r1
 80a4be6:	4607      	mov	r7, r0
 80a4be8:	dc1c      	bgt.n	80a4c24 <floor+0x54>
 80a4bea:	2e00      	cmp	r6, #0
 80a4bec:	db3f      	blt.n	80a4c6e <floor+0x9e>
 80a4bee:	4a3a      	ldr	r2, [pc, #232]	; (80a4cd8 <floor+0x108>)
 80a4bf0:	4686      	mov	lr, r0
 80a4bf2:	fa42 f906 	asr.w	r9, r2, r6
 80a4bf6:	ea01 0209 	and.w	r2, r1, r9
 80a4bfa:	4302      	orrs	r2, r0
 80a4bfc:	d017      	beq.n	80a4c2e <floor+0x5e>
 80a4bfe:	a334      	add	r3, pc, #208	; (adr r3, 80a4cd0 <floor+0x100>)
 80a4c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c04:	f000 faee 	bl	80a51e4 <__adddf3>
 80a4c08:	2200      	movs	r2, #0
 80a4c0a:	2300      	movs	r3, #0
 80a4c0c:	f000 ff2c 	bl	80a5a68 <__aeabi_dcmpgt>
 80a4c10:	b120      	cbz	r0, 80a4c1c <floor+0x4c>
 80a4c12:	2d00      	cmp	r5, #0
 80a4c14:	db40      	blt.n	80a4c98 <floor+0xc8>
 80a4c16:	ea28 0509 	bic.w	r5, r8, r9
 80a4c1a:	2700      	movs	r7, #0
 80a4c1c:	4638      	mov	r0, r7
 80a4c1e:	4629      	mov	r1, r5
 80a4c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4c24:	2e33      	cmp	r6, #51	; 0x33
 80a4c26:	dd06      	ble.n	80a4c36 <floor+0x66>
 80a4c28:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80a4c2c:	d02f      	beq.n	80a4c8e <floor+0xbe>
 80a4c2e:	4620      	mov	r0, r4
 80a4c30:	4619      	mov	r1, r3
 80a4c32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80a4c36:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 80a4c3a:	f04f 39ff 	mov.w	r9, #4294967295
 80a4c3e:	fa29 f902 	lsr.w	r9, r9, r2
 80a4c42:	ea10 0f09 	tst.w	r0, r9
 80a4c46:	d0f2      	beq.n	80a4c2e <floor+0x5e>
 80a4c48:	a321      	add	r3, pc, #132	; (adr r3, 80a4cd0 <floor+0x100>)
 80a4c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c4e:	f000 fac9 	bl	80a51e4 <__adddf3>
 80a4c52:	2200      	movs	r2, #0
 80a4c54:	2300      	movs	r3, #0
 80a4c56:	f000 ff07 	bl	80a5a68 <__aeabi_dcmpgt>
 80a4c5a:	2800      	cmp	r0, #0
 80a4c5c:	d0de      	beq.n	80a4c1c <floor+0x4c>
 80a4c5e:	2d00      	cmp	r5, #0
 80a4c60:	db20      	blt.n	80a4ca4 <floor+0xd4>
 80a4c62:	4645      	mov	r5, r8
 80a4c64:	ea27 0709 	bic.w	r7, r7, r9
 80a4c68:	4638      	mov	r0, r7
 80a4c6a:	4629      	mov	r1, r5
 80a4c6c:	e7d8      	b.n	80a4c20 <floor+0x50>
 80a4c6e:	a318      	add	r3, pc, #96	; (adr r3, 80a4cd0 <floor+0x100>)
 80a4c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4c74:	f000 fab6 	bl	80a51e4 <__adddf3>
 80a4c78:	2200      	movs	r2, #0
 80a4c7a:	2300      	movs	r3, #0
 80a4c7c:	f000 fef4 	bl	80a5a68 <__aeabi_dcmpgt>
 80a4c80:	2800      	cmp	r0, #0
 80a4c82:	d0cb      	beq.n	80a4c1c <floor+0x4c>
 80a4c84:	2d00      	cmp	r5, #0
 80a4c86:	db18      	blt.n	80a4cba <floor+0xea>
 80a4c88:	2700      	movs	r7, #0
 80a4c8a:	463d      	mov	r5, r7
 80a4c8c:	e7c6      	b.n	80a4c1c <floor+0x4c>
 80a4c8e:	4602      	mov	r2, r0
 80a4c90:	460b      	mov	r3, r1
 80a4c92:	f000 faa7 	bl	80a51e4 <__adddf3>
 80a4c96:	e7cc      	b.n	80a4c32 <floor+0x62>
 80a4c98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80a4c9c:	fa43 f606 	asr.w	r6, r3, r6
 80a4ca0:	44b0      	add	r8, r6
 80a4ca2:	e7b8      	b.n	80a4c16 <floor+0x46>
 80a4ca4:	2e14      	cmp	r6, #20
 80a4ca6:	d010      	beq.n	80a4cca <floor+0xfa>
 80a4ca8:	2301      	movs	r3, #1
 80a4caa:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80a4cae:	fa03 f606 	lsl.w	r6, r3, r6
 80a4cb2:	1937      	adds	r7, r6, r4
 80a4cb4:	bf28      	it	cs
 80a4cb6:	4498      	addcs	r8, r3
 80a4cb8:	e7d3      	b.n	80a4c62 <floor+0x92>
 80a4cba:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80a4cbe:	4b07      	ldr	r3, [pc, #28]	; (80a4cdc <floor+0x10c>)
 80a4cc0:	4322      	orrs	r2, r4
 80a4cc2:	bf18      	it	ne
 80a4cc4:	461d      	movne	r5, r3
 80a4cc6:	2700      	movs	r7, #0
 80a4cc8:	e7a8      	b.n	80a4c1c <floor+0x4c>
 80a4cca:	f105 0801 	add.w	r8, r5, #1
 80a4cce:	e7c8      	b.n	80a4c62 <floor+0x92>
 80a4cd0:	8800759c 	.word	0x8800759c
 80a4cd4:	7e37e43c 	.word	0x7e37e43c
 80a4cd8:	000fffff 	.word	0x000fffff
 80a4cdc:	bff00000 	.word	0xbff00000

080a4ce0 <log>:
 80a4ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80a4ce4:	b08a      	sub	sp, #40	; 0x28
 80a4ce6:	4604      	mov	r4, r0
 80a4ce8:	460d      	mov	r5, r1
 80a4cea:	f000 f879 	bl	80a4de0 <__ieee754_log>
 80a4cee:	4b37      	ldr	r3, [pc, #220]	; (80a4dcc <log+0xec>)
 80a4cf0:	4606      	mov	r6, r0
 80a4cf2:	f993 8000 	ldrsb.w	r8, [r3]
 80a4cf6:	460f      	mov	r7, r1
 80a4cf8:	f1b8 3fff 	cmp.w	r8, #4294967295
 80a4cfc:	d00d      	beq.n	80a4d1a <log+0x3a>
 80a4cfe:	4622      	mov	r2, r4
 80a4d00:	462b      	mov	r3, r5
 80a4d02:	4620      	mov	r0, r4
 80a4d04:	4629      	mov	r1, r5
 80a4d06:	f000 feb9 	bl	80a5a7c <__aeabi_dcmpun>
 80a4d0a:	b930      	cbnz	r0, 80a4d1a <log+0x3a>
 80a4d0c:	2200      	movs	r2, #0
 80a4d0e:	2300      	movs	r3, #0
 80a4d10:	4620      	mov	r0, r4
 80a4d12:	4629      	mov	r1, r5
 80a4d14:	f000 fea8 	bl	80a5a68 <__aeabi_dcmpgt>
 80a4d18:	b120      	cbz	r0, 80a4d24 <log+0x44>
 80a4d1a:	4630      	mov	r0, r6
 80a4d1c:	4639      	mov	r1, r7
 80a4d1e:	b00a      	add	sp, #40	; 0x28
 80a4d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4d24:	4b2a      	ldr	r3, [pc, #168]	; (80a4dd0 <log+0xf0>)
 80a4d26:	9008      	str	r0, [sp, #32]
 80a4d28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80a4d2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80a4d30:	9301      	str	r3, [sp, #4]
 80a4d32:	f1b8 0f00 	cmp.w	r8, #0
 80a4d36:	d119      	bne.n	80a4d6c <log+0x8c>
 80a4d38:	4f26      	ldr	r7, [pc, #152]	; (80a4dd4 <log+0xf4>)
 80a4d3a:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80a4d3e:	4620      	mov	r0, r4
 80a4d40:	4629      	mov	r1, r5
 80a4d42:	2200      	movs	r2, #0
 80a4d44:	2300      	movs	r3, #0
 80a4d46:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a4d4a:	f000 fe65 	bl	80a5a18 <__aeabi_dcmpeq>
 80a4d4e:	2800      	cmp	r0, #0
 80a4d50:	d034      	beq.n	80a4dbc <log+0xdc>
 80a4d52:	2302      	movs	r3, #2
 80a4d54:	9300      	str	r3, [sp, #0]
 80a4d56:	4668      	mov	r0, sp
 80a4d58:	f000 fa36 	bl	80a51c8 <matherr>
 80a4d5c:	b1a8      	cbz	r0, 80a4d8a <log+0xaa>
 80a4d5e:	9b08      	ldr	r3, [sp, #32]
 80a4d60:	b9c3      	cbnz	r3, 80a4d94 <log+0xb4>
 80a4d62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80a4d66:	b00a      	add	sp, #40	; 0x28
 80a4d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a4d6c:	4f1a      	ldr	r7, [pc, #104]	; (80a4dd8 <log+0xf8>)
 80a4d6e:	2600      	movs	r6, #0
 80a4d70:	4620      	mov	r0, r4
 80a4d72:	4629      	mov	r1, r5
 80a4d74:	2200      	movs	r2, #0
 80a4d76:	2300      	movs	r3, #0
 80a4d78:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80a4d7c:	f000 fe4c 	bl	80a5a18 <__aeabi_dcmpeq>
 80a4d80:	b168      	cbz	r0, 80a4d9e <log+0xbe>
 80a4d82:	2302      	movs	r3, #2
 80a4d84:	4598      	cmp	r8, r3
 80a4d86:	9300      	str	r3, [sp, #0]
 80a4d88:	d1e5      	bne.n	80a4d56 <log+0x76>
 80a4d8a:	f7fe f8a3 	bl	80a2ed4 <__errno>
 80a4d8e:	2322      	movs	r3, #34	; 0x22
 80a4d90:	6003      	str	r3, [r0, #0]
 80a4d92:	e7e4      	b.n	80a4d5e <log+0x7e>
 80a4d94:	f7fe f89e 	bl	80a2ed4 <__errno>
 80a4d98:	9b08      	ldr	r3, [sp, #32]
 80a4d9a:	6003      	str	r3, [r0, #0]
 80a4d9c:	e7e1      	b.n	80a4d62 <log+0x82>
 80a4d9e:	2301      	movs	r3, #1
 80a4da0:	f1b8 0f02 	cmp.w	r8, #2
 80a4da4:	9300      	str	r3, [sp, #0]
 80a4da6:	d10b      	bne.n	80a4dc0 <log+0xe0>
 80a4da8:	f7fe f894 	bl	80a2ed4 <__errno>
 80a4dac:	2321      	movs	r3, #33	; 0x21
 80a4dae:	6003      	str	r3, [r0, #0]
 80a4db0:	480a      	ldr	r0, [pc, #40]	; (80a4ddc <log+0xfc>)
 80a4db2:	f000 fa0b 	bl	80a51cc <nan>
 80a4db6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80a4dba:	e7d0      	b.n	80a4d5e <log+0x7e>
 80a4dbc:	2301      	movs	r3, #1
 80a4dbe:	9300      	str	r3, [sp, #0]
 80a4dc0:	4668      	mov	r0, sp
 80a4dc2:	f000 fa01 	bl	80a51c8 <matherr>
 80a4dc6:	2800      	cmp	r0, #0
 80a4dc8:	d1f2      	bne.n	80a4db0 <log+0xd0>
 80a4dca:	e7ed      	b.n	80a4da8 <log+0xc8>
 80a4dcc:	20000044 	.word	0x20000044
 80a4dd0:	080a69b0 	.word	0x080a69b0
 80a4dd4:	c7efffff 	.word	0xc7efffff
 80a4dd8:	fff00000 	.word	0xfff00000
 80a4ddc:	080a69b4 	.word	0x080a69b4

080a4de0 <__ieee754_log>:
 80a4de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a4de4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a4de8:	b085      	sub	sp, #20
 80a4dea:	4606      	mov	r6, r0
 80a4dec:	460f      	mov	r7, r1
 80a4dee:	460b      	mov	r3, r1
 80a4df0:	da5a      	bge.n	80a4ea8 <__ieee754_log+0xc8>
 80a4df2:	4602      	mov	r2, r0
 80a4df4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80a4df8:	4322      	orrs	r2, r4
 80a4dfa:	f000 80f7 	beq.w	80a4fec <__ieee754_log+0x20c>
 80a4dfe:	2900      	cmp	r1, #0
 80a4e00:	f2c0 8179 	blt.w	80a50f6 <__ieee754_log+0x316>
 80a4e04:	2200      	movs	r2, #0
 80a4e06:	4bd6      	ldr	r3, [pc, #856]	; (80a5160 <__ieee754_log+0x380>)
 80a4e08:	f000 fb9e 	bl	80a5548 <__aeabi_dmul>
 80a4e0c:	460b      	mov	r3, r1
 80a4e0e:	460f      	mov	r7, r1
 80a4e10:	49d4      	ldr	r1, [pc, #848]	; (80a5164 <__ieee754_log+0x384>)
 80a4e12:	4606      	mov	r6, r0
 80a4e14:	428b      	cmp	r3, r1
 80a4e16:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80a4e1a:	dc49      	bgt.n	80a4eb0 <__ieee754_log+0xd0>
 80a4e1c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80a4e20:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 80a4e24:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 80a4e28:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 80a4e2c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80a4e30:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80a4e34:	151b      	asrs	r3, r3, #20
 80a4e36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80a4e3a:	ea41 0705 	orr.w	r7, r1, r5
 80a4e3e:	189c      	adds	r4, r3, r2
 80a4e40:	4630      	mov	r0, r6
 80a4e42:	2200      	movs	r2, #0
 80a4e44:	4bc8      	ldr	r3, [pc, #800]	; (80a5168 <__ieee754_log+0x388>)
 80a4e46:	4639      	mov	r1, r7
 80a4e48:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80a4e4c:	f000 f9c8 	bl	80a51e0 <__aeabi_dsub>
 80a4e50:	1cab      	adds	r3, r5, #2
 80a4e52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80a4e56:	2b02      	cmp	r3, #2
 80a4e58:	4682      	mov	sl, r0
 80a4e5a:	468b      	mov	fp, r1
 80a4e5c:	f04f 0200 	mov.w	r2, #0
 80a4e60:	dc2f      	bgt.n	80a4ec2 <__ieee754_log+0xe2>
 80a4e62:	2300      	movs	r3, #0
 80a4e64:	f000 fdd8 	bl	80a5a18 <__aeabi_dcmpeq>
 80a4e68:	2800      	cmp	r0, #0
 80a4e6a:	f000 80c8 	beq.w	80a4ffe <__ieee754_log+0x21e>
 80a4e6e:	2c00      	cmp	r4, #0
 80a4e70:	f000 814a 	beq.w	80a5108 <__ieee754_log+0x328>
 80a4e74:	4620      	mov	r0, r4
 80a4e76:	f000 fb01 	bl	80a547c <__aeabi_i2d>
 80a4e7a:	a3a5      	add	r3, pc, #660	; (adr r3, 80a5110 <__ieee754_log+0x330>)
 80a4e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4e80:	4606      	mov	r6, r0
 80a4e82:	460f      	mov	r7, r1
 80a4e84:	f000 fb60 	bl	80a5548 <__aeabi_dmul>
 80a4e88:	a3a3      	add	r3, pc, #652	; (adr r3, 80a5118 <__ieee754_log+0x338>)
 80a4e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4e8e:	4604      	mov	r4, r0
 80a4e90:	460d      	mov	r5, r1
 80a4e92:	4630      	mov	r0, r6
 80a4e94:	4639      	mov	r1, r7
 80a4e96:	f000 fb57 	bl	80a5548 <__aeabi_dmul>
 80a4e9a:	4602      	mov	r2, r0
 80a4e9c:	460b      	mov	r3, r1
 80a4e9e:	4620      	mov	r0, r4
 80a4ea0:	4629      	mov	r1, r5
 80a4ea2:	f000 f99f 	bl	80a51e4 <__adddf3>
 80a4ea6:	e009      	b.n	80a4ebc <__ieee754_log+0xdc>
 80a4ea8:	49ae      	ldr	r1, [pc, #696]	; (80a5164 <__ieee754_log+0x384>)
 80a4eaa:	2200      	movs	r2, #0
 80a4eac:	428b      	cmp	r3, r1
 80a4eae:	ddb5      	ble.n	80a4e1c <__ieee754_log+0x3c>
 80a4eb0:	4632      	mov	r2, r6
 80a4eb2:	463b      	mov	r3, r7
 80a4eb4:	4630      	mov	r0, r6
 80a4eb6:	4639      	mov	r1, r7
 80a4eb8:	f000 f994 	bl	80a51e4 <__adddf3>
 80a4ebc:	b005      	add	sp, #20
 80a4ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80a4ec6:	f000 f98d 	bl	80a51e4 <__adddf3>
 80a4eca:	4602      	mov	r2, r0
 80a4ecc:	460b      	mov	r3, r1
 80a4ece:	4650      	mov	r0, sl
 80a4ed0:	4659      	mov	r1, fp
 80a4ed2:	f000 fc63 	bl	80a579c <__aeabi_ddiv>
 80a4ed6:	4606      	mov	r6, r0
 80a4ed8:	4620      	mov	r0, r4
 80a4eda:	460f      	mov	r7, r1
 80a4edc:	f000 face 	bl	80a547c <__aeabi_i2d>
 80a4ee0:	4632      	mov	r2, r6
 80a4ee2:	e9cd 0100 	strd	r0, r1, [sp]
 80a4ee6:	463b      	mov	r3, r7
 80a4ee8:	4630      	mov	r0, r6
 80a4eea:	4639      	mov	r1, r7
 80a4eec:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80a4ef0:	f000 fb2a 	bl	80a5548 <__aeabi_dmul>
 80a4ef4:	4602      	mov	r2, r0
 80a4ef6:	460b      	mov	r3, r1
 80a4ef8:	4680      	mov	r8, r0
 80a4efa:	4689      	mov	r9, r1
 80a4efc:	f000 fb24 	bl	80a5548 <__aeabi_dmul>
 80a4f00:	a387      	add	r3, pc, #540	; (adr r3, 80a5120 <__ieee754_log+0x340>)
 80a4f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f06:	4606      	mov	r6, r0
 80a4f08:	460f      	mov	r7, r1
 80a4f0a:	f000 fb1d 	bl	80a5548 <__aeabi_dmul>
 80a4f0e:	a386      	add	r3, pc, #536	; (adr r3, 80a5128 <__ieee754_log+0x348>)
 80a4f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f14:	f000 f966 	bl	80a51e4 <__adddf3>
 80a4f18:	4632      	mov	r2, r6
 80a4f1a:	463b      	mov	r3, r7
 80a4f1c:	f000 fb14 	bl	80a5548 <__aeabi_dmul>
 80a4f20:	a383      	add	r3, pc, #524	; (adr r3, 80a5130 <__ieee754_log+0x350>)
 80a4f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f26:	f000 f95d 	bl	80a51e4 <__adddf3>
 80a4f2a:	4632      	mov	r2, r6
 80a4f2c:	463b      	mov	r3, r7
 80a4f2e:	f000 fb0b 	bl	80a5548 <__aeabi_dmul>
 80a4f32:	a381      	add	r3, pc, #516	; (adr r3, 80a5138 <__ieee754_log+0x358>)
 80a4f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f38:	f000 f954 	bl	80a51e4 <__adddf3>
 80a4f3c:	4642      	mov	r2, r8
 80a4f3e:	464b      	mov	r3, r9
 80a4f40:	f000 fb02 	bl	80a5548 <__aeabi_dmul>
 80a4f44:	a37e      	add	r3, pc, #504	; (adr r3, 80a5140 <__ieee754_log+0x360>)
 80a4f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f4a:	4680      	mov	r8, r0
 80a4f4c:	4689      	mov	r9, r1
 80a4f4e:	4630      	mov	r0, r6
 80a4f50:	4639      	mov	r1, r7
 80a4f52:	f000 faf9 	bl	80a5548 <__aeabi_dmul>
 80a4f56:	a37c      	add	r3, pc, #496	; (adr r3, 80a5148 <__ieee754_log+0x368>)
 80a4f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f5c:	f000 f942 	bl	80a51e4 <__adddf3>
 80a4f60:	4632      	mov	r2, r6
 80a4f62:	463b      	mov	r3, r7
 80a4f64:	f000 faf0 	bl	80a5548 <__aeabi_dmul>
 80a4f68:	a379      	add	r3, pc, #484	; (adr r3, 80a5150 <__ieee754_log+0x370>)
 80a4f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a4f6e:	f000 f939 	bl	80a51e4 <__adddf3>
 80a4f72:	4632      	mov	r2, r6
 80a4f74:	463b      	mov	r3, r7
 80a4f76:	f000 fae7 	bl	80a5548 <__aeabi_dmul>
 80a4f7a:	460b      	mov	r3, r1
 80a4f7c:	4602      	mov	r2, r0
 80a4f7e:	4649      	mov	r1, r9
 80a4f80:	4640      	mov	r0, r8
 80a4f82:	f000 f92f 	bl	80a51e4 <__adddf3>
 80a4f86:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80a4f8a:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80a4f8e:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80a4f92:	3551      	adds	r5, #81	; 0x51
 80a4f94:	431d      	orrs	r5, r3
 80a4f96:	2d00      	cmp	r5, #0
 80a4f98:	4680      	mov	r8, r0
 80a4f9a:	4689      	mov	r9, r1
 80a4f9c:	dd56      	ble.n	80a504c <__ieee754_log+0x26c>
 80a4f9e:	2200      	movs	r2, #0
 80a4fa0:	4b72      	ldr	r3, [pc, #456]	; (80a516c <__ieee754_log+0x38c>)
 80a4fa2:	4650      	mov	r0, sl
 80a4fa4:	4659      	mov	r1, fp
 80a4fa6:	f000 facf 	bl	80a5548 <__aeabi_dmul>
 80a4faa:	4652      	mov	r2, sl
 80a4fac:	465b      	mov	r3, fp
 80a4fae:	f000 facb 	bl	80a5548 <__aeabi_dmul>
 80a4fb2:	4606      	mov	r6, r0
 80a4fb4:	460f      	mov	r7, r1
 80a4fb6:	2c00      	cmp	r4, #0
 80a4fb8:	d168      	bne.n	80a508c <__ieee754_log+0x2ac>
 80a4fba:	4632      	mov	r2, r6
 80a4fbc:	463b      	mov	r3, r7
 80a4fbe:	4640      	mov	r0, r8
 80a4fc0:	4649      	mov	r1, r9
 80a4fc2:	f000 f90f 	bl	80a51e4 <__adddf3>
 80a4fc6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a4fca:	f000 fabd 	bl	80a5548 <__aeabi_dmul>
 80a4fce:	4602      	mov	r2, r0
 80a4fd0:	460b      	mov	r3, r1
 80a4fd2:	4630      	mov	r0, r6
 80a4fd4:	4639      	mov	r1, r7
 80a4fd6:	f000 f903 	bl	80a51e0 <__aeabi_dsub>
 80a4fda:	4602      	mov	r2, r0
 80a4fdc:	460b      	mov	r3, r1
 80a4fde:	4650      	mov	r0, sl
 80a4fe0:	4659      	mov	r1, fp
 80a4fe2:	f000 f8fd 	bl	80a51e0 <__aeabi_dsub>
 80a4fe6:	b005      	add	sp, #20
 80a4fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4fec:	2200      	movs	r2, #0
 80a4fee:	2300      	movs	r3, #0
 80a4ff0:	2000      	movs	r0, #0
 80a4ff2:	495f      	ldr	r1, [pc, #380]	; (80a5170 <__ieee754_log+0x390>)
 80a4ff4:	f000 fbd2 	bl	80a579c <__aeabi_ddiv>
 80a4ff8:	b005      	add	sp, #20
 80a4ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a4ffe:	a356      	add	r3, pc, #344	; (adr r3, 80a5158 <__ieee754_log+0x378>)
 80a5000:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5004:	4650      	mov	r0, sl
 80a5006:	4659      	mov	r1, fp
 80a5008:	f000 fa9e 	bl	80a5548 <__aeabi_dmul>
 80a500c:	4602      	mov	r2, r0
 80a500e:	460b      	mov	r3, r1
 80a5010:	2000      	movs	r0, #0
 80a5012:	4956      	ldr	r1, [pc, #344]	; (80a516c <__ieee754_log+0x38c>)
 80a5014:	f000 f8e4 	bl	80a51e0 <__aeabi_dsub>
 80a5018:	4652      	mov	r2, sl
 80a501a:	4606      	mov	r6, r0
 80a501c:	460f      	mov	r7, r1
 80a501e:	465b      	mov	r3, fp
 80a5020:	4650      	mov	r0, sl
 80a5022:	4659      	mov	r1, fp
 80a5024:	f000 fa90 	bl	80a5548 <__aeabi_dmul>
 80a5028:	4602      	mov	r2, r0
 80a502a:	460b      	mov	r3, r1
 80a502c:	4630      	mov	r0, r6
 80a502e:	4639      	mov	r1, r7
 80a5030:	f000 fa8a 	bl	80a5548 <__aeabi_dmul>
 80a5034:	4606      	mov	r6, r0
 80a5036:	460f      	mov	r7, r1
 80a5038:	2c00      	cmp	r4, #0
 80a503a:	f040 809b 	bne.w	80a5174 <__ieee754_log+0x394>
 80a503e:	4602      	mov	r2, r0
 80a5040:	460b      	mov	r3, r1
 80a5042:	4650      	mov	r0, sl
 80a5044:	4659      	mov	r1, fp
 80a5046:	f000 f8cb 	bl	80a51e0 <__aeabi_dsub>
 80a504a:	e737      	b.n	80a4ebc <__ieee754_log+0xdc>
 80a504c:	2c00      	cmp	r4, #0
 80a504e:	f000 80a5 	beq.w	80a519c <__ieee754_log+0x3bc>
 80a5052:	a32f      	add	r3, pc, #188	; (adr r3, 80a5110 <__ieee754_log+0x330>)
 80a5054:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5058:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a505c:	f000 fa74 	bl	80a5548 <__aeabi_dmul>
 80a5060:	4642      	mov	r2, r8
 80a5062:	464b      	mov	r3, r9
 80a5064:	4604      	mov	r4, r0
 80a5066:	460d      	mov	r5, r1
 80a5068:	4650      	mov	r0, sl
 80a506a:	4659      	mov	r1, fp
 80a506c:	f000 f8b8 	bl	80a51e0 <__aeabi_dsub>
 80a5070:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a5074:	f000 fa68 	bl	80a5548 <__aeabi_dmul>
 80a5078:	a327      	add	r3, pc, #156	; (adr r3, 80a5118 <__ieee754_log+0x338>)
 80a507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a507e:	4606      	mov	r6, r0
 80a5080:	460f      	mov	r7, r1
 80a5082:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5086:	f000 fa5f 	bl	80a5548 <__aeabi_dmul>
 80a508a:	e021      	b.n	80a50d0 <__ieee754_log+0x2f0>
 80a508c:	a320      	add	r3, pc, #128	; (adr r3, 80a5110 <__ieee754_log+0x330>)
 80a508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5092:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a5096:	f000 fa57 	bl	80a5548 <__aeabi_dmul>
 80a509a:	4632      	mov	r2, r6
 80a509c:	463b      	mov	r3, r7
 80a509e:	4604      	mov	r4, r0
 80a50a0:	460d      	mov	r5, r1
 80a50a2:	4640      	mov	r0, r8
 80a50a4:	4649      	mov	r1, r9
 80a50a6:	f000 f89d 	bl	80a51e4 <__adddf3>
 80a50aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a50ae:	f000 fa4b 	bl	80a5548 <__aeabi_dmul>
 80a50b2:	a319      	add	r3, pc, #100	; (adr r3, 80a5118 <__ieee754_log+0x338>)
 80a50b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a50b8:	4680      	mov	r8, r0
 80a50ba:	4689      	mov	r9, r1
 80a50bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80a50c0:	f000 fa42 	bl	80a5548 <__aeabi_dmul>
 80a50c4:	4602      	mov	r2, r0
 80a50c6:	460b      	mov	r3, r1
 80a50c8:	4640      	mov	r0, r8
 80a50ca:	4649      	mov	r1, r9
 80a50cc:	f000 f88a 	bl	80a51e4 <__adddf3>
 80a50d0:	4602      	mov	r2, r0
 80a50d2:	460b      	mov	r3, r1
 80a50d4:	4630      	mov	r0, r6
 80a50d6:	4639      	mov	r1, r7
 80a50d8:	f000 f882 	bl	80a51e0 <__aeabi_dsub>
 80a50dc:	4652      	mov	r2, sl
 80a50de:	465b      	mov	r3, fp
 80a50e0:	f000 f87e 	bl	80a51e0 <__aeabi_dsub>
 80a50e4:	4602      	mov	r2, r0
 80a50e6:	460b      	mov	r3, r1
 80a50e8:	4620      	mov	r0, r4
 80a50ea:	4629      	mov	r1, r5
 80a50ec:	f000 f878 	bl	80a51e0 <__aeabi_dsub>
 80a50f0:	b005      	add	sp, #20
 80a50f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a50f6:	4602      	mov	r2, r0
 80a50f8:	460b      	mov	r3, r1
 80a50fa:	f000 f871 	bl	80a51e0 <__aeabi_dsub>
 80a50fe:	2200      	movs	r2, #0
 80a5100:	2300      	movs	r3, #0
 80a5102:	f000 fb4b 	bl	80a579c <__aeabi_ddiv>
 80a5106:	e6d9      	b.n	80a4ebc <__ieee754_log+0xdc>
 80a5108:	2000      	movs	r0, #0
 80a510a:	2100      	movs	r1, #0
 80a510c:	e6d6      	b.n	80a4ebc <__ieee754_log+0xdc>
 80a510e:	bf00      	nop
 80a5110:	fee00000 	.word	0xfee00000
 80a5114:	3fe62e42 	.word	0x3fe62e42
 80a5118:	35793c76 	.word	0x35793c76
 80a511c:	3dea39ef 	.word	0x3dea39ef
 80a5120:	df3e5244 	.word	0xdf3e5244
 80a5124:	3fc2f112 	.word	0x3fc2f112
 80a5128:	96cb03de 	.word	0x96cb03de
 80a512c:	3fc74664 	.word	0x3fc74664
 80a5130:	94229359 	.word	0x94229359
 80a5134:	3fd24924 	.word	0x3fd24924
 80a5138:	55555593 	.word	0x55555593
 80a513c:	3fe55555 	.word	0x3fe55555
 80a5140:	d078c69f 	.word	0xd078c69f
 80a5144:	3fc39a09 	.word	0x3fc39a09
 80a5148:	1d8e78af 	.word	0x1d8e78af
 80a514c:	3fcc71c5 	.word	0x3fcc71c5
 80a5150:	9997fa04 	.word	0x9997fa04
 80a5154:	3fd99999 	.word	0x3fd99999
 80a5158:	55555555 	.word	0x55555555
 80a515c:	3fd55555 	.word	0x3fd55555
 80a5160:	43500000 	.word	0x43500000
 80a5164:	7fefffff 	.word	0x7fefffff
 80a5168:	3ff00000 	.word	0x3ff00000
 80a516c:	3fe00000 	.word	0x3fe00000
 80a5170:	c3500000 	.word	0xc3500000
 80a5174:	4620      	mov	r0, r4
 80a5176:	f000 f981 	bl	80a547c <__aeabi_i2d>
 80a517a:	a30f      	add	r3, pc, #60	; (adr r3, 80a51b8 <__ieee754_log+0x3d8>)
 80a517c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a5180:	4680      	mov	r8, r0
 80a5182:	4689      	mov	r9, r1
 80a5184:	f000 f9e0 	bl	80a5548 <__aeabi_dmul>
 80a5188:	a30d      	add	r3, pc, #52	; (adr r3, 80a51c0 <__ieee754_log+0x3e0>)
 80a518a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a518e:	4604      	mov	r4, r0
 80a5190:	460d      	mov	r5, r1
 80a5192:	4640      	mov	r0, r8
 80a5194:	4649      	mov	r1, r9
 80a5196:	f000 f9d7 	bl	80a5548 <__aeabi_dmul>
 80a519a:	e799      	b.n	80a50d0 <__ieee754_log+0x2f0>
 80a519c:	4602      	mov	r2, r0
 80a519e:	460b      	mov	r3, r1
 80a51a0:	4650      	mov	r0, sl
 80a51a2:	4659      	mov	r1, fp
 80a51a4:	f000 f81c 	bl	80a51e0 <__aeabi_dsub>
 80a51a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a51ac:	f000 f9cc 	bl	80a5548 <__aeabi_dmul>
 80a51b0:	e713      	b.n	80a4fda <__ieee754_log+0x1fa>
 80a51b2:	bf00      	nop
 80a51b4:	f3af 8000 	nop.w
 80a51b8:	fee00000 	.word	0xfee00000
 80a51bc:	3fe62e42 	.word	0x3fe62e42
 80a51c0:	35793c76 	.word	0x35793c76
 80a51c4:	3dea39ef 	.word	0x3dea39ef

080a51c8 <matherr>:
 80a51c8:	2000      	movs	r0, #0
 80a51ca:	4770      	bx	lr

080a51cc <nan>:
 80a51cc:	2000      	movs	r0, #0
 80a51ce:	4901      	ldr	r1, [pc, #4]	; (80a51d4 <nan+0x8>)
 80a51d0:	4770      	bx	lr
 80a51d2:	bf00      	nop
 80a51d4:	7ff80000 	.word	0x7ff80000

080a51d8 <__aeabi_drsub>:
 80a51d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a51dc:	e002      	b.n	80a51e4 <__adddf3>
 80a51de:	bf00      	nop

080a51e0 <__aeabi_dsub>:
 80a51e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a51e4 <__adddf3>:
 80a51e4:	b530      	push	{r4, r5, lr}
 80a51e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a51ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a51ee:	ea94 0f05 	teq	r4, r5
 80a51f2:	bf08      	it	eq
 80a51f4:	ea90 0f02 	teqeq	r0, r2
 80a51f8:	bf1f      	itttt	ne
 80a51fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a51fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a5202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a5206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a520a:	f000 80e2 	beq.w	80a53d2 <__adddf3+0x1ee>
 80a520e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a5212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a5216:	bfb8      	it	lt
 80a5218:	426d      	neglt	r5, r5
 80a521a:	dd0c      	ble.n	80a5236 <__adddf3+0x52>
 80a521c:	442c      	add	r4, r5
 80a521e:	ea80 0202 	eor.w	r2, r0, r2
 80a5222:	ea81 0303 	eor.w	r3, r1, r3
 80a5226:	ea82 0000 	eor.w	r0, r2, r0
 80a522a:	ea83 0101 	eor.w	r1, r3, r1
 80a522e:	ea80 0202 	eor.w	r2, r0, r2
 80a5232:	ea81 0303 	eor.w	r3, r1, r3
 80a5236:	2d36      	cmp	r5, #54	; 0x36
 80a5238:	bf88      	it	hi
 80a523a:	bd30      	pophi	{r4, r5, pc}
 80a523c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a5244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a5248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a524c:	d002      	beq.n	80a5254 <__adddf3+0x70>
 80a524e:	4240      	negs	r0, r0
 80a5250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a5258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a525c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a5260:	d002      	beq.n	80a5268 <__adddf3+0x84>
 80a5262:	4252      	negs	r2, r2
 80a5264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a5268:	ea94 0f05 	teq	r4, r5
 80a526c:	f000 80a7 	beq.w	80a53be <__adddf3+0x1da>
 80a5270:	f1a4 0401 	sub.w	r4, r4, #1
 80a5274:	f1d5 0e20 	rsbs	lr, r5, #32
 80a5278:	db0d      	blt.n	80a5296 <__adddf3+0xb2>
 80a527a:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a527e:	fa22 f205 	lsr.w	r2, r2, r5
 80a5282:	1880      	adds	r0, r0, r2
 80a5284:	f141 0100 	adc.w	r1, r1, #0
 80a5288:	fa03 f20e 	lsl.w	r2, r3, lr
 80a528c:	1880      	adds	r0, r0, r2
 80a528e:	fa43 f305 	asr.w	r3, r3, r5
 80a5292:	4159      	adcs	r1, r3
 80a5294:	e00e      	b.n	80a52b4 <__adddf3+0xd0>
 80a5296:	f1a5 0520 	sub.w	r5, r5, #32
 80a529a:	f10e 0e20 	add.w	lr, lr, #32
 80a529e:	2a01      	cmp	r2, #1
 80a52a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a52a4:	bf28      	it	cs
 80a52a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a52aa:	fa43 f305 	asr.w	r3, r3, r5
 80a52ae:	18c0      	adds	r0, r0, r3
 80a52b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a52b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a52b8:	d507      	bpl.n	80a52ca <__adddf3+0xe6>
 80a52ba:	f04f 0e00 	mov.w	lr, #0
 80a52be:	f1dc 0c00 	rsbs	ip, ip, #0
 80a52c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a52c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80a52ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a52ce:	d31b      	bcc.n	80a5308 <__adddf3+0x124>
 80a52d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a52d4:	d30c      	bcc.n	80a52f0 <__adddf3+0x10c>
 80a52d6:	0849      	lsrs	r1, r1, #1
 80a52d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80a52dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a52e0:	f104 0401 	add.w	r4, r4, #1
 80a52e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a52e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a52ec:	f080 809a 	bcs.w	80a5424 <__adddf3+0x240>
 80a52f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a52f4:	bf08      	it	eq
 80a52f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a52fa:	f150 0000 	adcs.w	r0, r0, #0
 80a52fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a5302:	ea41 0105 	orr.w	r1, r1, r5
 80a5306:	bd30      	pop	{r4, r5, pc}
 80a5308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a530c:	4140      	adcs	r0, r0
 80a530e:	eb41 0101 	adc.w	r1, r1, r1
 80a5312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a5316:	f1a4 0401 	sub.w	r4, r4, #1
 80a531a:	d1e9      	bne.n	80a52f0 <__adddf3+0x10c>
 80a531c:	f091 0f00 	teq	r1, #0
 80a5320:	bf04      	itt	eq
 80a5322:	4601      	moveq	r1, r0
 80a5324:	2000      	moveq	r0, #0
 80a5326:	fab1 f381 	clz	r3, r1
 80a532a:	bf08      	it	eq
 80a532c:	3320      	addeq	r3, #32
 80a532e:	f1a3 030b 	sub.w	r3, r3, #11
 80a5332:	f1b3 0220 	subs.w	r2, r3, #32
 80a5336:	da0c      	bge.n	80a5352 <__adddf3+0x16e>
 80a5338:	320c      	adds	r2, #12
 80a533a:	dd08      	ble.n	80a534e <__adddf3+0x16a>
 80a533c:	f102 0c14 	add.w	ip, r2, #20
 80a5340:	f1c2 020c 	rsb	r2, r2, #12
 80a5344:	fa01 f00c 	lsl.w	r0, r1, ip
 80a5348:	fa21 f102 	lsr.w	r1, r1, r2
 80a534c:	e00c      	b.n	80a5368 <__adddf3+0x184>
 80a534e:	f102 0214 	add.w	r2, r2, #20
 80a5352:	bfd8      	it	le
 80a5354:	f1c2 0c20 	rsble	ip, r2, #32
 80a5358:	fa01 f102 	lsl.w	r1, r1, r2
 80a535c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a5360:	bfdc      	itt	le
 80a5362:	ea41 010c 	orrle.w	r1, r1, ip
 80a5366:	4090      	lslle	r0, r2
 80a5368:	1ae4      	subs	r4, r4, r3
 80a536a:	bfa2      	ittt	ge
 80a536c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a5370:	4329      	orrge	r1, r5
 80a5372:	bd30      	popge	{r4, r5, pc}
 80a5374:	ea6f 0404 	mvn.w	r4, r4
 80a5378:	3c1f      	subs	r4, #31
 80a537a:	da1c      	bge.n	80a53b6 <__adddf3+0x1d2>
 80a537c:	340c      	adds	r4, #12
 80a537e:	dc0e      	bgt.n	80a539e <__adddf3+0x1ba>
 80a5380:	f104 0414 	add.w	r4, r4, #20
 80a5384:	f1c4 0220 	rsb	r2, r4, #32
 80a5388:	fa20 f004 	lsr.w	r0, r0, r4
 80a538c:	fa01 f302 	lsl.w	r3, r1, r2
 80a5390:	ea40 0003 	orr.w	r0, r0, r3
 80a5394:	fa21 f304 	lsr.w	r3, r1, r4
 80a5398:	ea45 0103 	orr.w	r1, r5, r3
 80a539c:	bd30      	pop	{r4, r5, pc}
 80a539e:	f1c4 040c 	rsb	r4, r4, #12
 80a53a2:	f1c4 0220 	rsb	r2, r4, #32
 80a53a6:	fa20 f002 	lsr.w	r0, r0, r2
 80a53aa:	fa01 f304 	lsl.w	r3, r1, r4
 80a53ae:	ea40 0003 	orr.w	r0, r0, r3
 80a53b2:	4629      	mov	r1, r5
 80a53b4:	bd30      	pop	{r4, r5, pc}
 80a53b6:	fa21 f004 	lsr.w	r0, r1, r4
 80a53ba:	4629      	mov	r1, r5
 80a53bc:	bd30      	pop	{r4, r5, pc}
 80a53be:	f094 0f00 	teq	r4, #0
 80a53c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a53c6:	bf06      	itte	eq
 80a53c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a53cc:	3401      	addeq	r4, #1
 80a53ce:	3d01      	subne	r5, #1
 80a53d0:	e74e      	b.n	80a5270 <__adddf3+0x8c>
 80a53d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a53d6:	bf18      	it	ne
 80a53d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a53dc:	d029      	beq.n	80a5432 <__adddf3+0x24e>
 80a53de:	ea94 0f05 	teq	r4, r5
 80a53e2:	bf08      	it	eq
 80a53e4:	ea90 0f02 	teqeq	r0, r2
 80a53e8:	d005      	beq.n	80a53f6 <__adddf3+0x212>
 80a53ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80a53ee:	bf04      	itt	eq
 80a53f0:	4619      	moveq	r1, r3
 80a53f2:	4610      	moveq	r0, r2
 80a53f4:	bd30      	pop	{r4, r5, pc}
 80a53f6:	ea91 0f03 	teq	r1, r3
 80a53fa:	bf1e      	ittt	ne
 80a53fc:	2100      	movne	r1, #0
 80a53fe:	2000      	movne	r0, #0
 80a5400:	bd30      	popne	{r4, r5, pc}
 80a5402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a5406:	d105      	bne.n	80a5414 <__adddf3+0x230>
 80a5408:	0040      	lsls	r0, r0, #1
 80a540a:	4149      	adcs	r1, r1
 80a540c:	bf28      	it	cs
 80a540e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a5412:	bd30      	pop	{r4, r5, pc}
 80a5414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a5418:	bf3c      	itt	cc
 80a541a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a541e:	bd30      	popcc	{r4, r5, pc}
 80a5420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a5424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a5428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a542c:	f04f 0000 	mov.w	r0, #0
 80a5430:	bd30      	pop	{r4, r5, pc}
 80a5432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a5436:	bf1a      	itte	ne
 80a5438:	4619      	movne	r1, r3
 80a543a:	4610      	movne	r0, r2
 80a543c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a5440:	bf1c      	itt	ne
 80a5442:	460b      	movne	r3, r1
 80a5444:	4602      	movne	r2, r0
 80a5446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a544a:	bf06      	itte	eq
 80a544c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a5450:	ea91 0f03 	teqeq	r1, r3
 80a5454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a5458:	bd30      	pop	{r4, r5, pc}
 80a545a:	bf00      	nop

080a545c <__aeabi_ui2d>:
 80a545c:	f090 0f00 	teq	r0, #0
 80a5460:	bf04      	itt	eq
 80a5462:	2100      	moveq	r1, #0
 80a5464:	4770      	bxeq	lr
 80a5466:	b530      	push	{r4, r5, lr}
 80a5468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a546c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5470:	f04f 0500 	mov.w	r5, #0
 80a5474:	f04f 0100 	mov.w	r1, #0
 80a5478:	e750      	b.n	80a531c <__adddf3+0x138>
 80a547a:	bf00      	nop

080a547c <__aeabi_i2d>:
 80a547c:	f090 0f00 	teq	r0, #0
 80a5480:	bf04      	itt	eq
 80a5482:	2100      	moveq	r1, #0
 80a5484:	4770      	bxeq	lr
 80a5486:	b530      	push	{r4, r5, lr}
 80a5488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a548c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a5490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a5494:	bf48      	it	mi
 80a5496:	4240      	negmi	r0, r0
 80a5498:	f04f 0100 	mov.w	r1, #0
 80a549c:	e73e      	b.n	80a531c <__adddf3+0x138>
 80a549e:	bf00      	nop

080a54a0 <__aeabi_f2d>:
 80a54a0:	0042      	lsls	r2, r0, #1
 80a54a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a54a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80a54aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a54ae:	bf1f      	itttt	ne
 80a54b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a54b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a54b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a54bc:	4770      	bxne	lr
 80a54be:	f092 0f00 	teq	r2, #0
 80a54c2:	bf14      	ite	ne
 80a54c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a54c8:	4770      	bxeq	lr
 80a54ca:	b530      	push	{r4, r5, lr}
 80a54cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a54d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a54d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a54d8:	e720      	b.n	80a531c <__adddf3+0x138>
 80a54da:	bf00      	nop

080a54dc <__aeabi_ul2d>:
 80a54dc:	ea50 0201 	orrs.w	r2, r0, r1
 80a54e0:	bf08      	it	eq
 80a54e2:	4770      	bxeq	lr
 80a54e4:	b530      	push	{r4, r5, lr}
 80a54e6:	f04f 0500 	mov.w	r5, #0
 80a54ea:	e00a      	b.n	80a5502 <__aeabi_l2d+0x16>

080a54ec <__aeabi_l2d>:
 80a54ec:	ea50 0201 	orrs.w	r2, r0, r1
 80a54f0:	bf08      	it	eq
 80a54f2:	4770      	bxeq	lr
 80a54f4:	b530      	push	{r4, r5, lr}
 80a54f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a54fa:	d502      	bpl.n	80a5502 <__aeabi_l2d+0x16>
 80a54fc:	4240      	negs	r0, r0
 80a54fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a5506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a550a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a550e:	f43f aedc 	beq.w	80a52ca <__adddf3+0xe6>
 80a5512:	f04f 0203 	mov.w	r2, #3
 80a5516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a551a:	bf18      	it	ne
 80a551c:	3203      	addne	r2, #3
 80a551e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a5522:	bf18      	it	ne
 80a5524:	3203      	addne	r2, #3
 80a5526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a552a:	f1c2 0320 	rsb	r3, r2, #32
 80a552e:	fa00 fc03 	lsl.w	ip, r0, r3
 80a5532:	fa20 f002 	lsr.w	r0, r0, r2
 80a5536:	fa01 fe03 	lsl.w	lr, r1, r3
 80a553a:	ea40 000e 	orr.w	r0, r0, lr
 80a553e:	fa21 f102 	lsr.w	r1, r1, r2
 80a5542:	4414      	add	r4, r2
 80a5544:	e6c1      	b.n	80a52ca <__adddf3+0xe6>
 80a5546:	bf00      	nop

080a5548 <__aeabi_dmul>:
 80a5548:	b570      	push	{r4, r5, r6, lr}
 80a554a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a554e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a5552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a5556:	bf1d      	ittte	ne
 80a5558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a555c:	ea94 0f0c 	teqne	r4, ip
 80a5560:	ea95 0f0c 	teqne	r5, ip
 80a5564:	f000 f8de 	bleq	80a5724 <__aeabi_dmul+0x1dc>
 80a5568:	442c      	add	r4, r5
 80a556a:	ea81 0603 	eor.w	r6, r1, r3
 80a556e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a5572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a5576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a557a:	bf18      	it	ne
 80a557c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a5580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a5588:	d038      	beq.n	80a55fc <__aeabi_dmul+0xb4>
 80a558a:	fba0 ce02 	umull	ip, lr, r0, r2
 80a558e:	f04f 0500 	mov.w	r5, #0
 80a5592:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a5596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a559a:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a559e:	f04f 0600 	mov.w	r6, #0
 80a55a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a55a6:	f09c 0f00 	teq	ip, #0
 80a55aa:	bf18      	it	ne
 80a55ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80a55b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a55b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a55b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a55bc:	d204      	bcs.n	80a55c8 <__aeabi_dmul+0x80>
 80a55be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a55c2:	416d      	adcs	r5, r5
 80a55c4:	eb46 0606 	adc.w	r6, r6, r6
 80a55c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a55cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a55d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a55d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a55d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a55dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a55e0:	bf88      	it	hi
 80a55e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a55e6:	d81e      	bhi.n	80a5626 <__aeabi_dmul+0xde>
 80a55e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a55ec:	bf08      	it	eq
 80a55ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a55f2:	f150 0000 	adcs.w	r0, r0, #0
 80a55f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a55fa:	bd70      	pop	{r4, r5, r6, pc}
 80a55fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a5600:	ea46 0101 	orr.w	r1, r6, r1
 80a5604:	ea40 0002 	orr.w	r0, r0, r2
 80a5608:	ea81 0103 	eor.w	r1, r1, r3
 80a560c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a5610:	bfc2      	ittt	gt
 80a5612:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a5616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a561a:	bd70      	popgt	{r4, r5, r6, pc}
 80a561c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5620:	f04f 0e00 	mov.w	lr, #0
 80a5624:	3c01      	subs	r4, #1
 80a5626:	f300 80ab 	bgt.w	80a5780 <__aeabi_dmul+0x238>
 80a562a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a562e:	bfde      	ittt	le
 80a5630:	2000      	movle	r0, #0
 80a5632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a5636:	bd70      	pople	{r4, r5, r6, pc}
 80a5638:	f1c4 0400 	rsb	r4, r4, #0
 80a563c:	3c20      	subs	r4, #32
 80a563e:	da35      	bge.n	80a56ac <__aeabi_dmul+0x164>
 80a5640:	340c      	adds	r4, #12
 80a5642:	dc1b      	bgt.n	80a567c <__aeabi_dmul+0x134>
 80a5644:	f104 0414 	add.w	r4, r4, #20
 80a5648:	f1c4 0520 	rsb	r5, r4, #32
 80a564c:	fa00 f305 	lsl.w	r3, r0, r5
 80a5650:	fa20 f004 	lsr.w	r0, r0, r4
 80a5654:	fa01 f205 	lsl.w	r2, r1, r5
 80a5658:	ea40 0002 	orr.w	r0, r0, r2
 80a565c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a5660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a5664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a5668:	fa21 f604 	lsr.w	r6, r1, r4
 80a566c:	eb42 0106 	adc.w	r1, r2, r6
 80a5670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a5674:	bf08      	it	eq
 80a5676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a567a:	bd70      	pop	{r4, r5, r6, pc}
 80a567c:	f1c4 040c 	rsb	r4, r4, #12
 80a5680:	f1c4 0520 	rsb	r5, r4, #32
 80a5684:	fa00 f304 	lsl.w	r3, r0, r4
 80a5688:	fa20 f005 	lsr.w	r0, r0, r5
 80a568c:	fa01 f204 	lsl.w	r2, r1, r4
 80a5690:	ea40 0002 	orr.w	r0, r0, r2
 80a5694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a569c:	f141 0100 	adc.w	r1, r1, #0
 80a56a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a56a4:	bf08      	it	eq
 80a56a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a56aa:	bd70      	pop	{r4, r5, r6, pc}
 80a56ac:	f1c4 0520 	rsb	r5, r4, #32
 80a56b0:	fa00 f205 	lsl.w	r2, r0, r5
 80a56b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80a56b8:	fa20 f304 	lsr.w	r3, r0, r4
 80a56bc:	fa01 f205 	lsl.w	r2, r1, r5
 80a56c0:	ea43 0302 	orr.w	r3, r3, r2
 80a56c4:	fa21 f004 	lsr.w	r0, r1, r4
 80a56c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a56cc:	fa21 f204 	lsr.w	r2, r1, r4
 80a56d0:	ea20 0002 	bic.w	r0, r0, r2
 80a56d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a56d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a56dc:	bf08      	it	eq
 80a56de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a56e2:	bd70      	pop	{r4, r5, r6, pc}
 80a56e4:	f094 0f00 	teq	r4, #0
 80a56e8:	d10f      	bne.n	80a570a <__aeabi_dmul+0x1c2>
 80a56ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a56ee:	0040      	lsls	r0, r0, #1
 80a56f0:	eb41 0101 	adc.w	r1, r1, r1
 80a56f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a56f8:	bf08      	it	eq
 80a56fa:	3c01      	subeq	r4, #1
 80a56fc:	d0f7      	beq.n	80a56ee <__aeabi_dmul+0x1a6>
 80a56fe:	ea41 0106 	orr.w	r1, r1, r6
 80a5702:	f095 0f00 	teq	r5, #0
 80a5706:	bf18      	it	ne
 80a5708:	4770      	bxne	lr
 80a570a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a570e:	0052      	lsls	r2, r2, #1
 80a5710:	eb43 0303 	adc.w	r3, r3, r3
 80a5714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a5718:	bf08      	it	eq
 80a571a:	3d01      	subeq	r5, #1
 80a571c:	d0f7      	beq.n	80a570e <__aeabi_dmul+0x1c6>
 80a571e:	ea43 0306 	orr.w	r3, r3, r6
 80a5722:	4770      	bx	lr
 80a5724:	ea94 0f0c 	teq	r4, ip
 80a5728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a572c:	bf18      	it	ne
 80a572e:	ea95 0f0c 	teqne	r5, ip
 80a5732:	d00c      	beq.n	80a574e <__aeabi_dmul+0x206>
 80a5734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5738:	bf18      	it	ne
 80a573a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a573e:	d1d1      	bne.n	80a56e4 <__aeabi_dmul+0x19c>
 80a5740:	ea81 0103 	eor.w	r1, r1, r3
 80a5744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5748:	f04f 0000 	mov.w	r0, #0
 80a574c:	bd70      	pop	{r4, r5, r6, pc}
 80a574e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5752:	bf06      	itte	eq
 80a5754:	4610      	moveq	r0, r2
 80a5756:	4619      	moveq	r1, r3
 80a5758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a575c:	d019      	beq.n	80a5792 <__aeabi_dmul+0x24a>
 80a575e:	ea94 0f0c 	teq	r4, ip
 80a5762:	d102      	bne.n	80a576a <__aeabi_dmul+0x222>
 80a5764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a5768:	d113      	bne.n	80a5792 <__aeabi_dmul+0x24a>
 80a576a:	ea95 0f0c 	teq	r5, ip
 80a576e:	d105      	bne.n	80a577c <__aeabi_dmul+0x234>
 80a5770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a5774:	bf1c      	itt	ne
 80a5776:	4610      	movne	r0, r2
 80a5778:	4619      	movne	r1, r3
 80a577a:	d10a      	bne.n	80a5792 <__aeabi_dmul+0x24a>
 80a577c:	ea81 0103 	eor.w	r1, r1, r3
 80a5780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a5784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a578c:	f04f 0000 	mov.w	r0, #0
 80a5790:	bd70      	pop	{r4, r5, r6, pc}
 80a5792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a5796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a579a:	bd70      	pop	{r4, r5, r6, pc}

080a579c <__aeabi_ddiv>:
 80a579c:	b570      	push	{r4, r5, r6, lr}
 80a579e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a57a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a57a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a57aa:	bf1d      	ittte	ne
 80a57ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a57b0:	ea94 0f0c 	teqne	r4, ip
 80a57b4:	ea95 0f0c 	teqne	r5, ip
 80a57b8:	f000 f8a7 	bleq	80a590a <__aeabi_ddiv+0x16e>
 80a57bc:	eba4 0405 	sub.w	r4, r4, r5
 80a57c0:	ea81 0e03 	eor.w	lr, r1, r3
 80a57c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a57c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a57cc:	f000 8088 	beq.w	80a58e0 <__aeabi_ddiv+0x144>
 80a57d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a57d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a57d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a57dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a57e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a57e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a57e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a57ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a57f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a57f4:	429d      	cmp	r5, r3
 80a57f6:	bf08      	it	eq
 80a57f8:	4296      	cmpeq	r6, r2
 80a57fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a57fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a5802:	d202      	bcs.n	80a580a <__aeabi_ddiv+0x6e>
 80a5804:	085b      	lsrs	r3, r3, #1
 80a5806:	ea4f 0232 	mov.w	r2, r2, rrx
 80a580a:	1ab6      	subs	r6, r6, r2
 80a580c:	eb65 0503 	sbc.w	r5, r5, r3
 80a5810:	085b      	lsrs	r3, r3, #1
 80a5812:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a581a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a581e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5822:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5826:	bf22      	ittt	cs
 80a5828:	1ab6      	subcs	r6, r6, r2
 80a582a:	4675      	movcs	r5, lr
 80a582c:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5830:	085b      	lsrs	r3, r3, #1
 80a5832:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5836:	ebb6 0e02 	subs.w	lr, r6, r2
 80a583a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a583e:	bf22      	ittt	cs
 80a5840:	1ab6      	subcs	r6, r6, r2
 80a5842:	4675      	movcs	r5, lr
 80a5844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5848:	085b      	lsrs	r3, r3, #1
 80a584a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a584e:	ebb6 0e02 	subs.w	lr, r6, r2
 80a5852:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a5856:	bf22      	ittt	cs
 80a5858:	1ab6      	subcs	r6, r6, r2
 80a585a:	4675      	movcs	r5, lr
 80a585c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5860:	085b      	lsrs	r3, r3, #1
 80a5862:	ea4f 0232 	mov.w	r2, r2, rrx
 80a5866:	ebb6 0e02 	subs.w	lr, r6, r2
 80a586a:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a586e:	bf22      	ittt	cs
 80a5870:	1ab6      	subcs	r6, r6, r2
 80a5872:	4675      	movcs	r5, lr
 80a5874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5878:	ea55 0e06 	orrs.w	lr, r5, r6
 80a587c:	d018      	beq.n	80a58b0 <__aeabi_ddiv+0x114>
 80a587e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a5882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a5886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a588a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a588e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a5892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a5896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a589a:	d1c0      	bne.n	80a581e <__aeabi_ddiv+0x82>
 80a589c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a58a0:	d10b      	bne.n	80a58ba <__aeabi_ddiv+0x11e>
 80a58a2:	ea41 0100 	orr.w	r1, r1, r0
 80a58a6:	f04f 0000 	mov.w	r0, #0
 80a58aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a58ae:	e7b6      	b.n	80a581e <__aeabi_ddiv+0x82>
 80a58b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a58b4:	bf04      	itt	eq
 80a58b6:	4301      	orreq	r1, r0
 80a58b8:	2000      	moveq	r0, #0
 80a58ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a58be:	bf88      	it	hi
 80a58c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a58c4:	f63f aeaf 	bhi.w	80a5626 <__aeabi_dmul+0xde>
 80a58c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80a58cc:	bf04      	itt	eq
 80a58ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a58d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a58d6:	f150 0000 	adcs.w	r0, r0, #0
 80a58da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a58de:	bd70      	pop	{r4, r5, r6, pc}
 80a58e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a58e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a58e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a58ec:	bfc2      	ittt	gt
 80a58ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a58f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a58f6:	bd70      	popgt	{r4, r5, r6, pc}
 80a58f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a58fc:	f04f 0e00 	mov.w	lr, #0
 80a5900:	3c01      	subs	r4, #1
 80a5902:	e690      	b.n	80a5626 <__aeabi_dmul+0xde>
 80a5904:	ea45 0e06 	orr.w	lr, r5, r6
 80a5908:	e68d      	b.n	80a5626 <__aeabi_dmul+0xde>
 80a590a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a590e:	ea94 0f0c 	teq	r4, ip
 80a5912:	bf08      	it	eq
 80a5914:	ea95 0f0c 	teqeq	r5, ip
 80a5918:	f43f af3b 	beq.w	80a5792 <__aeabi_dmul+0x24a>
 80a591c:	ea94 0f0c 	teq	r4, ip
 80a5920:	d10a      	bne.n	80a5938 <__aeabi_ddiv+0x19c>
 80a5922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a5926:	f47f af34 	bne.w	80a5792 <__aeabi_dmul+0x24a>
 80a592a:	ea95 0f0c 	teq	r5, ip
 80a592e:	f47f af25 	bne.w	80a577c <__aeabi_dmul+0x234>
 80a5932:	4610      	mov	r0, r2
 80a5934:	4619      	mov	r1, r3
 80a5936:	e72c      	b.n	80a5792 <__aeabi_dmul+0x24a>
 80a5938:	ea95 0f0c 	teq	r5, ip
 80a593c:	d106      	bne.n	80a594c <__aeabi_ddiv+0x1b0>
 80a593e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a5942:	f43f aefd 	beq.w	80a5740 <__aeabi_dmul+0x1f8>
 80a5946:	4610      	mov	r0, r2
 80a5948:	4619      	mov	r1, r3
 80a594a:	e722      	b.n	80a5792 <__aeabi_dmul+0x24a>
 80a594c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a5950:	bf18      	it	ne
 80a5952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a5956:	f47f aec5 	bne.w	80a56e4 <__aeabi_dmul+0x19c>
 80a595a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a595e:	f47f af0d 	bne.w	80a577c <__aeabi_dmul+0x234>
 80a5962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a5966:	f47f aeeb 	bne.w	80a5740 <__aeabi_dmul+0x1f8>
 80a596a:	e712      	b.n	80a5792 <__aeabi_dmul+0x24a>

080a596c <__gedf2>:
 80a596c:	f04f 3cff 	mov.w	ip, #4294967295
 80a5970:	e006      	b.n	80a5980 <__cmpdf2+0x4>
 80a5972:	bf00      	nop

080a5974 <__ledf2>:
 80a5974:	f04f 0c01 	mov.w	ip, #1
 80a5978:	e002      	b.n	80a5980 <__cmpdf2+0x4>
 80a597a:	bf00      	nop

080a597c <__cmpdf2>:
 80a597c:	f04f 0c01 	mov.w	ip, #1
 80a5980:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a5984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a598c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5990:	bf18      	it	ne
 80a5992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a5996:	d01b      	beq.n	80a59d0 <__cmpdf2+0x54>
 80a5998:	b001      	add	sp, #4
 80a599a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a599e:	bf0c      	ite	eq
 80a59a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a59a4:	ea91 0f03 	teqne	r1, r3
 80a59a8:	bf02      	ittt	eq
 80a59aa:	ea90 0f02 	teqeq	r0, r2
 80a59ae:	2000      	moveq	r0, #0
 80a59b0:	4770      	bxeq	lr
 80a59b2:	f110 0f00 	cmn.w	r0, #0
 80a59b6:	ea91 0f03 	teq	r1, r3
 80a59ba:	bf58      	it	pl
 80a59bc:	4299      	cmppl	r1, r3
 80a59be:	bf08      	it	eq
 80a59c0:	4290      	cmpeq	r0, r2
 80a59c2:	bf2c      	ite	cs
 80a59c4:	17d8      	asrcs	r0, r3, #31
 80a59c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a59ca:	f040 0001 	orr.w	r0, r0, #1
 80a59ce:	4770      	bx	lr
 80a59d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a59d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a59d8:	d102      	bne.n	80a59e0 <__cmpdf2+0x64>
 80a59da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a59de:	d107      	bne.n	80a59f0 <__cmpdf2+0x74>
 80a59e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a59e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a59e8:	d1d6      	bne.n	80a5998 <__cmpdf2+0x1c>
 80a59ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a59ee:	d0d3      	beq.n	80a5998 <__cmpdf2+0x1c>
 80a59f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a59f4:	4770      	bx	lr
 80a59f6:	bf00      	nop

080a59f8 <__aeabi_cdrcmple>:
 80a59f8:	4684      	mov	ip, r0
 80a59fa:	4610      	mov	r0, r2
 80a59fc:	4662      	mov	r2, ip
 80a59fe:	468c      	mov	ip, r1
 80a5a00:	4619      	mov	r1, r3
 80a5a02:	4663      	mov	r3, ip
 80a5a04:	e000      	b.n	80a5a08 <__aeabi_cdcmpeq>
 80a5a06:	bf00      	nop

080a5a08 <__aeabi_cdcmpeq>:
 80a5a08:	b501      	push	{r0, lr}
 80a5a0a:	f7ff ffb7 	bl	80a597c <__cmpdf2>
 80a5a0e:	2800      	cmp	r0, #0
 80a5a10:	bf48      	it	mi
 80a5a12:	f110 0f00 	cmnmi.w	r0, #0
 80a5a16:	bd01      	pop	{r0, pc}

080a5a18 <__aeabi_dcmpeq>:
 80a5a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a1c:	f7ff fff4 	bl	80a5a08 <__aeabi_cdcmpeq>
 80a5a20:	bf0c      	ite	eq
 80a5a22:	2001      	moveq	r0, #1
 80a5a24:	2000      	movne	r0, #0
 80a5a26:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a2a:	bf00      	nop

080a5a2c <__aeabi_dcmplt>:
 80a5a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a30:	f7ff ffea 	bl	80a5a08 <__aeabi_cdcmpeq>
 80a5a34:	bf34      	ite	cc
 80a5a36:	2001      	movcc	r0, #1
 80a5a38:	2000      	movcs	r0, #0
 80a5a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a3e:	bf00      	nop

080a5a40 <__aeabi_dcmple>:
 80a5a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a44:	f7ff ffe0 	bl	80a5a08 <__aeabi_cdcmpeq>
 80a5a48:	bf94      	ite	ls
 80a5a4a:	2001      	movls	r0, #1
 80a5a4c:	2000      	movhi	r0, #0
 80a5a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a52:	bf00      	nop

080a5a54 <__aeabi_dcmpge>:
 80a5a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a58:	f7ff ffce 	bl	80a59f8 <__aeabi_cdrcmple>
 80a5a5c:	bf94      	ite	ls
 80a5a5e:	2001      	movls	r0, #1
 80a5a60:	2000      	movhi	r0, #0
 80a5a62:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a66:	bf00      	nop

080a5a68 <__aeabi_dcmpgt>:
 80a5a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a5a6c:	f7ff ffc4 	bl	80a59f8 <__aeabi_cdrcmple>
 80a5a70:	bf34      	ite	cc
 80a5a72:	2001      	movcc	r0, #1
 80a5a74:	2000      	movcs	r0, #0
 80a5a76:	f85d fb08 	ldr.w	pc, [sp], #8
 80a5a7a:	bf00      	nop

080a5a7c <__aeabi_dcmpun>:
 80a5a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a5a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5a84:	d102      	bne.n	80a5a8c <__aeabi_dcmpun+0x10>
 80a5a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a5a8a:	d10a      	bne.n	80a5aa2 <__aeabi_dcmpun+0x26>
 80a5a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a5a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a5a94:	d102      	bne.n	80a5a9c <__aeabi_dcmpun+0x20>
 80a5a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a5a9a:	d102      	bne.n	80a5aa2 <__aeabi_dcmpun+0x26>
 80a5a9c:	f04f 0000 	mov.w	r0, #0
 80a5aa0:	4770      	bx	lr
 80a5aa2:	f04f 0001 	mov.w	r0, #1
 80a5aa6:	4770      	bx	lr

080a5aa8 <__aeabi_d2iz>:
 80a5aa8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5ab0:	d215      	bcs.n	80a5ade <__aeabi_d2iz+0x36>
 80a5ab2:	d511      	bpl.n	80a5ad8 <__aeabi_d2iz+0x30>
 80a5ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5abc:	d912      	bls.n	80a5ae4 <__aeabi_d2iz+0x3c>
 80a5abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5aca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5ace:	fa23 f002 	lsr.w	r0, r3, r2
 80a5ad2:	bf18      	it	ne
 80a5ad4:	4240      	negne	r0, r0
 80a5ad6:	4770      	bx	lr
 80a5ad8:	f04f 0000 	mov.w	r0, #0
 80a5adc:	4770      	bx	lr
 80a5ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5ae2:	d105      	bne.n	80a5af0 <__aeabi_d2iz+0x48>
 80a5ae4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80a5ae8:	bf08      	it	eq
 80a5aea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a5aee:	4770      	bx	lr
 80a5af0:	f04f 0000 	mov.w	r0, #0
 80a5af4:	4770      	bx	lr
 80a5af6:	bf00      	nop

080a5af8 <__aeabi_d2uiz>:
 80a5af8:	004a      	lsls	r2, r1, #1
 80a5afa:	d211      	bcs.n	80a5b20 <__aeabi_d2uiz+0x28>
 80a5afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a5b00:	d211      	bcs.n	80a5b26 <__aeabi_d2uiz+0x2e>
 80a5b02:	d50d      	bpl.n	80a5b20 <__aeabi_d2uiz+0x28>
 80a5b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a5b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a5b0c:	d40e      	bmi.n	80a5b2c <__aeabi_d2uiz+0x34>
 80a5b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a5b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a5b1a:	fa23 f002 	lsr.w	r0, r3, r2
 80a5b1e:	4770      	bx	lr
 80a5b20:	f04f 0000 	mov.w	r0, #0
 80a5b24:	4770      	bx	lr
 80a5b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a5b2a:	d102      	bne.n	80a5b32 <__aeabi_d2uiz+0x3a>
 80a5b2c:	f04f 30ff 	mov.w	r0, #4294967295
 80a5b30:	4770      	bx	lr
 80a5b32:	f04f 0000 	mov.w	r0, #0
 80a5b36:	4770      	bx	lr

080a5b38 <__aeabi_d2f>:
 80a5b38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a5b3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a5b40:	bf24      	itt	cs
 80a5b42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a5b46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a5b4a:	d90d      	bls.n	80a5b68 <__aeabi_d2f+0x30>
 80a5b4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5b50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a5b54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a5b58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a5b5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a5b60:	bf08      	it	eq
 80a5b62:	f020 0001 	biceq.w	r0, r0, #1
 80a5b66:	4770      	bx	lr
 80a5b68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a5b6c:	d121      	bne.n	80a5bb2 <__aeabi_d2f+0x7a>
 80a5b6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a5b72:	bfbc      	itt	lt
 80a5b74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a5b78:	4770      	bxlt	lr
 80a5b7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a5b7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a5b82:	f1c2 0218 	rsb	r2, r2, #24
 80a5b86:	f1c2 0c20 	rsb	ip, r2, #32
 80a5b8a:	fa10 f30c 	lsls.w	r3, r0, ip
 80a5b8e:	fa20 f002 	lsr.w	r0, r0, r2
 80a5b92:	bf18      	it	ne
 80a5b94:	f040 0001 	orrne.w	r0, r0, #1
 80a5b98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a5b9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a5ba0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a5ba4:	ea40 000c 	orr.w	r0, r0, ip
 80a5ba8:	fa23 f302 	lsr.w	r3, r3, r2
 80a5bac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a5bb0:	e7cc      	b.n	80a5b4c <__aeabi_d2f+0x14>
 80a5bb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a5bb6:	d107      	bne.n	80a5bc8 <__aeabi_d2f+0x90>
 80a5bb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a5bbc:	bf1e      	ittt	ne
 80a5bbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a5bc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a5bc6:	4770      	bxne	lr
 80a5bc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a5bcc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5bd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5bd4:	4770      	bx	lr
 80a5bd6:	bf00      	nop

080a5bd8 <__aeabi_frsub>:
 80a5bd8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a5bdc:	e002      	b.n	80a5be4 <__addsf3>
 80a5bde:	bf00      	nop

080a5be0 <__aeabi_fsub>:
 80a5be0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a5be4 <__addsf3>:
 80a5be4:	0042      	lsls	r2, r0, #1
 80a5be6:	bf1f      	itttt	ne
 80a5be8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a5bec:	ea92 0f03 	teqne	r2, r3
 80a5bf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a5bf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5bf8:	d06a      	beq.n	80a5cd0 <__addsf3+0xec>
 80a5bfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a5bfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a5c02:	bfc1      	itttt	gt
 80a5c04:	18d2      	addgt	r2, r2, r3
 80a5c06:	4041      	eorgt	r1, r0
 80a5c08:	4048      	eorgt	r0, r1
 80a5c0a:	4041      	eorgt	r1, r0
 80a5c0c:	bfb8      	it	lt
 80a5c0e:	425b      	neglt	r3, r3
 80a5c10:	2b19      	cmp	r3, #25
 80a5c12:	bf88      	it	hi
 80a5c14:	4770      	bxhi	lr
 80a5c16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a5c1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5c1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a5c22:	bf18      	it	ne
 80a5c24:	4240      	negne	r0, r0
 80a5c26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a5c2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a5c2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a5c32:	bf18      	it	ne
 80a5c34:	4249      	negne	r1, r1
 80a5c36:	ea92 0f03 	teq	r2, r3
 80a5c3a:	d03f      	beq.n	80a5cbc <__addsf3+0xd8>
 80a5c3c:	f1a2 0201 	sub.w	r2, r2, #1
 80a5c40:	fa41 fc03 	asr.w	ip, r1, r3
 80a5c44:	eb10 000c 	adds.w	r0, r0, ip
 80a5c48:	f1c3 0320 	rsb	r3, r3, #32
 80a5c4c:	fa01 f103 	lsl.w	r1, r1, r3
 80a5c50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5c54:	d502      	bpl.n	80a5c5c <__addsf3+0x78>
 80a5c56:	4249      	negs	r1, r1
 80a5c58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a5c5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a5c60:	d313      	bcc.n	80a5c8a <__addsf3+0xa6>
 80a5c62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a5c66:	d306      	bcc.n	80a5c76 <__addsf3+0x92>
 80a5c68:	0840      	lsrs	r0, r0, #1
 80a5c6a:	ea4f 0131 	mov.w	r1, r1, rrx
 80a5c6e:	f102 0201 	add.w	r2, r2, #1
 80a5c72:	2afe      	cmp	r2, #254	; 0xfe
 80a5c74:	d251      	bcs.n	80a5d1a <__addsf3+0x136>
 80a5c76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a5c7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5c7e:	bf08      	it	eq
 80a5c80:	f020 0001 	biceq.w	r0, r0, #1
 80a5c84:	ea40 0003 	orr.w	r0, r0, r3
 80a5c88:	4770      	bx	lr
 80a5c8a:	0049      	lsls	r1, r1, #1
 80a5c8c:	eb40 0000 	adc.w	r0, r0, r0
 80a5c90:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a5c94:	f1a2 0201 	sub.w	r2, r2, #1
 80a5c98:	d1ed      	bne.n	80a5c76 <__addsf3+0x92>
 80a5c9a:	fab0 fc80 	clz	ip, r0
 80a5c9e:	f1ac 0c08 	sub.w	ip, ip, #8
 80a5ca2:	ebb2 020c 	subs.w	r2, r2, ip
 80a5ca6:	fa00 f00c 	lsl.w	r0, r0, ip
 80a5caa:	bfaa      	itet	ge
 80a5cac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a5cb0:	4252      	neglt	r2, r2
 80a5cb2:	4318      	orrge	r0, r3
 80a5cb4:	bfbc      	itt	lt
 80a5cb6:	40d0      	lsrlt	r0, r2
 80a5cb8:	4318      	orrlt	r0, r3
 80a5cba:	4770      	bx	lr
 80a5cbc:	f092 0f00 	teq	r2, #0
 80a5cc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a5cc4:	bf06      	itte	eq
 80a5cc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a5cca:	3201      	addeq	r2, #1
 80a5ccc:	3b01      	subne	r3, #1
 80a5cce:	e7b5      	b.n	80a5c3c <__addsf3+0x58>
 80a5cd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a5cd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a5cd8:	bf18      	it	ne
 80a5cda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a5cde:	d021      	beq.n	80a5d24 <__addsf3+0x140>
 80a5ce0:	ea92 0f03 	teq	r2, r3
 80a5ce4:	d004      	beq.n	80a5cf0 <__addsf3+0x10c>
 80a5ce6:	f092 0f00 	teq	r2, #0
 80a5cea:	bf08      	it	eq
 80a5cec:	4608      	moveq	r0, r1
 80a5cee:	4770      	bx	lr
 80a5cf0:	ea90 0f01 	teq	r0, r1
 80a5cf4:	bf1c      	itt	ne
 80a5cf6:	2000      	movne	r0, #0
 80a5cf8:	4770      	bxne	lr
 80a5cfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a5cfe:	d104      	bne.n	80a5d0a <__addsf3+0x126>
 80a5d00:	0040      	lsls	r0, r0, #1
 80a5d02:	bf28      	it	cs
 80a5d04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a5d08:	4770      	bx	lr
 80a5d0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a5d0e:	bf3c      	itt	cc
 80a5d10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a5d14:	4770      	bxcc	lr
 80a5d16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a5d1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a5d1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5d22:	4770      	bx	lr
 80a5d24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a5d28:	bf16      	itet	ne
 80a5d2a:	4608      	movne	r0, r1
 80a5d2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a5d30:	4601      	movne	r1, r0
 80a5d32:	0242      	lsls	r2, r0, #9
 80a5d34:	bf06      	itte	eq
 80a5d36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a5d3a:	ea90 0f01 	teqeq	r0, r1
 80a5d3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a5d42:	4770      	bx	lr

080a5d44 <__aeabi_ui2f>:
 80a5d44:	f04f 0300 	mov.w	r3, #0
 80a5d48:	e004      	b.n	80a5d54 <__aeabi_i2f+0x8>
 80a5d4a:	bf00      	nop

080a5d4c <__aeabi_i2f>:
 80a5d4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a5d50:	bf48      	it	mi
 80a5d52:	4240      	negmi	r0, r0
 80a5d54:	ea5f 0c00 	movs.w	ip, r0
 80a5d58:	bf08      	it	eq
 80a5d5a:	4770      	bxeq	lr
 80a5d5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a5d60:	4601      	mov	r1, r0
 80a5d62:	f04f 0000 	mov.w	r0, #0
 80a5d66:	e01c      	b.n	80a5da2 <__aeabi_l2f+0x2a>

080a5d68 <__aeabi_ul2f>:
 80a5d68:	ea50 0201 	orrs.w	r2, r0, r1
 80a5d6c:	bf08      	it	eq
 80a5d6e:	4770      	bxeq	lr
 80a5d70:	f04f 0300 	mov.w	r3, #0
 80a5d74:	e00a      	b.n	80a5d8c <__aeabi_l2f+0x14>
 80a5d76:	bf00      	nop

080a5d78 <__aeabi_l2f>:
 80a5d78:	ea50 0201 	orrs.w	r2, r0, r1
 80a5d7c:	bf08      	it	eq
 80a5d7e:	4770      	bxeq	lr
 80a5d80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a5d84:	d502      	bpl.n	80a5d8c <__aeabi_l2f+0x14>
 80a5d86:	4240      	negs	r0, r0
 80a5d88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a5d8c:	ea5f 0c01 	movs.w	ip, r1
 80a5d90:	bf02      	ittt	eq
 80a5d92:	4684      	moveq	ip, r0
 80a5d94:	4601      	moveq	r1, r0
 80a5d96:	2000      	moveq	r0, #0
 80a5d98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a5d9c:	bf08      	it	eq
 80a5d9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a5da2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a5da6:	fabc f28c 	clz	r2, ip
 80a5daa:	3a08      	subs	r2, #8
 80a5dac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a5db0:	db10      	blt.n	80a5dd4 <__aeabi_l2f+0x5c>
 80a5db2:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5db6:	4463      	add	r3, ip
 80a5db8:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5dbc:	f1c2 0220 	rsb	r2, r2, #32
 80a5dc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a5dc4:	fa20 f202 	lsr.w	r2, r0, r2
 80a5dc8:	eb43 0002 	adc.w	r0, r3, r2
 80a5dcc:	bf08      	it	eq
 80a5dce:	f020 0001 	biceq.w	r0, r0, #1
 80a5dd2:	4770      	bx	lr
 80a5dd4:	f102 0220 	add.w	r2, r2, #32
 80a5dd8:	fa01 fc02 	lsl.w	ip, r1, r2
 80a5ddc:	f1c2 0220 	rsb	r2, r2, #32
 80a5de0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a5de4:	fa21 f202 	lsr.w	r2, r1, r2
 80a5de8:	eb43 0002 	adc.w	r0, r3, r2
 80a5dec:	bf08      	it	eq
 80a5dee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5df2:	4770      	bx	lr

080a5df4 <__aeabi_fmul>:
 80a5df4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5df8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5dfc:	bf1e      	ittt	ne
 80a5dfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5e02:	ea92 0f0c 	teqne	r2, ip
 80a5e06:	ea93 0f0c 	teqne	r3, ip
 80a5e0a:	d06f      	beq.n	80a5eec <__aeabi_fmul+0xf8>
 80a5e0c:	441a      	add	r2, r3
 80a5e0e:	ea80 0c01 	eor.w	ip, r0, r1
 80a5e12:	0240      	lsls	r0, r0, #9
 80a5e14:	bf18      	it	ne
 80a5e16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a5e1a:	d01e      	beq.n	80a5e5a <__aeabi_fmul+0x66>
 80a5e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a5e20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a5e24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a5e28:	fba0 3101 	umull	r3, r1, r0, r1
 80a5e2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5e30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a5e34:	bf3e      	ittt	cc
 80a5e36:	0049      	lslcc	r1, r1, #1
 80a5e38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a5e3c:	005b      	lslcc	r3, r3, #1
 80a5e3e:	ea40 0001 	orr.w	r0, r0, r1
 80a5e42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a5e46:	2afd      	cmp	r2, #253	; 0xfd
 80a5e48:	d81d      	bhi.n	80a5e86 <__aeabi_fmul+0x92>
 80a5e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a5e4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5e52:	bf08      	it	eq
 80a5e54:	f020 0001 	biceq.w	r0, r0, #1
 80a5e58:	4770      	bx	lr
 80a5e5a:	f090 0f00 	teq	r0, #0
 80a5e5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5e62:	bf08      	it	eq
 80a5e64:	0249      	lsleq	r1, r1, #9
 80a5e66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5e6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a5e6e:	3a7f      	subs	r2, #127	; 0x7f
 80a5e70:	bfc2      	ittt	gt
 80a5e72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a5e76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a5e7a:	4770      	bxgt	lr
 80a5e7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5e80:	f04f 0300 	mov.w	r3, #0
 80a5e84:	3a01      	subs	r2, #1
 80a5e86:	dc5d      	bgt.n	80a5f44 <__aeabi_fmul+0x150>
 80a5e88:	f112 0f19 	cmn.w	r2, #25
 80a5e8c:	bfdc      	itt	le
 80a5e8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a5e92:	4770      	bxle	lr
 80a5e94:	f1c2 0200 	rsb	r2, r2, #0
 80a5e98:	0041      	lsls	r1, r0, #1
 80a5e9a:	fa21 f102 	lsr.w	r1, r1, r2
 80a5e9e:	f1c2 0220 	rsb	r2, r2, #32
 80a5ea2:	fa00 fc02 	lsl.w	ip, r0, r2
 80a5ea6:	ea5f 0031 	movs.w	r0, r1, rrx
 80a5eaa:	f140 0000 	adc.w	r0, r0, #0
 80a5eae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a5eb2:	bf08      	it	eq
 80a5eb4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a5eb8:	4770      	bx	lr
 80a5eba:	f092 0f00 	teq	r2, #0
 80a5ebe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a5ec2:	bf02      	ittt	eq
 80a5ec4:	0040      	lsleq	r0, r0, #1
 80a5ec6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a5eca:	3a01      	subeq	r2, #1
 80a5ecc:	d0f9      	beq.n	80a5ec2 <__aeabi_fmul+0xce>
 80a5ece:	ea40 000c 	orr.w	r0, r0, ip
 80a5ed2:	f093 0f00 	teq	r3, #0
 80a5ed6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a5eda:	bf02      	ittt	eq
 80a5edc:	0049      	lsleq	r1, r1, #1
 80a5ede:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a5ee2:	3b01      	subeq	r3, #1
 80a5ee4:	d0f9      	beq.n	80a5eda <__aeabi_fmul+0xe6>
 80a5ee6:	ea41 010c 	orr.w	r1, r1, ip
 80a5eea:	e78f      	b.n	80a5e0c <__aeabi_fmul+0x18>
 80a5eec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a5ef0:	ea92 0f0c 	teq	r2, ip
 80a5ef4:	bf18      	it	ne
 80a5ef6:	ea93 0f0c 	teqne	r3, ip
 80a5efa:	d00a      	beq.n	80a5f12 <__aeabi_fmul+0x11e>
 80a5efc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a5f00:	bf18      	it	ne
 80a5f02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a5f06:	d1d8      	bne.n	80a5eba <__aeabi_fmul+0xc6>
 80a5f08:	ea80 0001 	eor.w	r0, r0, r1
 80a5f0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5f10:	4770      	bx	lr
 80a5f12:	f090 0f00 	teq	r0, #0
 80a5f16:	bf17      	itett	ne
 80a5f18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a5f1c:	4608      	moveq	r0, r1
 80a5f1e:	f091 0f00 	teqne	r1, #0
 80a5f22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a5f26:	d014      	beq.n	80a5f52 <__aeabi_fmul+0x15e>
 80a5f28:	ea92 0f0c 	teq	r2, ip
 80a5f2c:	d101      	bne.n	80a5f32 <__aeabi_fmul+0x13e>
 80a5f2e:	0242      	lsls	r2, r0, #9
 80a5f30:	d10f      	bne.n	80a5f52 <__aeabi_fmul+0x15e>
 80a5f32:	ea93 0f0c 	teq	r3, ip
 80a5f36:	d103      	bne.n	80a5f40 <__aeabi_fmul+0x14c>
 80a5f38:	024b      	lsls	r3, r1, #9
 80a5f3a:	bf18      	it	ne
 80a5f3c:	4608      	movne	r0, r1
 80a5f3e:	d108      	bne.n	80a5f52 <__aeabi_fmul+0x15e>
 80a5f40:	ea80 0001 	eor.w	r0, r0, r1
 80a5f44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a5f48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5f4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a5f50:	4770      	bx	lr
 80a5f52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a5f56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a5f5a:	4770      	bx	lr

080a5f5c <__aeabi_fdiv>:
 80a5f5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a5f60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a5f64:	bf1e      	ittt	ne
 80a5f66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a5f6a:	ea92 0f0c 	teqne	r2, ip
 80a5f6e:	ea93 0f0c 	teqne	r3, ip
 80a5f72:	d069      	beq.n	80a6048 <__aeabi_fdiv+0xec>
 80a5f74:	eba2 0203 	sub.w	r2, r2, r3
 80a5f78:	ea80 0c01 	eor.w	ip, r0, r1
 80a5f7c:	0249      	lsls	r1, r1, #9
 80a5f7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a5f82:	d037      	beq.n	80a5ff4 <__aeabi_fdiv+0x98>
 80a5f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a5f88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a5f8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a5f90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a5f94:	428b      	cmp	r3, r1
 80a5f96:	bf38      	it	cc
 80a5f98:	005b      	lslcc	r3, r3, #1
 80a5f9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a5f9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a5fa2:	428b      	cmp	r3, r1
 80a5fa4:	bf24      	itt	cs
 80a5fa6:	1a5b      	subcs	r3, r3, r1
 80a5fa8:	ea40 000c 	orrcs.w	r0, r0, ip
 80a5fac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a5fb0:	bf24      	itt	cs
 80a5fb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a5fb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a5fba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a5fbe:	bf24      	itt	cs
 80a5fc0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a5fc4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a5fc8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a5fcc:	bf24      	itt	cs
 80a5fce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a5fd2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a5fd6:	011b      	lsls	r3, r3, #4
 80a5fd8:	bf18      	it	ne
 80a5fda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a5fde:	d1e0      	bne.n	80a5fa2 <__aeabi_fdiv+0x46>
 80a5fe0:	2afd      	cmp	r2, #253	; 0xfd
 80a5fe2:	f63f af50 	bhi.w	80a5e86 <__aeabi_fmul+0x92>
 80a5fe6:	428b      	cmp	r3, r1
 80a5fe8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a5fec:	bf08      	it	eq
 80a5fee:	f020 0001 	biceq.w	r0, r0, #1
 80a5ff2:	4770      	bx	lr
 80a5ff4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a5ff8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a5ffc:	327f      	adds	r2, #127	; 0x7f
 80a5ffe:	bfc2      	ittt	gt
 80a6000:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a6004:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a6008:	4770      	bxgt	lr
 80a600a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a600e:	f04f 0300 	mov.w	r3, #0
 80a6012:	3a01      	subs	r2, #1
 80a6014:	e737      	b.n	80a5e86 <__aeabi_fmul+0x92>
 80a6016:	f092 0f00 	teq	r2, #0
 80a601a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a601e:	bf02      	ittt	eq
 80a6020:	0040      	lsleq	r0, r0, #1
 80a6022:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a6026:	3a01      	subeq	r2, #1
 80a6028:	d0f9      	beq.n	80a601e <__aeabi_fdiv+0xc2>
 80a602a:	ea40 000c 	orr.w	r0, r0, ip
 80a602e:	f093 0f00 	teq	r3, #0
 80a6032:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a6036:	bf02      	ittt	eq
 80a6038:	0049      	lsleq	r1, r1, #1
 80a603a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a603e:	3b01      	subeq	r3, #1
 80a6040:	d0f9      	beq.n	80a6036 <__aeabi_fdiv+0xda>
 80a6042:	ea41 010c 	orr.w	r1, r1, ip
 80a6046:	e795      	b.n	80a5f74 <__aeabi_fdiv+0x18>
 80a6048:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a604c:	ea92 0f0c 	teq	r2, ip
 80a6050:	d108      	bne.n	80a6064 <__aeabi_fdiv+0x108>
 80a6052:	0242      	lsls	r2, r0, #9
 80a6054:	f47f af7d 	bne.w	80a5f52 <__aeabi_fmul+0x15e>
 80a6058:	ea93 0f0c 	teq	r3, ip
 80a605c:	f47f af70 	bne.w	80a5f40 <__aeabi_fmul+0x14c>
 80a6060:	4608      	mov	r0, r1
 80a6062:	e776      	b.n	80a5f52 <__aeabi_fmul+0x15e>
 80a6064:	ea93 0f0c 	teq	r3, ip
 80a6068:	d104      	bne.n	80a6074 <__aeabi_fdiv+0x118>
 80a606a:	024b      	lsls	r3, r1, #9
 80a606c:	f43f af4c 	beq.w	80a5f08 <__aeabi_fmul+0x114>
 80a6070:	4608      	mov	r0, r1
 80a6072:	e76e      	b.n	80a5f52 <__aeabi_fmul+0x15e>
 80a6074:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a6078:	bf18      	it	ne
 80a607a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a607e:	d1ca      	bne.n	80a6016 <__aeabi_fdiv+0xba>
 80a6080:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a6084:	f47f af5c 	bne.w	80a5f40 <__aeabi_fmul+0x14c>
 80a6088:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a608c:	f47f af3c 	bne.w	80a5f08 <__aeabi_fmul+0x114>
 80a6090:	e75f      	b.n	80a5f52 <__aeabi_fmul+0x15e>
 80a6092:	bf00      	nop

080a6094 <__gesf2>:
 80a6094:	f04f 3cff 	mov.w	ip, #4294967295
 80a6098:	e006      	b.n	80a60a8 <__cmpsf2+0x4>
 80a609a:	bf00      	nop

080a609c <__lesf2>:
 80a609c:	f04f 0c01 	mov.w	ip, #1
 80a60a0:	e002      	b.n	80a60a8 <__cmpsf2+0x4>
 80a60a2:	bf00      	nop

080a60a4 <__cmpsf2>:
 80a60a4:	f04f 0c01 	mov.w	ip, #1
 80a60a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a60ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a60b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a60b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a60b8:	bf18      	it	ne
 80a60ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a60be:	d011      	beq.n	80a60e4 <__cmpsf2+0x40>
 80a60c0:	b001      	add	sp, #4
 80a60c2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80a60c6:	bf18      	it	ne
 80a60c8:	ea90 0f01 	teqne	r0, r1
 80a60cc:	bf58      	it	pl
 80a60ce:	ebb2 0003 	subspl.w	r0, r2, r3
 80a60d2:	bf88      	it	hi
 80a60d4:	17c8      	asrhi	r0, r1, #31
 80a60d6:	bf38      	it	cc
 80a60d8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80a60dc:	bf18      	it	ne
 80a60de:	f040 0001 	orrne.w	r0, r0, #1
 80a60e2:	4770      	bx	lr
 80a60e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a60e8:	d102      	bne.n	80a60f0 <__cmpsf2+0x4c>
 80a60ea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a60ee:	d105      	bne.n	80a60fc <__cmpsf2+0x58>
 80a60f0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a60f4:	d1e4      	bne.n	80a60c0 <__cmpsf2+0x1c>
 80a60f6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a60fa:	d0e1      	beq.n	80a60c0 <__cmpsf2+0x1c>
 80a60fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a6100:	4770      	bx	lr
 80a6102:	bf00      	nop

080a6104 <__aeabi_cfrcmple>:
 80a6104:	4684      	mov	ip, r0
 80a6106:	4608      	mov	r0, r1
 80a6108:	4661      	mov	r1, ip
 80a610a:	e7ff      	b.n	80a610c <__aeabi_cfcmpeq>

080a610c <__aeabi_cfcmpeq>:
 80a610c:	b50f      	push	{r0, r1, r2, r3, lr}
 80a610e:	f7ff ffc9 	bl	80a60a4 <__cmpsf2>
 80a6112:	2800      	cmp	r0, #0
 80a6114:	bf48      	it	mi
 80a6116:	f110 0f00 	cmnmi.w	r0, #0
 80a611a:	bd0f      	pop	{r0, r1, r2, r3, pc}

080a611c <__aeabi_fcmpeq>:
 80a611c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6120:	f7ff fff4 	bl	80a610c <__aeabi_cfcmpeq>
 80a6124:	bf0c      	ite	eq
 80a6126:	2001      	moveq	r0, #1
 80a6128:	2000      	movne	r0, #0
 80a612a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a612e:	bf00      	nop

080a6130 <__aeabi_fcmplt>:
 80a6130:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6134:	f7ff ffea 	bl	80a610c <__aeabi_cfcmpeq>
 80a6138:	bf34      	ite	cc
 80a613a:	2001      	movcc	r0, #1
 80a613c:	2000      	movcs	r0, #0
 80a613e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6142:	bf00      	nop

080a6144 <__aeabi_fcmple>:
 80a6144:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6148:	f7ff ffe0 	bl	80a610c <__aeabi_cfcmpeq>
 80a614c:	bf94      	ite	ls
 80a614e:	2001      	movls	r0, #1
 80a6150:	2000      	movhi	r0, #0
 80a6152:	f85d fb08 	ldr.w	pc, [sp], #8
 80a6156:	bf00      	nop

080a6158 <__aeabi_fcmpge>:
 80a6158:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a615c:	f7ff ffd2 	bl	80a6104 <__aeabi_cfrcmple>
 80a6160:	bf94      	ite	ls
 80a6162:	2001      	movls	r0, #1
 80a6164:	2000      	movhi	r0, #0
 80a6166:	f85d fb08 	ldr.w	pc, [sp], #8
 80a616a:	bf00      	nop

080a616c <__aeabi_fcmpgt>:
 80a616c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a6170:	f7ff ffc8 	bl	80a6104 <__aeabi_cfrcmple>
 80a6174:	bf34      	ite	cc
 80a6176:	2001      	movcc	r0, #1
 80a6178:	2000      	movcs	r0, #0
 80a617a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a617e:	bf00      	nop

080a6180 <__aeabi_fcmpun>:
 80a6180:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80a6184:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a6188:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a618c:	d102      	bne.n	80a6194 <__aeabi_fcmpun+0x14>
 80a618e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80a6192:	d108      	bne.n	80a61a6 <__aeabi_fcmpun+0x26>
 80a6194:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80a6198:	d102      	bne.n	80a61a0 <__aeabi_fcmpun+0x20>
 80a619a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80a619e:	d102      	bne.n	80a61a6 <__aeabi_fcmpun+0x26>
 80a61a0:	f04f 0000 	mov.w	r0, #0
 80a61a4:	4770      	bx	lr
 80a61a6:	f04f 0001 	mov.w	r0, #1
 80a61aa:	4770      	bx	lr

080a61ac <atol>:
 80a61ac:	220a      	movs	r2, #10
 80a61ae:	2100      	movs	r1, #0
 80a61b0:	f000 b918 	b.w	80a63e4 <strtol>

080a61b4 <__cxa_atexit>:
 80a61b4:	b510      	push	{r4, lr}
 80a61b6:	4c05      	ldr	r4, [pc, #20]	; (80a61cc <__cxa_atexit+0x18>)
 80a61b8:	4613      	mov	r3, r2
 80a61ba:	b12c      	cbz	r4, 80a61c8 <__cxa_atexit+0x14>
 80a61bc:	460a      	mov	r2, r1
 80a61be:	4601      	mov	r1, r0
 80a61c0:	2002      	movs	r0, #2
 80a61c2:	f3af 8000 	nop.w
 80a61c6:	bd10      	pop	{r4, pc}
 80a61c8:	4620      	mov	r0, r4
 80a61ca:	bd10      	pop	{r4, pc}
 80a61cc:	00000000 	.word	0x00000000

080a61d0 <memcpy>:
 80a61d0:	b510      	push	{r4, lr}
 80a61d2:	1e43      	subs	r3, r0, #1
 80a61d4:	440a      	add	r2, r1
 80a61d6:	4291      	cmp	r1, r2
 80a61d8:	d004      	beq.n	80a61e4 <memcpy+0x14>
 80a61da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a61de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a61e2:	e7f8      	b.n	80a61d6 <memcpy+0x6>
 80a61e4:	bd10      	pop	{r4, pc}

080a61e6 <memset>:
 80a61e6:	4603      	mov	r3, r0
 80a61e8:	4402      	add	r2, r0
 80a61ea:	4293      	cmp	r3, r2
 80a61ec:	d002      	beq.n	80a61f4 <memset+0xe>
 80a61ee:	f803 1b01 	strb.w	r1, [r3], #1
 80a61f2:	e7fa      	b.n	80a61ea <memset+0x4>
 80a61f4:	4770      	bx	lr
	...

080a61f8 <srand>:
 80a61f8:	b538      	push	{r3, r4, r5, lr}
 80a61fa:	4b12      	ldr	r3, [pc, #72]	; (80a6244 <srand+0x4c>)
 80a61fc:	4605      	mov	r5, r0
 80a61fe:	681c      	ldr	r4, [r3, #0]
 80a6200:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a6202:	b9d3      	cbnz	r3, 80a623a <srand+0x42>
 80a6204:	2018      	movs	r0, #24
 80a6206:	f7fc fe2d 	bl	80a2e64 <malloc>
 80a620a:	f243 330e 	movw	r3, #13070	; 0x330e
 80a620e:	63a0      	str	r0, [r4, #56]	; 0x38
 80a6210:	8003      	strh	r3, [r0, #0]
 80a6212:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a6216:	8043      	strh	r3, [r0, #2]
 80a6218:	f241 2334 	movw	r3, #4660	; 0x1234
 80a621c:	8083      	strh	r3, [r0, #4]
 80a621e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a6222:	80c3      	strh	r3, [r0, #6]
 80a6224:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a6228:	8103      	strh	r3, [r0, #8]
 80a622a:	2305      	movs	r3, #5
 80a622c:	8143      	strh	r3, [r0, #10]
 80a622e:	230b      	movs	r3, #11
 80a6230:	8183      	strh	r3, [r0, #12]
 80a6232:	2201      	movs	r2, #1
 80a6234:	2300      	movs	r3, #0
 80a6236:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a623a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a623c:	2200      	movs	r2, #0
 80a623e:	611d      	str	r5, [r3, #16]
 80a6240:	615a      	str	r2, [r3, #20]
 80a6242:	bd38      	pop	{r3, r4, r5, pc}
 80a6244:	200000ac 	.word	0x200000ac

080a6248 <strcmp>:
 80a6248:	f810 2b01 	ldrb.w	r2, [r0], #1
 80a624c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80a6250:	2a01      	cmp	r2, #1
 80a6252:	bf28      	it	cs
 80a6254:	429a      	cmpcs	r2, r3
 80a6256:	d0f7      	beq.n	80a6248 <strcmp>
 80a6258:	1ad0      	subs	r0, r2, r3
 80a625a:	4770      	bx	lr

080a625c <strcpy>:
 80a625c:	4603      	mov	r3, r0
 80a625e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a6262:	f803 2b01 	strb.w	r2, [r3], #1
 80a6266:	2a00      	cmp	r2, #0
 80a6268:	d1f9      	bne.n	80a625e <strcpy+0x2>
 80a626a:	4770      	bx	lr

080a626c <strdup>:
 80a626c:	4b02      	ldr	r3, [pc, #8]	; (80a6278 <strdup+0xc>)
 80a626e:	4601      	mov	r1, r0
 80a6270:	6818      	ldr	r0, [r3, #0]
 80a6272:	f000 b803 	b.w	80a627c <_strdup_r>
 80a6276:	bf00      	nop
 80a6278:	200000ac 	.word	0x200000ac

080a627c <_strdup_r>:
 80a627c:	b570      	push	{r4, r5, r6, lr}
 80a627e:	4606      	mov	r6, r0
 80a6280:	4608      	mov	r0, r1
 80a6282:	460c      	mov	r4, r1
 80a6284:	f000 f80d 	bl	80a62a2 <strlen>
 80a6288:	1c45      	adds	r5, r0, #1
 80a628a:	4629      	mov	r1, r5
 80a628c:	4630      	mov	r0, r6
 80a628e:	f7fc fe19 	bl	80a2ec4 <_malloc_r>
 80a6292:	4606      	mov	r6, r0
 80a6294:	b118      	cbz	r0, 80a629e <_strdup_r+0x22>
 80a6296:	462a      	mov	r2, r5
 80a6298:	4621      	mov	r1, r4
 80a629a:	f7ff ff99 	bl	80a61d0 <memcpy>
 80a629e:	4630      	mov	r0, r6
 80a62a0:	bd70      	pop	{r4, r5, r6, pc}

080a62a2 <strlen>:
 80a62a2:	4603      	mov	r3, r0
 80a62a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a62a8:	2a00      	cmp	r2, #0
 80a62aa:	d1fb      	bne.n	80a62a4 <strlen+0x2>
 80a62ac:	1a18      	subs	r0, r3, r0
 80a62ae:	3801      	subs	r0, #1
 80a62b0:	4770      	bx	lr

080a62b2 <strncpy>:
 80a62b2:	4603      	mov	r3, r0
 80a62b4:	b510      	push	{r4, lr}
 80a62b6:	b142      	cbz	r2, 80a62ca <strncpy+0x18>
 80a62b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a62bc:	3a01      	subs	r2, #1
 80a62be:	f803 4b01 	strb.w	r4, [r3], #1
 80a62c2:	2c00      	cmp	r4, #0
 80a62c4:	d1f7      	bne.n	80a62b6 <strncpy+0x4>
 80a62c6:	441a      	add	r2, r3
 80a62c8:	e000      	b.n	80a62cc <strncpy+0x1a>
 80a62ca:	bd10      	pop	{r4, pc}
 80a62cc:	4293      	cmp	r3, r2
 80a62ce:	d002      	beq.n	80a62d6 <strncpy+0x24>
 80a62d0:	f803 4b01 	strb.w	r4, [r3], #1
 80a62d4:	e7fa      	b.n	80a62cc <strncpy+0x1a>
 80a62d6:	bd10      	pop	{r4, pc}

080a62d8 <_strtol_r>:
 80a62d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a62dc:	460f      	mov	r7, r1
 80a62de:	4680      	mov	r8, r0
 80a62e0:	483f      	ldr	r0, [pc, #252]	; (80a63e0 <_strtol_r+0x108>)
 80a62e2:	f8d0 9000 	ldr.w	r9, [r0]
 80a62e6:	463d      	mov	r5, r7
 80a62e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a62ec:	eb09 0004 	add.w	r0, r9, r4
 80a62f0:	7840      	ldrb	r0, [r0, #1]
 80a62f2:	f000 0008 	and.w	r0, r0, #8
 80a62f6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 80a62fa:	b108      	cbz	r0, 80a6300 <_strtol_r+0x28>
 80a62fc:	462f      	mov	r7, r5
 80a62fe:	e7f2      	b.n	80a62e6 <_strtol_r+0xe>
 80a6300:	2c2d      	cmp	r4, #45	; 0x2d
 80a6302:	d103      	bne.n	80a630c <_strtol_r+0x34>
 80a6304:	1cbd      	adds	r5, r7, #2
 80a6306:	787c      	ldrb	r4, [r7, #1]
 80a6308:	2601      	movs	r6, #1
 80a630a:	e003      	b.n	80a6314 <_strtol_r+0x3c>
 80a630c:	2c2b      	cmp	r4, #43	; 0x2b
 80a630e:	bf04      	itt	eq
 80a6310:	787c      	ldrbeq	r4, [r7, #1]
 80a6312:	1cbd      	addeq	r5, r7, #2
 80a6314:	b113      	cbz	r3, 80a631c <_strtol_r+0x44>
 80a6316:	2b10      	cmp	r3, #16
 80a6318:	d10a      	bne.n	80a6330 <_strtol_r+0x58>
 80a631a:	e05b      	b.n	80a63d4 <_strtol_r+0xfc>
 80a631c:	2c30      	cmp	r4, #48	; 0x30
 80a631e:	d157      	bne.n	80a63d0 <_strtol_r+0xf8>
 80a6320:	7828      	ldrb	r0, [r5, #0]
 80a6322:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80a6326:	2858      	cmp	r0, #88	; 0x58
 80a6328:	d14d      	bne.n	80a63c6 <_strtol_r+0xee>
 80a632a:	786c      	ldrb	r4, [r5, #1]
 80a632c:	2310      	movs	r3, #16
 80a632e:	3502      	adds	r5, #2
 80a6330:	2e00      	cmp	r6, #0
 80a6332:	bf14      	ite	ne
 80a6334:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 80a6338:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 80a633c:	fbbc faf3 	udiv	sl, ip, r3
 80a6340:	2700      	movs	r7, #0
 80a6342:	4638      	mov	r0, r7
 80a6344:	fb03 cc1a 	mls	ip, r3, sl, ip
 80a6348:	eb09 0e04 	add.w	lr, r9, r4
 80a634c:	f89e e001 	ldrb.w	lr, [lr, #1]
 80a6350:	f01e 0f04 	tst.w	lr, #4
 80a6354:	d001      	beq.n	80a635a <_strtol_r+0x82>
 80a6356:	3c30      	subs	r4, #48	; 0x30
 80a6358:	e00b      	b.n	80a6372 <_strtol_r+0x9a>
 80a635a:	f01e 0e03 	ands.w	lr, lr, #3
 80a635e:	d01b      	beq.n	80a6398 <_strtol_r+0xc0>
 80a6360:	f1be 0f01 	cmp.w	lr, #1
 80a6364:	bf0c      	ite	eq
 80a6366:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80a636a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80a636e:	ebce 0404 	rsb	r4, lr, r4
 80a6372:	42a3      	cmp	r3, r4
 80a6374:	dd10      	ble.n	80a6398 <_strtol_r+0xc0>
 80a6376:	f1b7 3fff 	cmp.w	r7, #4294967295
 80a637a:	d00a      	beq.n	80a6392 <_strtol_r+0xba>
 80a637c:	4550      	cmp	r0, sl
 80a637e:	d806      	bhi.n	80a638e <_strtol_r+0xb6>
 80a6380:	d101      	bne.n	80a6386 <_strtol_r+0xae>
 80a6382:	4564      	cmp	r4, ip
 80a6384:	dc03      	bgt.n	80a638e <_strtol_r+0xb6>
 80a6386:	fb03 4000 	mla	r0, r3, r0, r4
 80a638a:	2701      	movs	r7, #1
 80a638c:	e001      	b.n	80a6392 <_strtol_r+0xba>
 80a638e:	f04f 37ff 	mov.w	r7, #4294967295
 80a6392:	f815 4b01 	ldrb.w	r4, [r5], #1
 80a6396:	e7d7      	b.n	80a6348 <_strtol_r+0x70>
 80a6398:	1c7b      	adds	r3, r7, #1
 80a639a:	d10c      	bne.n	80a63b6 <_strtol_r+0xde>
 80a639c:	2e00      	cmp	r6, #0
 80a639e:	f04f 0322 	mov.w	r3, #34	; 0x22
 80a63a2:	bf14      	ite	ne
 80a63a4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 80a63a8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80a63ac:	f8c8 3000 	str.w	r3, [r8]
 80a63b0:	b92a      	cbnz	r2, 80a63be <_strtol_r+0xe6>
 80a63b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a63b6:	b106      	cbz	r6, 80a63ba <_strtol_r+0xe2>
 80a63b8:	4240      	negs	r0, r0
 80a63ba:	b172      	cbz	r2, 80a63da <_strtol_r+0x102>
 80a63bc:	b107      	cbz	r7, 80a63c0 <_strtol_r+0xe8>
 80a63be:	1e69      	subs	r1, r5, #1
 80a63c0:	6011      	str	r1, [r2, #0]
 80a63c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a63c6:	2430      	movs	r4, #48	; 0x30
 80a63c8:	2b00      	cmp	r3, #0
 80a63ca:	d1b1      	bne.n	80a6330 <_strtol_r+0x58>
 80a63cc:	2308      	movs	r3, #8
 80a63ce:	e7af      	b.n	80a6330 <_strtol_r+0x58>
 80a63d0:	230a      	movs	r3, #10
 80a63d2:	e7ad      	b.n	80a6330 <_strtol_r+0x58>
 80a63d4:	2c30      	cmp	r4, #48	; 0x30
 80a63d6:	d0a3      	beq.n	80a6320 <_strtol_r+0x48>
 80a63d8:	e7aa      	b.n	80a6330 <_strtol_r+0x58>
 80a63da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a63de:	bf00      	nop
 80a63e0:	20000048 	.word	0x20000048

080a63e4 <strtol>:
 80a63e4:	4613      	mov	r3, r2
 80a63e6:	460a      	mov	r2, r1
 80a63e8:	4601      	mov	r1, r0
 80a63ea:	4802      	ldr	r0, [pc, #8]	; (80a63f4 <strtol+0x10>)
 80a63ec:	6800      	ldr	r0, [r0, #0]
 80a63ee:	f7ff bf73 	b.w	80a62d8 <_strtol_r>
 80a63f2:	bf00      	nop
 80a63f4:	200000ac 	.word	0x200000ac

080a63f8 <dynalib_user>:
 80a63f8:	080a0021 080a0061 080a008d 080a0091     !...a...........
 80a6408:	00000000                                ....

080a640c <_ZL5psiFS>:
 80a640c:	00001388 0000012c 0000012c 00000000     ....,...,.......
 80a641c:	000001f4 00000000 00000000 00000000     ................
 80a642c:	77707061 57007464 4d005346 45545341     appwdt.WFS.MASTE
 80a643c:	232f0052 25002f00 00783230 74617473     R./#./.%02x.stat
 80a644c:	30317375 38314400 61323242 65726464     us10.D18B22addre
 80a645c:	64257373 00732500 72666564 3274736f     ss%d.%s.defrost2
 80a646c:	74617453 65640065 61747366 203a6574     State.defstate: 
 80a647c:	20206425 70616c45 3a646573 20642520     %d  Elapsed: %d 
 80a648c:	66656400 31736f72 74617453 46570065     .defros1State.WF
 80a649c:	4f432f53 4f52544e 542f314c 00315658     S/CONTROL1/TXV1.
 80a64ac:	2f534657 544e4f43 314c4f52 5658542f     WFS/CONTROL1/TXV
 80a64bc:	46570032 4f432f53 4f52544e 642f314c     2.WFS/CONTROL1/d
 80a64cc:	65706d61 315f3172 53465700 4e4f432f     amper1_1.WFS/CON
 80a64dc:	4c4f5254 61642f31 7265706d 00325f31     TROL1/damper1_2.
 80a64ec:	2f534657 544e4f43 314c4f52 6d61642f     WFS/CONTROL1/dam
 80a64fc:	32726570 5700315f 432f5346 52544e4f     per2_1.WFS/CONTR
 80a650c:	2f314c4f 706d6164 5f327265 46570032     OL1/damper2_2.WF
 80a651c:	4f432f53 4f52544e 492f314c 6974696e     S/CONTROL1/Initi
 80a652c:	7a696c61 6d655465 46570070 4f432f53     alizeTemp.WFS/CO
 80a653c:	4f52544e 642f314c 6f726665 00317473     NTROL1/defrost1.
 80a654c:	2f534657 544e4f43 314c4f52 6665642f     WFS/CONTROL1/def
 80a655c:	74736f72 46570032 4f432f53 4f52544e     rost2.WFS/CONTRO
 80a656c:	732f314c 75746174 71655273 74736575     L1/statusRequest
 80a657c:	006e6f00 0066666f 63616564 61766974     .on.off.deactiva
 80a658c:	74006574 6c67676f 6c660065 72007069     te.toggle.flip.r
 80a659c:	79616c65 74756f00 00747570 6b6e6162     elay.output.bank
 80a65ac:	6c6c6100 36383200 38376563 30363038     .all.286ce788060
 80a65bc:	33303030 65740066 25007473 2666322e     0003f.test.%.2f&
 80a65cc:	66322e25 322e2526 2e252666 25266632     %.2f&%.2f&%.2f&%
 80a65dc:	2666322e 66322e25 322e2526 2e252666     .2f&%.2f&%.2f&%.
 80a65ec:	25266632 2666322e 66322e25 322e2526     2f&%.2f&%.2f&%.2
 80a65fc:	2e252666 64006632 4d455473 25005350     f&%.2f.dsTEMPS.%
 80a660c:	2666322e 66322e25 322e2526 2e252666     .2f&%.2f&%.2f&%.
 80a661c:	25266632 2666322e 26643425 26643425     2f&%.2f&%4d&%4d&
 80a662c:	26643425 26643425 26643425 00643425     %4d&%4d&%4d&%4d.
 80a663c:	705f7364 33006973 76787400 78740031     ds_psi.3.txv1.tx
 80a664c:	52003276 54455345 53414552 63004e4f     v2.RESETREASON.c
 80a665c:	632e6363 72617361 6e2e6169 00007465     cc.casaria.net..
 80a666c:	000000ff 000000ff 74746553 20676e69     ........Setting 
 80a667c:	204d5750 20726f66 2044454c 6f742000     PWM for LED . to
 80a668c:	2d200020 4100203e 6d657474 6e697470      . -> .Attemptin
 80a669c:	6f742067 74657320 65726620 45002071     g to set freq .E
 80a66ac:	6d697473 64657461 65727020 6163732d     stimated pre-sca
 80a66bc:	203a656c 6e694600 70206c61 732d6572     le: .Final pre-s
 80a66cc:	656c6163 0000203a 54514d04 06000454     cale: ...MQTT...
 80a66dc:	7349514d 00037064                       MQIsdp..

080a66e4 <_ZTV8SPIClass>:
	...
 80a66ec:	080a2ee5 080a2ee7                       ........

080a66f4 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 80a66fc:	080a302f 080a3035 080a344f 080a3043     /0..50..O4..C0..
 80a670c:	080a3031                                10..

080a6710 <_ZTV9TCPClient>:
	...
 80a6718:	080a2181 080a21b5 080a2feb 080a3005     .!...!.../...0..
 80a6728:	080a314d 080a30b7 080a3089 080a302d     M1...0...0..-0..
 80a6738:	080a31f9 080a3469 080a30eb 080a31c5     .1..i4...0...1..
 80a6748:	080a3347 080a3399 080a3015 080a330b     G3...3...0...3..
 80a6758:	080a3069 69726977 5400676e 6c435043     i0..wiring.TCPCl
 80a6768:	746e6569 636f7320 3d74656b 6e007825     ient socket=%x.n
 80a6778:	6f006e61 2e006676 666e6900 75616200     an.ovf...inf.bau
 80a6788:	65530064 6c616972 42535500 69726553     d.Serial.USBSeri
 80a6798:	00316c61 65707974 72617000 63006d61     al1.type.param.c
 80a67a8:	6900646d 6e680064 74730064 66006d72     md.id.hnd.strm.f
 80a67b8:	00746c69 006c766c 48646461 6c646e61     ilt.lvl.addHandl
 80a67c8:	72007265 766f6d65 6e614865 72656c64     er.removeHandler
 80a67d8:	756e6500 6e61486d 72656c64 534a0073     .enumHandlers.JS
 80a67e8:	74534e4f 6d616572 48676f4c 6c646e61     ONStreamLogHandl
 80a67f8:	61007265 25007070 75303130 205d0020     er.app.%010u .] 
 80a6808:	00202c00 203a2928 005b2000 65646f63     ., .(): . [.code
 80a6818:	00203d20 64006925 69617465 3d20736c      = .%i.details =
 80a6828:	0a0d0020 006e6c00 63006e66 0065646f      ....ln.fn.code.
 80a6838:	61746564 6e006c69 00656e6f 63617274     detail.none.trac
 80a6848:	6e690065 77006f66 006e7261 6f727265     e.info.warn.erro
 80a6858:	61700072 0063696e 2b25005a 3a643330     r.panic.Z.%+03d:
 80a6868:	75323025 2d592500 252d6d25 48255464     %02u.%Y-%m-%dT%H
 80a6878:	3a4d253a 7a255325 63736100 656d6974     :%M:%S%z.asctime
 80a6888:	00000000                                ....

080a688c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a6894:	080a3b7d 080a3b83 080a3bc7 080a3b91     };...;...;...;..
 80a68a4:	080a3b7f                                .;..

080a68a8 <_ZTV9IPAddress>:
	...
 80a68b0:	080a4115 080a4105 080a4107              .A...A...A..

080a68bc <_ZTV9USBSerial>:
	...
 80a68c4:	080a41fd 080a424d 080a425b 080a3701     .A..MB..[B...7..
 80a68d4:	080a4239 080a41ff 080a4215 080a4247     9B...A...B..GB..
 80a68e4:	080a422b 080a41f9                       +B...A..

080a68ec <_ZTV11USARTSerial>:
	...
 80a68f4:	080a439d 080a43ed 080a43fb 080a3701     .C...C...C...7..
 80a6904:	080a43b1 080a43d3 080a43bf 080a43e7     .C...C...C...C..
 80a6914:	080a439f 080a43a3                       .C...C..

080a691c <_ZTV7TwoWire>:
	...
 80a6924:	080a44c9 080a4513 080a44eb 080a44cb     .D...E...D...D..
 80a6934:	080a44f3 080a44fb 080a4503 080a450b     .D...D...E...E..

080a6944 <_ZTVN5spark9WiFiClassE>:
	...
 80a694c:	080a4623 080a4619 080a460f 080a458d     #F...F...F...E..
 80a695c:	080a39b5 080a4603 080a45f7 080a45ef     .9...F...E...E..
 80a696c:	080a45e5 080a45db 080a4597              .E...E...E..

080a6978 <_ZTVN5spark12NetworkClassE>:
	...
 80a6980:	080a4641 080a464b 080a4655 080a465f     AF..KF..UF.._F..
 80a6990:	080a4669 080a4675 080a4681 080a468d     iF..uF...F...F..
 80a69a0:	080a4695 080a469f 080a46a9              .F...F...F..

080a69ac <_ZSt7nothrow>:
 80a69ac:	00000000 00676f6c 00000000              ....log.....

080a69b8 <_ctype_>:
 80a69b8:	20202000 20202020 28282020 20282828     .         ((((( 
 80a69c8:	20202020 20202020 20202020 20202020                     
 80a69d8:	10108820 10101010 10101010 10101010      ...............
 80a69e8:	04040410 04040404 10040404 10101010     ................
 80a69f8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80a6a08:	01010101 01010101 01010101 10101010     ................
 80a6a18:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80a6a28:	02020202 02020202 02020202 10101010     ................
 80a6a38:	00000020 00000000 00000000 00000000      ...............
	...

080a6abc <__sf_fake_stdin>:
	...

080a6adc <__sf_fake_stdout>:
	...

080a6afc <__sf_fake_stderr>:
	...
 80a6b1c:	00000043                                         C.

080a6b1e <link_const_variable_data_end>:
	...

080a6b20 <link_constructors_location>:
 80a6b20:	080a16e9 	.word	0x080a16e9
 80a6b24:	080a17fd 	.word	0x080a17fd
 80a6b28:	080a1b2d 	.word	0x080a1b2d
 80a6b2c:	080a1b31 	.word	0x080a1b31
 80a6b30:	080a1b61 	.word	0x080a1b61
 80a6b34:	080a1d5d 	.word	0x080a1d5d
 80a6b38:	080a1eb5 	.word	0x080a1eb5
 80a6b3c:	080a217d 	.word	0x080a217d
 80a6b40:	080a2973 	.word	0x080a2973
 80a6b44:	080a2f35 	.word	0x080a2f35
 80a6b48:	080a39d1 	.word	0x080a39d1
 80a6b4c:	080a39e1 	.word	0x080a39e1
 80a6b50:	080a3a29 	.word	0x080a3a29
 80a6b54:	080a462d 	.word	0x080a462d
 80a6b58:	080a4711 	.word	0x080a4711
 80a6b5c:	080a47c1 	.word	0x080a47c1
 80a6b60:	080a488d 	.word	0x080a488d
 80a6b64:	080a4941 	.word	0x080a4941
 80a6b68:	080a49c5 	.word	0x080a49c5
 80a6b6c:	080a4a89 	.word	0x080a4a89
 80a6b70:	080a4b4d 	.word	0x080a4b4d

080a6b74 <link_constructors_end>:
	...
